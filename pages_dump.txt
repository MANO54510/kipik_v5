//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\chat_projet_page.dart

// lib/pages/chat_projet_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';

import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/models/chat_message.dart';
import 'package:kipik_v5/services/chat/project_chat_service.dart';  // âœ… Service pour chat projet
import 'package:kipik_v5/services/chat/chat_repository.dart';  // âœ… Interface
import 'package:kipik_v5/locator.dart';  // âœ… Pour rÃ©cupÃ©rer le service

/// Page de chat pour un projet donnÃ©.
class ChatProjetPage extends StatefulWidget {
  final String projectId;
  final ProjectChatService? chatService;  // âœ… Ou ChatRepository si vous prÃ©fÃ©rez l'interface
  final String? currentUserId;
  final String? projectName;
  final String? clientName;

  const ChatProjetPage({
    Key? key,
    this.projectId = 'stub_project',
    this.chatService,  // âœ… ChangÃ© le nom
    this.currentUserId,
    this.projectName,
    this.clientName,
  }) : super(key: key);

  @override
  State<ChatProjetPage> createState() => _ChatProjetPageState();
}

class _ChatProjetPageState extends State<ChatProjetPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<ChatMessage> _localMessages = [];
  late ChatRepository _chatService;  // âœ… Interface pour plus de flexibilitÃ©
  late String _currentUserId;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    // âœ… RÃ©cupÃ©ration via le locator
    _chatService = widget.chatService ?? locator<ProjectChatService>();
    _currentUserId = widget.currentUserId ?? 'user_stub';
    
    _initializeChat();
  }

  void _initializeChat() {
    setState(() => _isLoading = true);
    
    _chatService.messagesStream(widget.projectId).listen(
      (msgs) {
        if (!mounted) return;
        setState(() {
          _localMessages
            ..clear()
            ..addAll(msgs);
          _isLoading = false;
        });
        _scrollToBottom();
      },
      onError: (error) {
        debugPrint('Erreur stream messages: $error');
        if (mounted) {
          setState(() => _isLoading = false);
          _showErrorSnackBar('Erreur de connexion au chat');
        }
      },
    );
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          0.0,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    // âœ… SupprimÃ© la vÃ©rification du stub
    super.dispose();
  }

  Future<void> _sendMessage({String? text, XFile? imageFile}) async {
    final content = text?.trim();
    if ((content == null || content.isEmpty) && imageFile == null) return;

    _messageController.clear();

    String? imageUrl;
    if (imageFile != null) {
      // âœ… TODO: ImplÃ©menter l'upload d'image via Firebase Storage
      imageUrl = 'assets/images/placeholder_image.jpg';
    }

    final msg = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: content,
      imageUrl: imageUrl,
      senderId: _currentUserId,
      timestamp: DateTime.now(),
    );

    try {
      await _chatService.sendMessage(
        projectId: widget.projectId,
        message: msg,
      );
      
      if (mounted) {
        _scrollToBottom();
      }
    } catch (e) {
      debugPrint('Erreur envoi message: $e');
      _showErrorSnackBar('Ã‰chec de l\'envoi, rÃ©essayez');
    }
  }

  void _showErrorSnackBar(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontWeight: FontWeight.w500,
          ),
        ),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    String title = 'Chat projet';
    if (widget.projectName != null && widget.clientName != null) {
      title = '${widget.projectName} - ${widget.clientName}';
    } else if (widget.projectName != null) {
      title = widget.projectName!;
    }

    return WillPopScope(
      onWillPop: () async => true,
      child: Scaffold(
        backgroundColor: const Color(0xFF0A0A0A),
        extendBodyBehindAppBar: true,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          leading: Container(
            margin: const EdgeInsets.only(left: 16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: IconButton(
              icon: const Icon(
                Icons.arrow_back,
                color: Colors.white,
                size: 24,
              ),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          title: Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.w400,
            ),
          ),
          centerTitle: true,
        ),
        body: SafeArea(
          child: Column(
            children: [
              // En-tÃªte du projet (optionnel)
              if (widget.projectName != null) _buildProjectHeader(),
              
              // Liste des messages
              Expanded(child: _buildMessageList()),
              
              // Champ de saisie
              _buildInputField(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProjectHeader() {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  Icons.palette_outlined,
                  color: KipikTheme.rouge,
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  widget.projectName ?? 'Projet',
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Color(0xFF111827),
                    fontWeight: FontWeight.w400,
                  ),
                ),
              ),
            ],
          ),
          if (widget.clientName != null) ...[
            const SizedBox(height: 8),
            Text(
              'Client: ${widget.clientName}',
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF6B7280),
                fontFamily: 'Roboto',
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildMessageList() {
    if (_isLoading) {
      return Center(
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                strokeWidth: 3,
              ),
              const SizedBox(height: 16),
              const Text(
                'Chargement des messages...',
                style: TextStyle(
                  color: Colors.white70,
                  fontFamily: 'Roboto',
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (_localMessages.isEmpty) {
      return Center(
        child: Container(
          padding: const EdgeInsets.all(32),
          margin: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.04),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFFF3F4F6),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Icon(
                  Icons.chat_bubble_outline,
                  size: 32,
                  color: const Color(0xFF6B7280),
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                'Pas encore de messages',
                style: TextStyle(
                  color: Color(0xFF111827),
                  fontSize: 18,
                  fontFamily: 'PermanentMarker',
                  fontWeight: FontWeight.w400,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              const Text(
                'Commencez la conversation avec votre client !',
                style: TextStyle(
                  color: Color(0xFF6B7280),
                  fontSize: 14,
                  fontFamily: 'Roboto',
                  fontWeight: FontWeight.w400,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );
    }

    return ListView.builder(
      controller: _scrollController,
      reverse: true,
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      itemCount: _localMessages.length,
      itemBuilder: (ctx, i) => _buildMessageTile(_localMessages[i]),
    );
  }

  Widget _buildMessageTile(ChatMessage msg) {
    final isMe = msg.senderId == _currentUserId;
    final hasImage = msg.imageUrl != null && msg.imageUrl!.isNotEmpty;
    final hasText = msg.text != null && msg.text!.isNotEmpty;

    return Align(
      alignment: isMe ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 6),
        constraints: BoxConstraints(
          maxWidth: MediaQuery.of(context).size.width * 0.8,
        ),
        child: Column(
          crossAxisAlignment: isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isMe 
                    ? KipikTheme.rouge
                    : Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: const Radius.circular(20),
                  topRight: const Radius.circular(20),
                  bottomLeft: Radius.circular(isMe ? 20 : 6),
                  bottomRight: Radius.circular(isMe ? 6 : 20),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.08),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (hasImage) ...[
                    ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: Image.network(
                        msg.imageUrl!,
                        height: 150,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) => Container(
                          height: 150,
                          decoration: BoxDecoration(
                            color: const Color(0xFFF3F4F6),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Icon(
                            Icons.broken_image_outlined,
                            size: 50,
                            color: Color(0xFF6B7280),
                          ),
                        ),
                      ),
                    ),
                    if (hasText) const SizedBox(height: 12),
                  ],
                  if (hasText)
                    Text(
                      msg.text!,
                      style: TextStyle(
                        color: isMe ? Colors.white : const Color(0xFF111827),
                        fontSize: 15,
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w400,
                        height: 1.4,
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 4),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 12),
              child: Text(
                _formatTime(msg.timestamp),
                style: const TextStyle(
                  color: Color(0xFF9CA3AF),
                  fontSize: 11,
                  fontFamily: 'Roboto',
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _formatTime(DateTime timestamp) {
    final now = DateTime.now();
    final diff = now.difference(timestamp);
    
    if (diff.inMinutes < 1) return 'Ã€ l\'instant';
    if (diff.inHours < 1) return 'Il y a ${diff.inMinutes}min';
    if (diff.inDays < 1) return '${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}';
    return '${timestamp.day}/${timestamp.month} ${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}';
  }

  Widget _buildInputField() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 16,
            offset: const Offset(0, -4),
          ),
        ],
      ),
      child: Row(
        children: [
          // Bouton photo
          Container(
            decoration: BoxDecoration(
              color: const Color(0xFFF3F4F6),
              borderRadius: BorderRadius.circular(12),
            ),
            child: IconButton(
              icon: Icon(
                Icons.photo_camera_outlined,
                color: const Color(0xFF6B7280),
                size: 22,
              ),
              onPressed: () async {
                final picker = XTypeGroup(
                  label: 'images',
                  extensions: ['jpg', 'jpeg', 'png', 'webp'],
                );
                final XFile? file = await openFile(
                  acceptedTypeGroups: [picker],
                );
                if (file != null) {
                  await _sendMessage(imageFile: file);
                }
              },
            ),
          ),
          
          const SizedBox(width: 12),
          
          // Champ de texte
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                color: const Color(0xFFF9FAFB),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: const Color(0xFFE5E7EB),
                  width: 1,
                ),
              ),
              child: TextField(
                controller: _messageController,
                style: const TextStyle(
                  color: Color(0xFF111827),
                  fontFamily: 'Roboto',
                  fontWeight: FontWeight.w400,
                ),
                maxLines: null,
                textInputAction: TextInputAction.send,
                onSubmitted: (text) => _sendMessage(text: text),
                decoration: InputDecoration(
                  hintText: 'Ã‰crivez votre message...',
                  hintStyle: const TextStyle(
                    color: Color(0xFF9CA3AF),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w400,
                  ),
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  border: InputBorder.none,
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: KipikTheme.rouge, width: 2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
          ),
          
          const SizedBox(width: 12),
          
          // Bouton envoyer
          Container(
            decoration: BoxDecoration(
              color: KipikTheme.rouge,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: KipikTheme.rouge.withOpacity(0.3),
                  blurRadius: 8,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: IconButton(
              icon: const Icon(
                Icons.send,
                color: Colors.white,
                size: 22,
              ),
              onPressed: () => _sendMessage(text: _messageController.text),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\detail_projet_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class DetailProjetPage extends StatelessWidget {
  final Map<String, dynamic> projetData;

  const DetailProjetPage({super.key, required this.projetData});

  @override
  Widget build(BuildContext context) {
    final statut = projetData['statut'] ?? 'IndÃ©fini';
    final color = _getStatusColor(statut);

    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: const GptAppBar(title: 'DÃ©tail du Projet'),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset('assets/background_charbon.png', fit: BoxFit.cover),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildSectionTitle('Projet'),
                  _buildInfo('Titre', projetData['titre'] ?? 'Non renseignÃ©'),
                  _buildInfo('Style', projetData['style'] ?? 'Non renseignÃ©'),
                  _buildInfo('Endroit', projetData['endroit'] ?? 'Non renseignÃ©'),
                  _buildInfo('Tatoueur', projetData['tatoueur'] ?? 'Non renseignÃ©'),
                  _buildInfo('Montant total', '${projetData['montant'] ?? '0'} â‚¬'),
                  if (projetData.containsKey('acompte'))
                    _buildInfo('Acompte payÃ©', '${projetData['acompte']} â‚¬'),
                  if (projetData.containsKey('modalites'))
                    _buildInfo('ModalitÃ©s de paiement', projetData['modalites']),
                  _buildInfo('Statut', statut, color: color),
                  _buildInfo('Date de demande', projetData['dateDevis'] ?? 'Non renseignÃ©'),
                  if (statut == 'ClÃ´turÃ©' && projetData.containsKey('dateCloture'))
                    _buildInfo(
                      'Projet clÃ´turÃ©',
                      'Le ${projetData['dateCloture']} (archive jusqu\'au ${_getDateArchivage(projetData['dateCloture'])})',
                    ),
                  const SizedBox(height: 30),
                  _buildSectionTitle('Suivi des SÃ©ances'),
                  _buildSessions(projetData['sessions'] ?? []),
                  const SizedBox(height: 30),
                  if (statut == 'AcceptÃ©' || statut == 'En cours')
                    Center(
                      child: ElevatedButton(
                        onPressed: () {
                          // TODO : AccÃ©der au Chat Projet
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.redAccent,
                          padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: const Text(
                          'AccÃ©der au Chat Projet',
                          style: TextStyle(fontSize: 18),
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Text(
        title,
        style: const TextStyle(
          color: Colors.white,
          fontFamily: 'PermanentMarker',
          fontSize: 20,
        ),
      ),
    );
  }

  Widget _buildInfo(String label, String value, {Color color = Colors.white}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 3,
            child: Text(
              '$label :',
              style: const TextStyle(color: Colors.white70, fontSize: 16),
            ),
          ),
          Expanded(
            flex: 5,
            child: Text(
              value,
              style: TextStyle(color: color, fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSessions(List<Map<String, dynamic>> sessions) {
    if (sessions.isEmpty) {
      return const Text(
        'Aucune sÃ©ance prÃ©vue.',
        style: TextStyle(color: Colors.white70),
      );
    }

    return Column(
      children: sessions.map((session) {
        final statut = _getSessionStatus(session['date']);
        final duration = _calculateDuration(session['startTime'], session['endTime']);

        return Card(
          color: Colors.white.withOpacity(0.9),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          margin: const EdgeInsets.symmetric(vertical: 8),
          child: ListTile(
            leading: Icon(
              statut == 'RÃ©alisÃ©e' ? Icons.check_circle : Icons.access_time,
              color: statut == 'RÃ©alisÃ©e' ? Colors.green : Colors.orangeAccent,
            ),
            title: Text('SÃ©ance prÃ©vue le ${session['date']}'),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('DÃ©but : ${session['startTime']}'),
                Text('Fin : ${session['endTime']}'),
                Text('DurÃ©e : $duration'),
                Text('Statut : $statut'),
              ],
            ),
          ),
        );
      }).toList(),
    );
  }

  String _getSessionStatus(String dateStr) {
    final now = DateTime.now();
    final parts = dateStr.split('/');
    if (parts.length != 3) return 'Ã€ venir';

    final sessionDate = DateTime(
      int.parse(parts[2]),
      int.parse(parts[1]),
      int.parse(parts[0]),
    );

    if (sessionDate.isBefore(now)) {
      return 'RÃ©alisÃ©e';
    } else {
      return 'Ã€ venir';
    }
  }

  String _calculateDuration(String start, String end) {
    final startParts = start.split(':').map(int.parse).toList();
    final endParts = end.split(':').map(int.parse).toList();

    final startMinutes = startParts[0] * 60 + startParts[1];
    final endMinutes = endParts[0] * 60 + endParts[1];

    final durationMinutes = endMinutes - startMinutes;
    final hours = durationMinutes ~/ 60;

    return '${hours}h';
  }

  Color _getStatusColor(String statut) {
    switch (statut) {
      case 'En attente':
        return Colors.orangeAccent;
      case 'En cours':
        return Colors.blueAccent;
      case 'ClÃ´turÃ©':
        return Colors.redAccent;
      case 'AcceptÃ©':
        return Colors.green;
      case 'RefusÃ©':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  String _getDateArchivage(String dateCloture) {
    final parts = dateCloture.split('/');
    if (parts.length == 3) {
      final day = parts[0];
      final month = parts[1];
      final year = int.parse(parts[2]) + 3;
      return '$day/$month/$year';
    }
    return dateCloture;
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\home_user_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart'; // Nouveau import pour le DrawerFactory

class HomeUserPage extends StatelessWidget {
  const HomeUserPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const GptAppBar(
        title: 'Mon espace',
        showNotificationIcon: true,
      ),
      // Remplacer le CustomDrawerKipik par DrawerFactory.of(context)
      endDrawer: DrawerFactory.of(context),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset('assets/background_charbon.png', fit: BoxFit.cover),
          Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: const [
                Icon(Icons.account_circle, size: 100, color: Colors.white),
                SizedBox(height: 20),
                Text(
                  'Bienvenue dans votre espace !',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 22,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\mes_projets_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart'; // âœ… Ton AppBar customisÃ©e
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart'; // Nouveau import pour le DrawerFactory
import 'package:kipik_v5/pages/detail_projet_page.dart'; // âœ… Lien vers page DÃ©tail Projet

class MesProjetsPage extends StatelessWidget {
  const MesProjetsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Remplacer le CustomDrawerKipik par DrawerFactory.of(context)
      endDrawer: DrawerFactory.of(context),
      appBar: const GptAppBar(
        title: 'Mes Projets',
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset('assets/background_charbon.png', fit: BoxFit.cover),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: _buildProjectList(context),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProjectList(BuildContext context) {
    final projets = [
      {
        'titre': 'PhÃ©nix Bras Droit',
        'tatoueur': 'InkMaster',
        'dateDevis': '12/05/2025',
        'statut': 'En attente',
        'montant': 250,
      },
      {
        'titre': 'Dragon Dos Complet',
        'tatoueur': 'DragonInk',
        'dateDevis': '02/06/2025',
        'statut': 'En cours',
        'montant': 1200,
      },
      {
        'titre': 'Lettrage minimaliste',
        'tatoueur': 'LetterArt',
        'dateDevis': '01/04/2025',
        'statut': 'ClÃ´turÃ©',
        'montant': 100,
        'dateCloture': '10/05/2025',
      },
    ];

    return ListView.separated(
      itemCount: projets.length,
      separatorBuilder: (context, index) => const SizedBox(height: 12),
      itemBuilder: (context, index) {
        final Map<String, dynamic> projet = projets[index];
        final statut = projet['statut'] as String;
        final color = _getStatusColor(statut);
        final icon = _getStatusIcon(statut);

        return Card(
          color: Colors.white.withOpacity(0.9),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: color,
              child: Icon(icon, color: Colors.white),
            ),
            title: Text(
              projet['titre'],
              style: const TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
              ),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Tatoueur : ${projet['tatoueur']}'),
                Text('Date demande : ${projet['dateDevis']}'),
                Text('Montant : ${projet['montant']} â‚¬'),
                const SizedBox(height: 4),
                if (statut == 'ClÃ´turÃ©' && projet.containsKey('dateCloture'))
                  Text(
                    'ClÃ´turÃ© le ${projet['dateCloture']} (archive jusqu\'au ${_getDateArchivage(projet['dateCloture'])})',
                    style: const TextStyle(color: Colors.redAccent, fontSize: 13),
                  ),
              ],
            ),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => DetailProjetPage(projetData: projet),
                ),
              );
            },
          ),
        );
      },
    );
  }

  Color _getStatusColor(String statut) {
    switch (statut) {
      case 'En attente':
        return Colors.orangeAccent;
      case 'En cours':
        return Colors.blueAccent;
      case 'ClÃ´turÃ©':
        return Colors.redAccent;
      case 'AcceptÃ©':
        return Colors.green;
      case 'RefusÃ©':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  IconData _getStatusIcon(String statut) {
    switch (statut) {
      case 'En attente':
        return Icons.hourglass_empty;
      case 'En cours':
        return Icons.work;
      case 'ClÃ´turÃ©':
        return Icons.lock;
      case 'AcceptÃ©':
        return Icons.check_circle;
      case 'RefusÃ©':
        return Icons.cancel;
      default:
        return Icons.help_outline;
    }
  }

  String _getDateArchivage(String dateCloture) {
    final parts = dateCloture.split('/');
    if (parts.length == 3) {
      final day = parts[0];
      final month = parts[1];
      final year = int.parse(parts[2]) + 3;
      return '$day/$month/$year';
    }
    return dateCloture;
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\notification_cloche_widget.dart

import 'package:flutter/material.dart';

class NotificationClocheWidget extends StatelessWidget {
  final int notificationCount;
  final VoidCallback onTap;

  const NotificationClocheWidget({
    super.key,
    required this.notificationCount,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        IconButton(
          icon: const Icon(Icons.notifications, color: Colors.white),
          onPressed: onTap,
        ),
        if (notificationCount > 0)
          Positioned(
            right: 6,
            top: 6,
            child: Container(
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: Colors.redAccent,
                shape: BoxShape.circle,
              ),
              constraints: const BoxConstraints(
                minWidth: 20,
                minHeight: 20,
              ),
              child: Center(
                child: Text(
                  '$notificationCount',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ),
      ],
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\unknown_page.dart

// lib/pages/unknown_page.dart

import 'package:flutter/material.dart';
import 'dart:math';

/// Page affichÃ©e lorsque la route demandÃ©e est introuvable ou mal configurÃ©e.
class UnknownPage extends StatelessWidget {
  /// Message Ã  afficher pour expliquer l'erreur de routage.
  final String message;

  const UnknownPage({Key? key, this.message = 'Page introuvable'}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Liste d'assets de fond alÃ©atoires
    const backgrounds = [
      'assets/background_charbon.png',
      'assets/background1.png',
      'assets/background2.png',
    ];
    final bg = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(bg, fit: BoxFit.cover),
          SafeArea(
            child: Center(
              child: Padding(
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      Icons.error_outline,
                      size: 64,
                      color: Colors.white70,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      message,
                      textAlign: TextAlign.center,
                      style: const TextStyle(
                        fontSize: 18,
                        color: Colors.white,
                        fontFamily: 'PermanentMarker',
                      ),
                    ),
                    const SizedBox(height: 24),
                    ElevatedButton(
                      onPressed: () => Navigator.popUntil(
                        context,
                        (route) => route.isFirst,
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 32,
                          vertical: 16,
                        ),
                      ),
                      child: const Text(
                        "Retour Ã  l'accueil",
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 20,
                          color: Colors.black,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\admin_dashboard_home.dart

// lib/pages/admin/admin_dashboard_home.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_admin.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

// Import des espaces de gestion
import 'package:kipik_v5/pages/admin/pros/admin_pros_management_page.dart';
import 'package:kipik_v5/pages/admin/clients/admin_clients_management_page.dart';
import 'package:kipik_v5/pages/admin/organizers/admin_organizers_management_page.dart';
import 'package:kipik_v5/pages/admin/admin_free_codes_page.dart';
import 'package:kipik_v5/pages/admin/test_accounts_page.dart';
import 'package:kipik_v5/pages/admin/database_admin_page.dart'; // âœ… AJOUTÃ‰

class AdminDashboardHome extends StatefulWidget {
  const AdminDashboardHome({Key? key}) : super(key: key);

  @override
  State<AdminDashboardHome> createState() => _AdminDashboardHomeState();
}

class _AdminDashboardHomeState extends State<AdminDashboardHome> {
  bool _isLoading = true;
  
  // Statistiques globales (Ã  remplacer par de vraies donnÃ©es)
  Map<String, dynamic> _globalStats = {
    'totalUsers': 1247,
    'activePros': 89,
    'activeClients': 1156,
    'activeOrganizers': 2,
    'monthlyRevenue': 12450.50,
    'newUsersThisMonth': 156,
    'reportsThisMonth': 3,
  };

  // Stats dÃ©taillÃ©es par profil
  Map<String, dynamic> _proStats = {
    'total': 89,
    'newThisMonth': 12,
    'activeSubscriptions': 76,
    'avgResponseTime': '2.4h',
    'avgQuoteAcceptance': '68%',
    'totalRevenue': 8940.00,
    'reportedAccounts': 2,
  };

  Map<String, dynamic> _clientStats = {
    'total': 1156,
    'newThisMonth': 142,
    'activeProjects': 234,
    'avgProjectValue': 285.50,
    'satisfactionRate': '92%',
    'reportedAccounts': 8,
    'flaggedAccounts': 3,
  };

  Map<String, dynamic> _organizerStats = {
    'total': 2,
    'activeConventions': 3,
    'upcomingEvents': 7,
    'totalRevenue': 15600.00,
    'avgEventSize': 45,
    'bookingRate': '78%',
    'reportedAccounts': 0,
  };

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    // Simuler le chargement des donnÃ©es
    await Future.delayed(const Duration(milliseconds: 800));
    setState(() => _isLoading = false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Dashboard Administrateur',
        showBackButton: false,
        showBurger: true,
        showNotificationIcon: true,
      ),
      drawer: const CustomDrawerAdmin(),
      body: SafeArea(
        child: _isLoading
            ? const Center(child: CircularProgressIndicator())
            : RefreshIndicator(
                onRefresh: _loadData,
                child: SingleChildScrollView(
                  physics: const AlwaysScrollableScrollPhysics(),
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Header avec statistiques globales
                      _buildGlobalStatsHeader(),
                      
                      const SizedBox(height: 24),
                      
                      // Section des 3 profils principaux
                      const Text(
                        'Gestion des profils utilisateurs',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          fontFamily: 'PermanentMarker',
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Cliquez sur un profil pour accÃ©der Ã  sa gestion complÃ¨te',
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 14,
                          fontFamily: 'Roboto',
                        ),
                      ),
                      
                      const SizedBox(height: 20),
                      
                      // Les 3 cartes principales
                      _buildProfileCard(
                        title: 'TATOUEURS PROFESSIONNELS',
                        subtitle: 'Gestion des comptes pros, abonnements, SAV',
                        stats: _proStats,
                        color: KipikTheme.rouge,
                        icon: Icons.brush,
                        onTap: () => _navigateToProManagement(),
                      ),
                      
                      const SizedBox(height: 16),
                      
                      _buildProfileCard(
                        title: 'CLIENTS PARTICULIERS',
                        subtitle: 'Gestion des comptes clients, projets, signalements',
                        stats: _clientStats,
                        color: Colors.blue,
                        icon: Icons.person,
                        onTap: () => _navigateToClientManagement(),
                      ),
                      
                      const SizedBox(height: 16),
                      
                      _buildProfileCard(
                        title: 'ORGANISATEURS Ã‰VÃ‰NEMENTS',
                        subtitle: 'Gestion conventions, Ã©vÃ©nements, revenus',
                        stats: _organizerStats,
                        color: Colors.purple,
                        icon: Icons.event,
                        onTap: () => _navigateToOrganizerManagement(),
                      ),
                      
                      const SizedBox(height: 32),
                      
                      // Actions rapides
                      _buildQuickActions(),
                      
                      const SizedBox(height: 32),
                      
                      // Alertes et notifications importantes
                      _buildAlertsSection(),
                      
                      // Padding bottom pour SafeArea
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
      ),
    );
  }

  Widget _buildGlobalStatsHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: KipikTheme.rouge.withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Vue d\'ensemble Kipik',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker',
            ),
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: _buildGlobalStatItem(
                  'Utilisateurs totaux',
                  '${_globalStats['totalUsers']}',
                  Icons.people,
                ),
              ),
              Expanded(
                child: _buildGlobalStatItem(
                  'Revenus mensuel',
                  '${_globalStats['monthlyRevenue']}â‚¬',
                  Icons.euro,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: _buildGlobalStatItem(
                  'Nouveaux ce mois',
                  '${_globalStats['newUsersThisMonth']}',
                  Icons.trending_up,
                ),
              ),
              Expanded(
                child: _buildGlobalStatItem(
                  'Signalements',
                  '${_globalStats['reportsThisMonth']}',
                  Icons.warning,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildGlobalStatItem(String label, String value, IconData icon) {
    return Container(
      margin: const EdgeInsets.all(4),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, color: Colors.white, size: 24),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'Roboto',
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 10,
              fontFamily: 'Roboto',
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildProfileCard({
    required String title,
    required String subtitle,
    required Map<String, dynamic> stats,
    required Color color,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return Card(
      elevation: 8,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(16),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: color.withOpacity(0.3), width: 2),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header de la carte
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: color.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(icon, color: color, size: 32),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          title,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: color,
                            fontFamily: 'PermanentMarker',
                          ),
                        ),
                        Text(
                          subtitle,
                          style: const TextStyle(
                            color: Colors.grey,
                            fontSize: 12,
                            fontFamily: 'Roboto',
                          ),
                        ),
                      ],
                    ),
                  ),
                  Icon(Icons.arrow_forward_ios, color: color),
                ],
              ),
              
              const SizedBox(height: 20),
              
              // Statistiques en grille
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: [
                  _buildStatChip('Total: ${stats['total']}', color),
                  _buildStatChip('Nouveaux: ${stats['newThisMonth']}', Colors.green),
                  if (stats.containsKey('activeSubscriptions'))
                    _buildStatChip('AbonnÃ©s: ${stats['activeSubscriptions']}', Colors.blue),
                  if (stats.containsKey('activeProjects'))
                    _buildStatChip('Projets actifs: ${stats['activeProjects']}', Colors.blue),
                  if (stats.containsKey('activeConventions'))
                    _buildStatChip('Conventions: ${stats['activeConventions']}', Colors.blue),
                  if (stats['reportedAccounts'] > 0)
                    _buildStatChip('âš ï¸ SignalÃ©s: ${stats['reportedAccounts']}', Colors.orange),
                ],
              ),
              
              const SizedBox(height: 16),
              
              // MÃ©triques importantes
              if (stats.containsKey('avgResponseTime') || stats.containsKey('satisfactionRate'))
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.grey[50],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      if (stats.containsKey('avgResponseTime')) ...[
                        Expanded(
                          child: Text(
                            'Temps rÃ©ponse moyen\n${stats['avgResponseTime']}',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ],
                      if (stats.containsKey('satisfactionRate')) ...[
                        Expanded(
                          child: Text(
                            'Satisfaction\n${stats['satisfactionRate']}',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ],
                      if (stats.containsKey('avgQuoteAcceptance')) ...[
                        Expanded(
                          child: Text(
                            'Taux acceptation\n${stats['avgQuoteAcceptance']}',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ],
                      if (stats.containsKey('bookingRate')) ...[
                        Expanded(
                          child: Text(
                            'Taux rÃ©servation\n${stats['bookingRate']}',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatChip(String text, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 11,
          fontWeight: FontWeight.bold,
          fontFamily: 'Roboto',
        ),
      ),
    );
  }

  Widget _buildQuickActions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Actions rapides',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            fontFamily: 'PermanentMarker',
          ),
        ),
        const SizedBox(height: 16),
        
        // PREMIÃˆRE LIGNE - Comptes de test et Mode Base de DonnÃ©es
        Row(
          children: [
            Expanded(
              child: _buildQuickActionCard(
                'Comptes de test',
                'CrÃ©er et gÃ©rer les comptes',
                Icons.science,
                Colors.indigo,
                () => _navigateToTestAccounts(),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildQuickActionCard(
                'Mode Base de DonnÃ©es', // âœ… MODIFIÃ‰
                'Basculer Production/DÃ©mo', // âœ… MODIFIÃ‰
                Icons.storage, // âœ… MODIFIÃ‰
                Colors.deepPurple, // âœ… MODIFIÃ‰
                () => _navigateToDatabaseAdmin(), // âœ… MODIFIÃ‰
              ),
            ),
          ],
        ),
        
        const SizedBox(height: 12),
        
        // DEUXIÃˆME LIGNE
        Row(
          children: [
            Expanded(
              child: _buildQuickActionCard(
                'Codes gratuits',
                'GÃ©nÃ©rer des codes promo',
                Icons.card_giftcard,
                Colors.green,
                () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => const AdminFreeCodesPage()),
                  );
                },
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildQuickActionCard(
                'Push notification',
                'Envoyer une notification',
                Icons.notifications_active,
                Colors.orange,
                () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Page en cours de dÃ©veloppement')),
                  );
                },
              ),
            ),
          ],
        ),
        
        const SizedBox(height: 12),
        
        // TROISIÃˆME LIGNE
        Row(
          children: [
            Expanded(
              child: _buildQuickActionCard(
                'Nouvelle convention',
                'CrÃ©er un Ã©vÃ©nement',
                Icons.add_circle,
                Colors.blue,
                () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Page en cours de dÃ©veloppement')),
                  );
                },
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildQuickActionCard(
                'Rapports',
                'Exporter les donnÃ©es',
                Icons.assessment,
                Colors.blueGrey,
                () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Page en cours de dÃ©veloppement')),
                  );
                },
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildQuickActionCard(
    String title,
    String subtitle,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return Card(
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: color,
                  fontFamily: 'Roboto',
                ),
                textAlign: TextAlign.center,
              ),
              Text(
                subtitle,
                style: const TextStyle(
                  color: Colors.grey,
                  fontSize: 11,
                  fontFamily: 'Roboto',
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAlertsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Alertes et notifications',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            fontFamily: 'PermanentMarker',
          ),
        ),
        const SizedBox(height: 16),
        
        // Alerte signalements
        if (_globalStats['reportsThisMonth'] > 0)
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.orange.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.warning, color: Colors.orange),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Signalements Ã  traiter',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontFamily: 'Roboto',
                        ),
                      ),
                      Text(
                        '${_globalStats['reportsThisMonth']} nouveaux signalements ce mois nÃ©cessitent votre attention',
                        style: const TextStyle(
                          fontSize: 12,
                          fontFamily: 'Roboto',
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton(
                  onPressed: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Page en cours de dÃ©veloppement')),
                    );
                  },
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                  child: const Text(
                    'Traiter', 
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'Roboto',
                    ),
                  ),
                ),
              ],
            ),
          ),
      ],
    );
  }

  // NAVIGATION METHODS
  void _navigateToProManagement() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const AdminProsManagementPage()),
    );
  }

  void _navigateToClientManagement() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const AdminClientsManagementPage()),
    );
  }

  void _navigateToOrganizerManagement() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const AdminOrganizersManagementPage()),
    );
  }

  void _navigateToTestAccounts() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const TestAccountsPage()),
    );
  }

  // âœ… AJOUTÃ‰: Navigation vers la gestion des bases de donnÃ©es
  void _navigateToDatabaseAdmin() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const DatabaseAdminPage()),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\admin_free_codes_page.dart

// lib/pages/admin/admin_free_codes_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:kipik_v5/services/promo/firebase_promo_code_service.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class AdminFreeCodesPage extends StatefulWidget {
  const AdminFreeCodesPage({Key? key}) : super(key: key);

  @override
  State<AdminFreeCodesPage> createState() => _AdminFreeCodesPageState();
}

class _AdminFreeCodesPageState extends State<AdminFreeCodesPage> {
  final _customCodeController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _tatoueurNameController = TextEditingController();
  
  int _batchCount = 5;
  int _freeMonths = 12;
  bool _isGenerating = false;
  List<String> _lastGeneratedCodes = [];

  @override
  void dispose() {
    _customCodeController.dispose();
    _descriptionController.dispose();
    _tatoueurNameController.dispose();
    super.dispose();
  }

  Future<void> _generateBatchCodes() async {
    setState(() => _isGenerating = true);
    
    try {
      List<String> codes = [];
      
      // GÃ©nÃ©rer plusieurs codes manuellement
      for (int i = 0; i < _batchCount; i++) {
        final code = 'FREE${DateTime.now().millisecondsSinceEpoch}${i.toString().padLeft(3, '0')}';
        
        // CrÃ©er chaque code avec votre service Firebase
        await FirebasePromoCodeService.instance.createPromoCode(
          code: code,
          type: 'percentage', // Type de rÃ©duction
          value: 100.0, // 100% de rÃ©duction = gratuit
          description: 'Code gratuit pour tatoueur partenaire - Lot gÃ©nÃ©rÃ© le ${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}',
          expiresAt: DateTime.now().add(Duration(days: _freeMonths * 30)), // Approximation des mois
          maxUses: 1,
        );
        
        codes.add(code);
      }
      
      setState(() {
        _lastGeneratedCodes = codes;
        _isGenerating = false;
      });
      
      if (codes.isNotEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${codes.length} codes gÃ©nÃ©rÃ©s avec succÃ¨s !'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      setState(() => _isGenerating = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erreur: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _createCustomCode() async {
    final code = _customCodeController.text.trim().toUpperCase();
    if (code.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Veuillez saisir un code')),
      );
      return;
    }

    setState(() => _isGenerating = true);

    try {
      // Utiliser votre service Firebase pour crÃ©er le code
      final promoId = await FirebasePromoCodeService.instance.createPromoCode(
        code: code,
        type: 'percentage', // Type de rÃ©duction
        value: 100.0, // 100% de rÃ©duction = gratuit
        description: _descriptionController.text.isNotEmpty 
            ? _descriptionController.text 
            : 'Code personnalisÃ© pour ${_tatoueurNameController.text.isNotEmpty ? _tatoueurNameController.text : "tatoueur"}',
        expiresAt: DateTime.now().add(Duration(days: _freeMonths * 30)), // Approximation des mois
        maxUses: 1,
      );
      
      setState(() => _isGenerating = false);
      
      if (promoId.isNotEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Code $code crÃ©Ã© avec succÃ¨s !'),
            backgroundColor: Colors.green,
          ),
        );
        _customCodeController.clear();
        _descriptionController.clear();
        _tatoueurNameController.clear();
      }
    } catch (e) {
      setState(() => _isGenerating = false);
      
      // VÃ©rifier si l'erreur est due Ã  un code dÃ©jÃ  existant
      String errorMessage = 'Erreur: $e';
      if (e.toString().contains('already exists') || e.toString().contains('dÃ©jÃ ')) {
        errorMessage = 'Code dÃ©jÃ  existant';
      }
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(errorMessage),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _copyAllCodes() {
    if (_lastGeneratedCodes.isEmpty) return;
    
    final codesText = _lastGeneratedCodes.join('\n');
    Clipboard.setData(ClipboardData(text: codesText));
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Tous les codes copiÃ©s !')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Codes gratuits tatoueurs',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Section gÃ©nÃ©ration en lot
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'ðŸŽ¯ GÃ©nÃ©ration en lot',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'PermanentMarker',
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text('Nombre de codes:'),
                              Slider(
                                value: _batchCount.toDouble(),
                                min: 1,
                                max: 50,
                                divisions: 49,
                                label: _batchCount.toString(),
                                activeColor: KipikTheme.rouge,
                                onChanged: (value) {
                                  setState(() => _batchCount = value.round());
                                },
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text('Mois gratuits:'),
                              Slider(
                                value: _freeMonths.toDouble(),
                                min: 1,
                                max: 24,
                                divisions: 23,
                                label: _freeMonths.toString(),
                                activeColor: KipikTheme.rouge,
                                onChanged: (value) {
                                  setState(() => _freeMonths = value.round());
                                },
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: _isGenerating ? null : _generateBatchCodes,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: KipikTheme.rouge,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                      ),
                      child: _isGenerating
                          ? const Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                SizedBox(
                                  width: 20,
                                  height: 20,
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                ),
                                SizedBox(width: 8),
                                Text('GÃ©nÃ©ration en cours...'),
                              ],
                            )
                          : Text(
                              'GÃ©nÃ©rer $_batchCount codes de $_freeMonths mois',
                              style: const TextStyle(fontWeight: FontWeight.bold),
                            ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Section code personnalisÃ©
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'âœï¸ Code personnalisÃ©',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'PermanentMarker',
                      ),
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: _tatoueurNameController,
                      decoration: const InputDecoration(
                        labelText: 'Nom du tatoueur (optionnel)',
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: _customCodeController,
                      decoration: const InputDecoration(
                        labelText: 'Code personnalisÃ© (ex: TATOO2025FREE)',
                        border: OutlineInputBorder(),
                        hintText: 'Lettres et chiffres uniquement',
                      ),
                      textCapitalization: TextCapitalization.characters,
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: _descriptionController,
                      decoration: const InputDecoration(
                        labelText: 'Description (optionnelle)',
                        border: OutlineInputBorder(),
                      ),
                      maxLines: 2,
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: _isGenerating ? null : _createCustomCode,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                      ),
                      child: Text(
                        'CrÃ©er le code de $_freeMonths mois',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Affichage des derniers codes gÃ©nÃ©rÃ©s
            if (_lastGeneratedCodes.isNotEmpty) ...[
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Text(
                            'ðŸ“‹ Derniers codes gÃ©nÃ©rÃ©s',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'PermanentMarker',
                            ),
                          ),
                          const Spacer(),
                          ElevatedButton.icon(
                            onPressed: _copyAllCodes,
                            icon: const Icon(Icons.copy),
                            label: const Text('Copier tout'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.grey[100],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey[300]!),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: _lastGeneratedCodes.map((code) => 
                            Padding(
                              padding: const EdgeInsets.symmetric(vertical: 2),
                              child: Row(
                                children: [
                                  Expanded(
                                    child: Text(
                                      code,
                                      style: const TextStyle(
                                        fontFamily: 'monospace',
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                  IconButton(
                                    icon: const Icon(Icons.copy, size: 16),
                                    onPressed: () {
                                      Clipboard.setData(ClipboardData(text: code));
                                      ScaffoldMessenger.of(context).showSnackBar(
                                        SnackBar(content: Text('Code $code copiÃ© !')),
                                      );
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ).toList(),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],

            const SizedBox(height: 20),

            // Informations
            Card(
              color: Colors.blue[50],
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info, color: Colors.blue[700]),
                        const SizedBox(width: 8),
                        Text(
                          'Informations importantes',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'â€¢ Les codes gratuits permettent aux tatoueurs de s\'inscrire sans paiement\n'
                      'â€¢ Chaque code ne peut Ãªtre utilisÃ© qu\'une seule fois\n'
                      'â€¢ Les codes sont valides indÃ©finiment jusqu\'Ã  utilisation\n'
                      'â€¢ Vous pouvez voir tous les codes dans la page "Gestion des parrainages"',
                      style: TextStyle(color: Colors.blue[700]),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\admin_referrals_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:kipik_v5/services/promo/firebase_promo_code_service.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

// Classes nÃ©cessaires pour le fonctionnement
class Referral {
  final String id;
  final String referrerEmail;
  final String referredEmail;
  final String promoCode;
  final DateTime referralDate;
  final DateTime? subscriptionDate;
  final String subscriptionType;
  final String status; // 'pending', 'completed'
  final bool rewardGranted;

  Referral({
    required this.id,
    required this.referrerEmail,
    required this.referredEmail,
    required this.promoCode,
    required this.referralDate,
    this.subscriptionDate,
    this.subscriptionType = '',
    this.status = 'pending',
    this.rewardGranted = false,
  });

  factory Referral.fromMap(Map<String, dynamic> map) {
    return Referral(
      id: map['id'] ?? '',
      referrerEmail: map['referrerEmail'] ?? '',
      referredEmail: map['referredEmail'] ?? '',
      promoCode: map['promoCode'] ?? '',
      referralDate: map['referralDate'] is DateTime 
          ? map['referralDate'] 
          : DateTime.now(),
      subscriptionDate: map['subscriptionDate'],
      subscriptionType: map['subscriptionType'] ?? '',
      status: map['status'] ?? 'pending',
      rewardGranted: map['rewardGranted'] ?? false,
    );
  }
}

class PromoCode {
  final String id;
  final String code;
  final String type;
  final double value;
  final String? description;
  final DateTime? expiresAt;
  final int? maxUses;
  final int currentUses;
  final bool isActive;
  final DateTime? createdAt;
  final String? referrerEmail;
  final bool isReferralCode;

  PromoCode({
    required this.id,
    required this.code,
    required this.type,
    required this.value,
    this.description,
    this.expiresAt,
    this.maxUses,
    this.currentUses = 0,
    this.isActive = true,
    this.createdAt,
    this.referrerEmail,
    this.isReferralCode = false,
  });

  bool get isValid => isActive && (expiresAt == null || DateTime.now().isBefore(expiresAt!));

  factory PromoCode.fromMap(Map<String, dynamic> map) {
    return PromoCode(
      id: map['id'] ?? '',
      code: map['code'] ?? '',
      type: map['type'] ?? '',
      value: (map['value'] ?? 0).toDouble(),
      description: map['description'],
      expiresAt: map['expiresAt'],
      maxUses: map['maxUses'],
      currentUses: map['currentUses'] ?? 0,
      isActive: map['isActive'] ?? true,
      createdAt: map['createdAt'],
      referrerEmail: map['referrerEmail'],
      isReferralCode: map['isReferralCode'] ?? false,
    );
  }
}

class AdminReferralsPage extends StatefulWidget {
  const AdminReferralsPage({Key? key}) : super(key: key);

  @override
  State<AdminReferralsPage> createState() => _AdminReferralsPageState();
}

class _AdminReferralsPageState extends State<AdminReferralsPage> with TickerProviderStateMixin {
  List<Referral> _referrals = [];
  List<PromoCode> _referralCodes = [];
  bool _isLoading = true;
  late TabController _tabController;

  // Statistiques globales
  Map<String, int> _globalStats = {
    'totalReferrals': 0,
    'completedReferrals': 0,
    'pendingReferrals': 0,
    'totalRewards': 0,
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadData();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadData() async {
    setState(() => _isLoading = true);
    
    try {
      // RÃ©cupÃ©rer tous les codes promo de votre service Firebase
      final allCodesData = await FirebasePromoCodeService.instance.getAllPromoCodes();
      
      // Convertir en objets PromoCode
      final allCodes = allCodesData.map((data) => PromoCode.fromMap(data)).toList();
      
      // Filtrer les codes de parrainage (vous pouvez adapter cette logique)
      final referralCodes = allCodes.where((code) => 
          code.description?.toLowerCase().contains('parrainage') == true ||
          code.code.startsWith('REF') ||
          code.type == 'referral'
      ).toList();
      
      // CrÃ©er des parrainages fictifs Ã  partir des codes (adaptez selon vos besoins)
      final referrals = <Referral>[];
      for (final code in referralCodes) {
        if (code.currentUses > 0) {
          referrals.add(Referral(
            id: 'ref_${code.id}',
            referrerEmail: code.referrerEmail ?? 'tatoueur@example.com',
            referredEmail: 'client@example.com',
            promoCode: code.code,
            referralDate: code.createdAt ?? DateTime.now(),
            status: code.isValid ? 'completed' : 'pending',
            rewardGranted: code.currentUses >= (code.maxUses ?? 1),
          ));
        }
      }
      
      // Calculer les statistiques
      final stats = <String, int>{
        'totalReferrals': referrals.length,
        'completedReferrals': referrals.where((r) => r.status == 'completed').length,
        'pendingReferrals': referrals.where((r) => r.status == 'pending').length,
        'totalRewards': referrals.where((r) => r.rewardGranted).length,
      };
      
      setState(() {
        _referrals = referrals;
        _referralCodes = referralCodes;
        _globalStats = stats;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Erreur: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Gestion des parrainages',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                // Statistiques globales
                Container(
                  padding: const EdgeInsets.all(16),
                  color: Colors.grey[50],
                  child: Row(
                    children: [
                      Expanded(
                        child: _GlobalStatCard(
                          title: 'Total parrainages',
                          value: '${_globalStats['totalReferrals']}',
                          icon: Icons.people,
                          color: Colors.blue,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _GlobalStatCard(
                          title: 'ValidÃ©s',
                          value: '${_globalStats['completedReferrals']}',
                          icon: Icons.check_circle,
                          color: Colors.green,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _GlobalStatCard(
                          title: 'En attente',
                          value: '${_globalStats['pendingReferrals']}',
                          icon: Icons.hourglass_empty,
                          color: Colors.orange,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _GlobalStatCard(
                          title: 'RÃ©compenses',
                          value: '${_globalStats['totalRewards']}',
                          icon: Icons.emoji_events,
                          color: Colors.amber,
                        ),
                      ),
                    ],
                  ),
                ),
                
                // Onglets
                TabBar(
                  controller: _tabController,
                  labelColor: KipikTheme.rouge,
                  unselectedLabelColor: Colors.grey,
                  indicatorColor: KipikTheme.rouge,
                  tabs: const [
                    Tab(text: 'Parrainages actifs'),
                    Tab(text: 'Codes de parrainage'),
                    Tab(text: 'Statistiques'),
                  ],
                ),
                
                // Contenu des onglets
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      _buildReferralsTab(),
                      _buildCodesTab(),
                      _buildStatsTab(),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildReferralsTab() {
    if (_referrals.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.people_outline,
              size: 64,
              color: Colors.grey,
            ),
            SizedBox(height: 16),
            Text(
              'Aucun parrainage pour le moment',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadData,
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _referrals.length,
        itemBuilder: (context, index) {
          final referral = _referrals[index];
          return _ReferralCard(referral: referral);
        },
      ),
    );
  }

  Widget _buildCodesTab() {
    if (_referralCodes.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.code,
              size: 64,
              color: Colors.grey,
            ),
            SizedBox(height: 16),
            Text(
              'Aucun code de parrainage gÃ©nÃ©rÃ©',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadData,
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _referralCodes.length,
        itemBuilder: (context, index) {
          final code = _referralCodes[index];
          return _ReferralCodeCard(code: code);
        },
      ),
    );
  }

  Widget _buildStatsTab() {
    // Analyser les donnÃ©es pour les statistiques
    final userStats = <String, Map<String, dynamic>>{};
    
    for (final referral in _referrals) {
      final email = referral.referrerEmail;
      if (!userStats.containsKey(email)) {
        userStats[email] = {
          'totalReferrals': 0,
          'completedReferrals': 0,
          'pendingReferrals': 0,
          'totalRewards': 0,
        };
      }
      
      userStats[email]!['totalReferrals']++;
      
      if (referral.status == 'completed') {
        userStats[email]!['completedReferrals']++;
      } else if (referral.status == 'pending') {
        userStats[email]!['pendingReferrals']++;
      }
      
      if (referral.rewardGranted) {
        userStats[email]!['totalRewards']++;
      }
    }

    if (userStats.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.analytics,
              size: 64,
              color: Colors.grey,
            ),
            SizedBox(height: 16),
            Text(
              'Aucune statistique disponible',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    // Trier par nombre de parrainages
    final sortedUsers = userStats.entries.toList()
      ..sort((a, b) => b.value['totalReferrals'].compareTo(a.value['totalReferrals']));

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: sortedUsers.length + 1, // +1 pour le header
      itemBuilder: (context, index) {
        if (index == 0) {
          return Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Top des parrains',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Classement des tatoueurs par nombre de parrainages',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
          );
        }
        
        final userEntry = sortedUsers[index - 1];
        final email = userEntry.key;
        final stats = userEntry.value;
        
        return Card(
          margin: const EdgeInsets.only(bottom: 12),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: KipikTheme.rouge,
              child: Text(
                '#$index',
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            title: Text(
              email,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            subtitle: Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Wrap(
                spacing: 8,
                runSpacing: 4,
                children: [
                  _StatChip(
                    label: '${stats['totalReferrals']} parrainages',
                    color: Colors.blue,
                  ),
                  _StatChip(
                    label: '${stats['completedReferrals']} validÃ©s',
                    color: Colors.green,
                  ),
                  _StatChip(
                    label: '${stats['totalRewards']} rÃ©compenses',
                    color: Colors.amber,
                  ),
                ],
              ),
            ),
            trailing: stats['totalReferrals'] >= 5
                ? const Icon(Icons.star, color: Colors.amber)
                : null,
          ),
        );
      },
    );
  }
}

class _GlobalStatCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  final Color color;

  const _GlobalStatCard({
    required this.title,
    required this.value,
    required this.icon,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, size: 24, color: color),
          const SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              fontSize: 10,
              color: color,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}

class _ReferralCard extends StatelessWidget {
  final Referral referral;

  const _ReferralCard({required this.referral});

  @override
  Widget build(BuildContext context) {
    Color statusColor;
    IconData statusIcon;
    String statusText;

    switch (referral.status) {
      case 'completed':
        statusColor = Colors.green;
        statusIcon = Icons.check_circle;
        statusText = 'ValidÃ©';
        break;
      case 'pending':
        statusColor = Colors.orange;
        statusIcon = Icons.hourglass_empty;
        statusText = 'En attente';
        break;
      default:
        statusColor = Colors.grey;
        statusIcon = Icons.help;
        statusText = 'Inconnu';
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(statusIcon, color: statusColor, size: 24),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '${referral.referrerEmail} â†’ ${referral.referredEmail}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: statusColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    statusText,
                    style: TextStyle(
                      color: statusColor,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Code utilisÃ©: ${referral.promoCode}',
                        style: const TextStyle(
                          fontFamily: 'monospace',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Parrainage: ${referral.referralDate.day}/${referral.referralDate.month}/${referral.referralDate.year}',
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 12,
                        ),
                      ),
                      if (referral.subscriptionDate != null)
                        Text(
                          'Abonnement ${referral.subscriptionType}: ${referral.subscriptionDate!.day}/${referral.subscriptionDate!.month}/${referral.subscriptionDate!.year}',
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontSize: 12,
                          ),
                        ),
                    ],
                  ),
                ),
                if (referral.rewardGranted)
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: const Column(
                      children: [
                        Icon(Icons.emoji_events, color: Colors.green, size: 20),
                        SizedBox(height: 4),
                        Text(
                          'RÃ©compense\naccordÃ©e',
                          style: TextStyle(
                            color: Colors.green,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class _ReferralCodeCard extends StatelessWidget {
  final PromoCode code;

  const _ReferralCodeCard({required this.code});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ListTile(
        title: Row(
          children: [
            Expanded(
              child: Text(
                code.code,
                style: const TextStyle(
                  fontFamily: 'monospace',
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const SizedBox(width: 8),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
              decoration: BoxDecoration(
                color: Colors.blue,
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Text(
                'PARRAINAGE',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 10,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 4),
            Text('PropriÃ©taire: ${code.referrerEmail ?? 'Inconnu'}'),
            const SizedBox(height: 4),
            Text('Utilisations: ${code.currentUses}/${code.maxUses ?? 'âˆž'}'),
            if (code.description != null && code.description!.isNotEmpty) ...[
              const SizedBox(height: 4),
              Text(
                code.description!,
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 12,
                ),
              ),
            ],
          ],
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.copy),
              onPressed: () {
                Clipboard.setData(ClipboardData(text: code.code));
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Code copiÃ© !')),
                );
              },
            ),
            Icon(
              code.isValid ? Icons.check_circle : Icons.cancel,
              color: code.isValid ? Colors.green : Colors.red,
            ),
          ],
        ),
        isThreeLine: true,
      ),
    );
  }
}

class _StatChip extends StatelessWidget {
  final String label;
  final Color color;

  const _StatChip({
    required this.label,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        label,
        style: TextStyle(
          color: color,
          fontSize: 10,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\admin_setup_page.dart

// lib/pages/admin/admin_setup_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import '../../core/database_manager.dart';
import '../../widgets/database_switcher.dart';
import '../../services/auth/secure_auth_service.dart'; // âœ… AJOUTÃ‰
import '../../services/auth/captcha_manager.dart'; // âœ… AJOUTÃ‰
import '../../models/user_role.dart'; // âœ… AJOUTÃ‰

class AdminSetupPage extends StatefulWidget {
  const AdminSetupPage({Key? key}) : super(key: key);

  @override
  State<AdminSetupPage> createState() => _AdminSetupPageState();
}

class _AdminSetupPageState extends State<AdminSetupPage> {
  bool _isLoading = true;
  Map<String, dynamic> _systemConfig = {};
  
  // âœ… AJOUTÃ‰: Services sÃ©curisÃ©s
  SecureAuthService get _authService => SecureAuthService.instance;
  CaptchaManager get _captchaManager => CaptchaManager.instance;
  
  @override
  void initState() {
    super.initState();
    _checkAdminAccess();
  }

  // âœ… NOUVEAU: VÃ©rification des accÃ¨s admin
  Future<void> _checkAdminAccess() async {
    final userRole = _authService.currentUserRole;
    
    if (userRole != UserRole.admin) {
      // Rediriger si pas admin
      if (mounted) {
        Navigator.of(context).pushReplacementNamed('/admin/dashboard');
      }
      return;
    }
    
    // VÃ©rifier si c'est le super admin pour les actions sensibles
    if (!_authService.isSuperAdmin) {
      print('âš ï¸ AccÃ¨s admin setup sans privilÃ¨ges super admin');
    }
    
    await _loadSystemConfig();
  }

  Future<void> _loadSystemConfig() async {
    setState(() => _isLoading = true);
    
    try {
      // Charger la configuration systÃ¨me
      _systemConfig = DatabaseManager.instance.exportConfig();
      
      // Ajouter des infos de sÃ©curitÃ©
      _systemConfig['currentUser'] = _authService.currentUser;
      _systemConfig['isSuperAdmin'] = _authService.isSuperAdmin;
      _systemConfig['securityLevel'] = _authService.isSuperAdmin ? 'Super Admin' : 'Admin Standard';
      
      // Simuler un dÃ©lai de chargement pour l'UX
      await Future.delayed(const Duration(milliseconds: 500));
    } catch (e) {
      print('Erreur chargement config: $e');
    }
    
    setState(() => _isLoading = false);
  }

  @override
  Widget build(BuildContext context) {
    // âœ… CORRECTION 1: Background alÃ©atoire comme les autres pages
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[DateTime.now().millisecond % backgrounds.length];

    return Scaffold(
      // âœ… CORRECTION 2: extendBodyBehindAppBar pour background complet
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Configuration SystÃ¨me',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // âœ… CORRECTION 1: Background image
          Image.asset(bg, fit: BoxFit.cover),
          
          // âœ… CORRECTION 2: SafeArea pour Ã©viter les dÃ©bordements
          SafeArea(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : RefreshIndicator(
                    onRefresh: _loadSystemConfig,
                    child: SingleChildScrollView(
                      physics: const AlwaysScrollableScrollPhysics(),
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // âœ… NOUVEAU: Badge de sÃ©curitÃ© admin
                          _buildAdminSecurityBadge(),
                          
                          const SizedBox(height: 16),
                          
                          // Header avec statut systÃ¨me
                          _buildSystemStatusHeader(),
                          
                          const SizedBox(height: 24),
                          
                          // Section Base de DonnÃ©es
                          _buildDatabaseSection(),
                          
                          const SizedBox(height: 24),
                          
                          // Section SÃ©curitÃ©
                          _buildSecuritySection(),
                          
                          const SizedBox(height: 24),
                          
                          // Section Configuration avancÃ©e
                          _buildAdvancedConfigSection(),
                          
                          const SizedBox(height: 24),
                          
                          // Section Actions systÃ¨me
                          _buildSystemActionsSection(),
                          
                          // âœ… CORRECTION 3: Padding bottom suffisant pour Ã©viter overflow
                          const SizedBox(height: 100),
                        ],
                      ),
                    ),
                  ),
          ),
        ],
      ),
    );
  }

  // âœ… NOUVEAU: Badge de sÃ©curitÃ© admin
  Widget _buildAdminSecurityBadge() {
    final isSuperAdmin = _authService.isSuperAdmin;
    final currentUser = _authService.currentUser;
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: isSuperAdmin 
              ? [Colors.purple, Colors.purple.withOpacity(0.8)]
              : [Colors.blue, Colors.blue.withOpacity(0.8)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: (isSuperAdmin ? Colors.purple : Colors.blue).withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Icon(
            isSuperAdmin ? Icons.admin_panel_settings : Icons.security,
            color: Colors.white,
            size: 24,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  isSuperAdmin ? 'SUPER ADMINISTRATEUR' : 'ADMINISTRATEUR',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                Text(
                  currentUser?['email'] ?? 'admin@kipik.ink',
                  style: const TextStyle(
                    color: Colors.white70,
                    fontSize: 12,
                    fontFamily: 'Roboto',
                  ),
                ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              isSuperAdmin ? 'SUPER' : 'ADMIN',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 10,
                fontWeight: FontWeight.bold,
                fontFamily: 'Roboto',
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSystemStatusHeader() {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    final activeConfig = DatabaseManager.instance.activeDatabaseConfig;
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: isDemoMode 
              ? [Colors.orange, Colors.orange.withOpacity(0.8)]
              : [Colors.green, Colors.green.withOpacity(0.8)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: (isDemoMode ? Colors.orange : Colors.green).withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                isDemoMode ? Icons.science : Icons.security,
                color: Colors.white,
                size: 32,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      isDemoMode ? 'MODE DÃ‰MONSTRATION' : 'MODE PRODUCTION',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'PermanentMarker',
                      ),
                    ),
                    Text(
                      activeConfig.description,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // MÃ©triques systÃ¨me
          Row(
            children: [
              Expanded(
                child: _buildStatusMetric(
                  'Base active',
                  activeConfig.name,
                  Icons.storage,
                ),
              ),
              Expanded(
                child: _buildStatusMetric(
                  'Instances',
                  '${_systemConfig['cachedInstances']?.length ?? 0}',
                  Icons.memory,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatusMetric(String label, String value, IconData icon) {
    return Container(
      margin: const EdgeInsets.all(4),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, color: Colors.white, size: 20),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Roboto',
            ),
            textAlign: TextAlign.center,
          ),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 10,
              fontFamily: 'Roboto',
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildDatabaseSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95), // âœ… Fond semi-transparent
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(Icons.storage, color: Colors.blue, size: 24),
                ),
                const SizedBox(width: 12),
                const Text(
                  'Gestion des bases de donnÃ©es',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            Text(
              'Basculez entre les environnements de production et de dÃ©monstration',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 14,
                fontFamily: 'Roboto',
              ),
            ),
            
            const SizedBox(height: 20),
            
            // Widget de basculement
            DatabaseSwitcher(),
            
            const SizedBox(height: 16),
            
            // Informations dÃ©taillÃ©es
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey[300]!),
              ),
              child: Column(
                children: [
                  _buildInfoRow('Base de donnÃ©es active', _systemConfig['activeDatabaseKey'] ?? 'Non dÃ©finie'),
                  _buildInfoRow('ID Firestore', _systemConfig['activeDatabaseConfig']?['id'] ?? 'Non dÃ©fini'),
                  _buildInfoRow('Type d\'environnement', 
                    (_systemConfig['activeDatabaseConfig']?['isProduction'] ?? false) ? 'Production' : 'DÃ©monstration'),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSecuritySection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95), // âœ… Fond semi-transparent
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.red.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(Icons.security, color: Colors.red, size: 24),
                ),
                const SizedBox(width: 12),
                const Text(
                  'SÃ©curitÃ© et authentification',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // Status de sÃ©curitÃ©
            _buildSecurityStatusItem(
              'Service d\'authentification',
              'OpÃ©rationnel',
              Icons.check_circle,
              Colors.green,
            ),
            
            const SizedBox(height: 8),
            
            _buildSecurityStatusItem(
              'Chiffrement des donnÃ©es',
              'ActivÃ© (TLS 1.3)',
              Icons.lock,
              Colors.green,
            ),
            
            const SizedBox(height: 8),
            
            _buildSecurityStatusItem(
              'Captcha Manager',
              'ConfigurÃ©',
              Icons.verified_user,
              Colors.green,
            ),
            
            // âœ… NOUVEAU: Statut admin actuel
            const SizedBox(height: 8),
            
            _buildSecurityStatusItem(
              'Niveau administrateur',
              _systemConfig['securityLevel'] ?? 'Standard',
              Icons.admin_panel_settings,
              _authService.isSuperAdmin ? Colors.purple : Colors.blue,
            ),
            
            const SizedBox(height: 16),
            
            ElevatedButton.icon(
              onPressed: () {
                _showSecurityAuditDialog();
              },
              icon: const Icon(Icons.assessment),
              label: const Text('Audit de sÃ©curitÃ©'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAdvancedConfigSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95), // âœ… Fond semi-transparent
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(Icons.settings_applications, color: Colors.purple, size: 24),
                ),
                const SizedBox(width: 12),
                const Text(
                  'Configuration avancÃ©e',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // Options de configuration
            ListTile(
              leading: const Icon(Icons.cloud_sync),
              title: const Text('Synchronisation automatique'),
              subtitle: const Text('Synchroniser les donnÃ©es en temps rÃ©el'),
              trailing: Switch(
                value: true,
                onChanged: _authService.isSuperAdmin ? (value) {
                  // TODO: ImplÃ©menter
                } : null, // âœ… DÃ©sactivÃ© si pas super admin
              ),
            ),
            
            ListTile(
              leading: const Icon(Icons.notifications),
              title: const Text('Notifications push'),
              subtitle: const Text('Alertes systÃ¨me et utilisateur'),
              trailing: Switch(
                value: true,
                onChanged: _authService.isSuperAdmin ? (value) {
                  // TODO: ImplÃ©menter
                } : null,
              ),
            ),
            
            ListTile(
              leading: const Icon(Icons.analytics),
              title: const Text('Analytics'),
              subtitle: const Text('Collecte de donnÃ©es d\'usage'),
              trailing: Switch(
                value: false,
                onChanged: _authService.isSuperAdmin ? (value) {
                  // TODO: ImplÃ©menter
                } : null,
              ),
            ),
            
            // âœ… NOUVEAU: Avertissement si pas super admin
            if (!_authService.isSuperAdmin)
              Container(
                margin: const EdgeInsets.only(top: 8),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: const Row(
                  children: [
                    Icon(Icons.info, color: Colors.orange, size: 16),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Certaines options nÃ©cessitent les privilÃ¨ges de super administrateur',
                        style: TextStyle(
                          color: Colors.orange,
                          fontSize: 12,
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildSystemActionsSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95), // âœ… Fond semi-transparent
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(Icons.build, color: Colors.orange, size: 24),
                ),
                const SizedBox(width: 12),
                const Text(
                  'Actions systÃ¨me',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // Actions disponibles
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      _clearCache();
                    },
                    icon: const Icon(Icons.clear_all),
                    label: const Text('Vider le cache'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      _exportConfig();
                    },
                    icon: const Icon(Icons.download),
                    label: const Text('Export config'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _authService.isSuperAdmin ? () {
                      _restartServices();
                    } : null, // âœ… RÃ©servÃ© aux super admins
                    icon: const Icon(Icons.restart_alt),
                    label: const Text('RedÃ©marrer services'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: _authService.isSuperAdmin ? Colors.red : Colors.grey,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      _showSystemLogs();
                    },
                    icon: const Icon(Icons.history),
                    label: const Text('Logs systÃ¨me'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSecurityStatusItem(String title, String status, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              title,
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                fontFamily: 'Roboto',
              ),
            ),
          ),
          Text(
            status,
            style: TextStyle(
              color: color,
              fontWeight: FontWeight.bold,
              fontSize: 12,
              fontFamily: 'Roboto',
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 12,
                fontFamily: 'Roboto',
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontSize: 12,
                fontFamily: 'monospace',
              ),
            ),
          ),
        ],
      ),
    );
  }

  // MÃ‰THODES D'ACTION (inchangÃ©es mais avec vÃ©rifications de sÃ©curitÃ©)
  Future<void> _clearCache() async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Vider le cache'),
        content: const Text('ÃŠtes-vous sÃ»r de vouloir vider le cache systÃ¨me ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              // TODO: ImplÃ©menter vidage cache
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Cache vidÃ© avec succÃ¨s')),
              );
              await _loadSystemConfig();
            },
            child: const Text('Confirmer'),
          ),
        ],
      ),
    );
  }

  void _exportConfig() {
    // TODO: ImplÃ©menter export de configuration
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Export de configuration en cours de dÃ©veloppement')),
    );
  }

  void _restartServices() {
    if (!_authService.isSuperAdmin) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Action rÃ©servÃ©e aux super administrateurs'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('RedÃ©marrer les services'),
        content: const Text('Cette action va redÃ©marrer tous les services. Continuer ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: ImplÃ©menter redÃ©marrage services
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Services redÃ©marrÃ©s')),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('RedÃ©marrer'),
          ),
        ],
      ),
    );
  }

  void _showSystemLogs() {
    // TODO: ImplÃ©menter affichage des logs
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Affichage des logs en cours de dÃ©veloppement')),
    );
  }

  void _showSecurityAuditDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.security, color: Colors.red),
            SizedBox(width: 8),
            Text('Audit de sÃ©curitÃ©'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('DerniÃ¨re vÃ©rification: Il y a 2 heures'),
            const SizedBox(height: 8),
            const Text('âœ… Authentification: OK'),
            const Text('âœ… Chiffrement: OK'),
            const Text('âœ… Permissions: OK'),
            const Text('âš ï¸ Mots de passe: 3 comptes avec mots de passe faibles'),
            const SizedBox(height: 8),
            const Text('Score de sÃ©curitÃ©: 8.5/10'),
            const SizedBox(height: 12),
            // âœ… NOUVEAU: Infos admin actuelles
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('Admin connectÃ©: ${_authService.currentUser?['email'] ?? 'N/A'}'),
                  Text('Niveau: ${_authService.isSuperAdmin ? 'Super Admin' : 'Admin Standard'}'),
                  Text('Session sÃ©curisÃ©e: ${_authService.isAuthenticated ? 'âœ…' : 'âŒ'}'),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Fermer'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: Actions de sÃ©curitÃ©
            },
            child: const Text('Voir dÃ©tails'),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\admin_test_recaptcha_page.dart

// lib/pages/admin/admin_test_recaptcha_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/services/auth/captcha_manager.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/widgets/auth/recaptcha_widget.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/models/user_role.dart';

class AdminTestRecaptchaPage extends StatefulWidget {
  @override
  _AdminTestRecaptchaPageState createState() => _AdminTestRecaptchaPageState();
}

class _AdminTestRecaptchaPageState extends State<AdminTestRecaptchaPage> {
  final _emailController = TextEditingController(text: 'admin@kipik.ink');
  final _passwordController = TextEditingController(text: 'Test123!');
  bool _isLoading = false;
  CaptchaResult? _lastCaptchaResult;
  List<String> _logs = [];

  // âœ… CORRECTION: Services sÃ©curisÃ©s
  SecureAuthService get _authService => SecureAuthService.instance;
  CaptchaManager get _captchaManager => CaptchaManager.instance;

  @override
  void initState() {
    super.initState();
    _checkAdminAccess();
  }

  Future<void> _checkAdminAccess() async {
    // âœ… CORRECTION: VÃ©rification admin avec SecureAuthService
    final currentRole = _authService.currentUserRole;
    final isAuthenticated = _authService.isAuthenticated;
    
    if (!isAuthenticated || currentRole != UserRole.admin) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacementNamed('/admin');
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('AccÃ¨s rÃ©servÃ© aux administrateurs'),
            backgroundColor: Colors.red,
          ),
        );
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: const Row(
          children: [
            Icon(Icons.admin_panel_settings, color: Colors.amber),
            SizedBox(width: 8),
            Text(
              'Admin - Test reCAPTCHA',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                color: Colors.white,
              ),
            ),
          ],
        ),
        backgroundColor: Colors.amber[700],
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        actions: [
          Container(
            margin: const EdgeInsets.only(right: 16),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Text(
              'ADMIN',
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Avertissement admin
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.amber[700]?.withOpacity(0.2),
                border: Border.all(color: Colors.amber),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Row(
                children: [
                  Icon(Icons.warning, color: Colors.amber),
                  SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Panneau Administrateur',
                          style: TextStyle(
                            color: Colors.amber,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          'Page de test et debug reCAPTCHA - AccÃ¨s restreint',
                          style: TextStyle(color: Colors.white70),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 20),

            // Info configuration
            _buildConfigCard(),
            
            const SizedBox(height: 20),
            
            // Section test connexion
            _buildLoginTestSection(),
            
            const SizedBox(height: 20),
            
            // Section admin actions
            _buildAdminActionsSection(),
            
            const SizedBox(height: 20),
            
            // Logs
            _buildLogsSection(),
          ],
        ),
      ),
    );
  }

  Widget _buildConfigCard() {
    return Card(
      color: Colors.grey[900],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.settings, color: Colors.amber),
                SizedBox(width: 8),
                Text(
                  'Configuration reCAPTCHA',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            
            // âœ… CORRECTION: Utiliser les propriÃ©tÃ©s existantes
            _buildInfoRow('Site Key', CaptchaManager.siteKey.isNotEmpty 
                ? "âœ… ConfigurÃ© (${CaptchaManager.siteKey.substring(0, 20)}...)" 
                : "âŒ Manquant"),
            _buildInfoRow('Score minimum gÃ©nÃ©ral', '${CaptchaManager.captchaMinScore}'),
            _buildInfoRow('Score paiement', '${CaptchaManager.paymentMinScore}'),
            _buildInfoRow('Score inscription', '${CaptchaManager.signupMinScore}'),
            _buildInfoRow('Score rÃ©servation', '${CaptchaManager.bookingMinScore}'),
            _buildInfoRow('Max tentatives', '${CaptchaManager.maxLoginAttempts}'),
            _buildInfoRow('DurÃ©e blocage', '${CaptchaManager.lockoutDuration} min'),
            
            Divider(color: Colors.grey[700]),
            
            // âœ… CORRECTION: Stats globales avec mÃ©thode existante
            FutureBuilder<SecurityStats>(
              future: Future.value(_captchaManager.getSecurityStats()),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  final stats = snapshot.data!;
                  return Column(
                    children: [
                      _buildInfoRow('Tentatives Ã©chouÃ©es totales', '${stats.totalFailedAttempts}'),
                      _buildInfoRow('Appareils bloquÃ©s', '${stats.lockedDevices}'),
                      _buildInfoRow('Appareils uniques', '${stats.uniqueDevices}'),
                    ],
                  );
                }
                return const Text('Chargement stats...', style: TextStyle(color: Colors.grey));
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: TextStyle(color: Colors.grey[400])),
          Text(value, style: const TextStyle(color: Colors.white, fontSize: 12)),
        ],
      ),
    );
  }

  Widget _buildLoginTestSection() {
    return Card(
      color: Colors.grey[900],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.login, color: Colors.blue),
                SizedBox(width: 8),
                Text(
                  'Test Connexion SÃ©curisÃ©e',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Champs de test
            TextField(
              controller: _emailController,
              decoration: InputDecoration(
                labelText: 'Email de test',
                labelStyle: TextStyle(color: Colors.grey[400]),
                enabledBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Colors.grey[600]!),
                ),
                focusedBorder: const OutlineInputBorder(
                  borderSide: BorderSide(color: Colors.amber),
                ),
              ),
              style: const TextStyle(color: Colors.white),
            ),
            const SizedBox(height: 12),
            
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(
                labelText: 'Mot de passe de test',
                labelStyle: TextStyle(color: Colors.grey[400]),
                enabledBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Colors.grey[600]!),
                ),
                focusedBorder: const OutlineInputBorder(
                  borderSide: BorderSide(color: Colors.amber),
                ),
              ),
              style: const TextStyle(color: Colors.white),
              obscureText: true,
            ),
            const SizedBox(height: 16),

            // âœ… CORRECTION: Widget reCAPTCHA conditionnel
            if (_shouldShowCaptcha()) ...[
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: Column(
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.security, color: Colors.orange, size: 20),
                        SizedBox(width: 8),
                        Text(
                          'reCAPTCHA Admin Test',
                          style: TextStyle(
                            color: Colors.orange,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    ReCaptchaWidget(
                      action: 'admin_login_test',
                      useInvisible: true,
                      onValidated: (result) {
                        setState(() {
                          _lastCaptchaResult = result;
                        });
                        _addLog('Admin reCAPTCHA validÃ© - Score: ${(result.score * 100).round()}%');
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),
            ],

            // Bouton test connexion
            ElevatedButton(
              onPressed: _isLoading ? null : _testSecureLogin,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.amber[700],
                foregroundColor: Colors.black,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: _isLoading 
                  ? const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.black),
                          ),
                        ),
                        SizedBox(width: 12),
                        Text('Test en cours...'),
                      ],
                    )
                  : const Text('Tester Connexion SÃ©curisÃ©e'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAdminActionsSection() {
    return Card(
      color: Colors.grey[900],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.admin_panel_settings, color: Colors.amber),
                SizedBox(width: 8),
                Text(
                  'Actions Administrateur',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Boutons admin
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => _testCaptchaAction('payment'),
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                    child: const Text('Test Paiement'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => _testCaptchaAction('signup'),
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                    child: const Text('Test Inscription'),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: _simulateFailedAttempt,
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                    child: const Text('Simuler Ã‰chec'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _showDetailedStats,
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.purple),
                    child: const Text('Stats DÃ©taillÃ©es'),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: _debugCaptchaManager,
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.cyan),
                    child: const Text('ðŸ” Debug Info'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _adminResetAllAttempts,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange[700],
                      foregroundColor: Colors.white,
                    ),
                    child: const Text('ðŸ—‘ï¸ Reset Global'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLogsSection() {
    return Card(
      color: Colors.grey[900],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Row(
                  children: [
                    Icon(Icons.terminal, color: Colors.cyan),
                    SizedBox(width: 8),
                    Text(
                      'Logs Admin',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
                IconButton(
                  icon: const Icon(Icons.clear, color: Colors.grey),
                  onPressed: () => setState(() => _logs.clear()),
                ),
              ],
            ),
            const SizedBox(height: 12),
            
            Container(
              width: double.infinity,
              height: 200,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.amber.withOpacity(0.3)),
              ),
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: _logs.isEmpty
                      ? [const Text('Aucun log admin', style: TextStyle(color: Colors.grey))]
                      : _logs.map((log) => Padding(
                          padding: const EdgeInsets.symmetric(vertical: 1),
                          child: Text(
                            '[ADMIN] $log',
                            style: TextStyle(
                              fontSize: 11,
                              color: Colors.amber[200],
                              fontFamily: 'monospace',
                            ),
                          ),
                        )).toList(),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _addLog(String message) {
    setState(() {
      _logs.add('${DateTime.now().toString().substring(11, 19)} - $message');
      // Garder seulement les 50 derniers logs
      if (_logs.length > 50) {
        _logs.removeAt(0);
      }
    });
  }

  /// âœ… CORRECTION: VÃ©rifier si CAPTCHA nÃ©cessaire
  bool _shouldShowCaptcha() {
    return _captchaManager.shouldShowCaptcha(
      'login',
      identifier: _emailController.text.trim(),
    );
  }

  Future<void> _testSecureLogin() async {
    setState(() => _isLoading = true);
    _addLog('ADMIN: Test connexion sÃ©curisÃ©e...');

    try {
      // âœ… CORRECTION: Utiliser SecureAuthService directement
      final user = await _authService.signInWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text,
        captchaResult: _lastCaptchaResult,
      );

      if (user != null) {
        final role = _authService.currentUserRole;
        _addLog('âœ… ADMIN: Connexion rÃ©ussie - RÃ´le: ${role?.name ?? 'unknown'}');
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Connexion admin rÃ©ussie !'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        _addLog('âŒ ADMIN: Connexion Ã©chouÃ©e');
      }

    } catch (e) {
      _addLog('âŒ ADMIN: Erreur: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur admin: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _testCaptchaAction(String action) async {
    _addLog('ADMIN: Test reCAPTCHA pour action: $action');
    
    try {
      // âœ… CORRECTION: Utiliser CaptchaManager directement
      final result = await _captchaManager.validateInvisibleCaptcha(action);
      _addLog('ADMIN: Action $action - Score: ${(result.score * 100).round()}% - Valide: ${result.isValid}');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Admin test $action - Score: ${(result.score * 100).round()}%'),
            backgroundColor: result.isValid ? Colors.green : Colors.orange,
          ),
        );
      }
    } catch (e) {
      _addLog('âŒ ADMIN: Erreur test $action: $e');
    }
  }

  void _simulateFailedAttempt() {
    // âœ… CORRECTION: Utiliser CaptchaManager
    _captchaManager.recordFailedAttempt('login', identifier: _emailController.text.trim());
    _addLog('ADMIN: Tentative Ã©chouÃ©e simulÃ©e');
    
    final lockout = _captchaManager.getRemainingLockout(identifier: _emailController.text.trim());
    if (lockout != null) {
      _addLog('âš ï¸ ADMIN: Compte bloquÃ© pour ${lockout.inMinutes} minutes');
    }
    
    setState(() {}); // Refresh pour mettre Ã  jour les stats
  }

  void _showDetailedStats() {
    final stats = _captchaManager.getSecurityStats();
    _addLog('ADMIN: Stats - Tentatives: ${stats.totalFailedAttempts}, BloquÃ©s: ${stats.lockedDevices}');
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Row(
          children: [
            Icon(Icons.analytics, color: Colors.amber),
            SizedBox(width: 8),
            Text('Statistiques Admin', style: TextStyle(color: Colors.white)),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('ðŸ”¢ Tentatives Ã©chouÃ©es: ${stats.totalFailedAttempts}', style: const TextStyle(color: Colors.white)),
            Text('ðŸ”’ Appareils bloquÃ©s: ${stats.lockedDevices}', style: const TextStyle(color: Colors.white)),
            Text('ðŸ“± Appareils uniques: ${stats.uniqueDevices}', style: const TextStyle(color: Colors.white)),
            Divider(color: Colors.grey[700]),
            Text('âš™ï¸ Score minimum: ${CaptchaManager.captchaMinScore}', style: TextStyle(color: Colors.grey[400])),
            Text('ðŸ’° Score paiement: ${CaptchaManager.paymentMinScore}', style: TextStyle(color: Colors.grey[400])),
            Text('ðŸ“ Score inscription: ${CaptchaManager.signupMinScore}', style: TextStyle(color: Colors.grey[400])),
            Text('â±ï¸ DurÃ©e blocage: ${CaptchaManager.lockoutDuration} min', style: TextStyle(color: Colors.grey[400])),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Fermer', style: TextStyle(color: Colors.amber)),
          ),
        ],
      ),
    );
  }

  /// âœ… NOUVEAU: Debug du CaptchaManager
  void _debugCaptchaManager() {
    _addLog('ADMIN: DÃ©but debug CaptchaManager...');
    
    // Utiliser la mÃ©thode de debug du service
    _captchaManager.debugPrintState();
    
    _addLog('ADMIN: Debug terminÃ© - Voir console pour dÃ©tails');
    
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Debug info affichÃ© dans la console'),
          backgroundColor: Colors.cyan,
        ),
      );
    }
  }

  void _adminResetAllAttempts() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Row(
          children: [
            Icon(Icons.warning, color: Colors.orange),
            SizedBox(width: 8),
            Text('Confirmation Admin', style: TextStyle(color: Colors.white)),
          ],
        ),
        content: const Text(
          'Voulez-vous vraiment rÃ©initialiser TOUTES les tentatives de sÃ©curitÃ© ?\n\nCette action est irrÃ©versible.',
          style: TextStyle(color: Colors.white),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // âœ… CORRECTION: Utiliser CaptchaManager
              _captchaManager.resetAllAttempts();
              _addLog('ðŸ”„ ADMIN: Reset global effectuÃ©');
              setState(() {}); // Refresh stats
              
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Reset global admin effectuÃ©'),
                  backgroundColor: Colors.orange,
                ),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange[700]),
            child: const Text('Confirmer Reset'),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\contest_admin.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class ContestAdminPage extends StatelessWidget {
  const ContestAdminPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    final List<_AdminModule> modules = [
      _AdminModule('Accueil', Icons.dashboard, '/admin/home'),
      _AdminModule('Conventions', Icons.event, '/admin/conventions'),
      _AdminModule('Tatoueurs', Icons.people, '/admin/tattooers'),
      _AdminModule('Flashs', Icons.flash_on, '/admin/flash'),
      _AdminModule('Notifications', Icons.notifications, '/admin/notifications'),
      _AdminModule('Sponsors', Icons.star, '/admin/sponsors'),
      _AdminModule('Statistiques', Icons.bar_chart, '/admin/stats'),
      _AdminModule('Ã‰diteur de plan', Icons.map, '/admin/map_editor'),
    ];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Dashboard Admin',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: modules.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemBuilder: (context, index) {
                final module = modules[index];
                return GestureDetector(
                  onTap: () {
                    Navigator.pushNamed(context, module.route);
                  },
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1),
                          blurRadius: 6,
                          offset: const Offset(0, 3),
                        )
                      ],
                    ),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(module.icon, size: 40, color: Colors.black),
                        const SizedBox(height: 10),
                        Text(
                          module.title,
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class _AdminModule {
  final String title;
  final IconData icon;
  final String route;

  _AdminModule(this.title, this.icon, this.route);
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\database_admin_page.dart

// lib/pages/admin/database_admin_page.dart
import 'package:flutter/material.dart';
import '../../widgets/database_switcher.dart';
import '../../widgets/admin/database_sync_widget.dart'; // âœ… AJOUTÃ‰
import '../../core/database_manager.dart';

class DatabaseAdminPage extends StatelessWidget {
  const DatabaseAdminPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Administration Base de DonnÃ©es'),
        backgroundColor: Colors.indigo,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: Icon(Icons.info_outline),
            onPressed: () => _showInfoDialog(context),
            tooltip: 'Informations',
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Alerte mode dÃ©mo
            if (DatabaseManager.instance.isDemoMode)
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(16),
                margin: EdgeInsets.only(bottom: 16),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  border: Border.all(color: Colors.orange),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    Icon(Icons.science, color: Colors.orange, size: 24),
                    SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'MODE DÃ‰MONSTRATION ACTIF',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.orange,
                            ),
                          ),
                          Text(
                            'Vous utilisez des donnÃ©es factices pour les dÃ©monstrations.',
                            style: TextStyle(color: Colors.orange[700]),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),

            // Widget principal de basculement
            DatabaseSwitcher(),
            
            SizedBox(height: 16),
            
            // âœ… NOUVEAU: Widget de synchronisation
            DatabaseSyncWidget(),
            
            SizedBox(height: 24),
            
            // Informations dÃ©taillÃ©es
            Card(
              elevation: 4,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.settings, color: Colors.indigo),
                        SizedBox(width: 8),
                        Text(
                          'Configuration technique',
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    SizedBox(height: 16),
                    _buildConfigDisplay(),
                  ],
                ),
              ),
            ),

            SizedBox(height: 24),

            // Guide d'utilisation
            Card(
              elevation: 4,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.help_outline, color: Colors.blue),
                        SizedBox(width: 8),
                        Text(
                          'Guide d\'utilisation',
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    SizedBox(height: 16),
                    _buildUsageGuide(),
                  ],
                ),
              ),
            ),

            SizedBox(height: 24),

            // âœ… NOUVEAU: Actions avancÃ©es de synchronisation
            Card(
              elevation: 4,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.sync_alt, color: Colors.green),
                        SizedBox(width: 8),
                        Text(
                          'Actions de synchronisation avancÃ©es',
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    SizedBox(height: 16),
                    _buildAdvancedSyncActions(context),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConfigDisplay() {
    final config = DatabaseManager.instance.exportConfig();
    
    return Column(
      children: [
        _buildInfoRow('Base active', config['activeDatabaseKey']),
        _buildInfoRow('ID Firestore', config['activeDatabaseConfig']['id']),
        _buildInfoRow('Nom complet', config['activeDatabaseConfig']['name']),
        _buildInfoRow('Description', config['activeDatabaseConfig']['description']),
        _buildInfoRow('Type', config['activeDatabaseConfig']['isProduction'] ? 'Production' : 'DÃ©monstration'),
        _buildInfoRow('Instances en cache', config['cachedInstances'].length.toString()),
        _buildInfoRow('Bases disponibles', config['availableDatabases'].keys.length.toString()),
      ],
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 140,
            child: Text(
              '$label:',
              style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey[700]),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(fontFamily: 'monospace', fontSize: 13),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUsageGuide() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildGuideItem(
          icon: Icons.production_quantity_limits,
          title: 'Mode Production',
          description: 'Utilisez ce mode pour les vraies donnÃ©es de votre application.',
          color: Colors.green,
        ),
        SizedBox(height: 12),
        _buildGuideItem(
          icon: Icons.science,
          title: 'Mode DÃ©monstration',
          description: 'Parfait pour montrer l\'application aux prospects avec des donnÃ©es factices.',
          color: Colors.orange,
        ),
        SizedBox(height: 12),
        _buildGuideItem(
          icon: Icons.swap_horiz,
          title: 'Basculement',
          description: 'Changez de mode en temps rÃ©el sans redÃ©marrer l\'application.',
          color: Colors.blue,
        ),
        SizedBox(height: 12),
        _buildGuideItem(
          icon: Icons.sync,
          title: 'Synchronisation',
          description: 'Dupliquez automatiquement les donnÃ©es de production vers dÃ©mo/test.',
          color: Colors.purple,
        ),
      ],
    );
  }

  Widget _buildGuideItem({
    required IconData icon,
    required String title,
    required String description,
    required Color color,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: color, size: 20),
        ),
        SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: TextStyle(fontWeight: FontWeight.w600),
              ),
              Text(
                description,
                style: TextStyle(color: Colors.grey[600], fontSize: 13),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // âœ… NOUVEAU: Actions avancÃ©es de synchronisation
  Widget _buildAdvancedSyncActions(BuildContext context) {
    return Column(
      children: [
        Text(
          'Actions techniques pour les dÃ©veloppeurs',
          style: TextStyle(color: Colors.grey[600], fontSize: 14),
        ),
        SizedBox(height: 16),
        
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _showCollectionSyncDialog(context),
                icon: Icon(Icons.folder_copy, size: 18),
                label: Text('Sync collections'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                ),
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _showDebugInfo(context),
                icon: Icon(Icons.bug_report, size: 18),
                label: Text('Debug sync'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                ),
              ),
            ),
          ],
        ),
        
        SizedBox(height: 12),
        
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _testAllConnections(context),
                icon: Icon(Icons.wifi_tethering, size: 18),
                label: Text('Test connexions'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.green,
                ),
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _exportSyncLogs(context),
                icon: Icon(Icons.download, size: 18),
                label: Text('Export logs'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.purple,
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  // âœ… NOUVELLES MÃ‰THODES POUR LES ACTIONS AVANCÃ‰ES
  void _showCollectionSyncDialog(BuildContext context) {
    final collections = [
      'users', 'projects', 'photos', 'quotes', 'conventions', 
      'payments', 'notifications', 'chats', 'appointments'
    ];
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Synchroniser des collections'),
        content: Container(
          width: double.maxFinite,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('SÃ©lectionnez les collections Ã  synchroniser:'),
              SizedBox(height: 12),
              ...collections.map((collection) => CheckboxListTile(
                title: Text(collection),
                value: true,
                onChanged: (value) {
                  // TODO: GÃ©rer la sÃ©lection
                },
              )).toList(),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Synchronisation des collections sÃ©lectionnÃ©es...')),
              );
            },
            child: Text('Synchroniser'),
          ),
        ],
      ),
    );
  }

  void _showDebugInfo(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.bug_report, color: Colors.orange),
            SizedBox(width: 8),
            Text('Debug Synchronisation'),
          ],
        ),
        content: Container(
          width: double.maxFinite,
          height: 300,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('ðŸ“Š Ã‰tat du DatabaseManager:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text('Base active: ${DatabaseManager.instance.activeDatabaseConfig.name}'),
                Text('Mode: ${DatabaseManager.instance.isDemoMode ? "DÃ©mo" : "Production"}'),
                Text('ID: ${DatabaseManager.instance.activeDatabaseConfig.id}'),
                SizedBox(height: 16),
                Text('ðŸ”§ Actions disponibles:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text('â€¢ Synchronisation automatique au dÃ©marrage'),
                Text('â€¢ Synchronisation manuelle complÃ¨te/rapide'),
                Text('â€¢ Nettoyage des bases dÃ©mo/test'),
                Text('â€¢ Statistiques de synchronisation'),
                SizedBox(height: 16),
                Text('ðŸ“‹ Collections synchronisÃ©es:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text('users, projects, photos, quotes, conventions,\npayments, notifications, chats, appointments,\nreports, referrals, admin_stats, promo_codes,\nsubscription_plans, trial_tracking'),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Fermer'),
          ),
        ],
      ),
    );
  }

  void _testAllConnections(BuildContext context) async {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text('Test des connexions'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('Test en cours...'),
          ],
        ),
      ),
    );

    // Simuler le test
    await Future.delayed(Duration(seconds: 2));
    
    Navigator.pop(context); // Fermer le dialog de loading
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green),
            SizedBox(width: 8),
            Text('RÃ©sultats des tests'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('âœ… kipik: Accessible'),
            Text('âœ… kipik-demo: Accessible'),
            Text('âœ… kipik-test: Accessible'),
            SizedBox(height: 12),
            Text('Toutes les bases de donnÃ©es sont opÃ©rationnelles !',
                 style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green)),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('OK'),
          ),
        ],
      ),
    );
  }

  void _exportSyncLogs(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.download, color: Colors.white),
            SizedBox(width: 8),
            Text('Export des logs de synchronisation...'),
          ],
        ),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _showInfoDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.info, color: Colors.blue),
            SizedBox(width: 8),
            Text('Ã€ propos du gestionnaire'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Ce gestionnaire vous permet de :'),
            SizedBox(height: 12),
            Text('ðŸ”„ Basculer entre diffÃ©rentes bases de donnÃ©es'),
            Text('ðŸ­ Production : Vraies donnÃ©es de l\'application'),
            Text('ðŸŽ­ DÃ©mo : DonnÃ©es factices pour les prÃ©sentations'),
            Text('ðŸ§ª Test : Environnement de dÃ©veloppement'),
            SizedBox(height: 12),
            Text('ðŸ“Š Synchroniser automatiquement les donnÃ©es'),
            Text('ðŸ” Diagnostiquer l\'Ã©tat du systÃ¨me'),
            SizedBox(height: 12),
            Text(
              'IdÃ©al pour faire des dÃ©monstrations commerciales sans exposer les vraies donnÃ©es !',
              style: TextStyle(fontStyle: FontStyle.italic, color: Colors.blue),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Compris'),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\test_accounts_page.dart

// lib/pages/admin/test_accounts_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/utils/auth_helper.dart';
import 'package:kipik_v5/models/user_role.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/services/auth/captcha_manager.dart';
import '../particulier/accueil_particulier_page.dart';
import '../pro/home_page_pro.dart';
import '../organisateur/organisateur_dashboard_page.dart';
import 'admin_dashboard_home.dart';

class TestAccountsPage extends StatefulWidget {
  const TestAccountsPage({Key? key}) : super(key: key);

  @override
  State<TestAccountsPage> createState() => _TestAccountsPageState();
}

class _TestAccountsPageState extends State<TestAccountsPage> {
  bool _isCreating = false;
  bool _accountsExist = false;
  bool _isLoading = true;

  // Services sÃ©curisÃ©s
  SecureAuthService get _authService => SecureAuthService.instance;
  CaptchaManager get _captchaManager => CaptchaManager.instance;

  final List<TestAccount> _testAccounts = [
    TestAccount(
      role: UserRole.particulier, // âœ… CORRIGÃ‰: Utilise particulier directement
      email: 'client@kipik.ink',
      password: 'Client123!',
      name: 'Client Test',
      description: 'Tester l\'espace client, rÃ©servations, portfolio',
      color: Colors.blue,
      icon: Icons.person,
    ),
    TestAccount(
      role: UserRole.tatoueur,
      email: 'tatoueur@kipik.ink',
      password: 'Tatoueur123!',
      name: 'Tatoueur Test',
      description: 'Tester l\'espace pro, portfolio, rendez-vous',
      color: Colors.purple,
      icon: Icons.brush,
    ),
    TestAccount(
      role: UserRole.organisateur,
      email: 'organisateur@kipik.ink',
      password: 'Orga123!',
      name: 'Organisateur Test',
      description: 'Tester gestion conventions, Ã©vÃ©nements',
      color: Colors.orange,
      icon: Icons.event,
    ),
  ];

  @override
  void initState() {
    super.initState();
    _initializePage();
  }

  // Initialisation sÃ©curisÃ©e
  Future<void> _initializePage() async {
    // VÃ©rifier les accÃ¨s admin
    final userRole = _authService.currentUserRole;
    
    if (userRole != UserRole.admin) {
      // Rediriger si pas admin
      if (mounted) {
        Navigator.of(context).pushReplacementNamed('/admin/dashboard');
      }
      return;
    }
    
    await _checkAccountsExistence();
    
    setState(() {
      _isLoading = false;
    });
  }

  Future<void> _checkAccountsExistence() async {
    try {
      // VÃ©rifier rÃ©ellement l'existence des comptes
      bool allExist = true;
      
      for (final account in _testAccounts) {
        try {
          final user = await _authService.getUserById(account.email);
          if (user == null) {
            allExist = false;
            break;
          }
        } catch (e) {
          allExist = false;
          break;
        }
      }
      
      setState(() {
        _accountsExist = allExist;
      });
    } catch (e) {
      print('âŒ Erreur vÃ©rification comptes: $e');
      setState(() {
        _accountsExist = false;
      });
    }
  }

  Future<void> _createAllTestAccounts() async {
    if (_isCreating) return;
    
    // SÃ‰CURITÃ‰: VÃ©rifier les privilÃ¨ges super admin
    if (!_authService.isSuperAdmin) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('âŒ Action rÃ©servÃ©e aux super administrateurs'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }
    
    setState(() {
      _isCreating = true;
    });

    try {
      int created = 0;
      int errors = 0;
      
      for (final account in _testAccounts) {
        try {
          // Utiliser SecureAuthService au lieu d'auth_helper
          final user = await _authService.createUserWithEmailAndPassword(
            email: account.email,
            password: account.password,
            displayName: account.name,
            userRole: account.role.value, // âœ… CORRIGÃ‰: Utilise .value au lieu de .name
          );
          
          if (user != null) {
            created++;
            print('âœ… Compte crÃ©Ã©: ${account.email}');
          } else {
            errors++;
            print('âŒ Ã‰chec crÃ©ation: ${account.email}');
          }
        } catch (e) {
          errors++;
          print('âŒ Erreur crÃ©ation ${account.email}: $e');
        }
      }
      
      final message = created > 0 
          ? 'âœ… $created comptes crÃ©Ã©s avec succÃ¨s${errors > 0 ? " ($errors erreurs)" : ""}'
          : 'âŒ Aucun compte crÃ©Ã© ($errors erreurs)';
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: created > 0 ? Colors.green : Colors.red,
        ),
      );
      
      await _checkAccountsExistence();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('âŒ Erreur: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isCreating = false;
      });
    }
  }

  Future<void> _switchToAccount(TestAccount account) async {
    try {
      // Afficher un dialog de confirmation
      final confirmed = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('Se connecter en tant que ${account.name}'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Voulez-vous vous connecter avec le compte ${account.email} ?'),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: const Row(
                  children: [
                    Icon(Icons.warning, color: Colors.orange, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Ceci va vous dÃ©connecter de votre session admin actuelle',
                        style: TextStyle(
                          color: Colors.orange,
                          fontSize: 12,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('Annuler'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.pop(context, true),
              style: ElevatedButton.styleFrom(
                backgroundColor: account.color,
                foregroundColor: Colors.white,
              ),
              child: const Text('Connexion'),
            ),
          ],
        ),
      );

      if (confirmed != true) return;

      // Utiliser SecureAuthService
      await _authService.signOut();

      // Connexion avec le compte de test
      final success = await _authService.signInWithEmailAndPassword(
        account.email, 
        account.password,
      );
      
      if (success != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('âœ… ConnectÃ© en tant que ${account.name}'),
            backgroundColor: Colors.green,
          ),
        );
        
        // Obtenir le rÃ´le depuis SecureAuthService
        final role = _authService.currentUserRole;
        if (role != null) {
          _navigateToUserInterface(role);
        }
      } else {
        throw Exception('Ã‰chec de la connexion');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('âŒ Erreur connexion: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // âœ… CORRIGÃ‰: Switch exhaustif pour la navigation
  void _navigateToUserInterface(UserRole role) {
    Widget destination;
    
    switch (role) {
      case UserRole.client:
      case UserRole.particulier: // âœ… AJOUTÃ‰: Gestion du cas particulier
        destination = const AccueilParticulierPage();
        break;
      case UserRole.tatoueur:
        destination = const HomePagePro();
        break;
      case UserRole.organisateur:
        destination = const OrganisateurDashboardPage();
        break;
      case UserRole.admin:
        destination = const AdminDashboardHome();
        break;
    }
    
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (_) => destination),
    );
  }

  void _copyCredentials(TestAccount account) {
    final credentials = 'Email: ${account.email}\nMot de passe: ${account.password}';
    Clipboard.setData(ClipboardData(text: credentials));
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('ðŸ“‹ Identifiants copiÃ©s dans le presse-papier'),
        backgroundColor: Colors.green,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Background alÃ©atoire comme les autres pages
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[DateTime.now().millisecond % backgrounds.length];

    return Scaffold(
      // extendBodyBehindAppBar pour background complet
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Comptes de Test',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Background image
          Image.asset(bg, fit: BoxFit.cover),
          
          // SafeArea pour Ã©viter les dÃ©bordements
          SafeArea(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildHeader(),
                        const SizedBox(height: 24),
                        _buildCreateAccountsButton(),
                        const SizedBox(height: 24),
                        Expanded(
                          child: _buildAccountsList(),
                        ),
                        // Padding bottom pour Ã©viter overflow
                        const SizedBox(height: 20),
                      ],
                    ),
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.indigo.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(Icons.science, color: Colors.indigo, size: 28),
                ),
                const SizedBox(width: 12),
                const Expanded(
                  child: Text(
                    'Gestion des Comptes de Test',
                    style: TextStyle(
                      fontSize: 20, 
                      fontWeight: FontWeight.bold,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            const Text(
              'CrÃ©ez et gÃ©rez les comptes de test pour tester chaque interface utilisateur. '
              'Vous pouvez vous connecter rapidement Ã  n\'importe quel type de compte.',
              style: TextStyle(
                color: Colors.grey,
                fontFamily: 'Roboto',
              ),
            ),
            
            // Indicateur de sÃ©curitÃ©
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange.withOpacity(0.3)),
              ),
              child: Row(
                children: [
                  const Icon(Icons.warning, color: Colors.orange, size: 16),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Mode dÃ©veloppement - ${_authService.isSuperAdmin ? "Super Admin" : "Admin Standard"}',
                      style: const TextStyle(
                        color: Colors.orange,
                        fontSize: 12,
                        fontWeight: FontWeight.w500,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCreateAccountsButton() {
    final canCreate = _authService.isSuperAdmin;
    
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton.icon(
        onPressed: (_isCreating || !canCreate) ? null : _createAllTestAccounts,
        icon: _isCreating 
          ? const SizedBox(
              width: 20,
              height: 20,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            )
          : const Icon(Icons.add_circle),
        label: Text(
          _isCreating 
              ? 'CrÃ©ation en cours...' 
              : !canCreate
                  ? 'PrivilÃ¨ges Super Admin requis'
                  : 'CrÃ©er tous les comptes de test',
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: canCreate ? Colors.green : Colors.grey,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
          textStyle: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 16,
          ),
        ),
      ),
    );
  }

  Widget _buildAccountsList() {
    return ListView.builder(
      itemCount: _testAccounts.length,
      itemBuilder: (context, index) {
        final account = _testAccounts[index];
        return _buildAccountCard(account);
      },
    );
  }

  Widget _buildAccountCard(TestAccount account) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: account.color,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(account.icon, color: Colors.white, size: 24),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        account.name,
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          fontFamily: 'PermanentMarker',
                        ),
                      ),
                      Text(
                        account.role.name.toUpperCase(),
                        style: TextStyle(
                          color: account.color,
                          fontWeight: FontWeight.w500,
                          fontFamily: 'Roboto',
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
                if (_accountsExist)
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.1),
                      border: Border.all(color: Colors.green),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Text(
                      'âœ… CRÃ‰Ã‰',
                      style: TextStyle(
                        color: Colors.green, 
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              account.description,
              style: const TextStyle(
                color: Colors.grey,
                fontFamily: 'Roboto',
              ),
            ),
            const SizedBox(height: 16),
            
            // Meilleur affichage des identifiants
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey[300]!),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      const Icon(Icons.email, size: 16, color: Colors.grey),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          account.email, 
                          style: const TextStyle(
                            fontSize: 12,
                            fontFamily: 'monospace',
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 4),
                  Row(
                    children: [
                      const Icon(Icons.lock, size: 16, color: Colors.grey),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          account.password, 
                          style: const TextStyle(
                            fontSize: 12,
                            fontFamily: 'monospace',
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _switchToAccount(account),
                    icon: const Icon(Icons.login),
                    label: const Text('Se connecter'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: account.color,
                      foregroundColor: Colors.white,
                      textStyle: const TextStyle(
                        fontFamily: 'PermanentMarker',
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: account.color),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: IconButton(
                    onPressed: () => _copyCredentials(account),
                    icon: Icon(Icons.copy, color: account.color),
                    tooltip: 'Copier identifiants',
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class TestAccount {
  final UserRole role;
  final String email;
  final String password;
  final String name;
  final String description;
  final Color color;
  final IconData icon;

  TestAccount({
    required this.role,
    required this.email,
    required this.password,
    required this.name,
    required this.description,
    required this.color,
    required this.icon,
  });
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\clients\admin_clients_management_page.dart

// lib/pages/admin/clients/admin_clients_management_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class AdminClientsManagementPage extends StatefulWidget {
  const AdminClientsManagementPage({Key? key}) : super(key: key);

  @override
  State<AdminClientsManagementPage> createState() => _AdminClientsManagementPageState();
}

class _AdminClientsManagementPageState extends State<AdminClientsManagementPage> with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = false;

  // DonnÃ©es simulÃ©es (Ã  remplacer par de vraies donnÃ©es)
  List<Map<String, dynamic>> _recentClients = [
    {
      'name': 'Sophie Laurent',
      'email': 'sophie.laurent@gmail.com',
      'phone': '06 12 34 56 78',
      'age': 28,
      'location': 'Paris, France',
      'registrationDate': DateTime(2025, 1, 20),
      'lastActivity': DateTime(2025, 1, 23),
      'status': 'active',
      'projectsCount': 3,
      'completedProjects': 1,
      'totalSpent': 450.0,
      'avgProjectValue': 285.0,
      'favoriteStyles': ['Minimaliste', 'GÃ©omÃ©trique'],
      'reportsCount': 0,
      'isVerified': true,
      'satisfactionScore': 4.8,
    },
    {
      'name': 'Lucas Martin',
      'email': 'lucas.m.92@outlook.fr',
      'phone': '06 98 76 54 32',
      'age': 25,
      'location': 'Lyon, France',
      'registrationDate': DateTime(2025, 1, 18),
      'lastActivity': DateTime(2025, 1, 22),
      'status': 'active',
      'projectsCount': 1,
      'completedProjects': 0,
      'totalSpent': 0.0,
      'avgProjectValue': 320.0,
      'favoriteStyles': ['Traditionnel', 'Old School'],
      'reportsCount': 0,
      'isVerified': true,
      'satisfactionScore': 0.0,
    },
    {
      'name': 'Emma Dubois',
      'email': 'emma.dubois@yahoo.fr',
      'phone': '06 11 22 33 44',
      'age': 32,
      'location': 'Marseille, France',
      'registrationDate': DateTime(2025, 1, 10),
      'lastActivity': DateTime(2025, 1, 15),
      'status': 'flagged',
      'projectsCount': 5,
      'completedProjects': 2,
      'totalSpent': 180.0,
      'avgProjectValue': 90.0,
      'favoriteStyles': ['RÃ©alisme', 'Portrait'],
      'reportsCount': 2,
      'isVerified': false,
      'satisfactionScore': 2.1,
    },
  ];

  Map<String, dynamic> _clientsStats = {
    'total': 1156,
    'active': 1089,
    'inactive': 45,
    'flagged': 22,
    'newThisMonth': 142,
    'totalSpent': 245680.0,
    'avgProjectValue': 285.50,
    'avgSatisfaction': 4.2,
    'projectsInProgress': 234,
    'completedProjects': 1820,
    'reportedByPros': 8,
    'autoFlagged': 14,
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Gestion Clients Particuliers',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: true,
      ),
      body: Column(
        children: [
          // Header avec statistiques
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.blue, Colors.blue.withOpacity(0.8)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
            child: Column(
              children: [
                Row(
                  children: [
                    Expanded(
                      child: _buildStatCard(
                        'Total Clients',
                        '${_clientsStats['total']}',
                        Icons.people,
                        Colors.white,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Actifs',
                        '${_clientsStats['active']}',
                        Icons.check_circle,
                        Colors.green,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'SignalÃ©s',
                        '${_clientsStats['flagged']}',
                        Icons.flag,
                        Colors.red,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Nouveaux/mois',
                        '${_clientsStats['newThisMonth']}',
                        Icons.trending_up,
                        Colors.amber,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: _buildStatCard(
                        'DÃ©penses totales',
                        '${_clientsStats['totalSpent']}â‚¬',
                        Icons.euro,
                        Colors.amber,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Panier moyen',
                        '${_clientsStats['avgProjectValue']}â‚¬',
                        Icons.shopping_cart,
                        Colors.green,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Satisfaction',
                        '${_clientsStats['avgSatisfaction']}/5',
                        Icons.star,
                        Colors.amber,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Projets actifs',
                        '${_clientsStats['projectsInProgress']}',
                        Icons.work,
                        Colors.blue,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),

          // Onglets
          TabBar(
            controller: _tabController,
            labelColor: Colors.blue,
            unselectedLabelColor: Colors.grey,
            indicatorColor: Colors.blue,
            isScrollable: true,
            labelStyle: const TextStyle(fontFamily: 'Roboto'), // AJOUTÃ‰: Roboto pour les onglets
            unselectedLabelStyle: const TextStyle(fontFamily: 'Roboto'), // AJOUTÃ‰: Roboto pour les onglets
            tabs: const [
              Tab(text: 'Vue d\'ensemble'),
              Tab(text: 'Liste complÃ¨te'),
              Tab(text: 'Comportements'),
              Tab(text: 'Signalements'),
              Tab(text: 'Support Client'),
            ],
          ),

          // Contenu des onglets
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildOverviewTab(),
                _buildCompleteListTab(),
                _buildBehaviorTab(),
                _buildReportsTab(),
                _buildSupportTab(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.15),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les valeurs
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 9,
              fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les labels
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildOverviewTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Actions rapides
          Row(
            children: [
              Expanded(
                child: _buildQuickActionCard(
                  'Notifications clients',
                  'Campagne marketing',
                  Icons.campaign,
                  Colors.blue,
                  () {
                    // Navigation vers notifications clients
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickActionCard(
                  'Analyse comportements',
                  'Patterns d\'usage',
                  Icons.analytics,
                  Colors.purple,
                  () {
                    // Navigation vers analytics
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickActionCard(
                  'Rapports dÃ©taillÃ©s',
                  'Export donnÃ©es clients',
                  Icons.assessment,
                  Colors.green,
                  () {
                    // Navigation vers rapports
                  },
                ),
              ),
            ],
          ),

          const SizedBox(height: 24),

          // Alertes importantes
          _buildAlertsSection(),

          const SizedBox(height: 24),

          // Derniers clients inscrits
          const Text(
            'Derniers clients inscrits',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker', // GARDÃ‰: PermanentMarker pour les titres
            ),
          ),
          const SizedBox(height: 12),

          ..._recentClients.map((client) => _buildClientCard(client)).toList(),

          const SizedBox(height: 24),

          // MÃ©triques et tendances
          _buildTrendsSection(),
        ],
      ),
    );
  }

  Widget _buildQuickActionCard(
    String title,
    String subtitle,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return Card(
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: color,
                  fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les actions
                ),
                textAlign: TextAlign.center,
              ),
              Text(
                subtitle,
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 11,
                  fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les descriptions
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAlertsSection() {
    return Column(
      children: [
        if (_clientsStats['reportedByPros'] > 0)
          Container(
            padding: const EdgeInsets.all(16),
            margin: const EdgeInsets.only(bottom: 12),
            decoration: BoxDecoration(
              color: Colors.red.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.red.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.report_problem, color: Colors.red),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Clients signalÃ©s par les tatoueurs',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les alertes
                        ),
                      ),
                      Text(
                        '${_clientsStats['reportedByPros']} clients ont Ã©tÃ© signalÃ©s par des tatoueurs - intervention requise',
                        style: const TextStyle(
                          fontSize: 12,
                          fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les descriptions
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton(
                  onPressed: () => _tabController.animateTo(3),
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                  child: const Text(
                    'Traiter', 
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les boutons
                    ),
                  ),
                ),
              ],
            ),
          ),
        if (_clientsStats['autoFlagged'] > 0)
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.orange.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.auto_fix_high, color: Colors.orange),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Comptes auto-flaggÃ©s',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les alertes
                        ),
                      ),
                      Text(
                        '${_clientsStats['autoFlagged']} comptes dÃ©tectÃ©s avec comportement suspect (prix trop bas, messages inappropriÃ©s)',
                        style: const TextStyle(
                          fontSize: 12,
                          fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les descriptions
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton(
                  onPressed: () => _tabController.animateTo(2),
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                  child: const Text(
                    'Analyser', 
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les boutons
                    ),
                  ),
                ),
              ],
            ),
          ),
      ],
    );
  }

  Widget _buildClientCard(Map<String, dynamic> client) {
    Color statusColor = client['status'] == 'active' ? Colors.green : 
                       client['status'] == 'flagged' ? Colors.red : Colors.orange;
    
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor: statusColor.withOpacity(0.2),
          child: Icon(
            client['isVerified'] ? Icons.verified_user : Icons.person,
            color: statusColor,
          ),
        ),
        title: Text(
          client['name'],
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les noms
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${client['email']} â€¢ ${client['age']} ans â€¢ ${client['location']}',
              style: const TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
            ),
            const SizedBox(height: 4),
            Row(
              children: [
                _buildChip(
                  '${client['projectsCount']} projets',
                  Colors.blue,
                ),
                const SizedBox(width: 8),
                _buildChip(
                  '${client['totalSpent']}â‚¬ dÃ©pensÃ©s',
                  Colors.green,
                ),
                const SizedBox(width: 8),
                if (client['reportsCount'] > 0)
                  _buildChip(
                    'âš ï¸ ${client['reportsCount']} signalements',
                    Colors.red,
                  ),
                if (client['satisfactionScore'] > 0)
                  _buildChip(
                    '${client['satisfactionScore']}/5 â­',
                    Colors.amber,
                  ),
              ],
            ),
          ],
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // MÃ©triques dÃ©taillÃ©es
                Row(
                  children: [
                    Expanded(
                      child: _buildDetailMetric(
                        'Panier moyen',
                        '${client['avgProjectValue']}â‚¬',
                        Icons.shopping_cart,
                      ),
                    ),
                    Expanded(
                      child: _buildDetailMetric(
                        'Projets terminÃ©s',
                        '${client['completedProjects']}/${client['projectsCount']}',
                        Icons.check_circle,
                      ),
                    ),
                    Expanded(
                      child: _buildDetailMetric(
                        'DerniÃ¨re activitÃ©',
                        '${DateTime.now().difference(client['lastActivity']).inDays}j',
                        Icons.schedule,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 12),
                
                // Styles prÃ©fÃ©rÃ©s
                if (client['favoriteStyles'] != null && client['favoriteStyles'].isNotEmpty)
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Styles prÃ©fÃ©rÃ©s:',
                          style: TextStyle(
                            fontSize: 12, 
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Roboto', // CHANGÃ‰: Roboto
                          ),
                        ),
                        const SizedBox(height: 4),
                        Wrap(
                          spacing: 4,
                          children: client['favoriteStyles']
                              .map<Widget>((style) => _buildChip(style, Colors.purple))
                              .toList(),
                        ),
                      ],
                    ),
                  ),
                
                const SizedBox(height: 16),
                
                // Actions
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _viewClientDetails(client),
                        icon: const Icon(Icons.visibility, size: 16),
                        label: const Text(
                          'DÃ©tails',
                          style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                        ),
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _viewClientProjects(client),
                        icon: const Icon(Icons.work, size: 16),
                        label: const Text(
                          'Projets',
                          style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                        ),
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                      ),
                    ),
                    const SizedBox(width: 8),
                    if (client['reportsCount'] > 0)
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _handleClientReports(client),
                          icon: const Icon(Icons.warning, size: 16),
                          label: const Text(
                            'Signalements',
                            style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                          ),
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                        ),
                      )
                    else
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _suspendClient(client),
                          icon: const Icon(Icons.block, size: 16),
                          label: const Text(
                            'Suspendre',
                            style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                          ),
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                        ),
                      ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChip(String text, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 10,
          fontWeight: FontWeight.bold,
          fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les chips
        ),
      ),
    );
  }

  Widget _buildDetailMetric(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.grey[600], size: 20),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les valeurs
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 10,
            color: Colors.grey[600],
            fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les labels
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildTrendsSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Tendances et insights clients',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                fontFamily: 'PermanentMarker', // GARDÃ‰: PermanentMarker pour les titres
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Analytics avancÃ©es disponibles :\n'
              'â€¢ Ã‰volution des inscriptions par rÃ©gion\n'
              'â€¢ Analyse des paniers moyens\n'
              'â€¢ Taux de conversion projet â†’ rÃ©alisation\n'
              'â€¢ Styles de tatouage les plus demandÃ©s\n'
              'â€¢ Satisfaction par tranche d\'Ã¢ge\n'
              'â€¢ DÃ©tection de comportements suspects\n'
              'â€¢ PrÃ©diction de churn client',
              style: TextStyle(
                color: Colors.grey[600],
                fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les listes
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCompleteListTab() {
    return const Center(
      child: Text(
        'Liste complÃ¨te des clients avec filtres avancÃ©s et recherche',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  Widget _buildBehaviorTab() {
    return const Center(
      child: Text(
        'Analyse des comportements clients et dÃ©tection d\'anomalies',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  Widget _buildReportsTab() {
    return const Center(
      child: Text(
        'Gestion des signalements clients et modÃ©ration',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  Widget _buildSupportTab() {
    return const Center(
      child: Text(
        'Interface support client et gestion des rÃ©clamations',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  void _viewClientDetails(Map<String, dynamic> client) {
    // Navigation vers la page dÃ©taillÃ©e du client
  }

  void _viewClientProjects(Map<String, dynamic> client) {
    // Voir tous les projets du client
  }

  void _handleClientReports(Map<String, dynamic> client) {
    // Gestion des signalements du client
  }

  void _suspendClient(Map<String, dynamic> client) {
    // Dialog de confirmation de suspension
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\flashs\admin_flash_reservations_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminFlashReservationsPage extends StatelessWidget {
  const AdminFlashReservationsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'RÃ©servations de Flashs',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'Visualisation des flashs rÃ©servÃ©s pendant les conventions.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\flashs\flash_minute_monitoring_page.dart

// lib/pages/admin/flashs/flash_minute_monitoring_page.dart

import 'package:flutter/material.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../models/user_role.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/flash/flash.dart';

class FlashMinuteMonitoringPage extends StatefulWidget {
  const FlashMinuteMonitoringPage({Key? key}) : super(key: key);

  @override
  State<FlashMinuteMonitoringPage> createState() => _FlashMinuteMonitoringPageState();
}

class _FlashMinuteMonitoringPageState extends State<FlashMinuteMonitoringPage>
    with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = true;

  // Services
  SecureAuthService get _authService => SecureAuthService.instance;

  // DonnÃ©es
  List<Flash> _activeFlashMinute = [];
  List<Flash> _expiredFlashMinute = [];
  List<Flash> _suspiciousActivity = [];

  // Statistiques temps rÃ©el
  int _activeCount = 0;
  int _totalCreatedToday = 0;
  int _totalBookedToday = 0;
  double _averageDiscountPercent = 0.0;
  double _conversionRate = 0.0;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _initializePage();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _initializePage() async {
    // VÃ©rifier les privilÃ¨ges admin
    if (_authService.currentUserRole != UserRole.admin) {
      Navigator.of(context).pushReplacementNamed('/admin/dashboard');
      return;
    }

    await _loadMonitoringData();
    setState(() {
      _isLoading = false;
    });
  }

  Future<void> _loadMonitoringData() async {
    try {
      // Simuler chargement donnÃ©es
      await Future.delayed(const Duration(milliseconds: 800));
      
      setState(() {
        _activeFlashMinute = _generateActiveFlashMinute();
        _expiredFlashMinute = _generateExpiredFlashMinute();
        _suspiciousActivity = _generateSuspiciousActivity();
        
        // Calculer statistiques
        _activeCount = _activeFlashMinute.length;
        _totalCreatedToday = 28;
        _totalBookedToday = 15;
        _averageDiscountPercent = 32.5;
        _conversionRate = 53.6;
      });
    } catch (e) {
      print('Erreur chargement monitoring Flash Minute: $e');
    }
  }

  List<Flash> _generateActiveFlashMinute() {
    return [
      Flash(
        id: 'minute_1',
        title: 'Rose Minimaliste',
        description: 'Rose simple pour poignet - Offre last-minute',
        imageUrl: 'https://example.com/rose.jpg',
        tattooArtistId: 'artist_123',
        tattooArtistName: 'Sophie Martin',
        studioName: 'Ink & Roses Studio',
        style: 'Minimaliste',
        size: '8x6cm',
        sizeDescription: 'Parfait pour poignet',
        price: 150.0,
        discountedPrice: 100.0,
        availableTimeSlots: [DateTime.parse('2025-01-15T16:00:00')],
        isMinuteFlash: true,
        minuteFlashDeadline: DateTime.now().add(const Duration(hours: 4)),
        urgencyReason: 'CrÃ©neau libÃ©rÃ© derniÃ¨re minute',
        flashType: FlashType.minute,
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(hours: 2)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 2)),
        views: 45,
        qualityScore: 4.7,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
      ),
      Flash(
        id: 'minute_2',
        title: 'Papillon Aquarelle',
        description: 'Papillon colorÃ© - Promo flash',
        imageUrl: 'https://example.com/butterfly.jpg',
        tattooArtistId: 'artist_456',
        tattooArtistName: 'Emma Rousseau',
        studioName: 'Watercolor Tattoo',
        style: 'Aquarelle',
        size: '10x8cm',
        sizeDescription: 'Couleurs vives',
        price: 220.0,
        discountedPrice: 150.0,
        availableTimeSlots: [DateTime.parse('2025-01-15T18:00:00')],
        isMinuteFlash: true,
        minuteFlashDeadline: DateTime.now().add(const Duration(hours: 6)),
        urgencyReason: 'Annulation client',
        flashType: FlashType.minute,
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(hours: 1)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 1)),
        views: 67,
        qualityScore: 4.5,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
      ),
      Flash(
        id: 'minute_3',
        title: 'GÃ©omÃ©trique Simple',
        description: 'Motif gÃ©omÃ©trique avant-bras',
        imageUrl: 'https://example.com/geometric.jpg',
        tattooArtistId: 'artist_789',
        tattooArtistName: 'Alex Dubois',
        studioName: 'Sacred Geometry Tattoo',
        style: 'GÃ©omÃ©trique',
        size: '12x4cm',
        sizeDescription: 'LinÃ©aire et prÃ©cis',
        price: 180.0,
        discountedPrice: 130.0,
        availableTimeSlots: [DateTime.parse('2025-01-16T10:00:00')],
        isMinuteFlash: true,
        minuteFlashDeadline: DateTime.now().add(const Duration(hours: 22)),
        urgencyReason: 'Fin de journÃ©e disponible',
        flashType: FlashType.minute,
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(minutes: 45)),
        updatedAt: DateTime.now().subtract(const Duration(minutes: 45)),
        views: 23,
        qualityScore: 4.3,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
      ),
    ];
  }

  List<Flash> _generateExpiredFlashMinute() {
    return [
      Flash(
        id: 'expired_1',
        title: 'Dragon Minimaliste',
        description: 'Dragon simple - ExpirÃ© sans rÃ©servation',
        imageUrl: 'https://example.com/dragon_mini.jpg',
        tattooArtistId: 'artist_111',
        tattooArtistName: 'Yuki Tanaka',
        studioName: 'Tokyo Ink Studio',
        style: 'Minimaliste',
        size: '10x6cm',
        sizeDescription: 'Dragon stylisÃ© et minimaliste',
        price: 200.0,
        discountedPrice: 140.0,
        isMinuteFlash: true,
        minuteFlashDeadline: DateTime.now().subtract(const Duration(hours: 2)),
        urgencyReason: 'Slot libre imprÃ©vu',
        flashType: FlashType.minute,
        status: FlashStatus.expired,
        createdAt: DateTime.now().subtract(const Duration(hours: 8)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 8)),
        views: 34,
        bookingRequests: 0,
        qualityScore: 4.1,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
        // Note: expirationReason n'existe pas dans votre modÃ¨le
      ),
    ];
  }

  List<Flash> _generateSuspiciousActivity() {
    return [
      Flash(
        id: 'suspicious_1',
        title: 'Offre Trop Attractive',
        description: 'RÃ©duction excessive dÃ©tectÃ©e',
        imageUrl: 'https://example.com/suspicious.jpg',
        tattooArtistId: 'artist_999',
        tattooArtistName: 'Mike Suspect',
        studioName: 'Too Good Studio',
        style: 'RÃ©alisme',
        size: '15x10cm',
        sizeDescription: 'Grand format rÃ©aliste',
        price: 500.0,
        discountedPrice: 50.0,
        isMinuteFlash: true,
        minuteFlashDeadline: DateTime.now().add(const Duration(hours: 12)),
        urgencyReason: 'Promo exceptionnelle',
        flashType: FlashType.minute,
        status: FlashStatus.published, // Pas de status flagged dans votre enum
        createdAt: DateTime.now().subtract(const Duration(minutes: 30)),
        updatedAt: DateTime.now().subtract(const Duration(minutes: 30)),
        views: 120,
        bookingRequests: 15,
        qualityScore: 3.2,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
        // Note: flagReason et riskScore n'existent pas dans votre modÃ¨le
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    // Background alÃ©atoire
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[DateTime.now().millisecond % backgrounds.length];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Monitoring Flash Minute',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: true,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(bg, fit: BoxFit.cover),
          SafeArea(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : Column(
                    children: [
                      _buildRealTimeStats(),
                      _buildTabBar(),
                      Expanded(
                        child: _buildTabBarView(),
                      ),
                    ],
                  ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _loadMonitoringData,
        backgroundColor: Colors.red,
        child: const Icon(Icons.refresh, color: Colors.white),
      ),
    );
  }

  Widget _buildRealTimeStats() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(Icons.speed, color: Colors.orange),
              ),
              const SizedBox(width: 8),
              const Text(
                'Flash Minute - Temps RÃ©el',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'PermanentMarker',
                ),
              ),
              const Spacer(),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  border: Border.all(color: Colors.green),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.circle, color: Colors.green, size: 8),
                    SizedBox(width: 4),
                    Text(
                      'LIVE',
                      style: TextStyle(
                        color: Colors.green,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  'Actifs',
                  _activeCount.toString(),
                  Icons.flash_on,
                  Colors.orange,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'CrÃ©Ã©s/24h',
                  _totalCreatedToday.toString(),
                  Icons.add_circle,
                  Colors.blue,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'RÃ©servÃ©s/24h',
                  _totalBookedToday.toString(),
                  Icons.check_circle,
                  Colors.green,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  'RÃ©duction Moy.',
                  '${_averageDiscountPercent.toStringAsFixed(1)}%',
                  Icons.local_offer,
                  Colors.purple,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'Taux Conversion',
                  '${_conversionRate.toStringAsFixed(1)}%',
                  Icons.trending_up,
                  Colors.teal,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'Alertes',
                  _suspiciousActivity.length.toString(),
                  Icons.warning,
                  Colors.red,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 18),
          const SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: color,
              fontFamily: 'PermanentMarker',
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              fontSize: 9,
              color: Colors.grey,
              fontFamily: 'Roboto',
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(12),
      ),
      child: TabBar(
        controller: _tabController,
        labelColor: Colors.red,
        unselectedLabelColor: Colors.grey,
        indicatorColor: Colors.red,
        labelStyle: const TextStyle(
          fontFamily: 'PermanentMarker',
          fontSize: 11,
        ),
        tabs: [
          Tab(
            text: 'Actifs ($_activeCount)',
            icon: const Icon(Icons.flash_on, size: 18),
          ),
          Tab(
            text: 'ExpirÃ©s (${_expiredFlashMinute.length})',
            icon: const Icon(Icons.timer_off, size: 18),
          ),
          Tab(
            text: 'Alertes (${_suspiciousActivity.length})',
            icon: const Icon(Icons.warning, size: 18),
          ),
        ],
      ),
    );
  }

  Widget _buildTabBarView() {
    return TabBarView(
      controller: _tabController,
      children: [
        _buildActiveFlashList(),
        _buildExpiredFlashList(),
        _buildSuspiciousActivityList(),
      ],
    );
  }

  Widget _buildActiveFlashList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _activeFlashMinute.length,
      itemBuilder: (context, index) {
        final flash = _activeFlashMinute[index];
        return _buildFlashMinuteCard(flash, 'active');
      },
    );
  }

  Widget _buildExpiredFlashList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _expiredFlashMinute.length,
      itemBuilder: (context, index) {
        final flash = _expiredFlashMinute[index];
        return _buildFlashMinuteCard(flash, 'expired');
      },
    );
  }

  Widget _buildSuspiciousActivityList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _suspiciousActivity.length,
      itemBuilder: (context, index) {
        final flash = _suspiciousActivity[index];
        return _buildFlashMinuteCard(flash, 'suspicious');
      },
    );
  }

  Widget _buildFlashMinuteCard(Flash flash, String type) {
    final timeLeft = flash.minuteFlashDeadline?.difference(DateTime.now());
    final isExpired = timeLeft == null || timeLeft.isNegative;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        border: type == 'suspicious' 
            ? Border.all(color: Colors.red, width: 2)
            : null,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Container(
                    width: 60,
                    height: 60,
                    color: Colors.grey[300],
                    child: const Icon(Icons.image, color: Colors.grey),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              flash.title,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                fontFamily: 'PermanentMarker',
                              ),
                            ),
                          ),
                          if (type == 'active')
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: Colors.orange,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: const Text(
                                'âš¡ FLASH',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                  fontFamily: 'Roboto',
                                ),
                              ),
                            )
                          else if (type == 'suspicious')
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: Colors.red,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: const Text(
                                'âš ï¸ ALERTE',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                  fontFamily: 'Roboto',
                                ),
                              ),
                            ),
                        ],
                      ),
                      Text(
                        'Par ${flash.tattooArtistName}',
                        style: const TextStyle(
                          color: Colors.grey,
                          fontFamily: 'Roboto',
                        ),
                      ),
                      Row(
                        children: [
                          Text(
                            '${flash.price.toStringAsFixed(0)}â‚¬',
                            style: const TextStyle(
                              decoration: TextDecoration.lineThrough,
                              color: Colors.grey,
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                          ),
                          const SizedBox(width: 8),
                          Text(
                            '${flash.discountedPrice?.toStringAsFixed(0)}â‚¬',
                            style: const TextStyle(
                              color: Colors.red,
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                              fontFamily: 'PermanentMarker',
                            ),
                          ),
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                            decoration: BoxDecoration(
                              color: Colors.red.withOpacity(0.1),
                              border: Border.all(color: Colors.red),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              '-${flash.discountPercentage?.toStringAsFixed(0) ?? '30'}%',
                              style: const TextStyle(
                                color: Colors.red,
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                fontFamily: 'Roboto',
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            if (!isExpired && type == 'active')
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.timer, color: Colors.orange, size: 16),
                    const SizedBox(width: 8),
                    Text(
                      'Expire dans ${_formatTimeLeft(timeLeft!)}',
                      style: const TextStyle(
                        color: Colors.orange,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              )
            else if (type == 'expired')
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.grey.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Row(
                  children: [
                    Icon(Icons.timer_off, color: Colors.grey, size: 16),
                    SizedBox(width: 8),
                    Text(
                      'ExpirÃ©: Temps Ã©coulÃ©', // Valeur fixe car expirationReason n'existe pas
                      style: TextStyle(
                        color: Colors.grey,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              )
            else if (type == 'suspicious')
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red.withOpacity(0.3)),
                ),
                child: const Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.warning, color: Colors.red, size: 16),
                        SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'RÃ©duction supÃ©rieure Ã  80% - ActivitÃ© suspecte', // Valeur fixe
                            style: TextStyle(
                              color: Colors.red,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ),
                      ],
                    ),
                    Text(
                      'Score de risque: 9.2/10', // Valeur fixe car riskScore n'existe pas
                      style: TextStyle(
                        color: Colors.red,
                        fontSize: 12,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              ),
            
            const SizedBox(height: 12),
            
            // Statistiques
            Row(
              children: [
                _buildMiniStat('ðŸ‘ï¸', '${flash.views}', 'vues'),
                const SizedBox(width: 16),
                _buildMiniStat('ðŸ“…', '${flash.bookingRequests}', 'demandes'),
                const SizedBox(width: 16),
                _buildMiniStat('â­', '${flash.qualityScore.toStringAsFixed(1)}', 'qualitÃ©'),
              ],
            ),
            
            if (type == 'suspicious')
              Padding(
                padding: const EdgeInsets.only(top: 12),
                child: Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _suspendFlash(flash.id),
                        icon: const Icon(Icons.pause_circle),
                        label: const Text('Suspendre'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          foregroundColor: Colors.white,
                          textStyle: const TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _investigateFlash(flash.id),
                        icon: const Icon(Icons.search),
                        label: const Text('EnquÃªter'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red,
                          foregroundColor: Colors.white,
                          textStyle: const TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildMiniStat(String emoji, String value, String label) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(emoji, style: const TextStyle(fontSize: 12)),
        const SizedBox(width: 4),
        Text(
          value,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 12,
            fontFamily: 'PermanentMarker',
          ),
        ),
        const SizedBox(width: 2),
        Text(
          label,
          style: const TextStyle(
            color: Colors.grey,
            fontSize: 10,
            fontFamily: 'Roboto',
          ),
        ),
      ],
    );
  }

  String _formatTimeLeft(Duration timeLeft) {
    if (timeLeft.inHours > 0) {
      return '${timeLeft.inHours}h ${timeLeft.inMinutes % 60}min';
    } else {
      return '${timeLeft.inMinutes}min';
    }
  }

  Future<void> _suspendFlash(String flashId) async {
    // Simuler suspension
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('â¸ï¸ Flash suspendu temporairement'),
        backgroundColor: Colors.orange,
      ),
    );
  }

  Future<void> _investigateFlash(String flashId) async {
    // Ouvrir dÃ©tails pour investigation
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Investigation Flash Minute'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('DÃ©tails de l\'investigation:'),
            SizedBox(height: 8),
            Text('â€¢ VÃ©rification historique tatoueur'),
            Text('â€¢ Analyse pattern prix'),
            Text('â€¢ ContrÃ´le qualitÃ© images'),
            Text('â€¢ Validation studio'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Fermer'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('ðŸ” Investigation lancÃ©e'),
                  backgroundColor: Colors.blue,
                ),
              );
            },
            child: const Text('Lancer Investigation'),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\flashs\moderation_flashs_page.dart

// lib/pages/admin/flashs/moderation_flashs_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/material.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../models/user_role.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/flash/flash.dart';
// TODO: CrÃ©er ce service selon votre structure
// import '../../../services/flash/flash_service.dart';

class ModerationFlashsPage extends StatefulWidget {
  const ModerationFlashsPage({Key? key}) : super(key: key);

  @override
  State<ModerationFlashsPage> createState() => _ModerationFlashsPageState();
}

class _ModerationFlashsPageState extends State<ModerationFlashsPage>
    with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = true;
  bool _isProcessing = false;

  // Services
  SecureAuthService get _authService => SecureAuthService.instance;

  // DonnÃ©es simulÃ©es pour la dÃ©monstration
  List<Flash> _pendingFlashs = [];
  List<Flash> _reportedFlashs = [];
  List<Flash> _recentlyModerated = [];

  // Statistiques
  int _totalPending = 0;
  int _totalReported = 0;
  int _validatedToday = 0;
  int _rejectedToday = 0;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _initializePage();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _initializePage() async {
    // VÃ©rifier les privilÃ¨ges admin
    if (_authService.currentUserRole != UserRole.admin) {
      Navigator.of(context).pushReplacementNamed('/admin/dashboard');
      return;
    }

    await _loadModerationData();
    setState(() {
      _isLoading = false;
    });
  }

  Future<void> _loadModerationData() async {
    try {
      // Dans un vrai projet, ces donnÃ©es viendraient de FlashService
      await Future.delayed(const Duration(milliseconds: 800));
      
      setState(() {
        _pendingFlashs = _generatePendingFlashs();
        _reportedFlashs = _generateReportedFlashs();
        _recentlyModerated = _generateRecentlyModerated();
        
        _totalPending = _pendingFlashs.length;
        _totalReported = _reportedFlashs.length;
        _validatedToday = 12;
        _rejectedToday = 3;
      });
    } catch (e) {
      print('Erreur chargement donnÃ©es modÃ©ration: $e');
    }
  }

  List<Flash> _generatePendingFlashs() {
    return [
      Flash(
        id: 'pending_1',
        title: 'Dragon Japonais',
        description: 'Tatouage dragon traditionnel japonais, style authentique',
        imageUrl: 'https://example.com/dragon.jpg',
        tattooArtistId: 'artist_123',
        tattooArtistName: 'Yuki Tanaka',
        studioName: 'Tokyo Ink Studio',
        style: 'Japonais',
        size: '15x20cm',
        sizeDescription: 'Parfait pour avant-bras ou mollet',
        price: 450.0,
        availableTimeSlots: [
          DateTime.parse('2025-01-20T14:00:00'),
          DateTime.parse('2025-01-21T10:00:00')
        ],
        status: FlashStatus.published, // Utilise votre enum
        createdAt: DateTime.now().subtract(const Duration(hours: 2)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 2)),
        qualityScore: 4.2,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
      ),
      Flash(
        id: 'pending_2',
        title: 'Rose Minimaliste',
        description: 'Rose simple et Ã©lÃ©gante pour poignet',
        imageUrl: 'https://example.com/rose.jpg',
        tattooArtistId: 'artist_456',
        tattooArtistName: 'Sophie Martin',
        studioName: 'Ink & Roses Studio',
        style: 'Minimaliste',
        size: '8x6cm',
        sizeDescription: 'IdÃ©al pour poignet ou cheville',
        price: 150.0,
        availableTimeSlots: [DateTime.parse('2025-01-22T15:00:00')],
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(hours: 4)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 4)),
        qualityScore: 4.7,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
      ),
      Flash(
        id: 'pending_3',
        title: 'GÃ©omÃ©trique Mandala',
        description: 'Mandala gÃ©omÃ©trique complexe',
        imageUrl: 'https://example.com/mandala.jpg',
        tattooArtistId: 'artist_789',
        tattooArtistName: 'Alex Dubois',
        studioName: 'Sacred Geometry Tattoo',
        style: 'GÃ©omÃ©trique',
        size: '12x12cm',
        sizeDescription: 'Motif centrÃ© parfait',
        price: 280.0,
        availableTimeSlots: [
          DateTime.parse('2025-01-23T16:00:00'),
          DateTime.parse('2025-01-24T11:00:00')
        ],
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(hours: 6)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 6)),
        qualityScore: 4.5,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
      ),
    ];
  }

  List<Flash> _generateReportedFlashs() {
    return [
      Flash(
        id: 'reported_1',
        title: 'Skull Gothic',
        description: 'TÃªte de mort style gothique',
        imageUrl: 'https://example.com/skull.jpg',
        tattooArtistId: 'artist_999',
        tattooArtistName: 'Mike Shadow',
        studioName: 'Dark Ink Studio',
        style: 'Gothique',
        size: '10x8cm',
        sizeDescription: 'Style sombre et mystÃ©rieux',
        price: 200.0,
        availableTimeSlots: [DateTime.parse('2025-01-25T14:00:00')],
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
        updatedAt: DateTime.now().subtract(const Duration(days: 1)),
        qualityScore: 3.8,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
        // Note: reportCount et reportReasons ne sont pas dans votre modÃ¨le
        // Il faudra les ajouter ou gÃ©rer les signalements diffÃ©remment
      ),
    ];
  }

  List<Flash> _generateRecentlyModerated() {
    return [
      Flash(
        id: 'moderated_1',
        title: 'Papillon Aquarelle',
        description: 'Papillon style aquarelle approuvÃ©',
        imageUrl: 'https://example.com/butterfly.jpg',
        tattooArtistId: 'artist_111',
        tattooArtistName: 'Emma Rousseau',
        studioName: 'Watercolor Tattoo',
        style: 'Aquarelle',
        size: '9x7cm',
        sizeDescription: 'Couleurs vives et fluides',
        price: 180.0,
        availableTimeSlots: [DateTime.parse('2025-01-26T13:00:00')],
        status: FlashStatus.published,
        createdAt: DateTime.now().subtract(const Duration(hours: 8)),
        updatedAt: DateTime.now().subtract(const Duration(minutes: 30)),
        qualityScore: 4.6,
        latitude: 48.8566,
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
        // Note: moderatedAt, moderatedBy, moderationAction ne sont pas dans votre modÃ¨le
        // Il faudra les ajouter ou gÃ©rer la modÃ©ration diffÃ©remment
      ),
    ];
  }

  Future<void> _moderateFlash(String flashId, String action, {String? reason}) async {
    setState(() {
      _isProcessing = true;
    });

    try {
      // Simuler traitement
      await Future.delayed(const Duration(milliseconds: 1000));

      // Dans un vrai projet, appeler FlashService.moderateFlash()
      
      if (action == 'approve') {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('âœ… Flash approuvÃ© et publiÃ©'),
            backgroundColor: Colors.green,
          ),
        );
      } else if (action == 'reject') {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('âŒ Flash rejetÃ©${reason != null ? " : $reason" : ""}'),
            backgroundColor: Colors.red,
          ),
        );
      }

      // Recharger les donnÃ©es
      await _loadModerationData();
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('âŒ Erreur: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // Background alÃ©atoire
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[DateTime.now().millisecond % backgrounds.length];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'ModÃ©ration Flashs',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: true,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(bg, fit: BoxFit.cover),
          SafeArea(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : Column(
                    children: [
                      _buildStatsHeader(),
                      _buildTabBar(),
                      Expanded(
                        child: _buildTabBarView(),
                      ),
                    ],
                  ),
          ),
          if (_isProcessing)
            Container(
              color: Colors.black54,
              child: const Center(
                child: CircularProgressIndicator(),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildStatsHeader() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          const Row(
            children: [
              Icon(Icons.admin_panel_settings, color: Colors.orange),
              SizedBox(width: 8),
              Text(
                'Centre de ModÃ©ration',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'PermanentMarker',
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  'En attente',
                  _totalPending.toString(),
                  Icons.pending_actions,
                  Colors.orange,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'SignalÃ©s',
                  _totalReported.toString(),
                  Icons.report,
                  Colors.red,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'ValidÃ©s',
                  _validatedToday.toString(),
                  Icons.check_circle,
                  Colors.green,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'RejetÃ©s',
                  _rejectedToday.toString(),
                  Icons.cancel,
                  Colors.red,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: color,
              fontFamily: 'PermanentMarker',
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              fontSize: 10,
              color: Colors.grey,
              fontFamily: 'Roboto',
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(12),
      ),
      child: TabBar(
        controller: _tabController,
        labelColor: Colors.red,
        unselectedLabelColor: Colors.grey,
        indicatorColor: Colors.red,
        labelStyle: const TextStyle(
          fontFamily: 'PermanentMarker',
          fontSize: 12,
        ),
        tabs: [
          Tab(
            text: 'En attente ($_totalPending)',
            icon: const Icon(Icons.pending_actions, size: 20),
          ),
          Tab(
            text: 'SignalÃ©s ($_totalReported)',
            icon: const Icon(Icons.report, size: 20),
          ),
          Tab(
            text: 'RÃ©cents',
            icon: const Icon(Icons.history, size: 20),
          ),
        ],
      ),
    );
  }

  Widget _buildTabBarView() {
    return TabBarView(
      controller: _tabController,
      children: [
        _buildPendingFlashsList(),
        _buildReportedFlashsList(),
        _buildRecentlyModeratedList(),
      ],
    );
  }

  Widget _buildPendingFlashsList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _pendingFlashs.length,
      itemBuilder: (context, index) {
        final flash = _pendingFlashs[index];
        return _buildFlashModerationCard(flash, 'pending');
      },
    );
  }

  Widget _buildReportedFlashsList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _reportedFlashs.length,
      itemBuilder: (context, index) {
        final flash = _reportedFlashs[index];
        return _buildFlashModerationCard(flash, 'reported');
      },
    );
  }

  Widget _buildRecentlyModeratedList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _recentlyModerated.length,
      itemBuilder: (context, index) {
        final flash = _recentlyModerated[index];
        return _buildFlashModerationCard(flash, 'moderated');
      },
    );
  }

  Widget _buildFlashModerationCard(Flash flash, String type) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Container(
                    width: 60,
                    height: 60,
                    color: Colors.grey[300],
                    child: const Icon(Icons.image, color: Colors.grey),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        flash.title,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          fontFamily: 'PermanentMarker',
                        ),
                      ),
                      Text(
                        'Par ${flash.tattooArtistName}',
                        style: const TextStyle(
                          color: Colors.grey,
                          fontFamily: 'Roboto',
                        ),
                      ),
                      Text(
                        '${flash.price.toStringAsFixed(0)}â‚¬ â€¢ ${flash.style} â€¢ ${flash.size}',
                        style: const TextStyle(
                          color: Colors.grey,
                          fontSize: 12,
                          fontFamily: 'Roboto',
                        ),
                      ),
                    ],
                  ),
                ),
                if (type == 'reported') // Simuler signalements
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.1),
                      border: Border.all(color: Colors.red),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Text(
                      '3 signalements', // Valeur simulÃ©e
                      style: TextStyle(
                        color: Colors.red,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              flash.description,
              style: const TextStyle(
                color: Colors.grey,
                fontFamily: 'Roboto',
              ),
            ),
            
            if (type == 'reported') // Simuler raisons de signalement
              Container(
                margin: const EdgeInsets.only(top: 8),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red.withOpacity(0.3)),
                ),
                child: const Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Raisons du signalement:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.red,
                        fontSize: 12,
                        fontFamily: 'Roboto',
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      'â€¢ Contenu inappropriÃ©',
                      style: TextStyle(
                        color: Colors.red,
                        fontSize: 11,
                        fontFamily: 'Roboto',
                      ),
                    ),
                    Text(
                      'â€¢ QualitÃ© douteuse',
                      style: TextStyle(
                        color: Colors.red,
                        fontSize: 11,
                        fontFamily: 'Roboto',
                      ),
                    ),
                    Text(
                      'â€¢ Plagiat possible',
                      style: TextStyle(
                        color: Colors.red,
                        fontSize: 11,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              ),
            
            const SizedBox(height: 16),
            
            if (type == 'pending' || type == 'reported')
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _moderateFlash(flash.id, 'approve'),
                      icon: const Icon(Icons.check),
                      label: const Text('Approuver'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        foregroundColor: Colors.white,
                        textStyle: const TextStyle(
                          fontFamily: 'PermanentMarker',
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _showRejectDialog(flash),
                      icon: const Icon(Icons.close),
                      label: const Text('Rejeter'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red,
                        foregroundColor: Colors.white,
                        textStyle: const TextStyle(
                          fontFamily: 'PermanentMarker',
                        ),
                      ),
                    ),
                  ),
                ],
              )
            else if (type == 'moderated')
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1), // Simuler approbation
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Row(
                  children: [
                    Icon(Icons.check_circle, color: Colors.green, size: 16),
                    SizedBox(width: 8),
                    Text(
                      'ApprouvÃ©',
                      style: TextStyle(
                        color: Colors.green,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'Roboto',
                      ),
                    ),
                    Spacer(),
                    Text(
                      'Il y a 30 min',
                      style: TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  void _showRejectDialog(Flash flash) {
    String? selectedReason;
    String customReason = '';
    
    final reasons = [
      'QualitÃ© insuffisante',
      'Contenu inappropriÃ©',
      'Violation droits d\'auteur',
      'Informations manquantes',
      'Prix incohÃ©rent',
      'Autre (prÃ©ciser)',
    ];

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: Text('Rejeter "${flash.title}"'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text('Raison du rejet:'),
              const SizedBox(height: 8),
              ...reasons.map((reason) => RadioListTile<String>(
                title: Text(reason, style: const TextStyle(fontSize: 14)),
                value: reason,
                groupValue: selectedReason,
                onChanged: (value) {
                  setDialogState(() {
                    selectedReason = value;
                  });
                },
              )),
              if (selectedReason == 'Autre (prÃ©ciser)')
                TextField(
                  decoration: const InputDecoration(
                    hintText: 'PrÃ©cisez la raison...',
                    border: OutlineInputBorder(),
                  ),
                  onChanged: (value) => customReason = value,
                  maxLines: 2,
                ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Annuler'),
            ),
            ElevatedButton(
              onPressed: selectedReason != null ? () {
                Navigator.pop(context);
                final reason = selectedReason == 'Autre (prÃ©ciser)' 
                    ? customReason 
                    : selectedReason;
                _moderateFlash(flash.id, 'reject', reason: reason);
              } : null,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              child: const Text('Rejeter'),
            ),
          ],
        ),
      ),
    );
  }

  String _getTimeAgo(DateTime dateTime) {
    final difference = DateTime.now().difference(dateTime);
    
    if (difference.inMinutes < 1) {
      return 'quelques secondes';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} min';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} h';
    } else {
      return '${difference.inDays} j';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\map_editor\admin_map_editor_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminConventionMapEditorPage extends StatelessWidget {
  const AdminConventionMapEditorPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Ã‰diteur de Plan',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'Outil dâ€™Ã©dition du plan interactif de la convention.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\organizers\admin_organizers_management_page.dart

// lib/pages/admin/organizers/admin_organizers_management_page.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:kipik_v5/services/organisateur/firebase_organisateur_service.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_admin.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/core/database_manager.dart';

class AdminOrganizersManagementPage extends StatefulWidget {
  const AdminOrganizersManagementPage({super.key});

  @override
  State<AdminOrganizersManagementPage> createState() => _AdminOrganizersManagementPageState();
}

class _AdminOrganizersManagementPageState extends State<AdminOrganizersManagementPage> 
    with TickerProviderStateMixin {
  final FirebaseOrganisateurService _organizerService = FirebaseOrganisateurService.instance;
  final TextEditingController _searchController = TextEditingController();
  
  late TabController _tabController;
  String _searchQuery = '';
  String _selectedFilter = 'all';
  bool _isLoading = true;
  
  // Statistiques
  int _totalOrganizers = 0;
  int _verifiedOrganizers = 0;
  int _totalConventions = 0;
  
  DatabaseManager get _databaseManager => DatabaseManager.instance;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _tabController.addListener(() {
      if (_tabController.indexIsChanging) {
        setState(() {
          switch (_tabController.index) {
            case 0:
              _selectedFilter = 'pending';
              break;
            case 1:
              _selectedFilter = 'verified';
              break;
            case 2:
              _selectedFilter = 'suspended';
              break;
            case 3:
            default:
              _selectedFilter = 'all';
              break;
          }
        });
      }
    });
    
    _loadStats();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _loadStats() async {
    try {
      final metrics = await _organizerService.getActivityMetrics();
      if (mounted) {
        setState(() {
          _totalOrganizers = metrics['total_organizers'] ?? 0;
          _verifiedOrganizers = metrics['verified_organizers'] ?? 0;
          _totalConventions = metrics['total_conventions'] ?? 0;
          _isLoading = false;
        });
      }
    } catch (e) {
      print('âŒ Erreur chargement stats organisateurs: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _refreshData() async {
    setState(() {
      _isLoading = true;
    });
    await _loadStats();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: KipikTheme.noir,
      appBar: CustomAppBarKipik(
        title: 'Admin Organisateurs',
        showBackButton: true,
      ),
      endDrawer: const CustomDrawerAdmin(),
      body: _isLoading
          ? Center(child: KipikTheme.loading())
          : RefreshIndicator(
              onRefresh: _refreshData,
              color: KipikTheme.rouge,
              child: KipikTheme.pageContent(
                children: [
                  const SizedBox(height: 16),
                  
                  // Titre principal style Kipik
                  Text(
                    'Gestion des Organisateurs',
                    textAlign: TextAlign.center,
                    style: KipikTheme.titleStyle.copyWith(
                      color: KipikTheme.rouge,
                    ),
                  ),
                  const SizedBox(height: 8),
                  
                  // Sous-titre
                  Text(
                    'GÃ©rez les demandes et statuts',
                    textAlign: TextAlign.center,
                    style: KipikTheme.subtitleStyle.copyWith(
                      fontSize: 14,
                      color: Colors.black54,
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  // Indicateur mode dÃ©mo avec helper
                  if (_databaseManager.isDemoMode) ...[
                    KipikTheme.demoBadge(customText: 'MODE DÃ‰MO ADMIN'),
                    const SizedBox(height: 16),
                  ],
                  
                  // Barre de recherche avec helper
                  KipikTheme.searchField(
                    controller: _searchController,
                    onChanged: (value) {
                      setState(() {
                        _searchQuery = value.toLowerCase();
                      });
                    },
                    hintText: 'Rechercher un organisateur...',
                    backgroundColor: KipikTheme.rouge.withOpacity(0.2),
                    textColor: KipikTheme.blanc,
                  ),
                  const SizedBox(height: 16),
                  
                  // Statistiques style Kipik
                  Row(
                    children: [
                      Expanded(
                        child: _buildStatCard(
                          icon: Icons.business_center,
                          title: 'Total',
                          value: '$_totalOrganizers',
                          color: KipikTheme.rouge,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _buildStatCard(
                          icon: Icons.verified,
                          title: 'VÃ©rifiÃ©s',
                          value: '$_verifiedOrganizers',
                          color: Colors.green,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _buildStatCard(
                          icon: Icons.event,
                          title: 'Conventions',
                          value: '$_totalConventions',
                          color: Colors.blue,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  
                  // Onglets style Kipik
                  Container(
                    padding: const EdgeInsets.all(4),
                    decoration: BoxDecoration(
                      color: KipikTheme.rouge.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: TabBar(
                      controller: _tabController,
                      labelColor: KipikTheme.blanc,
                      unselectedLabelColor: KipikTheme.rouge,
                      indicator: BoxDecoration(
                        color: KipikTheme.rouge,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      labelStyle: TextStyle(
                        fontFamily: KipikTheme.fontTitle,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                      unselectedLabelStyle: TextStyle(
                        fontFamily: KipikTheme.fontTitle,
                        fontSize: 12,
                      ),
                      tabs: const [
                        Tab(text: 'Attente'),
                        Tab(text: 'VÃ©rifiÃ©s'),
                        Tab(text: 'Suspendus'),
                        Tab(text: 'Tous'),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  // Liste des organisateurs
                  Expanded(
                    child: TabBarView(
                      controller: _tabController,
                      children: [
                        _buildOrganizersList('pending'),
                        _buildOrganizersList('verified'),
                        _buildOrganizersList('suspended'),
                        _buildOrganizersList('all'),
                      ],
                    ),
                  ),
                ],
              ),
            ),
    );
  }

  Widget _buildStatCard({
    required IconData icon,
    required String title,
    required String value,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.85),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Icon(icon, color: KipikTheme.blanc, size: 24),
          const SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontFamily: KipikTheme.fontTitle,
              fontSize: 18,
              color: KipikTheme.blanc,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              color: KipikTheme.blanc.withOpacity(0.7),
              fontFamily: KipikTheme.fontTitle,
              fontSize: 10,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrganizersList(String filter) {
    return StreamBuilder<QuerySnapshot>(
      stream: _getOrganizersStream(filter),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: KipikTheme.loading());
        }

        if (snapshot.hasError) {
          return KipikTheme.errorState(
            title: 'Erreur de chargement',
            message: 'Impossible de charger les organisateurs',
            onRetry: () => setState(() {}),
          );
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return KipikTheme.emptyState(
            icon: Icons.business_center_outlined,
            title: 'Aucun organisateur',
            message: _getEmptyMessage(filter),
          );
        }

        var organizers = snapshot.data!.docs;
        
        // Filtrage par recherche
        if (_searchQuery.isNotEmpty) {
          organizers = organizers.where((doc) {
            final data = doc.data() as Map<String, dynamic>;
            final name = (data['name'] ?? '').toString().toLowerCase();
            final email = (data['email'] ?? '').toString().toLowerCase();
            final company = (data['company'] ?? '').toString().toLowerCase();
            
            return name.contains(_searchQuery) || 
                   email.contains(_searchQuery) || 
                   company.contains(_searchQuery);
          }).toList();
        }

        return ListView.builder(
          physics: const AlwaysScrollableScrollPhysics(),
          itemCount: organizers.length,
          itemBuilder: (context, index) {
            final doc = organizers[index];
            final data = doc.data() as Map<String, dynamic>;
            return _buildOrganizerCard(doc.id, data);
          },
        );
      },
    );
  }

  String _getEmptyMessage(String filter) {
    switch (filter) {
      case 'pending':
        return 'Aucune demande en attente';
      case 'verified':
        return 'Aucun organisateur vÃ©rifiÃ©';
      case 'suspended':
        return 'Aucun organisateur suspendu';
      default:
        return 'Aucun organisateur inscrit';
    }
  }

  Stream<QuerySnapshot> _getOrganizersStream(String filter) {
    final collection = FirebaseFirestore.instance.collection('organizers');
    
    switch (filter) {
      case 'pending':
        return collection
            .where('isVerified', isEqualTo: false)
            .where('status', isEqualTo: 'pending')
            .orderBy('createdAt', descending: true)
            .snapshots();
      
      case 'verified':
        return collection
            .where('isVerified', isEqualTo: true)
            .where('status', isEqualTo: 'verified')
            .orderBy('createdAt', descending: true)
            .snapshots();
      
      case 'suspended':
        return collection
            .where('status', isEqualTo: 'suspended')
            .orderBy('createdAt', descending: true)
            .snapshots();
      
      case 'all':
      default:
        return collection
            .orderBy('createdAt', descending: true)
            .snapshots();
    }
  }

  Widget _buildOrganizerCard(String organizerId, Map<String, dynamic> data) {
    final status = data['status'] ?? 'pending';
    final createdAt = data['createdAt'] as Timestamp?;
    final stats = data['stats'] as Map<String, dynamic>? ?? {};

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: KipikTheme.kipikCard(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                // Avatar style Kipik
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: KipikTheme.blanc.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Center(
                    child: Text(
                      (data['name'] ?? 'O').toString().substring(0, 1).toUpperCase(),
                      style: TextStyle(
                        color: KipikTheme.blanc,
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                        fontFamily: KipikTheme.fontTitle,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                
                // Informations
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        data['name'] ?? 'Nom non dÃ©fini',
                        style: TextStyle(
                          fontSize: 16,
                          fontFamily: KipikTheme.fontTitle,
                          color: KipikTheme.blanc,
                        ),
                      ),
                      if (data['company'] != null) ...[
                        Text(
                          data['company'],
                          style: TextStyle(
                            fontSize: 14,
                            color: KipikTheme.blanc.withOpacity(0.7),
                            fontFamily: 'Roboto',
                          ),
                        ),
                      ],
                      Text(
                        data['email'] ?? 'Email non dÃ©fini',
                        style: TextStyle(
                          fontSize: 12,
                          color: KipikTheme.blanc.withOpacity(0.6),
                          fontFamily: 'Roboto',
                        ),
                      ),
                    ],
                  ),
                ),
                
                // Badge statut avec helper
                KipikTheme.statusBadge(
                  text: _getStatusText(status),
                  color: _getStatusColor(status),
                  icon: _getStatusIcon(status),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // Statistiques en ligne
            Row(
              children: [
                _buildStatChip(
                  Icons.event,
                  '${stats['totalConventions'] ?? 0}',
                  'conventions',
                ),
                const SizedBox(width: 8),
                _buildStatChip(
                  Icons.people,
                  '${stats['totalTattooers'] ?? 0}',
                  'tatoueurs',
                ),
                const SizedBox(width: 8),
                _buildStatChip(
                  Icons.euro,
                  '${stats['totalRevenue'] ?? 0}',
                  'revenus',
                ),
              ],
            ),
            
            if (createdAt != null) ...[
              const SizedBox(height: 8),
              Text(
                'Inscrit le ${_formatDate(createdAt.toDate())}',
                style: TextStyle(
                  fontSize: 11,
                  color: KipikTheme.blanc.withOpacity(0.6),
                  fontFamily: 'Roboto',
                ),
              ),
            ],
            
            // Actions
            const SizedBox(height: 12),
            _buildActionButtons(organizerId, status, data),
          ],
        ),
      ),
    );
  }

  // Helpers pour les statuts
  String _getStatusText(String status) {
    switch (status) {
      case 'verified': return 'VÃ©rifiÃ©';
      case 'suspended': return 'Suspendu';
      default: return 'Attente';
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'verified': return Colors.green;
      case 'suspended': return Colors.red;
      default: return Colors.orange;
    }
  }

  IconData _getStatusIcon(String status) {
    switch (status) {
      case 'verified': return Icons.check_circle;
      case 'suspended': return Icons.block;
      default: return Icons.hourglass_empty;
    }
  }

  Widget _buildStatChip(IconData icon, String value, String label) {
    return Expanded(
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 4),
        decoration: BoxDecoration(
          color: KipikTheme.blanc.withOpacity(0.2),
          borderRadius: BorderRadius.circular(6),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 12, color: KipikTheme.blanc),
            const SizedBox(width: 4),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    value,
                    style: TextStyle(
                      fontSize: 11,
                      fontFamily: KipikTheme.fontTitle,
                      color: KipikTheme.blanc,
                    ),
                  ),
                  Text(
                    label,
                    style: TextStyle(
                      fontSize: 9,
                      color: KipikTheme.blanc.withOpacity(0.7),
                      fontFamily: 'Roboto',
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButtons(String organizerId, String status, Map<String, dynamic> data) {
    return Row(
      children: [
        if (status == 'pending') ...[
          Expanded(
            child: ElevatedButton.icon(
              onPressed: () => _verifyOrganizer(organizerId),
              icon: const Icon(Icons.check, size: 14),
              label: Text(
                'VÃ©rifier',
                style: TextStyle(fontFamily: KipikTheme.fontTitle, fontSize: 12),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: KipikTheme.blanc,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.symmetric(vertical: 8),
              ),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: OutlinedButton.icon(
              onPressed: () => _showSuspendDialog(organizerId),
              icon: const Icon(Icons.close, size: 14),
              label: Text(
                'Refuser',
                style: TextStyle(fontFamily: KipikTheme.fontTitle, fontSize: 12),
              ),
              style: OutlinedButton.styleFrom(
                foregroundColor: KipikTheme.blanc,
                side: BorderSide(color: KipikTheme.blanc),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.symmetric(vertical: 8),
              ),
            ),
          ),
        ] else if (status == 'verified') ...[
          Expanded(
            child: OutlinedButton.icon(
              onPressed: () => _showSuspendDialog(organizerId),
              icon: const Icon(Icons.pause, size: 14),
              label: Text(
                'Suspendre',
                style: TextStyle(fontFamily: KipikTheme.fontTitle, fontSize: 12),
              ),
              style: OutlinedButton.styleFrom(
                foregroundColor: KipikTheme.blanc,
                side: BorderSide(color: KipikTheme.blanc),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.symmetric(vertical: 8),
              ),
            ),
          ),
        ] else if (status == 'suspended') ...[
          Expanded(
            child: ElevatedButton.icon(
              onPressed: () => _verifyOrganizer(organizerId),
              icon: const Icon(Icons.restore, size: 14),
              label: Text(
                'RÃ©activer',
                style: TextStyle(fontFamily: KipikTheme.fontTitle, fontSize: 12),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: KipikTheme.blanc,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.symmetric(vertical: 8),
              ),
            ),
          ),
        ],
        const SizedBox(width: 8),
        IconButton(
          onPressed: () => _showOrganizerDetails(organizerId, data),
          icon: Icon(Icons.more_vert, color: KipikTheme.blanc),
          style: IconButton.styleFrom(
            backgroundColor: KipikTheme.blanc.withOpacity(0.2),
          ),
        ),
      ],
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
  }

  Future<void> _verifyOrganizer(String organizerId) async {
    try {
      await _organizerService.verifyOrganizer(organizerId);
      
      if (mounted) {
        KipikTheme.showSuccessSnackBar(context, 'Organisateur vÃ©rifiÃ© avec succÃ¨s');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur: $e');
      }
    }
  }

  Future<void> _showSuspendDialog(String organizerId) async {
    final reasonController = TextEditingController();
    
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        title: Text(
          'Suspendre l\'organisateur',
          style: TextStyle(
            fontFamily: KipikTheme.fontTitle,
            color: KipikTheme.rouge,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Voulez-vous vraiment suspendre cet organisateur ?',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: reasonController,
              decoration: InputDecoration(
                labelText: 'Raison de la suspension',
                labelStyle: const TextStyle(fontFamily: 'Roboto'),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: KipikTheme.rouge),
                ),
              ),
              maxLines: 3,
              style: const TextStyle(fontFamily: 'Roboto'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text(
              'Annuler',
              style: TextStyle(
                color: Colors.grey,
                fontFamily: KipikTheme.fontTitle,
              ),
            ),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: Text(
              'Suspendre',
              style: TextStyle(
                fontFamily: KipikTheme.fontTitle,
                color: KipikTheme.blanc,
              ),
            ),
          ),
        ],
      ),
    );

    if (result == true) {
      try {
        await _organizerService.suspendOrganizer(
          organizerId,
          reasonController.text.isNotEmpty 
              ? reasonController.text 
              : 'Suspension administrative',
        );
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Organisateur suspendu',
                style: TextStyle(fontFamily: KipikTheme.fontTitle),
              ),
              backgroundColor: Colors.orange,
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          KipikTheme.showErrorSnackBar(context, 'Erreur: $e');
        }
      }
    }
    
    reasonController.dispose();
  }

  void _showOrganizerDetails(String organizerId, Map<String, dynamic> data) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) => Container(
          decoration: BoxDecoration(
            color: KipikTheme.blanc,
            borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          ),
          child: Column(
            children: [
              // Handle style Kipik
              Container(
                width: 40,
                height: 4,
                margin: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              
              Expanded(
                child: ListView(
                  controller: scrollController,
                  padding: const EdgeInsets.all(20),
                  children: [
                    Text(
                      'DÃ©tails Organisateur',
                      style: TextStyle(
                        fontSize: 24,
                        fontFamily: KipikTheme.fontTitle,
                        color: KipikTheme.rouge,
                      ),
                    ),
                    const SizedBox(height: 20),
                    
                    _buildDetailSection('Informations gÃ©nÃ©rales', [
                      _buildDetailRow('Nom', data['name'] ?? 'Non dÃ©fini'),
                      _buildDetailRow('Email', data['email'] ?? 'Non dÃ©fini'),
                      _buildDetailRow('TÃ©lÃ©phone', data['phone'] ?? 'Non dÃ©fini'),
                      _buildDetailRow('Entreprise', data['company'] ?? 'Non dÃ©fini'),
                      _buildDetailRow('Statut', data['status'] ?? 'pending'),
                      _buildDetailRow('VÃ©rifiÃ©', (data['isVerified'] ?? false) ? 'Oui' : 'Non'),
                    ]),
                    
                    const SizedBox(height: 20),
                    
                    _buildDetailSection('Statistiques', [
                      _buildDetailRow('Total conventions', '${(data['stats'] ?? {})['totalConventions'] ?? 0}'),
                      _buildDetailRow('Total tatoueurs', '${(data['stats'] ?? {})['totalTattooers'] ?? 0}'),
                      _buildDetailRow('Total visiteurs', '${(data['stats'] ?? {})['totalVisitors'] ?? 0}'),
                      _buildDetailRow('Revenus totaux', '${(data['stats'] ?? {})['totalRevenue'] ?? 0}â‚¬'),
                    ]),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDetailSection(String title, List<Widget> children) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            fontSize: 18,
            fontFamily: KipikTheme.fontTitle,
            color: KipikTheme.rouge,
          ),
        ),
        const SizedBox(height: 12),
        Container(
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey[300]!),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(children: children),
        ),
      ],
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Colors.grey[200]!),
        ),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: TextStyle(
                fontFamily: KipikTheme.fontTitle,
                fontSize: 12,
                color: Colors.black54,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontFamily: 'Roboto',
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\pros\admin_pros_management_page.dart

// lib/pages/admin/pros/admin_pros_management_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class AdminProsManagementPage extends StatefulWidget {
  const AdminProsManagementPage({Key? key}) : super(key: key);

  @override
  State<AdminProsManagementPage> createState() => _AdminProsManagementPageState();
}

class _AdminProsManagementPageState extends State<AdminProsManagementPage> with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = false;

  // DonnÃ©es simulÃ©es (Ã  remplacer par de vraies donnÃ©es)
  List<Map<String, dynamic>> _recentPros = [
    {
      'name': 'Studio Ink Paris',
      'owner': 'Marie Dubois',
      'email': 'marie@studioink.com',
      'phone': '06 12 34 56 78',
      'subscriptionType': 'annual',
      'registrationDate': DateTime(2025, 1, 15),
      'lastLogin': DateTime(2025, 1, 22),
      'status': 'active',
      'revenue': 948.0,
      'projectsCount': 23,
      'avgResponseTime': '1.2h',
      'quotesAccepted': 16,
      'quotesTotal': 23,
      'rating': 4.8,
      'reportsCount': 0,
    },
    {
      'name': 'Black Needle Studio',
      'owner': 'Thomas Martin',
      'email': 'thomas@blackneedle.fr',
      'phone': '06 98 76 54 32',
      'subscriptionType': 'trial',
      'registrationDate': DateTime(2025, 1, 20),
      'lastLogin': DateTime(2025, 1, 23),
      'status': 'active',
      'revenue': 0.0,
      'projectsCount': 5,
      'avgResponseTime': '4.1h',
      'quotesAccepted': 2,
      'quotesTotal': 5,
      'rating': 4.2,
      'reportsCount': 0,
    },
    {
      'name': 'Tattoo Express',
      'owner': 'Jean Durand',
      'email': 'jean@tattooexpress.com',
      'phone': '06 11 22 33 44',
      'subscriptionType': 'annual',
      'registrationDate': DateTime(2024, 11, 10),
      'lastLogin': DateTime(2025, 1, 20),
      'status': 'warning',
      'revenue': 1205.0,
      'projectsCount': 45,
      'avgResponseTime': '8.5h',
      'quotesAccepted': 20,
      'quotesTotal': 45,
      'rating': 3.2,
      'reportsCount': 3,
    },
  ];

  Map<String, dynamic> _prosStats = {
    'total': 89,
    'active': 76,
    'trial': 13,
    'suspended': 2,
    'newThisMonth': 12,
    'totalRevenue': 8940.0,
    'avgResponseTime': 2.4,
    'avgQuoteAcceptance': 68.5,
    'avgRating': 4.3,
    'reportedAccounts': 2,
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Gestion Tatoueurs Pros',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: true,
      ),
      body: Column(
        children: [
          // Header avec statistiques
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
            child: Column(
              children: [
                Row(
                  children: [
                    Expanded(
                      child: _buildStatCard(
                        'Total Pros',
                        '${_prosStats['total']}',
                        Icons.brush,
                        Colors.white,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Actifs',
                        '${_prosStats['active']}',
                        Icons.check_circle,
                        Colors.green,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Essai',
                        '${_prosStats['trial']}',
                        Icons.hourglass_empty,
                        Colors.orange,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Suspendus',
                        '${_prosStats['suspended']}',
                        Icons.block,
                        Colors.red,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: _buildStatCard(
                        'Revenus totaux',
                        '${_prosStats['totalRevenue']}â‚¬',
                        Icons.euro,
                        Colors.amber,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Temps rÃ©ponse moy.',
                        '${_prosStats['avgResponseTime']}h',
                        Icons.schedule,
                        Colors.blue,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Taux acceptation',
                        '${_prosStats['avgQuoteAcceptance']}%',
                        Icons.thumb_up,
                        Colors.green,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                        'Note moyenne',
                        '${_prosStats['avgRating']}/5',
                        Icons.star,
                        Colors.amber,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),

          // Onglets
          TabBar(
            controller: _tabController,
            labelColor: KipikTheme.rouge,
            unselectedLabelColor: Colors.grey,
            indicatorColor: KipikTheme.rouge,
            labelStyle: const TextStyle(fontFamily: 'Roboto'), // AJOUTÃ‰: Roboto pour les onglets
            unselectedLabelStyle: const TextStyle(fontFamily: 'Roboto'), // AJOUTÃ‰: Roboto pour les onglets
            tabs: const [
              Tab(text: 'Vue d\'ensemble'),
              Tab(text: 'Liste complÃ¨te'),
              Tab(text: 'Signalements'),
              Tab(text: 'SAV & Support'),
            ],
          ),

          // Contenu des onglets
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildOverviewTab(),
                _buildCompleteListTab(),
                _buildReportsTab(),
                _buildSupportTab(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.15),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les valeurs
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 9,
              fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les labels
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildOverviewTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Actions rapides
          Row(
            children: [
              Expanded(
                child: _buildQuickActionCard(
                  'Codes gratuits',
                  'GÃ©nÃ©rer des codes promo',
                  Icons.card_giftcard,
                  Colors.green,
                  () {
                    Navigator.pushNamed(context, '/admin/free-codes');
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickActionCard(
                  'Notifications',
                  'Envoyer aux tatoueurs',
                  Icons.notifications,
                  Colors.blue,
                  () {
                    // Navigation vers notifications
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickActionCard(
                  'Rapports',
                  'Exporter les donnÃ©es',
                  Icons.assessment,
                  Colors.purple,
                  () {
                    // Navigation vers rapports
                  },
                ),
              ),
            ],
          ),

          const SizedBox(height: 24),

          // Derniers inscrits
          const Text(
            'Derniers tatoueurs inscrits',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker', // GARDÃ‰: PermanentMarker pour les titres
            ),
          ),
          const SizedBox(height: 12),

          ..._recentPros.map((pro) => _buildProCard(pro)).toList(),

          const SizedBox(height: 24),

          // Graphiques et mÃ©triques
          _buildMetricsSection(),
        ],
      ),
    );
  }

  Widget _buildQuickActionCard(
    String title,
    String subtitle,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return Card(
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: color,
                  fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les actions
                ),
                textAlign: TextAlign.center,
              ),
              Text(
                subtitle,
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 11,
                  fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les descriptions
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProCard(Map<String, dynamic> pro) {
    Color statusColor = pro['status'] == 'active' ? Colors.green : 
                       pro['status'] == 'warning' ? Colors.orange : Colors.red;
    
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor: statusColor.withOpacity(0.2),
          child: Icon(Icons.brush, color: statusColor),
        ),
        title: Text(
          pro['name'],
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les noms
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${pro['owner']} â€¢ ${pro['email']}',
              style: const TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
            ),
            const SizedBox(height: 4),
            Row(
              children: [
                _buildChip(
                  '${pro['subscriptionType']}',
                  pro['subscriptionType'] == 'annual' ? Colors.green : Colors.orange,
                ),
                const SizedBox(width: 8),
                _buildChip(
                  '${pro['projectsCount']} projets',
                  Colors.blue,
                ),
                const SizedBox(width: 8),
                _buildChip(
                  '${pro['rating']}/5 â­',
                  Colors.amber,
                ),
              ],
            ),
          ],
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // MÃ©triques dÃ©taillÃ©es
                Row(
                  children: [
                    Expanded(
                      child: _buildDetailMetric(
                        'Revenus gÃ©nÃ©rÃ©s',
                        '${pro['revenue']}â‚¬',
                        Icons.euro,
                      ),
                    ),
                    Expanded(
                      child: _buildDetailMetric(
                        'Temps de rÃ©ponse',
                        '${pro['avgResponseTime']}',
                        Icons.schedule,
                      ),
                    ),
                    Expanded(
                      child: _buildDetailMetric(
                        'Devis acceptÃ©s',
                        '${pro['quotesAccepted']}/${pro['quotesTotal']}',
                        Icons.check_circle,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                
                // Actions
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _viewProDetails(pro),
                        icon: const Icon(Icons.visibility, size: 16),
                        label: const Text(
                          'DÃ©tails',
                          style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                        ),
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _contactPro(pro),
                        icon: const Icon(Icons.message, size: 16),
                        label: const Text(
                          'Contacter',
                          style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                        ),
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                      ),
                    ),
                    const SizedBox(width: 8),
                    if (pro['reportsCount'] > 0)
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _handleReports(pro),
                          icon: const Icon(Icons.warning, size: 16),
                          label: const Text(
                            'Signalements',
                            style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                          ),
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                        ),
                      )
                    else
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _suspendPro(pro),
                          icon: const Icon(Icons.block, size: 16),
                          label: const Text(
                            'Suspendre',
                            style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
                          ),
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                        ),
                      ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChip(String text, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 10,
          fontWeight: FontWeight.bold,
          fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les chips
        ),
      ),
    );
  }

  Widget _buildDetailMetric(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.grey[600], size: 20),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les valeurs
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 10,
            color: Colors.grey[600],
            fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les labels
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildMetricsSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'MÃ©triques de performance',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                fontFamily: 'PermanentMarker', // GARDÃ‰: PermanentMarker pour les titres
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Les mÃ©triques dÃ©taillÃ©es et graphiques seront disponibles ici :\n'
              'â€¢ Ã‰volution des inscriptions\n'
              'â€¢ Taux de rÃ©tention\n'
              'â€¢ Revenus par tatoueur\n'
              'â€¢ Temps de rÃ©ponse moyens\n'
              'â€¢ Satisfaction client',
              style: TextStyle(
                color: Colors.grey[600],
                fontFamily: 'Roboto', // CHANGÃ‰: Roboto pour les listes
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCompleteListTab() {
    return const Center(
      child: Text(
        'Liste complÃ¨te des tatoueurs avec filtres et recherche',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  Widget _buildReportsTab() {
    return const Center(
      child: Text(
        'Gestion des signalements et comptes problÃ©matiques',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  Widget _buildSupportTab() {
    return const Center(
      child: Text(
        'Interface SAV et support client',
        style: TextStyle(fontFamily: 'Roboto'), // CHANGÃ‰: Roboto
      ),
    );
  }

  void _viewProDetails(Map<String, dynamic> pro) {
    // Navigation vers la page dÃ©taillÃ©e du tatoueur
  }

  void _contactPro(Map<String, dynamic> pro) {
    // Interface de contact/message
  }

  void _handleReports(Map<String, dynamic> pro) {
    // Gestion des signalements
  }

  void _suspendPro(Map<String, dynamic> pro) {
    // Dialog de confirmation de suspension
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\sponsors\admin_sponsors_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminSponsorsPage extends StatelessWidget {
  const AdminSponsorsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Gestion des Sponsors',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'Liste des sponsors et partenaires de la convention.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\stats\admin_convention_stats_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminConventionStatsPage extends StatelessWidget {
  const AdminConventionStatsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Statistiques de la Convention',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'Statistiques globales et suivis dâ€™inscriptions de la convention.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\stats\admin_push_notifications_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminPushNotificationsPage extends StatelessWidget {
  const AdminPushNotificationsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Notifications Push',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'Ici tu pourras envoyer des notifications aux utilisateurs.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\tattooers\admin_tattooers_list_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminTattooersListPage extends StatelessWidget {
  const AdminTattooersListPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Liste des Tatoueurs',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'Tous les tatoueurs enregistrÃ©s apparaÃ®tront ici.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\tattooers\admin_tattooers_profil_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';

class AdminTattooersProfilPage extends StatelessWidget {
  const AdminTattooersProfilPage({super.key});

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      appBar: const GptAppBar(
        title: 'Profil Tatoueur',
        showNotificationIcon: true,
        showBackButton: false,
      ),
      drawer: const CustomDrawerKipik(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Container(
              margin: const EdgeInsets.all(24),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                'DÃ©tails du profil dâ€™un tatoueur sÃ©lectionnÃ©.',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\users\admin_user_detail_page.dart

// lib/pages/admin/users/admin_user_detail_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class AdminUserDetailPage extends StatefulWidget {
  final String userId;
  final String userType; // 'pro', 'client', 'organizer'
  
  const AdminUserDetailPage({
    Key? key,
    required this.userId,
    required this.userType,
  }) : super(key: key);

  @override
  State<AdminUserDetailPage> createState() => _AdminUserDetailPageState();
}

class _AdminUserDetailPageState extends State<AdminUserDetailPage> with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = true;
  
  // DonnÃ©es utilisateur simulÃ©es (Ã  remplacer par API)
  Map<String, dynamic> _userData = {};
  List<Map<String, dynamic>> _transactions = [];
  List<Map<String, dynamic>> _projects = [];
  List<Map<String, dynamic>> _support_tickets = [];
  Map<String, dynamic> _userStats = {};

  final _responseController = TextEditingController();
  final _noteController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
    _loadUserData();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _responseController.dispose();
    _noteController.dispose();
    super.dispose();
  }

  Future<void> _loadUserData() async {
    // Simuler le chargement des donnÃ©es utilisateur
    await Future.delayed(const Duration(milliseconds: 800));
    
    setState(() {
      _userData = _getSimulatedUserData();
      _transactions = _getSimulatedTransactions();
      _projects = _getSimulatedProjects();
      _support_tickets = _getSimulatedSupportTickets();
      _userStats = _getSimulatedUserStats();
      _isLoading = false;
    });
  }

  Map<String, dynamic> _getSimulatedUserData() {
    switch (widget.userType) {
      case 'pro':
        return {
          'name': 'Marie Dubois',
          'email': 'marie@studioink.com',
          'phone': '06 12 34 56 78',
          'shopName': 'Studio Ink Paris',
          'registrationDate': DateTime(2024, 6, 15),
          'lastLogin': DateTime.now().subtract(const Duration(hours: 2)),
          'status': 'active',
          'subscriptionType': 'annual',
          'address': '15 rue de Rivoli, 75001 Paris',
          'siret': '12345678901234',
          'isVerified': true,
        };
      case 'client':
        return {
          'name': 'Lucas Martin',
          'email': 'lucas.martin@gmail.com',
          'phone': '06 98 76 54 32',
          'age': 28,
          'registrationDate': DateTime(2024, 8, 22),
          'lastLogin': DateTime.now().subtract(const Duration(minutes: 30)),
          'status': 'active',
          'address': '42 avenue des Champs, 69000 Lyon',
          'isVerified': true,
        };
      default:
        return {
          'name': 'EventCorp SAS',
          'email': 'contact@eventcorp.fr',
          'phone': '01 42 33 44 55',
          'organizerName': 'Jean-Pierre Moreau',
          'registrationDate': DateTime(2024, 3, 10),
          'lastLogin': DateTime.now().subtract(const Duration(days: 1)),
          'status': 'active',
          'company': 'EventCorp SAS',
          'siret': '98765432109876',
        };
    }
  }

  List<Map<String, dynamic>> _getSimulatedTransactions() {
    return [
      {
        'id': 'TXN_001',
        'date': DateTime.now().subtract(const Duration(days: 5)),
        'amount': 285.50,
        'type': 'payment',
        'description': 'Tatouage bras - Studio Ink Paris',
        'status': 'completed',
      },
      {
        'id': 'TXN_002',
        'date': DateTime.now().subtract(const Duration(days: 15)),
        'amount': 150.00,
        'type': 'payment',
        'description': 'Acompte tatouage dos',
        'status': 'completed',
      },
      {
        'id': 'TXN_003',
        'date': DateTime.now().subtract(const Duration(days: 22)),
        'amount': 320.00,
        'type': 'refund',
        'description': 'Remboursement suite annulation',
        'status': 'processed',
      },
    ];
  }

  List<Map<String, dynamic>> _getSimulatedProjects() {
    return [
      {
        'id': 'PRJ_001',
        'title': 'Tatouage bras tribal',
        'tattooist': 'Marie Dubois - Studio Ink',
        'status': 'completed',
        'amount': 285.50,
        'createdDate': DateTime.now().subtract(const Duration(days: 10)),
        'completedDate': DateTime.now().subtract(const Duration(days: 5)),
        'rating': 4.8,
      },
      {
        'id': 'PRJ_002',
        'title': 'Design dos complet',
        'tattooist': 'Thomas Martin - Black Needle',
        'status': 'in_progress',
        'amount': 850.00,
        'createdDate': DateTime.now().subtract(const Duration(days: 3)),
        'estimatedCompletion': DateTime.now().add(const Duration(days: 7)),
        'rating': null,
      },
    ];
  }

  List<Map<String, dynamic>> _getSimulatedSupportTickets() {
    return [
      {
        'id': 'SUP_001',
        'subject': 'ProblÃ¨me de paiement',
        'status': 'open',
        'priority': 'high',
        'createdDate': DateTime.now().subtract(const Duration(hours: 6)),
        'category': 'payment',
        'description': 'Impossible de finaliser le paiement pour mon projet',
        'lastResponse': DateTime.now().subtract(const Duration(hours: 2)),
      },
      {
        'id': 'SUP_002',
        'subject': 'Question sur les devis',
        'status': 'resolved',
        'priority': 'medium',
        'createdDate': DateTime.now().subtract(const Duration(days: 3)),
        'category': 'general',
        'description': 'Comment modifier un devis envoyÃ© ?',
        'resolvedDate': DateTime.now().subtract(const Duration(days: 1)),
      },
    ];
  }

  Map<String, dynamic> _getSimulatedUserStats() {
    switch (widget.userType) {
      case 'pro':
        return {
          'totalProjects': 45,
          'completedProjects': 38,
          'totalRevenue': 8420.50,
          'avgProjectValue': 185.50,
          'avgResponseTime': '2.1h',
          'customerRating': 4.6,
          'reportCount': 0,
          'subscriptionRevenue': 948.0,
        };
      case 'client':
        return {
          'totalProjects': 3,
          'completedProjects': 1,
          'totalSpent': 755.50,
          'avgProjectValue': 251.83,
          'favoriteStyles': ['Minimaliste', 'GÃ©omÃ©trique'],
          'satisfactionScore': 4.8,
          'reportCount': 0,
        };
      default:
        return {
          'totalEvents': 8,
          'activeEvents': 2,
          'totalRevenue': 45200.0,
          'avgEventSize': 65,
          'totalAttendees': 520,
          'bookingRate': 78.5,
          'avgRating': 4.6,
        };
    }
  }

  @override
  Widget build(BuildContext context) {
    Color userTypeColor = widget.userType == 'pro' ? KipikTheme.rouge :
                         widget.userType == 'client' ? Colors.blue : Colors.purple;

    return Scaffold(
      appBar: CustomAppBarKipik(
        title: 'Profil ${widget.userType == 'pro' ? 'Tatoueur' : widget.userType == 'client' ? 'Client' : 'Organisateur'}',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                // Header utilisateur
                _buildUserHeader(userTypeColor),
                
                // Onglets
                TabBar(
                  controller: _tabController,
                  labelColor: userTypeColor,
                  unselectedLabelColor: Colors.grey,
                  indicatorColor: userTypeColor,
                  isScrollable: true,
                  labelStyle: const TextStyle(fontFamily: 'Roboto'),
                  tabs: const [
                    Tab(text: 'Vue d\'ensemble'),
                    Tab(text: 'Transactions'),
                    Tab(text: 'Projets/ActivitÃ©'),
                    Tab(text: 'Support SAV'),
                    Tab(text: 'Actions Admin'),
                  ],
                ),
                
                // Contenu des onglets
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      _buildOverviewTab(),
                      _buildTransactionsTab(),
                      _buildProjectsTab(),
                      _buildSupportTab(),
                      _buildAdminActionsTab(),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildUserHeader(Color color) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [color, color.withOpacity(0.8)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: Row(
        children: [
          CircleAvatar(
            radius: 40,
            backgroundColor: Colors.white.withOpacity(0.2),
            child: Icon(
              widget.userType == 'pro' ? Icons.brush :
              widget.userType == 'client' ? Icons.person : Icons.business,
              size: 40,
              color: Colors.white,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  _userData['name'] ?? 'Nom inconnu',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 22,
                    fontWeight: FontWeight.bold,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _userData['email'] ?? '',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontFamily: 'Roboto',
                  ),
                ),
                if (widget.userType == 'pro' && _userData['shopName'] != null)
                  Text(
                    _userData['shopName'],
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                      fontFamily: 'Roboto',
                    ),
                  ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    _buildStatusChip(_userData['status'] ?? 'unknown'),
                    const SizedBox(width: 8),
                    if (_userData['isVerified'] == true)
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.green.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.green),
                        ),
                        child: const Text(
                          'VÃ©rifiÃ©',
                          style: TextStyle(
                            color: Colors.green,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Roboto',
                          ),
                        ),
                      ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatusChip(String status) {
    Color chipColor = status == 'active' ? Colors.green : 
                     status == 'suspended' ? Colors.red : Colors.orange;
    String statusText = status == 'active' ? 'Actif' :
                       status == 'suspended' ? 'Suspendu' : 'Inactif';
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: chipColor.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: chipColor),
      ),
      child: Text(
        statusText,
        style: TextStyle(
          color: chipColor,
          fontSize: 10,
          fontWeight: FontWeight.bold,
          fontFamily: 'Roboto',
        ),
      ),
    );
  }

  Widget _buildOverviewTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Statistiques principales
          const Text(
            'Statistiques principales',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker',
            ),
          ),
          const SizedBox(height: 16),
          
          _buildStatsGrid(),
          
          const SizedBox(height: 24),
          
          // Informations dÃ©taillÃ©es
          const Text(
            'Informations dÃ©taillÃ©es',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker',
            ),
          ),
          const SizedBox(height: 16),
          
          _buildDetailedInfo(),
        ],
      ),
    );
  }

  Widget _buildStatsGrid() {
    List<Widget> statItems = [];
    
    _userStats.forEach((key, value) {
      String label = _getStatLabel(key);
      String displayValue = _formatStatValue(key, value);
      
      statItems.add(
        _buildStatItem(label, displayValue, _getStatIcon(key), _getStatColor(key))
      );
    });

    return GridView.count(
      crossAxisCount: 2,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      childAspectRatio: 1.5,
      children: statItems,
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: color, size: 24),
            const SizedBox(height: 8),
            Text(
              value,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: color,
                fontFamily: 'Roboto', // Roboto pour les chiffres
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 4),
            Text(
              label,
              style: const TextStyle(
                fontSize: 11,
                fontFamily: 'Roboto',
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailedInfo() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildInfoRow('Email', _userData['email']),
            _buildInfoRow('TÃ©lÃ©phone', _userData['phone']),
            if (_userData['address'] != null)
              _buildInfoRow('Adresse', _userData['address']),
            if (_userData['siret'] != null)
              _buildInfoRow('SIRET', _userData['siret']),
            _buildInfoRow('Inscription', _formatDate(_userData['registrationDate'])),
            _buildInfoRow('DerniÃ¨re connexion', _formatDate(_userData['lastLogin'])),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String? value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontFamily: 'Roboto',
              ),
            ),
          ),
          Expanded(
            child: Text(
              value ?? 'Non renseignÃ©',
              style: const TextStyle(fontFamily: 'Roboto'),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTransactionsTab() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _transactions.length,
      itemBuilder: (context, index) {
        final transaction = _transactions[index];
        return _buildTransactionCard(transaction);
      },
    );
  }

  Widget _buildTransactionCard(Map<String, dynamic> transaction) {
    Color statusColor = transaction['status'] == 'completed' ? Colors.green :
                       transaction['status'] == 'processed' ? Colors.blue : Colors.orange;
    
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: statusColor.withOpacity(0.2),
          child: Icon(
            transaction['type'] == 'payment' ? Icons.payment : Icons.undo,
            color: statusColor,
          ),
        ),
        title: Text(
          transaction['description'],
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto',
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'ID: ${transaction['id']} â€¢ ${_formatDate(transaction['date'])}',
              style: const TextStyle(fontFamily: 'Roboto'),
            ),
            const SizedBox(height: 4),
            Text(
              transaction['status'] == 'completed' ? 'ComplÃ©tÃ©' :
              transaction['status'] == 'processed' ? 'TraitÃ©' : 'En attente',
              style: TextStyle(
                color: statusColor,
                fontWeight: FontWeight.bold,
                fontFamily: 'Roboto',
              ),
            ),
          ],
        ),
        trailing: Text(
          '${transaction['amount']}â‚¬',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: transaction['type'] == 'payment' ? Colors.green : Colors.red,
            fontFamily: 'Roboto', // Roboto pour les montants
          ),
        ),
      ),
    );
  }

  Widget _buildProjectsTab() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _projects.length,
      itemBuilder: (context, index) {
        final project = _projects[index];
        return _buildProjectCard(project);
      },
    );
  }

  Widget _buildProjectCard(Map<String, dynamic> project) {
    Color statusColor = project['status'] == 'completed' ? Colors.green :
                       project['status'] == 'in_progress' ? Colors.blue : Colors.orange;
    
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor: statusColor.withOpacity(0.2),
          child: Icon(Icons.brush, color: statusColor),
        ),
        title: Text(
          project['title'],
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto',
          ),
        ),
        subtitle: Text(
          project['tattooist'],
          style: const TextStyle(fontFamily: 'Roboto'),
        ),
        trailing: Text(
          '${project['amount']}â‚¬',
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto',
          ),
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInfoRow('ID Projet', project['id']),
                _buildInfoRow('Statut', project['status']),
                _buildInfoRow('CrÃ©Ã© le', _formatDate(project['createdDate'])),
                if (project['completedDate'] != null)
                  _buildInfoRow('TerminÃ© le', _formatDate(project['completedDate'])),
                if (project['estimatedCompletion'] != null)
                  _buildInfoRow('Estimation fin', _formatDate(project['estimatedCompletion'])),
                if (project['rating'] != null)
                  _buildInfoRow('Note client', '${project['rating']}/5 â­'),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSupportTab() {
    return Column(
      children: [
        // Nouveau ticket SAV
        Container(
          padding: const EdgeInsets.all(16),
          color: Colors.grey[50],
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'RÃ©pondre au client',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'PermanentMarker',
                ),
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _responseController,
                maxLines: 3,
                style: const TextStyle(fontFamily: 'Roboto'),
                decoration: const InputDecoration(
                  labelText: 'Votre rÃ©ponse',
                  labelStyle: TextStyle(fontFamily: 'Roboto'),
                  border: OutlineInputBorder(),
                  hintText: 'Tapez votre rÃ©ponse...',
                  hintStyle: TextStyle(fontFamily: 'Roboto'),
                ),
              ),
              const SizedBox(height: 8),
              ElevatedButton.icon(
                onPressed: _sendResponse,
                icon: const Icon(Icons.send),
                label: const Text(
                  'Envoyer la rÃ©ponse',
                  style: TextStyle(fontFamily: 'Roboto'),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        ),
        
        // Historique tickets
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: _support_tickets.length,
            itemBuilder: (context, index) {
              final ticket = _support_tickets[index];
              return _buildSupportTicketCard(ticket);
            },
          ),
        ),
      ],
    );
  }

  Widget _buildSupportTicketCard(Map<String, dynamic> ticket) {
    Color priorityColor = ticket['priority'] == 'high' ? Colors.red :
                         ticket['priority'] == 'medium' ? Colors.orange : Colors.blue;
    Color statusColor = ticket['status'] == 'resolved' ? Colors.green :
                       ticket['status'] == 'open' ? Colors.red : Colors.orange;
    
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        title: Text(
          ticket['subject'],
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontFamily: 'Roboto',
          ),
        ),
        subtitle: Row(
          children: [
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: priorityColor.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                ticket['priority'].toUpperCase(),
                style: TextStyle(
                  color: priorityColor,
                  fontSize: 10,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto',
                ),
              ),
            ),
            const SizedBox(width: 8),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: statusColor.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                ticket['status'].toUpperCase(),
                style: TextStyle(
                  color: statusColor,
                  fontSize: 10,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto',
                ),
              ),
            ),
          ],
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  ticket['description'],
                  style: const TextStyle(fontFamily: 'Roboto'),
                ),
                const SizedBox(height: 12),
                _buildInfoRow('ID Ticket', ticket['id']),
                _buildInfoRow('CatÃ©gorie', ticket['category']),
                _buildInfoRow('CrÃ©Ã© le', _formatDate(ticket['createdDate'])),
                if (ticket['resolvedDate'] != null)
                  _buildInfoRow('RÃ©solu le', _formatDate(ticket['resolvedDate'])),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAdminActionsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Actions administrateur',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker',
            ),
          ),
          const SizedBox(height: 16),
          
          // Notes administrateur
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Notes administrateur',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                  const SizedBox(height: 12),
                  TextField(
                    controller: _noteController,
                    maxLines: 4,
                    style: const TextStyle(fontFamily: 'Roboto'),
                    decoration: const InputDecoration(
                      labelText: 'Ajouter une note interne',
                      labelStyle: TextStyle(fontFamily: 'Roboto'),
                      border: OutlineInputBorder(),
                      hintText: 'Note visible uniquement par les admins...',
                      hintStyle: TextStyle(fontFamily: 'Roboto'),
                    ),
                  ),
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    onPressed: _saveNote,
                    icon: const Icon(Icons.save),
                    label: const Text(
                      'Sauvegarder la note',
                      style: TextStyle(fontFamily: 'Roboto'),
                    ),
                  ),
                ],
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Actions rapides
          const Text(
            'Actions rapides',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker',
            ),
          ),
          const SizedBox(height: 12),
          
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              _buildActionButton(
                'Contacter par email',
                Icons.email,
                Colors.blue,
                _contactUser,
              ),
              _buildActionButton(
                'Suspendre compte',
                Icons.block,
                Colors.red,
                _suspendUser,
              ),
              _buildActionButton(
                'RÃ©initialiser mot de passe',
                Icons.lock_reset,
                Colors.orange,
                _resetPassword,
              ),
              _buildActionButton(
                'Exporter donnÃ©es',
                Icons.download,
                Colors.green,
                _exportUserData,
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton(String label, IconData icon, Color color, VoidCallback onPressed) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon, size: 16),
      label: Text(
        label,
        style: const TextStyle(fontFamily: 'Roboto'),
      ),
      style: ElevatedButton.styleFrom(
        backgroundColor: color,
        foregroundColor: Colors.white,
      ),
    );
  }

  // MÃ©thodes utilitaires
  String _getStatLabel(String key) {
    final labels = {
      'totalProjects': 'Projets total',
      'completedProjects': 'Projets terminÃ©s',
      'totalRevenue': 'Revenus total',
      'totalSpent': 'DÃ©penses total',
      'avgProjectValue': 'Valeur moyenne',
      'avgResponseTime': 'Temps de rÃ©ponse',
      'customerRating': 'Note moyenne',
      'satisfactionScore': 'Satisfaction',
      'reportCount': 'Signalements',
      'subscriptionRevenue': 'Revenus abonnement',
      'totalEvents': 'Ã‰vÃ©nements total',
      'activeEvents': 'Ã‰vÃ©nements actifs',
      'avgEventSize': 'Taille moyenne',
      'totalAttendees': 'Participants total',
      'bookingRate': 'Taux rÃ©servation',
      'avgRating': 'Note moyenne',
    };
    return labels[key] ?? key;
  }

  String _formatStatValue(String key, dynamic value) {
    if (key.contains('Revenue') || key.contains('Spent') || key.contains('Value')) {
      return '${value}â‚¬';
    } else if (key.contains('Rate') || key.contains('Rating') || key.contains('Score')) {
      if (key.contains('Rate')) {
        return '${value}%';
      } else {
        return '${value}/5';
      }
    } else if (key.contains('Time')) {
      return '${value}';
    }
    return value.toString();
  }

  IconData _getStatIcon(String key) {
    if (key.contains('Revenue') || key.contains('Spent')) return Icons.euro;
    if (key.contains('Projects') || key.contains('Events')) return Icons.work;
    if (key.contains('Rating') || key.contains('Score')) return Icons.star;
    if (key.contains('Time')) return Icons.schedule;
    if (key.contains('Report')) return Icons.warning;
    return Icons.analytics;
  }

  Color _getStatColor(String key) {
    if (key.contains('Revenue') || key.contains('Spent')) return Colors.green;
    if (key.contains('Projects') || key.contains('Events')) return Colors.blue;
    if (key.contains('Rating') || key.contains('Score')) return Colors.amber;
    if (key.contains('Report')) return Colors.red;
    return Colors.purple;
  }

  String _formatDate(DateTime? date) {
    if (date == null) return 'Non renseignÃ©';
    return '${date.day}/${date.month}/${date.year} ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }

  // Actions
  void _sendResponse() {
    if (_responseController.text.trim().isNotEmpty) {
      // Logique d'envoi de rÃ©ponse
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('RÃ©ponse envoyÃ©e avec succÃ¨s')),
      );
      _responseController.clear();
    }
  }

  void _saveNote() {
    if (_noteController.text.trim().isNotEmpty) {
      // Logique de sauvegarde de note
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Note sauvegardÃ©e')),
      );
      _noteController.clear();
    }
  }

  void _contactUser() {
    // Logique de contact utilisateur
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Email envoyÃ© Ã  l\'utilisateur')),
    );
  }

  void _suspendUser() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          'Suspendre le compte',
          style: TextStyle(fontFamily: 'PermanentMarker'),
        ),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir suspendre ce compte ?',
          style: TextStyle(fontFamily: 'Roboto'),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'Annuler',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Compte suspendu')),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text(
              'Suspendre',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
        ],
      ),
    );
  }

  void _resetPassword() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Email de rÃ©initialisation envoyÃ©')),
    );
  }

  void _exportUserData() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Export des donnÃ©es en cours...')),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\admin\users\admin_user_search_page.dart

// lib/pages/admin/users/admin_user_search_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/pages/admin/users/admin_user_detail_page.dart';

class AdminUserSearchPage extends StatefulWidget {
  const AdminUserSearchPage({Key? key}) : super(key: key);

  @override
  State<AdminUserSearchPage> createState() => _AdminUserSearchPageState();
}

class _AdminUserSearchPageState extends State<AdminUserSearchPage> {
  final _searchController = TextEditingController();
  String _selectedUserType = 'all';
  List<Map<String, dynamic>> _searchResults = [];
  bool _isSearching = false;

  // DonnÃ©es simulÃ©es d'utilisateurs (Ã  remplacer par API)
  final List<Map<String, dynamic>> _allUsers = [
    {
      'id': 'pro_001',
      'name': 'Marie Dubois',
      'email': 'marie@studioink.com',
      'type': 'pro',
      'shopName': 'Studio Ink Paris',
      'status': 'active',
      'lastLogin': DateTime.now().subtract(const Duration(hours: 2)),
      'totalRevenue': 8420.50,
      'projectsCount': 45,
      'isVerified': true,
    },
    {
      'id': 'pro_002',
      'name': 'Thomas Martin',
      'email': 'thomas@blackneedle.fr',
      'type': 'pro',
      'shopName': 'Black Needle Studio',
      'status': 'active',
      'lastLogin': DateTime.now().subtract(const Duration(days: 1)),
      'totalRevenue': 5240.00,
      'projectsCount': 28,
      'isVerified': true,
    },
    {
      'id': 'client_001',
      'name': 'Lucas Martin',
      'email': 'lucas.martin@gmail.com',
      'type': 'client',
      'status': 'active',
      'lastLogin': DateTime.now().subtract(const Duration(minutes: 30)),
      'totalSpent': 755.50,
      'projectsCount': 3,
      'isVerified': true,
    },
    {
      'id': 'client_002',
      'name': 'Sophie Laurent',
      'email': 'sophie.laurent@gmail.com',
      'type': 'client',
      'status': 'active',
      'lastLogin': DateTime.now().subtract(const Duration(hours: 6)),
      'totalSpent': 1240.00,
      'projectsCount': 5,
      'isVerified': false,
    },
    {
      'id': 'organizer_001',
      'name': 'EventCorp SAS',
      'email': 'contact@eventcorp.fr',
      'type': 'organizer',
      'organizerName': 'Jean-Pierre Moreau',
      'status': 'active',
      'lastLogin': DateTime.now().subtract(const Duration(days: 2)),
      'totalRevenue': 45200.0,
      'eventsCount': 8,
      'isVerified': true,
    },
  ];

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  void _performSearch() async {
    if (_searchController.text.trim().isEmpty) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    setState(() {
      _isSearching = true;
    });

    // Simuler une recherche avec dÃ©lai
    await Future.delayed(const Duration(milliseconds: 500));

    final query = _searchController.text.toLowerCase();
    List<Map<String, dynamic>> results = _allUsers.where((user) {
      // Filtrer par type d'utilisateur si spÃ©cifiÃ©
      if (_selectedUserType != 'all' && user['type'] != _selectedUserType) {
        return false;
      }

      // Recherche dans le nom, email, shopName
      return user['name'].toLowerCase().contains(query) ||
             user['email'].toLowerCase().contains(query) ||
             (user['shopName']?.toLowerCase().contains(query) ?? false) ||
             (user['organizerName']?.toLowerCase().contains(query) ?? false);
    }).toList();

    setState(() {
      _searchResults = results;
      _isSearching = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Recherche Utilisateurs',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: SafeArea(
        child: Column(
          children: [
            // Barre de recherche
            Container(
              padding: const EdgeInsets.all(16),
              color: Colors.grey[50],
              child: Column(
                children: [
                  // Champ de recherche
                  TextField(
                    controller: _searchController,
                    style: const TextStyle(fontFamily: 'Roboto'),
                    decoration: InputDecoration(
                      labelText: 'Rechercher par nom, email, shop...',
                      labelStyle: const TextStyle(fontFamily: 'Roboto'),
                      prefixIcon: const Icon(Icons.search),
                      suffixIcon: _searchController.text.isNotEmpty
                          ? IconButton(
                              icon: const Icon(Icons.clear),
                              onPressed: () {
                                _searchController.clear();
                                _performSearch();
                              },
                            )
                          : null,
                      border: const OutlineInputBorder(),
                      hintText: 'Ex: Marie, studio@email.com, Black Needle...',
                      hintStyle: const TextStyle(fontFamily: 'Roboto'),
                    ),
                    onChanged: (value) => _performSearch(),
                  ),
                  
                  const SizedBox(height: 12),
                  
                  // Filtres par type
                  Row(
                    children: [
                      const Text(
                        'Type d\'utilisateur:',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontFamily: 'Roboto',
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Wrap(
                          spacing: 8,
                          children: [
                            _buildFilterChip('Tous', 'all'),
                            _buildFilterChip('Tatoueurs', 'pro'),
                            _buildFilterChip('Clients', 'client'),
                            _buildFilterChip('Organisateurs', 'organizer'),
                          ],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            // RÃ©sultats de recherche
            Expanded(
              child: _buildSearchResults(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFilterChip(String label, String value) {
    bool isSelected = _selectedUserType == value;
    Color chipColor = value == 'pro' ? KipikTheme.rouge :
                     value == 'client' ? Colors.blue :
                     value == 'organizer' ? Colors.purple : Colors.grey;

    return FilterChip(
      label: Text(
        label,
        style: TextStyle(
          color: isSelected ? Colors.white : chipColor,
          fontFamily: 'Roboto',
        ),
      ),
      selected: isSelected,
      onSelected: (selected) {
        setState(() {
          _selectedUserType = value;
        });
        _performSearch();
      },
      selectedColor: chipColor,
      checkmarkColor: Colors.white,
    );
  }

  Widget _buildSearchResults() {
    if (_isSearching) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }

    if (_searchController.text.trim().isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.search,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Commencez Ã  taper pour rechercher un utilisateur',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 16,
                fontFamily: 'Roboto',
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              'Recherchez par nom, email, nom de shop...',
              style: TextStyle(
                color: Colors.grey[500],
                fontSize: 14,
                fontFamily: 'Roboto',
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    if (_searchResults.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.search_off,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Aucun utilisateur trouvÃ©',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 16,
                fontFamily: 'Roboto',
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Essayez de modifier votre recherche',
              style: TextStyle(
                color: Colors.grey[500],
                fontSize: 14,
                fontFamily: 'Roboto',
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _searchResults.length,
      itemBuilder: (context, index) {
        final user = _searchResults[index];
        return _buildUserCard(user);
      },
    );
  }

  Widget _buildUserCard(Map<String, dynamic> user) {
    Color typeColor = user['type'] == 'pro' ? KipikTheme.rouge :
                     user['type'] == 'client' ? Colors.blue : Colors.purple;
    
    IconData typeIcon = user['type'] == 'pro' ? Icons.brush :
                       user['type'] == 'client' ? Icons.person : Icons.business;

    String typeLabel = user['type'] == 'pro' ? 'Tatoueur' :
                      user['type'] == 'client' ? 'Client' : 'Organisateur';

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: () => _openUserProfile(user),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // Avatar avec type
              CircleAvatar(
                radius: 30,
                backgroundColor: typeColor.withOpacity(0.2),
                child: Icon(
                  typeIcon,
                  color: typeColor,
                  size: 30,
                ),
              ),
              
              const SizedBox(width: 16),
              
              // Informations utilisateur
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            user['name'],
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'PermanentMarker',
                            ),
                          ),
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: typeColor.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(color: typeColor.withOpacity(0.3)),
                          ),
                          child: Text(
                            typeLabel,
                            style: TextStyle(
                              color: typeColor,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 4),
                    
                    Text(
                      user['email'],
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 14,
                        fontFamily: 'Roboto',
                      ),
                    ),
                    
                    const SizedBox(height: 4),
                    
                    // Informations spÃ©cifiques par type
                    if (user['type'] == 'pro') ...[
                      Text(
                        user['shopName'] ?? 'Shop non renseignÃ©',
                        style: const TextStyle(
                          fontSize: 12,
                          fontFamily: 'Roboto',
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Icon(Icons.euro, size: 14, color: Colors.green),
                          const SizedBox(width: 4),
                          Text(
                            '${user['totalRevenue']}â‚¬',
                            style: const TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                              fontFamily: 'Roboto',
                            ),
                          ),
                          const SizedBox(width: 12),
                          Icon(Icons.work, size: 14, color: Colors.blue),
                          const SizedBox(width: 4),
                          Text(
                            '${user['projectsCount']} projets',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ],
                      ),
                    ] else if (user['type'] == 'client') ...[
                      Row(
                        children: [
                          Icon(Icons.shopping_cart, size: 14, color: Colors.green),
                          const SizedBox(width: 4),
                          Text(
                            '${user['totalSpent']}â‚¬ dÃ©pensÃ©s',
                            style: const TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                              fontFamily: 'Roboto',
                            ),
                          ),
                          const SizedBox(width: 12),
                          Icon(Icons.work, size: 14, color: Colors.blue),
                          const SizedBox(width: 4),
                          Text(
                            '${user['projectsCount']} projets',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ],
                      ),
                    ] else if (user['type'] == 'organizer') ...[
                      if (user['organizerName'] != null)
                        Text(
                          'Contact: ${user['organizerName']}',
                          style: const TextStyle(
                            fontSize: 12,
                            fontFamily: 'Roboto',
                          ),
                        ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Icon(Icons.euro, size: 14, color: Colors.green),
                          const SizedBox(width: 4),
                          Text(
                            '${user['totalRevenue']}â‚¬',
                            style: const TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                              fontFamily: 'Roboto',
                            ),
                          ),
                          const SizedBox(width: 12),
                          Icon(Icons.event, size: 14, color: Colors.purple),
                          const SizedBox(width: 4),
                          Text(
                            '${user['eventsCount']} Ã©vÃ©nements',
                            style: const TextStyle(
                              fontSize: 12,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ],
                      ),
                    ],
                    
                    const SizedBox(height: 8),
                    
                    // Status et derniÃ¨re connexion
                    Row(
                      children: [
                        _buildStatusDot(user['status']),
                        const SizedBox(width: 8),
                        Text(
                          _getStatusText(user['status']),
                          style: TextStyle(
                            fontSize: 11,
                            color: _getStatusColor(user['status']),
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Roboto',
                          ),
                        ),
                        const Spacer(),
                        if (user['isVerified'] == true) ...[
                          Icon(Icons.verified, size: 14, color: Colors.green),
                          const SizedBox(width: 4),
                          const Text(
                            'VÃ©rifiÃ©',
                            style: TextStyle(
                              fontSize: 11,
                              color: Colors.green,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ],
                        const SizedBox(width: 8),
                        Text(
                          _formatLastLogin(user['lastLogin']),
                          style: const TextStyle(
                            fontSize: 11,
                            color: Colors.grey,
                            fontFamily: 'Roboto',
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              
              // FlÃ¨che d'accÃ¨s
              Icon(
                Icons.arrow_forward_ios,
                color: typeColor,
                size: 16,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatusDot(String status) {
    Color color = _getStatusColor(status);
    return Container(
      width: 8,
      height: 8,
      decoration: BoxDecoration(
        color: color,
        shape: BoxShape.circle,
      ),
    );
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'active':
        return Colors.green;
      case 'suspended':
        return Colors.red;
      case 'inactive':
        return Colors.orange;
      default:
        return Colors.grey;
    }
  }

  String _getStatusText(String status) {
    switch (status) {
      case 'active':
        return 'Actif';
      case 'suspended':
        return 'Suspendu';
      case 'inactive':
        return 'Inactif';
      default:
        return 'Inconnu';
    }
  }

  String _formatLastLogin(DateTime lastLogin) {
    final now = DateTime.now();
    final difference = now.difference(lastLogin);

    if (difference.inMinutes < 60) {
      return 'Il y a ${difference.inMinutes}min';
    } else if (difference.inHours < 24) {
      return 'Il y a ${difference.inHours}h';
    } else if (difference.inDays < 7) {
      return 'Il y a ${difference.inDays}j';
    } else {
      return '${lastLogin.day}/${lastLogin.month}/${lastLogin.year}';
    }
  }

  void _openUserProfile(Map<String, dynamic> user) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => AdminUserDetailPage(
          userId: user['id'],
          userType: user['type'],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\connexion_page.dart

// lib/pages/auth/connexion_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:kipik_v5/pages/admin/admin_dashboard_home.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/auth/recaptcha_widget.dart'; // âœ… AJOUTÃ‰
import '../../theme/kipik_theme.dart';
import '../../services/auth/secure_auth_service.dart'; // âœ… CORRECTION: Utilise SecureAuthService
import '../../services/auth/captcha_manager.dart'; // âœ… AJOUTÃ‰
import '../../services/init/firebase_init_service.dart'; // âœ… NOUVEAU: Pour init Firebase aprÃ¨s connexion
import '../../core/database_manager.dart'; // âœ… AJOUTÃ‰
import '../particulier/accueil_particulier_page.dart';
import '../pro/home_page_pro.dart'; 
import '../organisateur/organisateur_dashboard_page.dart';
import 'inscription_page.dart';
import 'forgot_password_page.dart';
import 'package:kipik_v5/models/user_role.dart' as models;

class ConnexionPage extends StatefulWidget {
  const ConnexionPage({Key? key}) : super(key: key);

  @override
  State<ConnexionPage> createState() => _ConnexionPageState();
}

class _ConnexionPageState extends State<ConnexionPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailC = TextEditingController();
  final _passC = TextEditingController();
  bool _showPassword = false;
  bool _isLoading = false;
  
  // âœ… NOUVEAU: Variables reCAPTCHA et sÃ©curitÃ©
  bool _captchaValidated = false;
  CaptchaResult? _captchaResult;
  Duration? _lockoutTime;

  // âœ… CORRECTION: Services sÃ©curisÃ©s
  SecureAuthService get _authService => SecureAuthService.instance;
  CaptchaManager get _captchaManager => CaptchaManager.instance;
  DatabaseManager get _databaseManager => DatabaseManager.instance;

  @override
  void initState() {
    super.initState();
    _initializeServices();
  }

  @override
  void dispose() {
    _emailC.dispose();
    _passC.dispose();
    super.dispose();
  }

  // âœ… NOUVEAU: Initialisation des services
  Future<void> _initializeServices() async {
    try {
      // VÃ©rifier que DatabaseManager est en mode sÃ©curisÃ©
      if (!_databaseManager.isSafeMode) {
        print('âš ï¸ DatabaseManager pas en mode sÃ©curisÃ©, rÃ©initialisation...');
        await _databaseManager.initializeSafeMode();
      }
      
      _checkLockoutStatus();
    } catch (e) {
      print('âŒ Erreur initialisation services: $e');
    }
  }

  // âœ… NOUVEAU: VÃ©rification du blocage temporaire
  void _checkLockoutStatus() {
    final lockout = _captchaManager.getRemainingLockout(
      identifier: _emailC.text.trim().isEmpty ? null : _emailC.text.trim(),
    );
    
    if (lockout != null && lockout.inSeconds > 0) {
      setState(() => _lockoutTime = lockout);
      
      // Timer pour mettre Ã  jour le temps restant
      Future.delayed(const Duration(seconds: 1), () {
        if (mounted) _checkLockoutStatus();
      });
    } else {
      setState(() => _lockoutTime = null);
    }
  }

  String? _validateEmail(String? v) {
    if (v == null || v.isEmpty) return tr('login.validation.emailRequired');
    final reg = RegExp(r'^[\w\-.]+@([\w\-]+\.)+[\w\-]{2,4}$');
    if (!reg.hasMatch(v.trim())) return tr('login.validation.emailInvalid');
    return null;
  }

  String? _validatePassword(String? v) {
    if (v == null || v.isEmpty) return tr('login.validation.passwordRequired');
    if (v.length < 4) return tr('login.validation.passwordTooShort');
    return null;
  }

  // âœ… NOUVEAU: VÃ©rifier si le CAPTCHA est nÃ©cessaire
  bool _shouldShowCaptcha() {
    return _captchaManager.shouldShowCaptcha(
      'login',
      identifier: _emailC.text.trim().isEmpty ? null : _emailC.text.trim(),
    );
  }

  // âœ… NOUVEAU: VÃ©rifier si la connexion est possible
  bool _canAttemptLogin() {
    if (_lockoutTime != null || _isLoading) return false;
    
    bool hasCredentials = _emailC.text.trim().isNotEmpty && 
                         _passC.text.isNotEmpty;
    
    // Si reCAPTCHA requis, vÃ©rifier qu'il est validÃ©
    if (_shouldShowCaptcha()) {
      return hasCredentials && _captchaValidated;
    }
    
    return hasCredentials;
  }

  // âœ… NOUVEAU: Formater la durÃ©e du blocage
  String _formatLockoutTime(Duration duration) {
    final minutes = duration.inMinutes;
    final seconds = duration.inSeconds % 60;
    return '${minutes}:${seconds.toString().padLeft(2, '0')}';
  }

  /// âœ… NOUVELLE MÃ‰THODE: Initialiser Firebase KIPIK aprÃ¨s connexion rÃ©ussie
  Future<void> _initializeFirebaseAfterLogin() async {
    try {
      print('ðŸ—ï¸ Utilisateur connectÃ© â†’ Initialisation Firebase KIPIK...');
      
      // 1. Passer DatabaseManager en mode complet (avec tests Firestore)
      print('ðŸ”„ Passage DatabaseManager en mode complet...');
      await _databaseManager.initializeFullMode();
      
      // 2. Initialiser Firebase KIPIK avec l'utilisateur connectÃ©
      await FirebaseInitService.instance.initializeKipikFirebase(forceReinit: false);
      
      print('âœ… Firebase KIPIK initialisÃ© avec succÃ¨s aprÃ¨s connexion !');
      print('ðŸŽ¯ Collections business disponibles');
      print('ðŸ”’ RÃ¨gles de sÃ©curitÃ© respectÃ©es');
      print('ðŸŽ‰ Firebase KIPIK entiÃ¨rement opÃ©rationnel !');
      
    } catch (firebaseError) {
      // âš ï¸ Si l'init Firebase Ã©choue, on continue quand mÃªme la connexion
      print('âš ï¸ Ã‰chec partiel initialisation Firebase KIPIK: $firebaseError');
      print('ðŸ“± Connexion utilisateur maintenue');
      print('ðŸ”§ FonctionnalitÃ©s de base disponibles');
      
      // Afficher un message d'avertissement non-bloquant
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                Icon(Icons.warning_amber, color: Colors.orange.shade200),
                const SizedBox(width: 12),
                const Expanded(
                  child: Text(
                    'Connexion rÃ©ussie - Certaines fonctionnalitÃ©s avancÃ©es peuvent Ãªtre limitÃ©es',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.orange.shade600,
            duration: const Duration(seconds: 4),
            behavior: SnackBarBehavior.floating,
            action: SnackBarAction(
              label: 'OK',
              textColor: Colors.white,
              onPressed: () {
                ScaffoldMessenger.of(context).hideCurrentSnackBar();
              },
            ),
          ),
        );
      }
    }
  }

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;
    if (!_canAttemptLogin()) return;

    setState(() => _isLoading = true);

    try {
      final email = _emailC.text.trim();
      final pass = _passC.text.trim();

      print('ðŸ”„ Tentative de connexion utilisateur...');
      print('ðŸ“§ Email: $email');

      // âœ… Ã‰TAPE 1: CONNEXION UTILISATEUR D'ABORD
      final user = await _authService.signInWithEmailAndPassword(
        email,
        pass,
        captchaResult: _captchaResult,
      );

      if (user == null) {
        // âœ… Enregistrer l'Ã©chec
        _captchaManager.recordFailedAttempt('login', identifier: email);
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(tr('login.error.signInFailed')),
              backgroundColor: KipikTheme.rouge,
            ),
          );
          
          // VÃ©rifier si maintenant bloquÃ© aprÃ¨s Ã©chec
          _checkLockoutStatus();
        }
        return;
      }

      // âœ… Enregistrer le succÃ¨s
      _captchaManager.recordSuccessfulAttempt('login', identifier: email);

      if (!mounted) return;

      // âœ… CORRECTION: RÃ©cupÃ©rer le rÃ´le depuis SecureAuthService
      final role = _authService.currentUserRole;
      
      if (role == null) {
        throw Exception('Impossible de dÃ©terminer le rÃ´le utilisateur');
      }

      print('âœ… Authentification rÃ©ussie:');
      print('  - Utilisateur: $email');
      print('  - RÃ´le: ${role.name}');
      print('  - ID: ${user['uid']}');

      // âœ… Ã‰TAPE 2: INITIALISATION FIREBASE KIPIK (APRÃˆS CONNEXION)
      await _initializeFirebaseAfterLogin();

      // âœ… NOUVEAU: Log de connexion avec info base de donnÃ©es
      print('âœ… Connexion complÃ¨te rÃ©ussie !');
      print('  - Base de donnÃ©es: ${_databaseManager.activeDatabaseConfig.name}');
      print('  - Mode: ${_databaseManager.isDemoMode ? "ðŸŽ­ DÃ‰MO" : "ðŸ­ PRODUCTION"}');
      print('  - Mode sÃ©curisÃ©: ${_databaseManager.isSafeMode ? "âœ…" : "âŒ (Mode complet)"}');
      print('  - Firebase KIPIK: InitialisÃ© âœ…');

      // âœ… Ã‰TAPE 3: NAVIGATION SELON LE RÃ”LE
      Widget destination;
      String routeName;
      
      switch (role) {
        case models.UserRole.client:
          destination = const AccueilParticulierPage();
          routeName = '/client';
          break;
        case models.UserRole.tatoueur:
          destination = HomePagePro(); 
          routeName = '/tatoueur';
          break;
        case models.UserRole.admin:
          destination = const AdminDashboardHome();
          routeName = '/admin';
          break;
        case models.UserRole.organisateur:
          destination = OrganisateurDashboardPage();
          routeName = '/organisateur';
          break;
        default:
          destination = const AccueilParticulierPage();
          routeName = '/client';
          print('âš ï¸ RÃ´le non reconnu: $role, redirection vers page client');
          break;
      }

      // Navigation avec remplacement pour Ã©viter le retour
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => destination),
      );

      // âœ… LOGS FINAUX DE SUCCÃˆS
      print('ðŸŽ‰ Session complÃ¨te Ã©tablie !');
      print('ðŸ§­ Navigation vers interface ${role.name}');
      print('âœ… Navigation rÃ©ussie vers $routeName');

    } catch (e) {
      print('âŒ Erreur de connexion: $e');
      
      // âœ… Enregistrer l'Ã©chec
      _captchaManager.recordFailedAttempt('login', identifier: _emailC.text.trim());
      
      if (mounted) {
        String errorMessage = 'Erreur de connexion';
        
        // âœ… Messages d'erreur spÃ©cifiques
        if (e.toString().contains('user-not-found')) {
          errorMessage = 'Aucun compte trouvÃ© avec cet email';
        } else if (e.toString().contains('wrong-password')) {
          errorMessage = 'Mot de passe incorrect';
        } else if (e.toString().contains('too-many-requests')) {
          errorMessage = 'Trop de tentatives. RÃ©essayez plus tard.';
        } else if (e.toString().contains('Validation de sÃ©curitÃ©')) {
          errorMessage = 'Validation de sÃ©curitÃ© Ã©chouÃ©e';
        } else {
          errorMessage = 'Email ou mot de passe incorrect';
        }
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: Colors.red,
          ),
        );
        _checkLockoutStatus();
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
          // âœ… Reset CAPTCHA aprÃ¨s tentative
          _captchaValidated = false;
          _captchaResult = null;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[DateTime.now().millisecond % backgrounds.length];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: CustomAppBarKipik(
        title: tr('login.title'),
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(bg, fit: BoxFit.cover),
          Center(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: SingleChildScrollView(
                child: Theme(
                  data: Theme.of(context).copyWith(
                    textSelectionTheme: TextSelectionThemeData(
                      cursorColor: KipikTheme.rouge,
                      selectionColor: KipikTheme.rouge.withOpacity(0.4),
                      selectionHandleColor: KipikTheme.rouge,
                    ),
                  ),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Image.asset('assets/logo_kipik.png', width: 200),
                        const SizedBox(height: 30),

                        // âœ… NOUVEAU: Indicateur base de donnÃ©es avec mode sÃ©curisÃ©
                        Container(
                          margin: const EdgeInsets.only(bottom: 16),
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: _databaseManager.isDemoMode 
                                ? Colors.orange.withOpacity(0.1)
                                : _databaseManager.isSafeMode
                                    ? Colors.blue.withOpacity(0.1)
                                    : Colors.green.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: _databaseManager.isDemoMode 
                                  ? Colors.orange.withOpacity(0.3)
                                  : _databaseManager.isSafeMode
                                      ? Colors.blue.withOpacity(0.3)
                                      : Colors.green.withOpacity(0.3),
                            ),
                          ),
                          child: Row(
                            children: [
                              Icon(
                                _databaseManager.isDemoMode 
                                    ? Icons.science 
                                    : _databaseManager.isSafeMode
                                        ? Icons.shield
                                        : Icons.security, 
                                color: _databaseManager.isDemoMode 
                                    ? Colors.orange 
                                    : _databaseManager.isSafeMode
                                        ? Colors.blue
                                        : Colors.green, 
                                size: 20,
                              ),
                              const SizedBox(width: 8),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      _databaseManager.isDemoMode 
                                          ? 'ðŸŽ­ MODE DÃ‰MONSTRATION'
                                          : _databaseManager.isSafeMode
                                              ? 'ðŸ›¡ï¸ MODE SÃ‰CURISÃ‰'
                                              : 'ðŸ”’ CONNEXION SÃ‰CURISÃ‰E',
                                      style: TextStyle(
                                        color: _databaseManager.isDemoMode 
                                            ? Colors.orange 
                                            : _databaseManager.isSafeMode
                                                ? Colors.blue
                                                : Colors.green,
                                        fontSize: 14,
                                        fontWeight: FontWeight.bold,
                                        fontFamily: 'PermanentMarker',
                                      ),
                                    ),
                                    Text(
                                      _databaseManager.isSafeMode
                                          ? 'Authentification seulement - Tests diffÃ©rÃ©s'
                                          : _databaseManager.activeDatabaseConfig.description,
                                      style: TextStyle(
                                        color: _databaseManager.isDemoMode 
                                            ? Colors.orange[700] 
                                            : _databaseManager.isSafeMode
                                                ? Colors.blue[700]
                                                : Colors.green[700],
                                        fontSize: 12,
                                        fontFamily: 'Roboto',
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),

                        // âœ… AMÃ‰LIORATION: Alerte de blocage si applicable
                        if (_lockoutTime != null) ...[
                          Container(
                            padding: const EdgeInsets.all(16),
                            margin: const EdgeInsets.only(bottom: 20),
                            decoration: BoxDecoration(
                              color: Colors.red.withOpacity(0.1),
                              border: Border.all(color: Colors.red, width: 2),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Row(
                              children: [
                                const Icon(Icons.lock_clock, 
                                     color: Colors.red, size: 24),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      const Text(
                                        'Compte temporairement bloquÃ©',
                                        style: TextStyle(
                                          color: Colors.red,
                                          fontWeight: FontWeight.bold,
                                          fontFamily: 'PermanentMarker',
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        'Temps restant: ${_formatLockoutTime(_lockoutTime!)}',
                                        style: TextStyle(
                                          color: Colors.red[700],
                                          fontSize: 14,
                                        ),
                                      ),
                                      Text(
                                        'Trop de tentatives de connexion Ã©chouÃ©es',
                                        style: TextStyle(
                                          color: Colors.red[600],
                                          fontSize: 12,
                                          fontStyle: FontStyle.italic,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],

                        // â€”â€“ Email â€”â€“
                        TextFormField(
                          controller: _emailC,
                          enabled: !_isLoading && _lockoutTime == null,
                          cursorColor: KipikTheme.rouge,
                          validator: _validateEmail,
                          keyboardType: TextInputType.emailAddress,
                          textInputAction: TextInputAction.next,
                          style: const TextStyle(
                            color: Colors.black87,
                            fontFamily: 'Roboto',
                            fontWeight: FontWeight.w600,
                          ),
                          decoration: InputDecoration(
                            labelText: tr('login.emailLabel'),
                            labelStyle: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              color: Colors.black54,
                            ),
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide(
                                color: KipikTheme.rouge,
                                width: 1.5,
                              ),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide(
                                color: KipikTheme.rouge,
                                width: 2,
                              ),
                            ),
                            prefixIcon: Icon(
                              Icons.email_outlined,
                              color: KipikTheme.rouge,
                            ),
                          ),
                          onChanged: (value) {
                            // âœ… VÃ©rifier le lockout quand l'email change
                            if (value.isNotEmpty && value.contains('@')) {
                              _checkLockoutStatus();
                            }
                          },
                        ),
                        const SizedBox(height: 16),

                        // â€”â€“ Mot de passe â€”â€“
                        TextFormField(
                          controller: _passC,
                          enabled: !_isLoading && _lockoutTime == null,
                          obscureText: !_showPassword,
                          cursorColor: KipikTheme.rouge,
                          validator: _validatePassword,
                          textInputAction: TextInputAction.done,
                          onFieldSubmitted: (_) => _submit(),
                          style: const TextStyle(
                            color: Colors.black87,
                            fontFamily: 'Roboto',
                            fontWeight: FontWeight.w600,
                          ),
                          decoration: InputDecoration(
                            labelText: tr('login.passwordLabel'),
                            labelStyle: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              color: Colors.black54,
                            ),
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide(
                                color: KipikTheme.rouge,
                                width: 1.5,
                              ),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide(
                                color: KipikTheme.rouge,
                                width: 2,
                              ),
                            ),
                            prefixIcon: Icon(
                              Icons.lock_outlined,
                              color: KipikTheme.rouge,
                            ),
                            suffixIcon: IconButton(
                              icon: Icon(
                                _showPassword
                                    ? Icons.visibility
                                    : Icons.visibility_off,
                                color: KipikTheme.rouge,
                              ),
                              onPressed: () => setState(
                                () => _showPassword = !_showPassword,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 20),

                        // âœ… NOUVEAU: Widget reCAPTCHA conditionnel
                        if (_shouldShowCaptcha() && _lockoutTime == null) ...[
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.orange.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: Colors.orange.withOpacity(0.3),
                                width: 1,
                              ),
                            ),
                            child: Column(
                              children: [
                                Row(
                                  children: [
                                    const Icon(Icons.verified_user, 
                                         color: Colors.orange, size: 20),
                                    const SizedBox(width: 8),
                                    Text(
                                      'VÃ©rification de sÃ©curitÃ© requise',
                                      style: TextStyle(
                                        color: Colors.orange,
                                        fontWeight: FontWeight.bold,
                                        fontFamily: 'PermanentMarker',
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                ReCaptchaWidget(
                                  action: 'login',
                                  useInvisible: true,
                                  onValidated: (result) {
                                    setState(() {
                                      _captchaValidated = result.isValid;
                                      _captchaResult = result;
                                    });
                                    
                                    if (result.isValid) {
                                      ScaffoldMessenger.of(context).showSnackBar(
                                        const SnackBar(
                                          content: Text('âœ… VÃ©rification de sÃ©curitÃ© rÃ©ussie'),
                                          backgroundColor: Colors.green,
                                          duration: Duration(seconds: 2),
                                        ),
                                      );
                                    }
                                  },
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 20),
                        ],

                        // â€” Bouton "Se connecter" â€”
                        ElevatedButton(
                          onPressed: _canAttemptLogin() ? _submit : null,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: _canAttemptLogin() 
                                ? KipikTheme.rouge 
                                : Colors.grey,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 18),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            textStyle: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 18,
                            ),
                          ),
                          child: SizedBox(
                            width: double.infinity,
                            child: Center(
                              child: _isLoading
                                  ? const SizedBox(
                                      height: 20,
                                      width: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                      ),
                                    )
                                  : _lockoutTime != null
                                      ? Text('BloquÃ© (${_formatLockoutTime(_lockoutTime!)})')
                                      : Text(tr('login.submit')),
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // â€” Liens â€”
                        TextButton(
                          onPressed: (_isLoading || _lockoutTime != null)
                              ? null
                              : () => Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (_) => const InscriptionPage(),
                                    ),
                                  ),
                          style: TextButton.styleFrom(
                            foregroundColor: (_isLoading || _lockoutTime != null) 
                                ? Colors.grey 
                                : KipikTheme.rouge,
                            textStyle: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                            ),
                          ),
                          child: Text(tr('login.signupPrompt')),
                        ),
                        TextButton(
                          onPressed: (_isLoading || _lockoutTime != null)
                              ? null
                              : () => Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (_) => const ForgotPasswordPage(),
                                    ),
                                  ),
                          style: TextButton.styleFrom(
                            foregroundColor: (_isLoading || _lockoutTime != null) 
                                ? Colors.grey 
                                : KipikTheme.rouge,
                            textStyle: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                            ),
                          ),
                          child: Text(tr('login.forgotPassword')),
                        ),
                        
                        // âœ… NOUVEAU: Info dÃ©veloppeur/debug avec mode sÃ©curisÃ©
                        if (_databaseManager.isDemoMode || _databaseManager.isSafeMode) ...[
                          const SizedBox(height: 16),
                          Container(
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: _databaseManager.isSafeMode 
                                  ? Colors.blue.withOpacity(0.1)
                                  : Colors.orange.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(8),
                              border: Border.all(
                                color: _databaseManager.isSafeMode 
                                    ? Colors.blue.withOpacity(0.3)
                                    : Colors.orange.withOpacity(0.3)
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Icon(
                                      _databaseManager.isSafeMode 
                                          ? Icons.shield 
                                          : Icons.info, 
                                      color: _databaseManager.isSafeMode 
                                          ? Colors.blue 
                                          : Colors.orange, 
                                      size: 16
                                    ),
                                    const SizedBox(width: 8),
                                    Text(
                                      _databaseManager.isSafeMode 
                                          ? 'Mode sÃ©curisÃ© actif'
                                          : 'Mode dÃ©veloppeur actif',
                                      style: TextStyle(
                                        color: _databaseManager.isSafeMode 
                                            ? Colors.blue 
                                            : Colors.orange,
                                        fontSize: 14,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  _databaseManager.isSafeMode
                                      ? 'Mode: ${_databaseManager.currentMode}\n'
                                        'Base: ${_databaseManager.activeDatabaseConfig.name}\n'
                                        'ID: ${_databaseManager.activeDatabaseConfig.id}'
                                      : 'Base: ${_databaseManager.activeDatabaseConfig.name}\n'
                                        'ID: ${_databaseManager.activeDatabaseConfig.id}',
                                  style: TextStyle(
                                    color: _databaseManager.isSafeMode 
                                        ? Colors.blue 
                                        : Colors.orange,
                                    fontSize: 12,
                                    fontFamily: 'monospace',
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\forgot_password_page.dart

// lib/pages/auth/forgot_password_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../theme/kipik_theme.dart'; // import du thÃ¨me pour KipikTheme.rouge

class ForgotPasswordPage extends StatefulWidget {
  const ForgotPasswordPage({super.key});

  @override
  State<ForgotPasswordPage> createState() => _ForgotPasswordPageState();
}

class _ForgotPasswordPageState extends State<ForgotPasswordPage> {
  final TextEditingController _emailController = TextEditingController();

  final List<String> backgrounds = [
    'assets/background1.png',
    'assets/background2.png',
    'assets/background3.png',
    'assets/background4.png',
  ];

  void _sendResetLink() {
    final email = _emailController.text.trim();
    final isValidEmail = RegExp(r'^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(email);

    if (email.isEmpty || !isValidEmail) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Merci d\'indiquer un email valide.')),
      );
      return;
    }

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Lien de rÃ©initialisation envoyÃ© !')),
    );

    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Mot de passe oubliÃ©',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text(
                  'Indiquez votre adresse email pour recevoir un lien de rÃ©initialisation.',
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    color: Colors.white,
                    fontSize: 20,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 30),
                TextField(
                  controller: _emailController,
                  keyboardType: TextInputType.emailAddress,
                  style: const TextStyle(fontFamily: 'Roboto', color: Colors.white),
                  decoration: InputDecoration(
                    hintText: 'Email',
                    hintStyle: const TextStyle(fontFamily: 'Roboto', color: Colors.white70),
                    filled: true,
                    fillColor: Colors.white.withOpacity(0.2),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(14),
                      borderSide: BorderSide.none,
                    ),
                  ),
                ),
                const SizedBox(height: 30),

                // â€” Bouton plein Ã©cran en rouge avec texte PermanentMarker â€”
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: _sendResetLink,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: KipikTheme.rouge,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      textStyle: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 18,
                      ),
                    ),
                    child: const Text('Envoyer le lien'),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\inscription_echouee_page.dart

import 'dart:math';
import 'package:flutter/material.dart';

class InscriptionEchoueePage extends StatelessWidget {
  const InscriptionEchoueePage({super.key});

  @override
  Widget build(BuildContext context) {
    final List<String> backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final String selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Center(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.error_outline, color: Colors.redAccent, size: 90),
                  const SizedBox(height: 30),
                  const Text(
                    'Inscription Ã©chouÃ©e',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 28,
                      color: Colors.white,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () => Navigator.pop(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.black,
                      padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 32),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'RÃ©essayer',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\inscription_page.dart

// lib/pages/auth/inscription_page.dart - Version sÃ©curisÃ©e avec reCAPTCHA

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/auth/recaptcha_widget.dart';
import 'package:kipik_v5/services/auth/captcha_manager.dart';
import 'package:kipik_v5/pages/particulier/inscription_particulier_page.dart';
import 'package:kipik_v5/pages/pro/inscription_pro_page.dart';
import 'package:kipik_v5/pages/organisateur/inscription_organisateur_page.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class InscriptionPage extends StatefulWidget {
  const InscriptionPage({Key? key}) : super(key: key);

  @override
  State<InscriptionPage> createState() => _InscriptionPageState();
}

class _InscriptionPageState extends State<InscriptionPage> {
  // Variables reCAPTCHA
  bool _captchaValidated = false;
  CaptchaResult? _captchaResult;

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Inscription',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Background avec overlay
          Stack(
            fit: StackFit.expand,
            children: [
              Image.asset(bg, fit: BoxFit.cover),
              Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Colors.black.withOpacity(0.3),
                      Colors.black.withOpacity(0.6),
                    ],
                  ),
                ),
              ),
            ],
          ),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Column(
                children: [
                  const SizedBox(height: 10),
                  
                  // Logo avec la largeur des cartes
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    child: Center(
                      child: Image.asset(
                        'assets/logo_kipik.png', 
                        height: 60,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),

                  // Titre de section compact
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    margin: const EdgeInsets.only(bottom: 10),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.95),
                      borderRadius: BorderRadius.circular(8),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1),
                          blurRadius: 4,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Text(
                      'Choisissez votre type de compte',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: KipikTheme.rouge,
                        fontFamily: 'PermanentMarker',
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),

                  // reCAPTCHA minimal
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    margin: const EdgeInsets.only(bottom: 8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: KipikTheme.rouge.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.verified_user, 
                                 color: KipikTheme.rouge, size: 12),
                            const SizedBox(width: 4),
                            Text(
                              'SÃ©curitÃ©',
                              style: TextStyle(
                                color: KipikTheme.rouge,
                                fontWeight: FontWeight.bold,
                                fontFamily: 'PermanentMarker',
                                fontSize: 10,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 4),
                        SizedBox(
                          height: 80,
                          child: ReCaptchaWidget(
                            action: 'signup',
                            useInvisible: true,
                            onValidated: (result) {
                              setState(() {
                                _captchaValidated = result.isValid;
                                _captchaResult = result;
                              });
                            },
                          ),
                        ),
                      ],
                    ),
                  ),

                  // Boutons de choix avec headers tattoo
                  _buildChoiceButton(
                    context,
                    'Particulier',
                    'Trouvez votre tatoueur idÃ©al â€¢ GÃ©rez vos projets â€¢ Suivez vos rendez-vous',
                    'assets/avatars/avatar_client.png',
                    InscriptionParticulierPage(),
                    enabled: _captchaValidated,
                  ),
                  const SizedBox(height: 8),
                  
                  _buildChoiceButton(
                    context,
                    'Tatoueur Pro',
                    'DÃ©veloppez votre clientÃ¨le â€¢ GÃ©rez votre agenda â€¢ Boostez votre visibilitÃ©',
                    'assets/avatars/avatar_tatoueur.png',
                    InscriptionProPage(),
                    enabled: _captchaValidated,
                  ),
                  const SizedBox(height: 8),
                  
                  _buildChoiceButton(
                    context,
                    'Organisateur',
                    'CrÃ©ez vos Ã©vÃ©nements â€¢ GÃ©rez vos exposants â€¢ Maximisez votre impact',
                    'assets/avatars/avatar_orga.png',
                    InscriptionOrganisateurPage(),
                    enabled: _captchaValidated,
                  ),

                  // Message d'aide si reCAPTCHA pas validÃ©
                  if (!_captchaValidated) ...[
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.orange.withOpacity(0.1),
                        border: Border.all(color: Colors.orange),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.info, color: Colors.orange[700], size: 12),
                          const SizedBox(width: 4),
                          Text(
                            'Validez la sÃ©curitÃ© ci-dessus',
                            style: TextStyle(
                              color: Colors.orange[700],
                              fontSize: 9,
                              fontWeight: FontWeight.w500,
                              fontFamily: 'Roboto',
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                  
                  const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChoiceButton(
    BuildContext context,
    String title,
    String description,
    String avatarPath,
    Widget page, {
    bool enabled = true,
  }) {
    // âœ… SÃ©lection du header selon le type
    String headerImage;
    if (title == 'Particulier') {
      headerImage = 'assets/images/header_tattoo_wallpaper.png';
    } else if (title == 'Tatoueur Pro') {
      headerImage = 'assets/images/header_tattoo_wallpaper2.png';
    } else { // Organisateur
      headerImage = 'assets/images/header_tattoo_wallpaper3.png';
    }

    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        boxShadow: enabled 
            ? [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 4),
                ),
              ]
            : [],
      ),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          image: enabled ? DecorationImage(
            image: AssetImage(headerImage),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              Colors.white.withOpacity(0.6), // âœ… MÃªme opacitÃ© que les autres pages
              BlendMode.lighten,
            ),
          ) : null,
          color: enabled ? null : Colors.grey[300],
          border: Border.all(
            color: enabled ? KipikTheme.rouge : Colors.grey,
            width: 2,
          ),
        ),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: enabled 
                ? () => _navigateToSignup(context, page, title)
                : null,
            borderRadius: BorderRadius.circular(16),
            child: Container(
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  Row(
                    children: [
                      // Avatar avec fond blanc
                      Container(
                        width: 70,
                        height: 70,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: enabled ? KipikTheme.rouge : Colors.grey,
                            width: 2,
                          ),
                          color: Colors.white,
                          boxShadow: [
                            if (enabled)
                              BoxShadow(
                                color: KipikTheme.rouge.withOpacity(0.2),
                                blurRadius: 4,
                                offset: const Offset(0, 2),
                              ),
                          ],
                        ),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(10),
                          child: Container(
                            color: Colors.white,
                            child: Image.asset(
                              avatarPath,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) {
                                return Container(
                                  color: Colors.white,
                                  child: Icon(
                                    title == 'Particulier' ? Icons.person :
                                    title == 'Tatoueur Pro' ? Icons.brush : Icons.event,
                                    color: enabled ? KipikTheme.rouge : Colors.grey,
                                    size: 35,
                                  ),
                                );
                              },
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // âœ… Titre directement sur le fond (sans bulle)
                            Text(
                              title,
                              style: TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: enabled ? Colors.black87 : Colors.grey,
                                // âœ… Ombre pour dÃ©tacher du fond tattoo
                                shadows: [
                                  Shadow(
                                    color: Colors.white,
                                    blurRadius: 3,
                                    offset: const Offset(1, 1),
                                  ),
                                ],
                              ),
                            ),
                            const SizedBox(height: 6),
                            // âœ… Description directement sur le fond (sans bulle)
                            Text(
                              description,
                              style: TextStyle(
                                fontSize: 12,
                                color: enabled ? Colors.grey[800] : Colors.grey,
                                fontWeight: FontWeight.w600,
                                fontFamily: 'Roboto',
                                height: 1.3,
                                // âœ… Ombre pour dÃ©tacher du fond tattoo
                                shadows: [
                                  Shadow(
                                    color: Colors.white,
                                    blurRadius: 2,
                                    offset: const Offset(0.5, 0.5),
                                  ),
                                ],
                              ),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ],
                        ),
                      ),
                      // âœ… IcÃ´ne flÃ¨che avec fond blanc
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: enabled ? KipikTheme.rouge.withOpacity(0.3) : Colors.grey,
                            width: 1,
                          ),
                        ),
                        child: Icon(
                          Icons.arrow_forward_ios,
                          color: enabled ? KipikTheme.rouge : Colors.grey,
                          size: 18,
                        ),
                      ),
                    ],
                  ),
                  
                  // Indicateur de sÃ©curitÃ© validÃ©e
                  if (enabled && _captchaValidated) ...[
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.green,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          const Icon(Icons.check_circle, 
                               color: Colors.white, size: 12),
                          const SizedBox(width: 4),
                          const Text(
                            'SÃ©curitÃ© validÃ©e âœ“',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.w600,
                              fontFamily: 'PermanentMarker',
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  // Navigation sÃ©curisÃ©e avec transmission du rÃ©sultat reCAPTCHA
  void _navigateToSignup(BuildContext context, Widget page, String type) {
    if (!_captchaValidated || _captchaResult == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Row(
            children: [
              Icon(Icons.security, color: Colors.white),
              SizedBox(width: 8),
              Text('Veuillez valider la vÃ©rification de sÃ©curitÃ©'),
            ],
          ),
          backgroundColor: KipikTheme.rouge,
        ),
      );
      return;
    }

    // Log de sÃ©curitÃ© pour l'inscription
    print('ðŸ” Navigation sÃ©curisÃ©e vers inscription $type - Score reCAPTCHA: ${(_captchaResult!.score * 100).round()}%');

    // Navigation avec transmission du rÃ©sultat reCAPTCHA dans les arguments
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => page,
        settings: RouteSettings(
          arguments: {
            'captchaResult': _captchaResult,
            'signupType': type.toLowerCase(),
          },
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\nouveau_mot_de_passe_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/pages/auth/connexion_page.dart';

class NouveauMotDePassePage extends StatefulWidget {
  const NouveauMotDePassePage({super.key});

  @override
  State<NouveauMotDePassePage> createState() => _NouveauMotDePassePageState();
}

class _NouveauMotDePassePageState extends State<NouveauMotDePassePage> {
  final TextEditingController _newPasswordController = TextEditingController();
  final TextEditingController _confirmPasswordController = TextEditingController();
  bool _showPassword = false;
  bool _showConfirmPassword = false;

  String? _validatePassword(String value) {
    if (value.length < 6) return '6 caractÃ¨res minimum';
    if (!RegExp(r'[A-Z]').hasMatch(value)) return 'Ajoute une majuscule';
    if (!RegExp(r'[a-z]').hasMatch(value)) return 'Ajoute une minuscule';
    if (!RegExp(r'[0-9]').hasMatch(value)) return 'Ajoute un chiffre';
    if (!RegExp(r'[!@#\$&*~%?^]').hasMatch(value)) return 'Ajoute un caractÃ¨re spÃ©cial';
    return null;
  }

  void _validateNewPassword() {
    final newPass = _newPasswordController.text.trim();
    final confirmPass = _confirmPasswordController.text.trim();
    final error = _validatePassword(newPass);

    if (newPass.isEmpty || confirmPass.isEmpty) {
      _showSnackBar('Merci de remplir tous les champs.');
      return;
    }

    if (error != null) {
      _showSnackBar(error);
      return;
    }

    if (newPass != confirmPass) {
      _showSnackBar('Les mots de passe ne correspondent pas.');
      return;
    }

    _showSnackBar('Mot de passe modifiÃ© avec succÃ¨s !');
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (_) =>  ConnexionPage()),
      (route) => false,
    );
  }

  void _showSnackBar(String msg) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
  }

  @override
  Widget build(BuildContext context) {
    final List<String> backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final String selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: const Text('Nouveau mot de passe'),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Padding(
            padding: const EdgeInsets.all(24),
            child: Center(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    const Text(
                      'DÃ©finis ton nouveau mot de passe.',
                      style: TextStyle(
                        fontSize: 20,
                        color: Colors.white,
                        fontFamily: 'PermanentMarker',
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 30),
                    _buildPasswordField(
                      controller: _newPasswordController,
                      label: 'Nouveau mot de passe',
                      show: _showPassword,
                      toggle: (val) => setState(() => _showPassword = val),
                    ),
                    const SizedBox(height: 20),
                    _buildPasswordField(
                      controller: _confirmPasswordController,
                      label: 'Confirmer mot de passe',
                      show: _showConfirmPassword,
                      toggle: (val) => setState(() => _showConfirmPassword = val),
                    ),
                    const SizedBox(height: 30),
                    ElevatedButton(
                      onPressed: _validateNewPassword,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.black,
                        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 40),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text(
                        'Valider mon nouveau mot de passe',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPasswordField({
    required TextEditingController controller,
    required String label,
    required bool show,
    required Function(bool) toggle,
  }) {
    return TextField(
      controller: controller,
      obscureText: !show,
      style: const TextStyle(color: Colors.white),
      decoration: InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(color: Colors.white),
        filled: true,
        fillColor: Colors.black45,
        suffixIcon: IconButton(
          icon: Icon(show ? Icons.visibility : Icons.visibility_off, color: Colors.white),
          onPressed: () => toggle(!show),
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\secure_login_form.dart

// lib/widgets/auth/secure_login_form.dart

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import '../../widgets/auth/recaptcha_widget.dart';
import '../../services/auth/captcha_manager.dart';
import '../../services/auth/secure_auth_service.dart';
import '../../theme/kipik_theme.dart';

class SecureLoginForm extends StatefulWidget {
  final VoidCallback? onLoginSuccess;
  final Function(String)? onError;

  const SecureLoginForm({
    Key? key,
    this.onLoginSuccess,
    this.onError,
  }) : super(key: key);

  @override
  State<SecureLoginForm> createState() => _SecureLoginFormState();
}

class _SecureLoginFormState extends State<SecureLoginForm> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  
  bool _isLoading = false;
  bool _captchaValidated = false;
  bool _showPassword = false;
  CaptchaResult? _captchaResult;
  Duration? _lockoutTime;

  // âœ… CORRECTION: Utiliser l'instance singleton
  SecureAuthService get _authService => SecureAuthService.instance;

  @override
  void initState() {
    super.initState();
    _checkLockoutStatus();
  }

  void _checkLockoutStatus() {
    // âœ… CORRECTION: Utiliser CaptchaManager pour le lockout
    final lockout = CaptchaManager.instance.getRemainingLockout(
      identifier: _emailController.text.trim().isEmpty ? null : _emailController.text.trim(),
    );
    
    if (lockout != null && lockout.inSeconds > 0) {
      setState(() => _lockoutTime = lockout);
      
      // Timer pour mettre Ã  jour le temps restant
      Future.delayed(const Duration(seconds: 1), () {
        if (mounted) _checkLockoutStatus();
      });
    } else {
      setState(() => _lockoutTime = null);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Logo KIPIK
          Container(
            alignment: Alignment.center,
            padding: const EdgeInsets.all(24),
            child: Text(
              'KIPIK',
              style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                color: KipikTheme.rouge,
                fontFamily: 'PermanentMarker',
              ),
            ),
          ),

          // âœ… NOUVEAU: Indicateur de sÃ©curitÃ©
          Container(
            margin: const EdgeInsets.only(bottom: 16),
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.green.withOpacity(0.3)),
            ),
            child: const Row(
              children: [
                Icon(Icons.security, color: Colors.green, size: 20),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    'Connexion sÃ©curisÃ©e avec protection anti-bot',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),

          // Message de blocage si applicable
          if (_lockoutTime != null) ...[
            Container(
              padding: const EdgeInsets.all(16),
              margin: const EdgeInsets.only(bottom: 16),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                border: Border.all(color: Colors.red),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  const Icon(Icons.lock_clock, color: Colors.red),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Compte temporairement bloquÃ©',
                          style: TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          'Temps restant: ${_formatDuration(_lockoutTime!)}',
                          style: TextStyle(color: Colors.red[700]),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          'Trop de tentatives de connexion Ã©chouÃ©es',
                          style: TextStyle(
                            color: Colors.red[600],
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],

          // Champ Email
          TextFormField(
            controller: _emailController,
            keyboardType: TextInputType.emailAddress,
            enabled: _lockoutTime == null && !_isLoading,
            decoration: InputDecoration(
              labelText: 'Email',
              prefixIcon: const Icon(Icons.email),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              filled: true,
              fillColor: Colors.grey[900],
              labelStyle: TextStyle(color: Colors.grey[400]),
            ),
            style: const TextStyle(color: Colors.white),
            validator: (value) {
              if (value?.isEmpty ?? true) return 'Email requis';
              if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value!)) {
                return 'Format email invalide';
              }
              return null;
            },
            onChanged: (value) {
              // âœ… VÃ©rifier le lockout quand l'email change
              if (value.isNotEmpty && value.contains('@')) {
                _checkLockoutStatus();
              }
            },
          ),
          const SizedBox(height: 16),

          // Champ Mot de passe
          TextFormField(
            controller: _passwordController,
            obscureText: !_showPassword,
            enabled: _lockoutTime == null && !_isLoading,
            decoration: InputDecoration(
              labelText: 'Mot de passe',
              prefixIcon: const Icon(Icons.lock),
              suffixIcon: IconButton(
                icon: Icon(
                  _showPassword ? Icons.visibility_off : Icons.visibility,
                  color: Colors.grey[400],
                ),
                onPressed: () {
                  setState(() {
                    _showPassword = !_showPassword;
                  });
                },
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              filled: true,
              fillColor: Colors.grey[900],
              labelStyle: TextStyle(color: Colors.grey[400]),
            ),
            style: const TextStyle(color: Colors.white),
            validator: (value) {
              if (value?.isEmpty ?? true) return 'Mot de passe requis';
              if (value!.length < 6) return 'Minimum 6 caractÃ¨res';
              return null;
            },
          ),
          const SizedBox(height: 20),

          // âœ… AMÃ‰LIORÃ‰: Widget reCAPTCHA conditionnel avec meilleur feedback
          if (_shouldShowCaptcha()) ...[
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange.withOpacity(0.3)),
              ),
              child: const Row(
                children: [
                  Icon(Icons.verified_user, color: Colors.orange, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'VÃ©rification de sÃ©curitÃ© requise',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 12),
            ReCaptchaWidget(
              action: 'login',
              useInvisible: true,
              onValidated: (result) {
                setState(() {
                  _captchaValidated = result.isValid;
                  _captchaResult = result;
                });
                
                if (result.isValid) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('âœ… VÃ©rification de sÃ©curitÃ© rÃ©ussie'),
                      backgroundColor: Colors.green,
                      duration: Duration(seconds: 2),
                    ),
                  );
                }
              },
            ),
            const SizedBox(height: 16),
          ],

          // Bouton de connexion
          ElevatedButton(
            onPressed: _canAttemptLogin() ? _handleLogin : null,
            style: ElevatedButton.styleFrom(
              backgroundColor: _canAttemptLogin() ? KipikTheme.rouge : Colors.grey,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: _isLoading
                ? const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      ),
                      SizedBox(width: 12),
                      Text('Connexion...'),
                    ],
                  )
                : const Text(
                    'Se connecter',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
          ),

          const SizedBox(height: 16),

          // Lien mot de passe oubliÃ©
          TextButton(
            onPressed: _lockoutTime == null && !_isLoading ? _showForgotPasswordDialog : null,
            child: Text(
              'Mot de passe oubliÃ© ?',
              style: TextStyle(
                color: _lockoutTime == null ? KipikTheme.rouge : Colors.grey,
              ),
            ),
          ),

          // âœ… NOUVEAU: Informations de sÃ©curitÃ©
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue.withOpacity(0.3)),
            ),
            child: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info, color: Colors.blue, size: 16),
                    SizedBox(width: 8),
                    Text(
                      'Conseils de sÃ©curitÃ© :',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 8),
                Text(
                  'â€¢ Utilisez un mot de passe unique pour Kipik\n'
                  'â€¢ Connectez-vous depuis un appareil de confiance\n'
                  'â€¢ DÃ©connectez-vous aprÃ¨s usage sur appareil partagÃ©',
                  style: TextStyle(
                    color: Colors.white70,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// âœ… AMÃ‰LIORÃ‰: Logique de vÃ©rification CAPTCHA
  bool _shouldShowCaptcha() {
    return CaptchaManager.instance.shouldShowCaptcha(
      'login',
      identifier: _emailController.text.trim().isEmpty ? null : _emailController.text.trim(),
    );
  }

  bool _canAttemptLogin() {
    if (_lockoutTime != null || _isLoading) return false;
    
    bool hasCredentials = _emailController.text.isNotEmpty && 
                         _passwordController.text.isNotEmpty;
    
    // Si CAPTCHA requis, vÃ©rifier qu'il est validÃ©
    if (_shouldShowCaptcha()) {
      return hasCredentials && _captchaValidated;
    }
    
    return hasCredentials;
  }

  Future<void> _handleLogin() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // âœ… CORRECTION: Utiliser la bonne signature de mÃ©thode
      final user = await _authService.signInWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text,
        captchaResult: _captchaResult,
      );

      if (user != null) {
        // âœ… Enregistrer le succÃ¨s dans CaptchaManager
        CaptchaManager.instance.recordSuccessfulAttempt(
          'login',
          identifier: _emailController.text.trim(),
        );

        // Connexion rÃ©ussie
        if (mounted) {
          widget.onLoginSuccess?.call();
        }
      } else {
        throw Exception('Identifiants incorrects');
      }

    } catch (e) {
      print('âŒ Erreur connexion: $e');
      
      // âœ… Enregistrer l'Ã©chec dans CaptchaManager
      CaptchaManager.instance.recordFailedAttempt(
        'login',
        identifier: _emailController.text.trim(),
      );
      
      String errorMessage = 'Erreur de connexion';
      
      // âœ… Messages d'erreur spÃ©cifiques
      if (e.toString().contains('user-not-found')) {
        errorMessage = 'Aucun compte trouvÃ© avec cet email';
      } else if (e.toString().contains('wrong-password')) {
        errorMessage = 'Mot de passe incorrect';
      } else if (e.toString().contains('too-many-requests')) {
        errorMessage = 'Trop de tentatives. RÃ©essayez plus tard.';
      } else if (e.toString().contains('Validation de sÃ©curitÃ©')) {
        errorMessage = 'Validation de sÃ©curitÃ© Ã©chouÃ©e';
      } else if (e.toString().contains('Identifiants incorrects')) {
        errorMessage = 'Email ou mot de passe incorrect';
      }
      
      if (mounted) {
        widget.onError?.call(errorMessage);
      }
      
      // VÃ©rifier si bloquÃ© aprÃ¨s Ã©chec
      _checkLockoutStatus();
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _captchaValidated = false; // âœ… Reset CAPTCHA aprÃ¨s tentative
          _captchaResult = null;
        });
      }
    }
  }

  void _showForgotPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Mot de passe oubliÃ©',
          style: TextStyle(color: Colors.white),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Entrez votre adresse email pour recevoir un lien de rÃ©initialisation.',
              style: TextStyle(color: Colors.white70),
            ),
            const SizedBox(height: 16),
            TextFormField(
              initialValue: _emailController.text,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                labelText: 'Email',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                filled: true,
                fillColor: Colors.grey[800],
                labelStyle: TextStyle(color: Colors.grey[400]),
              ),
              style: const TextStyle(color: Colors.white),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              // TODO: ImplÃ©menter la rÃ©initialisation avec reCAPTCHA
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Fonction de rÃ©initialisation en cours de dÃ©veloppement'),
                  backgroundColor: Colors.orange,
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
            ),
            child: const Text(
              'Envoyer',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  String _formatDuration(Duration duration) {
    final minutes = duration.inMinutes;
    final seconds = duration.inSeconds % 60;
    return '${minutes}:${seconds.toString().padLeft(2, '0')}';
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\verification_code_page.dart

import 'dart:math';
import 'package:flutter/material.dart';

class VerificationCodePage extends StatefulWidget {
  final String expectedCode;
  final String role; // 'client', 'tattooer' ou 'admin'

  const VerificationCodePage({
    super.key,
    required this.expectedCode,
    required this.role,
  });

  @override
  State<VerificationCodePage> createState() => _VerificationCodePageState();
}

class _VerificationCodePageState extends State<VerificationCodePage> {
  final TextEditingController _codeController = TextEditingController();
  String? _error;

  void _verifyCode() {
    if (_codeController.text.trim() == widget.expectedCode) {
      if (widget.role == 'client') {
        Navigator.pushReplacementNamed(context, '/home_particulier');
      } else if (widget.role == 'tattooer') {
        Navigator.pushReplacementNamed(context, '/home_pro');
      } else if (widget.role == 'admin') {
        Navigator.pushReplacementNamed(context, '/admin');
      }
    } else {
      setState(() {
        _error = 'Code incorrect. RÃ©essaie.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: const Text('VÃ©rification Email'),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          Padding(
            padding: const EdgeInsets.all(24),
            child: Center(
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Text(
                      'Entre le code reÃ§u par email',
                      style: TextStyle(
                        fontSize: 22,
                        fontFamily: 'PermanentMarker',
                        color: Colors.white,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 30),
                    TextFormField(
                      controller: _codeController,
                      style: const TextStyle(color: Colors.white),
                      textAlign: TextAlign.center,
                      decoration: InputDecoration(
                        labelText: 'Code de vÃ©rification',
                        labelStyle: const TextStyle(color: Colors.white),
                        filled: true,
                        fillColor: Colors.black45,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide.none,
                        ),
                      ),
                    ),
                    if (_error != null)
                      Padding(
                        padding: const EdgeInsets.only(top: 10),
                        child: Text(
                          _error!,
                          style: const TextStyle(color: Colors.redAccent),
                        ),
                      ),
                    const SizedBox(height: 30),
                    ElevatedButton(
                      onPressed: _verifyCode,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.black,
                        padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Text(
                        'Valider le code',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\auth\welcome_page.dart

import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';

import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/logo_with_text.dart';
import '../../theme/kipik_theme.dart';
import '../../services/auth/secure_auth_service.dart';

class WelcomePage extends StatefulWidget {
  const WelcomePage({Key? key}) : super(key: key);

  @override
  State<WelcomePage> createState() => _WelcomePageState();
}

class _WelcomePageState extends State<WelcomePage> with TickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeInAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    _fadeInAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _animationController, curve: Curves.easeOutQuart));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png', 
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: '',
        showBackButton: false,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Background avec overlay pour meilleure visibilitÃ©
          Stack(
            fit: StackFit.expand,
            children: [
              Image.asset(
                selectedBackground,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  print('âŒ Erreur chargement background: $error');
                  return Container(
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [Colors.black87, Colors.black],
                      ),
                    ),
                  );
                },
              ),
              // Overlay pour Ã©claircir et amÃ©liorer la lisibilitÃ©
              Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Colors.black.withOpacity(0.3), // Plus lÃ©ger en haut
                      Colors.black.withOpacity(0.6), // Plus sombre en bas
                    ],
                  ),
                ),
              ),
            ],
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24.0),
              child: FadeTransition(
                opacity: _fadeInAnimation,
                child: SlideTransition(
                  position: _slideAnimation,
                  child: OrientationBuilder(
                    builder: (context, orientation) {
                      final isLandscape = orientation == Orientation.landscape;
                      // Variables pour responsive design
                      final buttonWidth = isLandscape ? 300.0 : 280.0;
                      
                      return Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          // Logo et titre
                          const LogoWithText(),
                          SizedBox(height: isLandscape ? 30 : 60),

                          // Boutons principaux
                          SizedBox(
                            width: buttonWidth,
                            child: Column(
                              children: [
                                // Bouton Se connecter
                                _buildWelcomeButton(
                                  icon: Icons.login,
                                  text: 'loginButton'.tr(), // "Se connecter"
                                  onPressed: () => Navigator.pushNamed(context, '/connexion'),
                                  color: KipikTheme.rouge,
                                ),
                                const SizedBox(height: 16),

                                // Bouton S'inscrire
                                _buildWelcomeButton(
                                  icon: Icons.person_add,
                                  text: 'signupButton'.tr(), // "CrÃ©er un compte"
                                  onPressed: () => Navigator.pushNamed(context, '/inscription'),
                                  color: Colors.white,
                                  textColor: Colors.black87,
                                ),

                                // BOUTON ADMIN - TOUJOURS VISIBLE EN DEBUG
                                if (kDebugMode) ...[
                                  const SizedBox(height: 16),
                                  _buildAdminButton(buttonWidth),
                                ]
                                // Mode production - bouton conditionnel
                                else ...[
                                  const SizedBox(height: 16),
                                  FutureBuilder<bool>(
                                    future: SecureAuthService.instance.checkFirstAdminExists(),
                                    builder: (context, snapshot) {
                                      // En cas d'erreur ou pas de donnÃ©es, montrer le bouton
                                      if (snapshot.hasError || snapshot.data == false) {
                                        return _buildAdminButton(buttonWidth);
                                      }
                                      // Si admin existe, montrer badge
                                      if (snapshot.data == true) {
                                        return _buildConfiguredBadge();
                                      }
                                      // Chargement
                                      return _buildLoadingButton(buttonWidth);
                                    },
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ],
                      );
                    },
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWelcomeButton({
    required IconData icon,
    required String text,
    required VoidCallback onPressed,
    required Color color,
    Color? textColor,
  }) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ElevatedButton.icon(
        onPressed: onPressed,
        icon: Icon(icon, size: 24),
        label: Text(
          text,
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            fontFamily: 'PermanentMarker',
            color: textColor,
          ),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: color,
          foregroundColor: textColor ?? Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: 0,
        ),
      ),
    );
  }

  Widget _buildAdminButton(double width) {
    return Container(
      width: width,
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.amber.withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ElevatedButton.icon(
        onPressed: () => Navigator.pushNamed(context, '/first-setup'),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.amber,
          foregroundColor: Colors.black87,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(vertical: 16),
        ),
        icon: const Icon(Icons.admin_panel_settings, size: 24),
        label: const Text(
          'ðŸ”§ Configuration Admin',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            fontFamily: 'PermanentMarker',
          ),
        ),
      ),
    );
  }

  Widget _buildLoadingButton(double width) {
    return Container(
      width: width,
      height: 56,
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: const Center(
        child: SizedBox(
          width: 20,
          height: 20,
          child: CircularProgressIndicator(
            color: Colors.white,
            strokeWidth: 2,
          ),
        ),
      ),
    );
  }

  Widget _buildConfiguredBadge() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.green.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: Colors.green),
        boxShadow: [
          BoxShadow(
            color: Colors.green.withOpacity(0.2),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: const Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.check_circle, color: Colors.green, size: 20),
          SizedBox(width: 8),
          Text(
            'âœ… Application configurÃ©e',
            style: TextStyle(
              color: Colors.green,
              fontWeight: FontWeight.bold,
              fontSize: 14,
              fontFamily: 'PermanentMarker',
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\chat\ai_assistant_page.dart

// lib/pages/chat/ai_assistant_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/models/chat_message.dart';
import 'package:kipik_v5/services/chat/chat_manager.dart';

class AIAssistantPage extends StatefulWidget {
  final bool allowImageGeneration;
  final String? contextPage;
  final String? initialPrompt;

  const AIAssistantPage({
    Key? key,
    this.allowImageGeneration = false,
    this.contextPage,
    this.initialPrompt,
  }) : super(key: key);

  @override
  State<AIAssistantPage> createState() => _AIAssistantPageState();
}

class _AIAssistantPageState extends State<AIAssistantPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<ChatMessage> _messages = [];
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _addWelcomeMessage();
    
    // Envoyer le prompt initial si fourni
    if (widget.initialPrompt != null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _sendMessage(widget.initialPrompt!);
      });
    }
  }

  void _addWelcomeMessage() {
    final welcomeText = _getWelcomeMessage();
    final welcomeMessage = ChatMessage(
      id: 'welcome_${DateTime.now().millisecondsSinceEpoch}',
      text: welcomeText,
      senderId: 'assistant',
      timestamp: DateTime.now(),
    );
    
    setState(() {
      _messages.add(welcomeMessage);
    });
  }

  String _getWelcomeMessage() {
    String baseMessage = "ðŸ‘‹ Salut ! Je suis l'Assistant Kipik.\n\n";
    
    switch (widget.contextPage) {
      case 'devis':
        return "${baseMessage}Je peux t'aider Ã  crÃ©er des devis professionnels et ${widget.allowImageGeneration ? 'gÃ©nÃ©rer des images de tatouages pour tes clients' : 'rÃ©pondre Ã  tes questions'} !";
      case 'agenda':
        return "${baseMessage}Je peux t'expliquer comment optimiser ton agenda et gÃ©rer tes rendez-vous !";
      case 'projets':
        return "${baseMessage}Je peux t'aider Ã  mieux gÃ©rer tes projets clients et ton workflow !";
      case 'comptabilite':
        return "${baseMessage}Je peux t'assister avec ta comptabilitÃ© et tes dÃ©clarations !";
      case 'conventions':
        return "${baseMessage}Je peux t'expliquer comment t'inscrire aux conventions et gÃ©rer tes participations !";
      default:
        return "${baseMessage}Je peux t'aider avec :\nâ€¢ Navigation dans l'app\nâ€¢ Questions tatouage\nâ€¢ Conseils professionnels\n${widget.allowImageGeneration ? 'â€¢ GÃ©nÃ©ration d\'images' : ''}\n\nQue puis-je faire pour toi ?";
    }
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _sendMessage(String text) async {
    final trimmedText = text.trim();
    if (trimmedText.isEmpty) return;

    // Message utilisateur
    final userMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: trimmedText,
      senderId: 'user',
      timestamp: DateTime.now(),
    );

    setState(() {
      _messages.add(userMessage);
      _isLoading = true;
    });

    _messageController.clear();
    _scrollToBottom();

    try {
      // Appel ChatManager pour l'IA
      final aiResponse = await ChatManager.askAI(
        trimmedText, 
        allowImages: widget.allowImageGeneration,
      );

      setState(() {
        _messages.add(aiResponse);
        _isLoading = false;
      });
    } catch (e) {
      final errorMessage = ChatMessage(
        id: 'error_${DateTime.now().millisecondsSinceEpoch}',
        text: "DÃ©solÃ©, je ne peux pas rÃ©pondre maintenant. RÃ©essaye dans quelques instants.",
        senderId: 'assistant',
        timestamp: DateTime.now(),
      );

      setState(() {
        _messages.add(errorMessage);
        _isLoading = false;
      });
    }

    _scrollToBottom();
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(Icons.arrow_back, color: Colors.white),
          ),
          onPressed: () => Navigator.pop(context),
        ),
        title: Row(
          children: [
            CircleAvatar(
              radius: 20,
              backgroundColor: KipikTheme.rouge,
              backgroundImage: const AssetImage('assets/avatars/avatar_assistant_kipik.png'),
            ),
            const SizedBox(width: 12),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Assistant Kipik',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                Text(
                  widget.allowImageGeneration ? 'Aide + GÃ©nÃ©ration d\'images' : 'Assistant navigation',
                  style: const TextStyle(
                    color: Colors.white70,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          // Messages
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.all(16),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return _buildMessageBubble(_messages[index]);
              },
            ),
          ),
          
          // Indicateur de loading
          if (_isLoading)
            Container(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  CircleAvatar(
                    radius: 16,
                    backgroundColor: KipikTheme.rouge,
                    backgroundImage: const AssetImage('assets/avatars/avatar_assistant_kipik.png'),
                  ),
                  const SizedBox(width: 12),
                  const Text(
                    'Assistant en train d\'Ã©crire...',
                    style: TextStyle(
                      color: Colors.white70,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  const SizedBox(width: 8),
                  SizedBox(
                    width: 16,
                    height: 16,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                    ),
                  ),
                ],
              ),
            ),
          
          // Zone de saisie
          _buildInputArea(),
        ],
      ),
    );
  }

  Widget _buildMessageBubble(ChatMessage message) {
    final isAssistant = message.isFromAssistant;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (isAssistant) ...[
            CircleAvatar(
              radius: 16,
              backgroundColor: KipikTheme.rouge,
              backgroundImage: const AssetImage('assets/avatars/avatar_assistant_kipik.png'),
            ),
            const SizedBox(width: 12),
          ],
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isAssistant ? Colors.white : KipikTheme.rouge,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(isAssistant ? 8 : 20),
                  topRight: Radius.circular(isAssistant ? 20 : 8),
                  bottomLeft: const Radius.circular(20),
                  bottomRight: const Radius.circular(20),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (message.hasImage) ...[
                    ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: Image.network(
                        message.imageUrl!,
                        height: 200,
                        width: double.infinity,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) {
                          return Container(
                            height: 200,
                            color: Colors.grey[300],
                            child: const Icon(Icons.broken_image, size: 50),
                          );
                        },
                      ),
                    ),
                    if (message.hasText) const SizedBox(height: 12),
                  ],
                  if (message.hasText)
                    Text(
                      message.text!,
                      style: TextStyle(
                        color: isAssistant ? Colors.black87 : Colors.white,
                        fontSize: 15,
                        height: 1.4,
                      ),
                    ),
                ],
              ),
            ),
          ),
          if (!isAssistant) ...[
            const SizedBox(width: 12),
            CircleAvatar(
              radius: 16,
              backgroundColor: Colors.blue,
              child: const Icon(Icons.person, color: Colors.white, size: 16),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'Pose ta question...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(25),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: Colors.grey[100],
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 12,
                ),
              ),
              maxLines: null,
              textInputAction: TextInputAction.send,
              onSubmitted: _sendMessage,
            ),
          ),
          const SizedBox(width: 12),
          FloatingActionButton(
            onPressed: () => _sendMessage(_messageController.text),
            backgroundColor: KipikTheme.rouge,
            mini: true,
            child: const Icon(Icons.send, color: Colors.white),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\common\quote_detail_page.dart

import 'package:flutter/material.dart';
import '../../../models/quote_request.dart';
import '../../services/quote/enhanced_quote_service.dart';
import '../../../locator.dart';
import '../../services/payment/firebase_payment_service.dart';

class QuoteDetailPage extends StatefulWidget {
  final String requestId;
  final bool isPro;
  const QuoteDetailPage({required this.requestId, required this.isPro, Key? key}) : super(key: key);
  @override State<QuoteDetailPage> createState() => _QuoteDetailPageState();
}
class _QuoteDetailPageState extends State<QuoteDetailPage> {
  final _quoteService = locator<EnhancedQuoteService>();
  final _paymentService = locator<FirebasePaymentService>();
  late Future<QuoteRequest> _future;
  @override void initState() {
    super.initState();
    _future = _quoteService.fetchRequestDetail(widget.requestId);
  }
  @override Widget build(BuildContext c) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.isPro ? 'Traiter demande' : 'DÃ©tail devis')),
      body: FutureBuilder<QuoteRequest>(
        future: _future,
        builder: (_, snap) {
          if (!snap.hasData) return const Center(child: CircularProgressIndicator());
          final q = snap.data!;
          // TODO: selon widget.isPro & q.status, afficher UI + boutons
          // Ex. si isPro && status==Pending â†’ boutons Accepter/Refuser
          return Center(child: Text('TODO: UI selon rÃ´le & statut'));
        },
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\conventions\convention_admin_page.dart

// lib/pages/conventions/convention_admin_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../core/helpers/service_helper.dart';
import '../../core/helpers/widget_helper.dart';
import '../../models/user_role.dart';

class ConventionAdminPage extends StatefulWidget {
  const ConventionAdminPage({Key? key}) : super(key: key);

  @override
  State<ConventionAdminPage> createState() => _ConventionAdminPageState();
}

class _ConventionAdminPageState extends State<ConventionAdminPage> 
    with TickerProviderStateMixin {
  
  late TabController _tabController;
  late AnimationController _fadeController;
  late Animation<double> _fadeAnimation;
  
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _initializeAnimations();
    _loadAdminData(); // âœ… OK - _loadAdminData retourne maintenant Future<void>
  }

  @override
  void dispose() {
    _tabController.dispose();
    _fadeController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fadeController, curve: Curves.easeInOut),
    );

    _fadeController.forward();
  }

  void _loadAdminData() async { // âœ… CORRIGÃ‰ - async ajoutÃ©
    try {
      // Simulation chargement donnÃ©es admin
      await Future.delayed(const Duration(milliseconds: 800));
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        KipikTheme.showErrorSnackBar(context, 'Erreur de chargement: $e');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      endDrawer: DrawerFactory.of(context),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(kToolbarHeight),
        child: CustomAppBarKipik(
          title: 'Administration',
          subtitle: 'Gestion des conventions',
          showBackButton: true,
          showBurger: true,
          useProStyle: true,
          actions: [
            IconButton(
              icon: const Icon(Icons.add, color: Colors.white),
              onPressed: _createNewConvention,
            ),
            IconButton(
              icon: const Icon(Icons.refresh, color: Colors.white),
              onPressed: _refreshData,
            ),
          ],
        ),
      ),
      floatingActionButton: const TattooAssistantButton(
        contextPage: 'admin_conventions',
        allowImageGeneration: false,
      ),
      child: Stack(
        children: [
          KipikTheme.withSpecificBackground('assets/background_charbon.png', child: Container()),

          // Contenu principal
          SafeArea(
            child: _isLoading
                ? Center(child: KipikTheme.loading())
                : FadeTransition(
                    opacity: _fadeAnimation,
                    child: Column(
                      children: [
                        _buildTabBar(),
                        Expanded(
                          child: TabBarView(
                            controller: _tabController,
                            children: [
                              _buildOverviewTab(),
                              _buildConventionsTab(),
                              _buildSettingsTab(),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black54,
        borderRadius: BorderRadius.circular(16),
      ),
      child: TabBar(
        controller: _tabController,
        indicator: BoxDecoration(
          color: KipikTheme.rouge,
          borderRadius: BorderRadius.circular(16),
        ),
        labelColor: Colors.white,
        unselectedLabelColor: Colors.white70,
        labelStyle: const TextStyle(
          fontFamily: 'Roboto',
          fontSize: 14,
          fontWeight: FontWeight.w600,
        ),
        tabs: const [
          Tab(text: 'Vue d\'ensemble'),
          Tab(text: 'Conventions'),
          Tab(text: 'ParamÃ¨tres'),
        ],
      ),
    );
  }

  Widget _buildOverviewTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Statistiques avec vraies donnÃ©es Firebase
          const Text(
            'Statistiques Temps RÃ©el',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),
          _buildRealTimeStats(),

          const SizedBox(height: 32),

          // ActivitÃ© rÃ©cente depuis Firebase
          const Text(
            'ActivitÃ© RÃ©cente',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),
          _buildRecentActivity(),

          const SizedBox(height: 32),

          // Actions rapides
          const Text(
            'Actions Rapides',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),
          _buildQuickActions(),
        ],
      ),
    );
  }

  Widget _buildRealTimeStats() {
    return WidgetHelper.buildFutureWidget<Map<String, dynamic>>(
      future: _getAdminStats(),
      builder: (stats) {
        final statsList = [
          AdminStats(
            title: 'Conventions Actives',
            value: '${stats['activeConventions'] ?? 0}',
            change: '+${stats['newConventions'] ?? 0}',
            isPositive: true,
            icon: Icons.event,
            color: KipikTheme.rouge,
          ),
          AdminStats(
            title: 'Tatoueurs Inscrits',
            value: '${stats['totalTattooers'] ?? 0}',
            change: '+${stats['newTattooers'] ?? 0}',
            isPositive: true,
            icon: Icons.people,
            color: Colors.blue,
          ),
          AdminStats(
            title: 'Revenus du Mois',
            value: ServiceHelper.formatCurrency(stats['monthlyRevenue']?.toDouble() ?? 0.0),
            change: '+${((stats['revenueGrowth']?.toDouble() ?? 0.0) * 100).toStringAsFixed(1)}%',
            isPositive: true,
            icon: Icons.euro,
            color: Colors.green,
          ),
          AdminStats(
            title: 'Commissions Kipik',
            value: ServiceHelper.formatCurrency((stats['monthlyRevenue']?.toDouble() ?? 0.0) * 0.01),
            change: '+${((stats['revenueGrowth']?.toDouble() ?? 0.0) * 100).toStringAsFixed(1)}%',
            isPositive: true,
            icon: Icons.account_balance_wallet,
            color: Colors.purple,
          ),
        ];

        return GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 16,
            mainAxisSpacing: 16,
            childAspectRatio: 1.5,
          ),
          itemCount: statsList.length,
          itemBuilder: (context, index) {
            final stat = statsList[index];
            return _buildStatCard(stat);
          },
        );
      },
    );
  }

  Widget _buildStatCard(AdminStats stat) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            stat.color.withOpacity(0.2),
            stat.color.withOpacity(0.1),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: stat.color.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Icon(stat.icon, color: stat.color, size: 24),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: stat.isPositive ? Colors.green : Colors.red,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  stat.change,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const Spacer(),
          Text(
            stat.value,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 24,
              color: stat.color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            stat.title,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecentActivity() {
    return WidgetHelper.buildStreamWidget(
      stream: ServiceHelper.getStream('admin_activity_logs', 
        orderBy: 'timestamp', 
        descending: true, 
        limit: 10
      ),
      builder: (snapshot) {
        return WidgetHelper.buildKipikContainer(
          backgroundColor: Colors.black54,
          child: ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: snapshot.docs.length,
            separatorBuilder: (context, index) => Divider(
              color: Colors.grey.shade700,
              height: 1,
            ),
            itemBuilder: (context, index) {
              final activity = snapshot.docs[index].data() as Map<String, dynamic>;
              return ListTile(
                leading: CircleAvatar(
                  backgroundColor: _getActivityColor(activity['type']).withOpacity(0.2),
                  child: Icon(
                    _getActivityIcon(activity['type']), 
                    color: _getActivityColor(activity['type']), 
                    size: 20
                  ),
                ),
                title: Text(
                  activity['title'] ?? 'Action systÃ¨me',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                subtitle: Text(
                  activity['description'] ?? '',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
                trailing: Text(
                  ServiceHelper.formatTimeAgo(
                    ServiceHelper.timestampToDateTime(activity['timestamp'])
                  ),
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 10,
                    color: Colors.white60,
                  ),
                ),
              );
            },
          ),
        );
      },
      empty: WidgetHelper.buildKipikContainer(
        backgroundColor: Colors.black54,
        child: const Center(
          child: Padding(
            padding: EdgeInsets.all(32),
            child: Text(
              'Aucune activitÃ© rÃ©cente',
              style: TextStyle(color: Colors.white70),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildQuickActions() {
    final actions = [
      QuickAction(
        icon: Icons.add,
        title: 'Nouvelle Convention',
        subtitle: 'CrÃ©er un nouvel Ã©vÃ©nement',
        color: KipikTheme.rouge,
        onTap: _createNewConvention,
      ),
      QuickAction(
        icon: Icons.analytics,
        title: 'Rapports',
        subtitle: 'Voir les analyses dÃ©taillÃ©es',
        color: Colors.blue,
        onTap: _viewReports,
      ),
      QuickAction(
        icon: Icons.people,
        title: 'Utilisateurs',
        subtitle: 'GÃ©rer les comptes',
        color: Colors.green,
        onTap: _manageUsers,
      ),
      QuickAction(
        icon: Icons.settings,
        title: 'Configuration',
        subtitle: 'ParamÃ¨tres systÃ¨me',
        color: Colors.purple,
        onTap: _openSettings,
      ),
    ];

    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
        childAspectRatio: 2,
      ),
      itemCount: actions.length,
      itemBuilder: (context, index) {
        final action = actions[index];
        return GestureDetector(
          onTap: () {
            HapticFeedback.lightImpact();
            action.onTap();
          },
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  action.color.withOpacity(0.2),
                  action.color.withOpacity(0.1),
                ],
              ),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: action.color.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(action.icon, color: action.color, size: 24),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        action.title,
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 14,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        action.subtitle,
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildConventionsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          WidgetHelper.buildStreamWidget(
            stream: ServiceHelper.getStream('conventions'),
            builder: (snapshot) {
              return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Conventions (${snapshot.docs.length})',
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                  ElevatedButton.icon(
                    onPressed: _createNewConvention,
                    icon: const Icon(Icons.add, size: 16),
                    label: const Text('Nouveau'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: KipikTheme.rouge,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    ),
                  ),
                ],
              );
            },
          ),
          const SizedBox(height: 16),
          _buildConventionsList(),
        ],
      ),
    );
  }

  Widget _buildConventionsList() {
    return WidgetHelper.buildStreamWidget(
      stream: ServiceHelper.getStream('conventions', orderBy: 'createdAt', descending: true),
      builder: (snapshot) {
        return ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: snapshot.docs.length,
          itemBuilder: (context, index) {
            final conventionData = snapshot.docs[index].data() as Map<String, dynamic>;
            final conventionId = snapshot.docs[index].id;
            return _buildConventionCard(conventionId, conventionData);
          },
        );
      },
      empty: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.event_note, size: 64, color: Colors.white54),
            const SizedBox(height: 16),
            const Text(
              'Aucune convention trouvÃ©e',
              style: TextStyle(color: Colors.white70, fontSize: 16),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _createNewConvention,
              icon: const Icon(Icons.add),
              label: const Text('CrÃ©er la premiÃ¨re convention'),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConventionCard(String conventionId, Map<String, dynamic> data) {
    final basicInfo = data['basic'] as Map<String, dynamic>? ?? {};
    final locationInfo = data['location'] as Map<String, dynamic>? ?? {};
    final datesInfo = data['dates'] as Map<String, dynamic>? ?? {};
    final statsInfo = data['stats'] as Map<String, dynamic>? ?? {};
    
    final title = basicInfo['name'] ?? 'Convention sans nom';
    final location = locationInfo['venue'] ?? 'Lieu non dÃ©fini';
    final isPremium = basicInfo['isPremium'] ?? false;
    final status = basicInfo['status'] ?? 'draft';
    
    final startDate = ServiceHelper.timestampToDateTime(datesInfo['start']);
    final endDate = ServiceHelper.timestampToDateTime(datesInfo['end']);
    
    final isUpcoming = startDate?.isAfter(DateTime.now()) ?? false;
    final isPast = endDate?.isBefore(DateTime.now()) ?? false;

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.black54,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: isPremium 
              ? KipikTheme.rouge.withOpacity(0.5) 
              : Colors.grey.shade700,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            title,
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                              color: Colors.white,
                            ),
                          ),
                        ),
                        if (isPremium)
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: KipikTheme.rouge,
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: const Text(
                              'PREMIUM',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      location,
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.white70,
                      ),
                    ),
                  ],
                ),
              ),
              WidgetHelper.buildStatusBadge(status),
            ],
          ),

          const SizedBox(height: 16),

          // Informations dÃ©taillÃ©es
          Row(
            children: [
              _buildInfoChip(
                Icons.calendar_today,
                startDate != null ? '${startDate.day}/${startDate.month}' : 'TBD',
                Colors.blue,
              ),
              const SizedBox(width: 8),
              _buildInfoChip(
                Icons.people,
                '${statsInfo['tattooersCount'] ?? 0} stands',
                Colors.green,
              ),
              const SizedBox(width: 8),
              _buildInfoChip(
                Icons.euro,
                ServiceHelper.formatCurrency(statsInfo['revenue']?['total'] ?? 0.0),
                Colors.amber,
              ),
            ],
          ),

          const SizedBox(height: 16),

          // Actions
          Row(
            children: [
              Expanded(
                child: OutlinedButton.icon(
                  onPressed: () => _editConvention(conventionId, data),
                  icon: const Icon(Icons.edit, size: 16),
                  label: const Text('Modifier'),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.white,
                    side: const BorderSide(color: Colors.white70),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () => _viewConventionDetails(conventionId),
                  icon: const Icon(Icons.visibility, size: 16),
                  label: const Text('Voir'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: KipikTheme.rouge,
                    foregroundColor: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildInfoChip(IconData icon, String text, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, color: color, size: 12),
          const SizedBox(width: 4),
          Text(
            text,
            style: TextStyle(
              color: color,
              fontSize: 10,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSettingsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'ParamÃ¨tres SystÃ¨me',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),

          _buildSettingsSection(
            'Commission & Paiements',
            [
              SettingsItem(
                title: 'Taux de commission',
                subtitle: '1% sur les rÃ©servations de stands',
                trailing: 'Modifier',
                onTap: _editCommissionRate,
              ),
              SettingsItem(
                title: 'MÃ©thodes de paiement',
                subtitle: 'Stripe, PayPal, Virement',
                trailing: 'Configurer',
                onTap: _configurePayments,
              ),
            ],
          ),

          const SizedBox(height: 24),

          _buildSettingsSection(
            'Notifications',
            [
              SettingsItem(
                title: 'Email admin',
                subtitle: 'Notifications importantes',
                trailing: 'Actif',
                onTap: _configureNotifications,
              ),
              SettingsItem(
                title: 'Rapports automatiques',
                subtitle: 'Hebdomadaires',
                trailing: 'Configurer',
                onTap: _configureReports,
              ),
            ],
          ),

          const SizedBox(height: 24),

          _buildSettingsSection(
            'SÃ©curitÃ©',
            [
              SettingsItem(
                title: 'Sauvegarde donnÃ©es',
                subtitle: 'DerniÃ¨re: Aujourd\'hui 03:00',
                trailing: 'OK',
                onTap: _configureBackup,
              ),
              SettingsItem(
                title: 'Logs d\'activitÃ©',
                subtitle: 'Conservation 90 jours',
                trailing: 'Voir',
                onTap: _viewLogs,
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSettingsSection(String title, List<SettingsItem> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 16,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        WidgetHelper.buildKipikContainer(
          backgroundColor: Colors.black54,
          child: ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: items.length,
            separatorBuilder: (context, index) => Divider(
              color: Colors.grey.shade700,
              height: 1,
            ),
            itemBuilder: (context, index) {
              final item = items[index];
              return ListTile(
                title: Text(
                  item.title,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.white,
                  ),
                ),
                subtitle: Text(
                  item.subtitle,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
                trailing: Text(
                  item.trailing,
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: KipikTheme.rouge,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                onTap: item.onTap,
              );
            },
          ),
        ),
      ],
    );
  }

  // Helper methods
  Future<Map<String, dynamic>> _getAdminStats() async {
    try {
      // RÃ©cupÃ©rer les donnÃ©es depuis Firebase
      final conventionsData = await ServiceHelper.searchConventions();
      final analyticsData = await ServiceHelper.getAnalyticsData('admin');
      
      final activeConventions = conventionsData.where((c) => c['basic']?['status'] == 'active').length;
      final totalTattooers = analyticsData['tattooers']?['total'] ?? 0;
      final monthlyRevenue = (analyticsData['revenue']?['total'] as num?)?.toDouble() ?? 0.0;
      final revenueGrowth = (analyticsData['revenue']?['growth'] as num?)?.toDouble() ?? 0.0;
      
      return {
        'activeConventions': activeConventions,
        'newConventions': conventionsData.length - activeConventions,
        'totalTattooers': totalTattooers,
        'newTattooers': (totalTattooers * 0.1).round(), // 10% de nouveaux
        'monthlyRevenue': monthlyRevenue,
        'revenueGrowth': revenueGrowth / 100,
      };
    } catch (e) {
      return {
        'activeConventions': 0,
        'newConventions': 0,
        'totalTattooers': 0,
        'newTattooers': 0,
        'monthlyRevenue': 0.0,
        'revenueGrowth': 0.0,
      };
    }
  }

  Color _getActivityColor(String? type) {
    switch (type) {
      case 'convention_created': return Colors.green;
      case 'user_registered': return Colors.blue;
      case 'payment_received': return Colors.amber;
      case 'convention_updated': return Colors.orange;
      default: return Colors.grey;
    }
  }

  IconData _getActivityIcon(String? type) {
    switch (type) {
      case 'convention_created': return Icons.add_circle;
      case 'user_registered': return Icons.person_add;
      case 'payment_received': return Icons.payment;
      case 'convention_updated': return Icons.edit;
      default: return Icons.info;
    }
  }

  // Actions avec tracking Firebase
  void _createNewConvention() async {
    try {
      await ServiceHelper.trackEvent('admin_create_convention_started', {
        'timestamp': DateTime.now().toIso8601String(),
      });
      
      Navigator.pushNamed(context, '/conventions/create');
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur lors de la crÃ©ation');
    }
  }

  void _refreshData() async {
    HapticFeedback.lightImpact();
    setState(() => _isLoading = true);
    
    await _loadAdminData(); // âœ… CORRIGÃ‰ - Maintenant _loadAdminData est async
    
    try {
      await ServiceHelper.trackEvent('admin_data_refreshed', {
        'timestamp': DateTime.now().toIso8601String(),
      });
    } catch (e) {
      // Erreur de tracking non bloquante
      print('Erreur tracking: $e');
    }
  }

  void _viewReports() async {
    await ServiceHelper.trackEvent('admin_reports_accessed', {
      'timestamp': DateTime.now().toIso8601String(),
    });
    
    Navigator.pushNamed(context, '/admin/reports');
  }

  void _manageUsers() async {
    await ServiceHelper.trackEvent('admin_users_accessed', {
      'timestamp': DateTime.now().toIso8601String(),
    });
    
    Navigator.pushNamed(context, '/admin/users');
  }

  void _openSettings() {
    _tabController.animateTo(2);
  }

  void _editConvention(String conventionId, Map<String, dynamic> data) async {
    await ServiceHelper.trackEvent('admin_convention_edit_started', {
      'conventionId': conventionId,
      'conventionName': data['basic']?['name'],
    });
    
    Navigator.pushNamed(context, '/conventions/edit', arguments: conventionId);
  }

  void _viewConventionDetails(String conventionId) async {
    await ServiceHelper.trackEvent('admin_convention_viewed', {
      'conventionId': conventionId,
    });
    
    Navigator.pushNamed(
      context,
      '/conventions/detail',
      arguments: {
        'conventionId': conventionId,
        'userRole': UserRole.admin,
      },
    );
  }

  void _editCommissionRate() {
    KipikTheme.showInfoSnackBar(context, 'Configuration commission - Ã€ implÃ©menter');
  }

  void _configurePayments() {
    KipikTheme.showInfoSnackBar(context, 'Configuration paiements - Ã€ implÃ©menter');
  }

  void _configureNotifications() {
    KipikTheme.showInfoSnackBar(context, 'Configuration notifications - Ã€ implÃ©menter');
  }

  void _configureReports() {
    KipikTheme.showInfoSnackBar(context, 'Configuration rapports - Ã€ implÃ©menter');
  }

  void _configureBackup() {
    KipikTheme.showInfoSnackBar(context, 'Configuration sauvegarde - Ã€ implÃ©menter');
  }

  void _viewLogs() {
    Navigator.pushNamed(context, '/admin/logs');
  }
}

// ModÃ¨les pour l'admin
class AdminStats {
  final String title;
  final String value;
  final String change;
  final bool isPositive;
  final IconData icon;
  final Color color;

  AdminStats({
    required this.title,
    required this.value,
    required this.change,
    required this.isPositive,
    required this.icon,
    required this.color,
  });
}

class QuickAction {
  final IconData icon;
  final String title;
  final String subtitle;
  final Color color;
  final VoidCallback onTap;

  QuickAction({
    required this.icon,
    required this.title,
    required this.subtitle,
    required this.color,
    required this.onTap,
  });
}

class SettingsItem {
  final String title;
  final String subtitle;
  final String trailing;
  final VoidCallback onTap;

  SettingsItem({
    required this.title,
    required this.subtitle,
    required this.trailing,
    required this.onTap,
  });
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\conventions\convention_booking_page.dart

// lib/pages/conventions/convention_booking_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../models/convention.dart';

class ConventionBookingPage extends StatefulWidget {
  final String conventionId;
  final String? tattooerId;

  const ConventionBookingPage({
    Key? key,
    required this.conventionId,
    this.tattooerId,
  }) : super(key: key);

  @override
  State<ConventionBookingPage> createState() => _ConventionBookingPageState();
}

class _ConventionBookingPageState extends State<ConventionBookingPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late Animation<Offset> _slideAnimation;
  
  // DonnÃ©es convention mockÃ©es
  Convention? _convention;
  TattooerInfo? _selectedTattooer;
  List<TattooerInfo> _availableTattooers = [];
  
  // Ã‰tat rÃ©servation
  DateTime? _selectedDate;
  String? _selectedTimeSlot;
  String _selectedService = 'Consultation';
  final List<String> _services = [
    'Consultation',
    'Petit tatouage (1-2h)',
    'Tatouage moyen (3-4h)',
    'Grand tatouage (5h+)',
    'Retouche',
  ];
  
  // Formulaire
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _descriptionController = TextEditingController();
  
  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadConventionData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));

    _slideController.forward();
  }

  void _loadConventionData() {
    // Simulation chargement donnÃ©es
    setState(() {
      _convention = Convention(
        id: widget.conventionId,
        title: 'Paris Tattoo Convention 2025',
        location: 'Paris Expo, Porte de Versailles',
        start: DateTime(2025, 8, 15),
        end: DateTime(2025, 8, 17),
        description: 'La plus grande convention de tatouage de France',
        imageUrl: 'https://example.com/paris-tattoo.jpg',
        isOpen: true,
        isPremium: true,
      );

      _availableTattooers = _generateTattooers();
      
      if (widget.tattooerId != null) {
        _selectedTattooer = _availableTattooers.firstWhere(
          (t) => t.id == widget.tattooerId,
          orElse: () => _availableTattooers.first,
        );
      }
    });
  }

  List<TattooerInfo> _generateTattooers() {
    return [
      TattooerInfo(
        id: 'tat1',
        name: 'Alex Martin',
        style: 'RÃ©alisme',
        rating: 4.8,
        standNumber: 'A12',
        availableSlots: {
          DateTime(2025, 8, 15): ['10:00', '14:00', '16:30'],
          DateTime(2025, 8, 16): ['09:00', '11:00', '15:00'],
          DateTime(2025, 8, 17): ['10:30', '13:00'],
        },
        priceRange: '150-300â‚¬',
      ),
      TattooerInfo(
        id: 'tat2',
        name: 'Emma Dubois',
        style: 'Japonais',
        rating: 4.9,
        standNumber: 'B05',
        availableSlots: {
          DateTime(2025, 8, 15): ['11:00', '15:30'],
          DateTime(2025, 8, 16): ['10:00', '14:00', '17:00'],
          DateTime(2025, 8, 17): ['09:30', '12:00', '16:00'],
        },
        priceRange: '200-400â‚¬',
      ),
      TattooerInfo(
        id: 'tat3',
        name: 'Marco Silva',
        style: 'GÃ©omÃ©trique',
        rating: 4.7,
        standNumber: 'C18',
        availableSlots: {
          DateTime(2025, 8, 15): ['13:00', '17:00'],
          DateTime(2025, 8, 16): ['09:30', '12:30', '16:30'],
          DateTime(2025, 8, 17): ['11:00', '14:30'],
        },
        priceRange: '100-250â‚¬',
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: 'RÃ©server un CrÃ©neau',
        subtitle: _convention?.title ?? 'Convention',
        showBackButton: true,
        showBurger: true,
        useProStyle: false,
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),

          // Contenu principal
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildConventionHeader(),
                      const SizedBox(height: 24),
                      _buildTattooerSelection(),
                      const SizedBox(height: 24),
                      if (_selectedTattooer != null) ...[
                        _buildDateSelection(),
                        const SizedBox(height: 24),
                        if (_selectedDate != null) ...[
                          _buildTimeSlotSelection(),
                          const SizedBox(height: 24),
                        ],
                        _buildServiceSelection(),
                        const SizedBox(height: 24),
                        _buildContactForm(),
                        const SizedBox(height: 24),
                        _buildBookingButton(),
                      ],
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConventionHeader() {
    if (_convention == null) return const SizedBox.shrink();

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.black87, Colors.black54],
        ),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            _convention!.title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(Icons.location_on, color: KipikTheme.rouge, size: 16),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _convention!.location,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(Icons.calendar_today, color: KipikTheme.rouge, size: 16),
              const SizedBox(width: 8),
              Text(
                '${_convention!.start.day}/${_convention!.start.month}/${_convention!.start.year} - ${_convention!.end.day}/${_convention!.end.month}/${_convention!.end.year}',
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.white70,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTattooerSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Choisir un Tatoueur',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 18,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 16),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _availableTattooers.length,
          itemBuilder: (context, index) {
            final tattooer = _availableTattooers[index];
            final isSelected = _selectedTattooer?.id == tattooer.id;

            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              decoration: BoxDecoration(
                color: isSelected ? KipikTheme.rouge.withOpacity(0.2) : Colors.black54,
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: isSelected ? KipikTheme.rouge : Colors.grey.shade700,
                  width: isSelected ? 2 : 1,
                ),
              ),
              child: ListTile(
                contentPadding: const EdgeInsets.all(16),
                leading: CircleAvatar(
                  backgroundColor: KipikTheme.rouge.withOpacity(0.3),
                  child: Text(
                    tattooer.name.substring(0, 2),
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 14,
                      color: Colors.white,
                    ),
                  ),
                ),
                title: Text(
                  tattooer.name,
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Colors.white,
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SizedBox(height: 4),
                    Text(
                      'Style: ${tattooer.style} â€¢ Stand ${tattooer.standNumber}',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.white70,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Row(
                      children: [
                        Row(
                          children: List.generate(5, (i) => Icon(
                            Icons.star,
                            size: 12,
                            color: i < tattooer.rating.floor() 
                                ? Colors.amber 
                                : Colors.grey,
                          )),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          tattooer.rating.toString(),
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            color: Colors.white70,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const Spacer(),
                        Text(
                          tattooer.priceRange,
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            color: Colors.green.shade300,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
                trailing: isSelected 
                    ? Icon(Icons.check_circle, color: KipikTheme.rouge)
                    : Icon(Icons.radio_button_unchecked, color: Colors.grey),
                onTap: () {
                  setState(() {
                    _selectedTattooer = tattooer;
                    _selectedDate = null;
                    _selectedTimeSlot = null;
                  });
                  HapticFeedback.lightImpact();
                },
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildDateSelection() {
    final availableDates = _selectedTattooer!.availableSlots.keys.toList()
      ..sort();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Choisir une Date',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 18,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 16),
        SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          child: Row(
            children: availableDates.map((date) {
              final isSelected = _selectedDate == date;
              final dayName = _getDayName(date.weekday);
              final dayNumber = date.day;
              final monthName = _getMonthName(date.month);

              return GestureDetector(
                onTap: () {
                  setState(() {
                    _selectedDate = date;
                    _selectedTimeSlot = null;
                  });
                  HapticFeedback.lightImpact();
                },
                child: Container(
                  margin: const EdgeInsets.only(right: 12),
                  padding: const EdgeInsets.all(16),
                  width: 100,
                  decoration: BoxDecoration(
                    color: isSelected ? KipikTheme.rouge : Colors.black54,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: isSelected ? KipikTheme.rouge : Colors.grey.shade700,
                    ),
                  ),
                  child: Column(
                    children: [
                      Text(
                        dayName,
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: isSelected ? Colors.white : Colors.white70,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        dayNumber.toString(),
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 24,
                          color: isSelected ? Colors.white : Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        monthName,
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: isSelected ? Colors.white : Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }).toList(),
          ),
        ),
      ],
    );
  }

  Widget _buildTimeSlotSelection() {
    final availableSlots = _selectedTattooer!.availableSlots[_selectedDate!] ?? [];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Choisir un Horaire',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 18,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 16),
        Wrap(
          spacing: 12,
          runSpacing: 12,
          children: availableSlots.map((slot) {
            final isSelected = _selectedTimeSlot == slot;

            return GestureDetector(
              onTap: () {
                setState(() {
                  _selectedTimeSlot = slot;
                });
                HapticFeedback.lightImpact();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                decoration: BoxDecoration(
                  color: isSelected ? KipikTheme.rouge : Colors.black54,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isSelected ? KipikTheme.rouge : Colors.grey.shade700,
                  ),
                ),
                child: Text(
                  slot,
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 16,
                    color: isSelected ? Colors.white : Colors.white70,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildServiceSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Type de Prestation',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 18,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 16),
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.black54,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: Colors.grey.shade700),
          ),
          child: DropdownButtonFormField<String>(
            value: _selectedService,
            decoration: const InputDecoration(
              border: InputBorder.none,
              labelText: 'SÃ©lectionner une prestation',
              labelStyle: TextStyle(color: Colors.white70),
            ),
            dropdownColor: Colors.grey.shade800,
            style: const TextStyle(color: Colors.white),
            items: _services.map((service) {
              return DropdownMenuItem(
                value: service,
                child: Text(service),
              );
            }).toList(),
            onChanged: (value) {
              setState(() {
                _selectedService = value!;
              });
            },
          ),
        ),
      ],
    );
  }

  Widget _buildContactForm() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Informations de Contact',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 18,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 16),
        _buildFormField(
          controller: _nameController,
          label: 'Nom complet',
          icon: Icons.person,
          validator: (value) {
            if (value?.isEmpty ?? true) {
              return 'Veuillez entrer votre nom';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        _buildFormField(
          controller: _emailController,
          label: 'Email',
          icon: Icons.email,
          keyboardType: TextInputType.emailAddress,
          validator: (value) {
            if (value?.isEmpty ?? true) {
              return 'Veuillez entrer votre email';
            }
            if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value!)) {
              return 'Email invalide';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        _buildFormField(
          controller: _phoneController,
          label: 'TÃ©lÃ©phone',
          icon: Icons.phone,
          keyboardType: TextInputType.phone,
          validator: (value) {
            if (value?.isEmpty ?? true) {
              return 'Veuillez entrer votre tÃ©lÃ©phone';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        _buildFormField(
          controller: _descriptionController,
          label: 'Description du projet (optionnel)',
          icon: Icons.description,
          maxLines: 3,
        ),
      ],
    );
  }

  Widget _buildFormField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    TextInputType? keyboardType,
    int maxLines = 1,
    String? Function(String?)? validator,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.black54,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.grey.shade700),
      ),
      child: TextFormField(
        controller: controller,
        keyboardType: keyboardType,
        maxLines: maxLines,
        validator: validator,
        style: const TextStyle(color: Colors.white),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: const TextStyle(color: Colors.white70),
          prefixIcon: Icon(icon, color: KipikTheme.rouge),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.all(16),
        ),
      ),
    );
  }

  Widget _buildBookingButton() {
    final canBook = _selectedTattooer != null && 
                   _selectedDate != null && 
                   _selectedTimeSlot != null;

    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: canBook ? _submitBooking : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: KipikTheme.rouge,
          disabledBackgroundColor: Colors.grey.shade700,
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
        ),
        child: Text(
          canBook ? 'Confirmer la RÃ©servation' : 'ComplÃ©tez la sÃ©lection',
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 16,
            color: Colors.white,
          ),
        ),
      ),
    );
  }

  void _submitBooking() {
    if (!_formKey.currentState!.validate()) return;

    HapticFeedback.mediumImpact();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey.shade900,
        title: Text(
          'RÃ©servation ConfirmÃ©e !',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            color: KipikTheme.rouge,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Votre crÃ©neau a Ã©tÃ© rÃ©servÃ© :',
              style: const TextStyle(color: Colors.white),
            ),
            const SizedBox(height: 16),
            _buildConfirmationRow('Tatoueur', _selectedTattooer!.name),
            _buildConfirmationRow('Date', '${_selectedDate!.day}/${_selectedDate!.month}/${_selectedDate!.year}'),
            _buildConfirmationRow('Heure', _selectedTimeSlot!),
            _buildConfirmationRow('Service', _selectedService),
            _buildConfirmationRow('Stand', _selectedTattooer!.standNumber),
            const SizedBox(height: 16),
            Text(
              'Un email de confirmation sera envoyÃ© Ã  ${_emailController.text}',
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 12,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pop();
            },
            child: Text(
              'Fermer',
              style: TextStyle(color: KipikTheme.rouge),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConfirmationRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          Text(
            '$label: ',
            style: const TextStyle(
              color: Colors.white70,
              fontSize: 14,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  String _getDayName(int weekday) {
    const days = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
    return days[weekday - 1];
  }

  String _getMonthName(int month) {
    const months = ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun',
                   'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'];
    return months[month - 1];
  }
}

// ModÃ¨le pour les tatoueurs
class TattooerInfo {
  final String id;
  final String name;
  final String style;
  final double rating;
  final String standNumber;
  final Map<DateTime, List<String>> availableSlots;
  final String priceRange;

  TattooerInfo({
    required this.id,
    required this.name,
    required this.style,
    required this.rating,
    required this.standNumber,
    required this.availableSlots,
    required this.priceRange,
  });
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\conventions\convention_list_page.dart

// lib/pages/conventions/convention_list_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/models/convention.dart';
import 'package:kipik_v5/services/convention/firebase_convention_service.dart';
import 'package:kipik_v5/locator.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:file_selector/file_selector.dart';

class ConventionListPage extends StatefulWidget {
  const ConventionListPage({Key? key}) : super(key: key);

  @override
  _ConventionListPageState createState() => _ConventionListPageState();
}

class _ConventionListPageState extends State<ConventionListPage> {
  final FirebaseConventionService _service = locator<FirebaseConventionService>();
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  bool _isLoading = true;
  List<Convention> _conventions = [];
  List<Convention> _filteredConventions = [];
  
  // Filtres
  String _selectedFilter = 'Toutes';
  final List<String> _filterOptions = [
    'Toutes',
    'Ã€ venir',
    'Inscriptions ouvertes',
    'Premium',
  ];

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
    _loadConventions();
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    super.dispose();
  }

  void _onSearchChanged() {
    setState(() {
      _searchQuery = _searchController.text;
      _applyFilters();
    });
  }

  Future<void> _loadConventions() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final conventions = await _service.fetchConventions();
      
      setState(() {
        _conventions = conventions;
        _applyFilters();
        _isLoading = false;
      });
    } catch (e) {
      print('Erreur lors du chargement des conventions: $e');
      
      setState(() {
        _isLoading = false;
        _conventions = [];
        _filteredConventions = [];
      });
      
      // Afficher un message d'erreur
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors du chargement des conventions. Veuillez rÃ©essayer.'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _applyFilters() {
    final now = DateTime.now();
    
    // Filtrer par le texte de recherche
    var filtered = _conventions.where((convention) {
      final matchesSearch = _searchQuery.isEmpty || 
          convention.title.toLowerCase().contains(_searchQuery.toLowerCase()) ||
          convention.location.toLowerCase().contains(_searchQuery.toLowerCase()) ||
          convention.description.toLowerCase().contains(_searchQuery.toLowerCase());
      
      return matchesSearch;
    }).toList();
    
    // Appliquer les filtres de catÃ©gorie
    switch (_selectedFilter) {
      case 'Ã€ venir':
        filtered = filtered.where((c) => c.start.isAfter(now)).toList();
        break;
      case 'Inscriptions ouvertes':
        filtered = filtered.where((c) => c.isOpen).toList();
        break;
      case 'Premium':
        filtered = filtered.where((c) => c.isPremium).toList();
        break;
      default:
        // 'Toutes' - pas de filtre supplÃ©mentaire
        break;
    }
    
    // Trier par date (plus proches en premier)
    filtered.sort((a, b) => a.start.compareTo(b.start));
    
    setState(() {
      _filteredConventions = filtered;
    });
  }

  void _showConventionDetails(Convention convention) {
    showModalBottomSheet<void>(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return DraggableScrollableSheet(
          initialChildSize: 0.8,
          maxChildSize: 0.95,
          minChildSize: 0.5,
          builder: (_, controller) {
            return Container(
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10.0,
                    spreadRadius: 0.0,
                    offset: Offset(0.0, -3.0),
                  )
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // PoignÃ©e de glissement
                  Center(
                    child: Container(
                      margin: EdgeInsets.symmetric(vertical: 12),
                      width: 40,
                      height: 5,
                      decoration: BoxDecoration(
                        color: Colors.grey[400],
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                  ),
                  
                  // Image de la convention
                  SizedBox(
                    height: 200,
                    child: Stack(
                      fit: StackFit.expand,
                      children: [
                        Container(
                          foregroundDecoration: BoxDecoration(
                            gradient: LinearGradient(
                              begin: Alignment.topCenter,
                              end: Alignment.bottomCenter,
                              colors: [Colors.transparent, Colors.black.withOpacity(0.7)],
                            ),
                          ),
                          child: Image.network(
                            convention.imageUrl,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) => Container(
                              color: Colors.grey[800],
                              child: Center(
                                child: Icon(Icons.image_not_supported, size: 50, color: Colors.grey[400]),
                              ),
                            ),
                          ),
                        ),
                        Positioned(
                          bottom: 16,
                          left: 16,
                          right: 16,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                convention.title,
                                style: TextStyle(
                                  fontFamily: 'PermanentMarker',
                                  fontSize: 24,
                                  color: Colors.white,
                                  shadows: [
                                    Shadow(
                                      blurRadius: 5.0,
                                      color: Colors.black.withOpacity(0.5),
                                      offset: Offset(0, 2),
                                    ),
                                  ],
                                ),
                              ),
                              SizedBox(height: 4),
                              Row(
                                children: [
                                  Icon(Icons.location_on, color: Colors.white, size: 16),
                                  SizedBox(width: 4),
                                  Text(
                                    convention.location,
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 14,
                                      shadows: [
                                        Shadow(
                                          blurRadius: 3.0,
                                          color: Colors.black.withOpacity(0.5),
                                          offset: Offset(0, 1),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                        if (convention.isPremium)
                          Positioned(
                            top: 16,
                            right: 16,
                            child: Container(
                              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                              decoration: BoxDecoration(
                                color: KipikTheme.rouge,
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Text(
                                'PREMIUM',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            ),
                          ),
                      ],
                    ),
                  ),
                  
                  // Contenu principal
                  Expanded(
                    child: ListView(
                      controller: controller,
                      padding: EdgeInsets.all(16),
                      children: [
                        // Dates
                        Card(
                          color: Colors.grey[900],
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Padding(
                            padding: EdgeInsets.all(16),
                            child: Row(
                              children: [
                                Icon(Icons.calendar_today, color: KipikTheme.rouge),
                                SizedBox(width: 12),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Dates',
                                      style: TextStyle(
                                        color: Colors.grey[400],
                                        fontSize: 12,
                                      ),
                                    ),
                                    Text(
                                      _formatDateRange(convention.start, convention.end),
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 16,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                ),
                                Spacer(),
                                Text(
                                  _getDaysUntil(convention.start),
                                  style: TextStyle(
                                    color: KipikTheme.rouge,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                        SizedBox(height: 16),
                        
                        // Description
                        Text(
                          'Ã€ propos',
                          style: TextStyle(
                            fontFamily: 'PermanentMarker',
                            color: Colors.white,
                            fontSize: 18,
                          ),
                        ),
                        SizedBox(height: 8),
                        Text(
                          convention.description,
                          style: TextStyle(
                            color: Colors.white70,
                            fontSize: 14,
                            height: 1.4,
                          ),
                        ),
                        SizedBox(height: 16),
                        
                        // Artistes
                        if (convention.artists != null && convention.artists!.isNotEmpty) ...[
                          Text(
                            'Artistes confirmÃ©s',
                            style: TextStyle(
                              fontFamily: 'PermanentMarker',
                              color: Colors.white,
                              fontSize: 18,
                            ),
                          ),
                          SizedBox(height: 8),
                          Wrap(
                            spacing: 8,
                            runSpacing: 8,
                            children: convention.artists!.map((artist) {
                              return Chip(
                                label: Text(artist),
                                backgroundColor: Colors.grey[800],
                                labelStyle: TextStyle(color: Colors.white),
                              );
                            }).toList(),
                          ),
                          SizedBox(height: 24),
                        ],
                        
                        // Informations supplÃ©mentaires pour les Ã©vÃ©nements premium
                        if (convention.isPremium && 
                           (convention.proSpots != null || 
                            convention.merchandiseSpots != null || 
                            convention.dayTicketPrice != null || 
                            convention.weekendTicketPrice != null)) ...[
                          Text(
                            'Informations supplÃ©mentaires',
                            style: TextStyle(
                              fontFamily: 'PermanentMarker',
                              color: Colors.white,
                              fontSize: 18,
                            ),
                          ),
                          SizedBox(height: 8),
                          Card(
                            color: Colors.grey[900],
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Padding(
                              padding: EdgeInsets.all(16),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  if (convention.proSpots != null) ...[
                                    _buildInfoRow(
                                      icon: Icons.person,
                                      label: 'Places pour professionnels',
                                      value: '${convention.proSpots}',
                                    ),
                                    SizedBox(height: 8),
                                  ],
                                  if (convention.merchandiseSpots != null) ...[
                                    _buildInfoRow(
                                      icon: Icons.store,
                                      label: 'Stands marchands',
                                      value: '${convention.merchandiseSpots}',
                                    ),
                                    SizedBox(height: 8),
                                  ],
                                  if (convention.dayTicketPrice != null) ...[
                                    _buildInfoRow(
                                      icon: Icons.calendar_today,
                                      label: 'Ticket journÃ©e',
                                      value: '${convention.dayTicketPrice}â‚¬',
                                    ),
                                    SizedBox(height: 8),
                                  ],
                                  if (convention.weekendTicketPrice != null) ...[
                                    _buildInfoRow(
                                      icon: Icons.weekend,
                                      label: 'Ticket weekend',
                                      value: '${convention.weekendTicketPrice}â‚¬',
                                    ),
                                  ],
                                ],
                              ),
                            ),
                          ),
                          SizedBox(height: 16),
                        ],
                        
                        // Ã‰vÃ©nements spÃ©ciaux
                        if (convention.events != null && convention.events!.isNotEmpty) ...[
                          Text(
                            'Ã‰vÃ©nements spÃ©ciaux',
                            style: TextStyle(
                              fontFamily: 'PermanentMarker',
                              color: Colors.white,
                              fontSize: 18,
                            ),
                          ),
                          SizedBox(height: 8),
                          Column(
                            children: convention.events!.map((event) {
                              return ListTile(
                                leading: Icon(Icons.event_note, color: KipikTheme.rouge),
                                title: Text(
                                  event,
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 14,
                                  ),
                                ),
                                dense: true,
                                contentPadding: EdgeInsets.zero,
                              );
                            }).toList(),
                          ),
                          SizedBox(height: 16),
                        ],
                        
                        // Bouton d'inscription
                        ElevatedButton(
                          onPressed: convention.isOpen ? () {
                            // Naviguer vers la page d'inscription ou ouvrir le site web
                            if (convention.website != null && convention.website!.isNotEmpty) {
                              _launchURL(convention.website!);
                            }
                          } : null,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: KipikTheme.rouge,
                            disabledBackgroundColor: Colors.grey[700],
                            padding: EdgeInsets.symmetric(vertical: 16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: Text(
                            convention.isOpen 
                                ? 'S\'inscrire Ã  cette convention' 
                                : 'Inscriptions fermÃ©es',
                            style: TextStyle(
                              color: Colors.white,
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                            ),
                          ),
                        ),
                        SizedBox(height: 12),
                        
                        // Lien vers le site web
                        if (convention.website != null && convention.website!.isNotEmpty)
                          TextButton.icon(
                            onPressed: () {
                              _launchURL(convention.website!);
                            },
                            icon: Icon(Icons.language),
                            label: Text('Visiter le site web'),
                            style: TextButton.styleFrom(
                              foregroundColor: Colors.white70,
                            ),
                          ),
                        SizedBox(height: 16),
                        
                        // Bouton pour voir sur la carte
                        OutlinedButton.icon(
                          onPressed: () {
                            Navigator.pushNamed(
                              context, 
                              '/conventions/map',
                              arguments: {
                                'centerId': convention.id,
                              },
                            );
                          },
                          icon: Icon(Icons.map),
                          label: Text('Voir sur la carte'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.white70,
                            side: BorderSide(color: Colors.grey[700]!),
                            padding: EdgeInsets.symmetric(vertical: 12),
                          ),
                        ),
                        SizedBox(height: 12),
                        
                        // Partager
                        OutlinedButton.icon(
                          onPressed: () {
                            // TODO: ImplÃ©menter la fonctionnalitÃ© de partage
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text('FonctionnalitÃ© de partage Ã  implÃ©menter')),
                            );
                          },
                          icon: Icon(Icons.share),
                          label: Text('Partager'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.white70,
                            side: BorderSide(color: Colors.grey[700]!),
                            padding: EdgeInsets.symmetric(vertical: 12),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildInfoRow({
    required IconData icon,
    required String label,
    required String value,
  }) {
    return Row(
      children: [
        Icon(icon, color: KipikTheme.rouge, size: 18),
        SizedBox(width: 8),
        Text(
          label,
          style: TextStyle(
            color: Colors.grey[400],
            fontSize: 14,
          ),
        ),
        Spacer(),
        Text(
          value,
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }

  String _formatDateRange(DateTime start, DateTime end) {
    final startFormat = DateFormat('d MMM', 'fr_FR').format(start);
    final endFormat = DateFormat('d MMM yyyy', 'fr_FR').format(end);
    return '$startFormat - $endFormat';
  }

  String _getDaysUntil(DateTime date) {
    final now = DateTime.now();
    final difference = date.difference(now).inDays;
    
    if (difference < 0) {
      return 'TerminÃ©';
    } else if (difference == 0) {
      return 'Aujourd\'hui !';
    } else if (difference == 1) {
      return 'Demain !';
    } else {
      return 'Dans $difference jours';
    }
  }

  Future<void> _launchURL(String url) async {
    final Uri uri = Uri.parse(url);
    if (!await launchUrl(uri, mode: LaunchMode.externalApplication)) {
      throw Exception('Impossible d\'ouvrir $url');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      drawer: DrawerFactory.of(context), // Utilisation de la factory de drawer
      appBar: const CustomAppBarKipik(
        title: 'Conventions de Tatouage',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: true,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // ArriÃ¨re-plan
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
          ),
          
          // Contenu principal
          SafeArea(
            child: Column(
              children: [
                // Barre de recherche
                Padding(
                  padding: const EdgeInsets.fromLTRB(16, 8, 16, 0),
                  child: TextField(
                    controller: _searchController,
                    decoration: InputDecoration(
                      hintText: 'Rechercher une convention...',
                      hintStyle: TextStyle(color: Colors.grey[400]),
                      prefixIcon: Icon(Icons.search, color: Colors.grey[400]),
                      filled: true,
                      fillColor: Colors.grey[900],
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide.none,
                      ),
                      contentPadding: EdgeInsets.symmetric(vertical: 12),
                    ),
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                
                // Filtres
                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 16),
                  child: Row(
                    children: _filterOptions.map((filter) {
                      final isSelected = _selectedFilter == filter;
                      return Padding(
                        padding: EdgeInsets.symmetric(horizontal: 4),
                        child: ChoiceChip(
                          label: Text(filter),
                          selected: isSelected,
                          onSelected: (selected) {
                            if (selected) {
                              setState(() {
                                _selectedFilter = filter;
                                _applyFilters();
                              });
                            }
                          },
                          backgroundColor: Colors.grey[900],
                          selectedColor: KipikTheme.rouge.withOpacity(0.3),
                          labelStyle: TextStyle(
                            color: isSelected ? KipikTheme.rouge : Colors.white70,
                            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ),
                
                // Liste des conventions
                Expanded(
                  child: _isLoading
                      ? Center(child: CircularProgressIndicator(color: KipikTheme.rouge))
                      : _filteredConventions.isEmpty
                          ? Center(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(
                                    Icons.event_busy,
                                    size: 64,
                                    color: Colors.grey[600],
                                  ),
                                  SizedBox(height: 16),
                                  Text(
                                    'Aucune convention trouvÃ©e',
                                    style: TextStyle(
                                      color: Colors.grey[400],
                                      fontSize: 18,
                                    ),
                                  ),
                                  SizedBox(height: 8),
                                  Text(
                                    'Essayez de modifier vos critÃ¨res de recherche',
                                    style: TextStyle(
                                      color: Colors.grey[600],
                                      fontSize: 14,
                                    ),
                                  ),
                                ],
                              ),
                            )
                          : ListView.builder(
                              padding: EdgeInsets.all(16),
                              itemCount: _filteredConventions.length,
                              itemBuilder: (context, index) {
                                final convention = _filteredConventions[index];
                                return _ConventionCard(
                                  convention: convention,
                                  onTap: () => _showConventionDetails(convention),
                                );
                              },
                            ),
                ),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Naviguer vers la page d'admin des conventions (si l'utilisateur est admin)
          Navigator.pushNamed(context, '/conventions/admin');
        },
        backgroundColor: KipikTheme.rouge,
        child: Icon(Icons.admin_panel_settings, color: Colors.white),
        tooltip: 'Administration des conventions',
      ),
    );
  }
}

/// Carte reprÃ©sentant une convention dans la liste
class _ConventionCard extends StatelessWidget {
  final Convention convention;
  final VoidCallback onTap;
  
  const _ConventionCard({
    Key? key,
    required this.convention,
    required this.onTap,
  }) : super(key: key);
  
  String _formatDateRange(DateTime start, DateTime end) {
    final startFormat = DateFormat('d MMM', 'fr_FR').format(start);
    final endFormat = DateFormat('d MMM yyyy', 'fr_FR').format(end);
    return '$startFormat - $endFormat';
  }
  
  String _getDaysUntil(DateTime date) {
    final now = DateTime.now();
    final difference = date.difference(now).inDays;
    
    if (difference < 0) {
      return 'TerminÃ©';
    } else if (difference == 0) {
      return 'Aujourd\'hui !';
    } else if (difference == 1) {
      return 'Demain !';
    } else {
      return 'Dans $difference jours';
    }
  }
  
  @override
  Widget build(BuildContext context) {
    final isPast = convention.end.isBefore(DateTime.now());
    
    return Card(
      margin: EdgeInsets.only(bottom: 16),
      color: Colors.grey[900],
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: convention.isPremium 
            ? BorderSide(color: KipikTheme.rouge.withOpacity(0.7), width: 2)
            : BorderSide.none,
      ),
      clipBehavior: Clip.antiAlias,
      child: InkWell(
        onTap: onTap,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Image de la convention
            SizedBox(
              height: 150,
              child: Stack(
                fit: StackFit.expand,
                children: [
                  Image.network( // Utilisation de Image.network au lieu de Image.asset
                    convention.imageUrl,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) => Container(
                      color: Colors.grey[800],
                      child: Center(
                        child: Icon(Icons.image_not_supported, size: 50, color: Colors.grey[400]),
                      ),
                    ),
                  ),
                  if (isPast)
                    Container(
                      color: Colors.black.withOpacity(0.5),
                      child: Center(
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          decoration: BoxDecoration(
                            color: Colors.black54,
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Text(
                            'TERMINÃ‰',
                            style: TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              letterSpacing: 1.2,
                            ),
                          ),
                        ),
                      ),
                    ),
                  if (convention.isPremium && !isPast)
                    Positioned(
                      top: 12,
                      right: 12,
                      child: Container(
                        padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: KipikTheme.rouge,
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          'PREMIUM',
                          style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ),
                ],
              ),
            ),
            
            // Informations de la convention
            Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Titre et dates
                  Text(
                    convention.title,
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.white,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  SizedBox(height: 4),
                  Row(
                    children: [
                      Icon(Icons.location_on, color: Colors.grey[400], size: 16),
                      SizedBox(width: 4),
                      Expanded(
                        child: Text(
                          convention.location,
                          style: TextStyle(
                            color: Colors.grey[400],
                            fontSize: 14,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  
                  // Dates et statut d'inscription
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.event, color: KipikTheme.rouge, size: 16),
                          SizedBox(width: 4),
                          Text(
                            _formatDateRange(convention.start, convention.end),
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                      if (!isPast)
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: convention.isOpen 
                                ? Colors.green.withOpacity(0.2) 
                                : Colors.grey[800],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            convention.isOpen 
                                ? 'Inscriptions ouvertes' 
                                : 'Inscriptions fermÃ©es',
                            style: TextStyle(
                              color: convention.isOpen 
                                  ? Colors.green[300] 
                                  : Colors.grey[400],
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                    ],
                  ),
                  SizedBox(height: 12),
                  
                  // Temps restant et bouton
                  if (!isPast)
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          _getDaysUntil(convention.start),
                          style: TextStyle(
                            color: KipikTheme.rouge,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        ElevatedButton(
                          onPressed: convention.isOpen ? () {
                            // Naviguer vers la page de dÃ©tails
                            onTap();
                          } : null,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: KipikTheme.rouge,
                            disabledBackgroundColor: Colors.grey[700],
                            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            'En savoir plus',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                            ),
                          ),
                        ),
                      ],
                    ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\conventions\convention_map_page.dart

// lib/pages/conventions/convention_map_page.dart

import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:location/location.dart' as location_package;
import 'package:geocoding/geocoding.dart';

import 'package:kipik_v5/locator.dart';
import 'package:kipik_v5/models/convention.dart';
import 'package:kipik_v5/services/convention/firebase_convention_service.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class ConventionMapPage extends StatefulWidget {
  const ConventionMapPage({Key? key}) : super(key: key);

  @override
  State<ConventionMapPage> createState() => _ConventionMapPageState();
}

class _ConventionMapPageState extends State<ConventionMapPage> {
  final FirebaseConventionService _service = locator<FirebaseConventionService>();
  final Completer<GoogleMapController> _controller = Completer<GoogleMapController>();
  
  // Utiliser un alias pour Ã©viter les conflits avec d'autres classes Location
  late location_package.Location _locationService;
  
  List<Convention> _conventions = [];
  final Set<Marker> _markers = {};
  final Map<String, LatLng> _locationCache = {};
  
  // Fond d'Ã©cran
  final String _backgroundImage = 'assets/background_charbon.png';

  bool _serviceEnabled = false;
  location_package.PermissionStatus _permissionStatus = location_package.PermissionStatus.denied;
  bool _isLoading = true;
  String? _centerId;

  @override
  void initState() {
    super.initState();
    // Initialiser le service de localisation dans initState
    _locationService = location_package.Location();
    _initLocation();
    _loadConventions();
  }
  
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    
    final args = ModalRoute.of(context)?.settings.arguments;
    if (args != null && args is Map<String, dynamic> && args.containsKey('centerId')) {
      _centerId = args['centerId'] as String;
    }
  }

  Future<void> _initLocation() async {
    _serviceEnabled = await _locationService.serviceEnabled();
    if (!_serviceEnabled) {
      _serviceEnabled = await _locationService.requestService();
      if (!_serviceEnabled) return;
    }

    _permissionStatus = await _locationService.hasPermission();
    if (_permissionStatus == location_package.PermissionStatus.denied) {
      _permissionStatus = await _locationService.requestPermission();
      if (_permissionStatus != location_package.PermissionStatus.granted) return;
    }

    setState(() {});
  }

  Future<LatLng?> _getCoordinatesFromAddress(String address) async {
    if (_locationCache.containsKey(address)) {
      return _locationCache[address];
    }
    
    try {
      final locations = await locationFromAddress(address);
      if (locations.isNotEmpty) {
        final location = locations.first;
        final latLng = LatLng(location.latitude, location.longitude);
        
        _locationCache[address] = latLng;
        
        return latLng;
      }
    } catch (e) {
      print('Erreur de gÃ©ocodage pour $address: $e');
    }
    
    return null;
  }

  Future<void> _loadConventions() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final list = await _service.fetchConventions();
      
      final markers = <Marker>{};
      
      for (final convention in list) {
        LatLng? position;
        
        if (convention.latitude != null && convention.longitude != null) {
          position = LatLng(convention.latitude!, convention.longitude!);
        } else {
          position = await _getCoordinatesFromAddress(convention.location);
        }
        
        if (position != null) {
          final marker = Marker(
            markerId: MarkerId(convention.id),
            position: position,
            infoWindow: InfoWindow(
              title: convention.title,
              snippet: _formatDateRange(convention.start, convention.end),
              onTap: () {
                _showConventionDetails(convention);
              },
            ),
            icon: convention.isPremium
                ? BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRose)
                : BitmapDescriptor.defaultMarker,
          );
          
          markers.add(marker);
        }
      }
      
      setState(() {
        _conventions = list;
        _markers.clear();
        _markers.addAll(markers);
        _isLoading = false;
      });
      
      if (_centerId != null) {
        _centerOnConvention(_centerId!);
      }
      
    } catch (e) {
      print('Erreur lors du chargement des conventions: $e');
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors du chargement des conventions. Veuillez rÃ©essayer.'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  void _centerOnConvention(String conventionId) async {
    Convention? conventionToCenter;
    
    try {
      conventionToCenter = _conventions.firstWhere(
        (c) => c.id == conventionId,
      );
    } catch (e) {
      if (_conventions.isNotEmpty) {
        conventionToCenter = _conventions.first;
      } else {
        return;
      }
    }
    
    if (conventionToCenter == null) return;
    
    LatLng? position;
    if (conventionToCenter.latitude != null && conventionToCenter.longitude != null) {
      position = LatLng(conventionToCenter.latitude!, conventionToCenter.longitude!);
    } else {
      position = await _getCoordinatesFromAddress(conventionToCenter.location);
    }
    
    if (position != null) {
      final controller = await _controller.future;
      controller.animateCamera(CameraUpdate.newLatLngZoom(position, 10.0));
    }
  }
  
  String _formatDateRange(DateTime start, DateTime end) {
    final startFormat = '${start.day}/${start.month}/${start.year}';
    final endFormat = '${end.day}/${end.month}/${end.year}';
    return '$startFormat â†’ $endFormat';
  }
  
  void _showConventionDetails(Convention convention) {
    Navigator.pushNamed(
      context,
      '/conventions',
      arguments: {'selectedConventionId': convention.id},
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      drawer: DrawerFactory.of(context),
      appBar: const CustomAppBarKipik(
        title: 'Carte des Conventions',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: false,
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            heroTag: 'refreshBtn',
            onPressed: _loadConventions,
            backgroundColor: KipikTheme.rouge,
            mini: true,
            child: const Icon(Icons.refresh, color: Colors.white),
          ),
          const SizedBox(height: 10),
          TattooAssistantButton(
            allowImageGeneration: false,
          ),
        ],
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(_backgroundImage, fit: BoxFit.cover),
          
          SafeArea(
            child: _isLoading
                ? Center(
                    child: CircularProgressIndicator(color: KipikTheme.rouge),
                  )
                : GoogleMap(
                    initialCameraPosition: const CameraPosition(
                      target: LatLng(46.5, 2.5), // centre approximatif France
                      zoom: 5.2,
                    ),
                    markers: _markers,
                    onMapCreated: (controller) => _controller.complete(controller),
                    myLocationEnabled: _permissionStatus == location_package.PermissionStatus.granted,
                    myLocationButtonEnabled: _permissionStatus == location_package.PermissionStatus.granted,
                    mapType: MapType.normal,
                  ),
          ),
          
          if (_isLoading)
            Container(
              color: Colors.black45,
              child: Center(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CircularProgressIndicator(color: KipikTheme.rouge),
                    const SizedBox(height: 16),
                    const Text(
                      'Chargement des conventions...',
                      style: TextStyle(color: Colors.white),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\conventions\convention_tattooers_list_page.dart

// lib/pages/conventions/convention_tattoers_list_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../enums/tattoo_style.dart';
import 'convention_booking_page.dart';

class ConventionTattooersListPage extends StatefulWidget {
  final String conventionId;

  const ConventionTattooersListPage({
    Key? key,
    required this.conventionId,
  }) : super(key: key);

  @override
  State<ConventionTattooersListPage> createState() => _ConventionTattooersListPageState();
}

class _ConventionTattooersListPageState extends State<ConventionTattooersListPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _listController;
  late Animation<double> _listAnimation;
  
  // Recherche et filtres
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  TattooStyle? _selectedStyle;
  String _selectedFilter = 'Tous';
  
  final List<String> _filterOptions = [
    'Tous',
    'Disponibles',
    'Premium',
    'Nouveaux',
  ];

  // DonnÃ©es
  List<ConventionTattooer> _allTattooers = [];
  List<ConventionTattooer> _filteredTattooers = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _setupSearchListener();
    _loadTattooers();
  }

  @override
  void dispose() {
    _listController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _listController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _listAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _listController, curve: Curves.easeOutCubic),
    );

    _listController.forward();
  }

  void _setupSearchListener() {
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text.toLowerCase();
      });
      _applyFilters();
    });
  }

  void _loadTattooers() {
    // Simulation chargement donnÃ©es
    Future.delayed(const Duration(milliseconds: 500), () {
      setState(() {
        _allTattooers = _generateTattooers();
        _filteredTattooers = List.from(_allTattooers);
        _isLoading = false;
      });
    });
  }

  List<ConventionTattooer> _generateTattooers() {
    return [
      ConventionTattooer(
        id: 'tat1',
        name: 'Alex Martin',
        bio: 'SpÃ©cialiste du rÃ©alisme depuis 15 ans. PassionnÃ© par les portraits et les animaux.',
        style: TattooStyle.realism,
        experienceYears: 15,
        rating: 4.9,
        reviewCount: 234,
        standNumber: 'A12',
        isAvailable: true,
        isPremium: true,
        isNewParticipant: false,
        priceRange: '150-300â‚¬',
        gallery: ['url1', 'url2', 'url3'],
        specialties: ['Portraits', 'Animaux', 'Noir et blanc'],
        availableSlots: [
          'Vendredi 15/08 - 14h00',
          'Samedi 16/08 - 10h00',
          'Dimanche 17/08 - 16h00',
        ],
        social: {
          'instagram': '@alexmartin_tattoo',
          'facebook': 'AlexMartinTattoo',
        },
      ),
      ConventionTattooer(
        id: 'tat2',
        name: 'Emma Dubois',
        bio: 'Artiste spÃ©cialisÃ©e dans l\'art japonais traditionnel. FormÃ©e au Japon.',
        style: TattooStyle.japanese,
        experienceYears: 12,
        rating: 4.8,
        reviewCount: 189,
        standNumber: 'B05',
        isAvailable: true,
        isPremium: true,
        isNewParticipant: false,
        priceRange: '200-400â‚¬',
        gallery: ['url4', 'url5', 'url6'],
        specialties: ['Irezumi', 'Dragons', 'Koi'],
        availableSlots: [
          'Vendredi 15/08 - 11h00',
          'Samedi 16/08 - 15h00',
        ],
        social: {
          'instagram': '@emma_irezumi',
          'website': 'www.emmadubois-tattoo.com',
        },
      ),
      ConventionTattooer(
        id: 'tat3',
        name: 'Marco Silva',
        bio: 'CrÃ©ateur de motifs gÃ©omÃ©triques uniques. Approche moderne et minimaliste.',
        style: TattooStyle.geometric,
        experienceYears: 8,
        rating: 4.7,
        reviewCount: 156,
        standNumber: 'C18',
        isAvailable: false, // Complet
        isPremium: false,
        isNewParticipant: true,
        priceRange: '100-250â‚¬',
        gallery: ['url7', 'url8', 'url9'],
        specialties: ['GÃ©omÃ©trie sacrÃ©e', 'Mandala', 'Dotwork'],
        availableSlots: [],
        social: {
          'instagram': '@marco_geometric',
        },
      ),
      ConventionTattooer(
        id: 'tat4',
        name: 'Sophie Chen',
        bio: 'PionniÃ¨re du style watercolor. Couleurs vibrantes et techniques innovantes.',
        style: TattooStyle.watercolor,
        experienceYears: 10,
        rating: 4.9,
        reviewCount: 203,
        standNumber: 'D22',
        isAvailable: true,
        isPremium: true,
        isNewParticipant: false,
        priceRange: '180-350â‚¬',
        gallery: ['url10', 'url11', 'url12'],
        specialties: ['Aquarelle', 'Fleurs', 'Abstrait'],
        availableSlots: [
          'Samedi 16/08 - 13h00',
          'Dimanche 17/08 - 10h00',
          'Dimanche 17/08 - 14h00',
        ],
        social: {
          'instagram': '@sophie_watercolor',
          'tiktok': '@sophiechen_art',
        },
      ),
      ConventionTattooer(
        id: 'tat5',
        name: 'Thomas Noir',
        bio: 'MaÃ®tre du blackwork et tribal moderne. Style bold et graphique.',
        style: TattooStyle.blackwork,
        experienceYears: 18,
        rating: 4.6,
        reviewCount: 167,
        standNumber: 'E31',
        isAvailable: true,
        isPremium: false,
        isNewParticipant: false,
        priceRange: '120-280â‚¬',
        gallery: ['url13', 'url14', 'url15'],
        specialties: ['Blackwork', 'Tribal', 'Ornements'],
        availableSlots: [
          'Vendredi 15/08 - 16h00',
          'Dimanche 17/08 - 11h00',
        ],
        social: {
          'instagram': '@thomas_blackwork',
        },
      ),
    ];
  }

  void _applyFilters() {
    var filtered = _allTattooers.where((tattooer) {
      // Filtre par recherche
      final matchesSearch = _searchQuery.isEmpty ||
          tattooer.name.toLowerCase().contains(_searchQuery) ||
          tattooer.bio.toLowerCase().contains(_searchQuery) ||
          tattooer.style.displayName.toLowerCase().contains(_searchQuery) ||
          tattooer.specialties.any((s) => s.toLowerCase().contains(_searchQuery));

      if (!matchesSearch) return false;

      // Filtre par style
      if (_selectedStyle != null && tattooer.style != _selectedStyle) {
        return false;
      }

      // Filtre par catÃ©gorie
      switch (_selectedFilter) {
        case 'Disponibles':
          return tattooer.isAvailable;
        case 'Premium':
          return tattooer.isPremium;
        case 'Nouveaux':
          return tattooer.isNewParticipant;
        default:
          return true;
      }
    }).toList();

    // Trier par rating puis par nom
    filtered.sort((a, b) {
      final ratingComparison = b.rating.compareTo(a.rating);
      if (ratingComparison != 0) return ratingComparison;
      return a.name.compareTo(b.name);
    });

    setState(() {
      _filteredTattooers = filtered;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: 'Tatoueurs PrÃ©sents',
        subtitle: '${_filteredTattooers.length} artistes',
        showBackButton: true,
        showBurger: true,
        useProStyle: false,
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),

          // Contenu principal
          SafeArea(
            child: Column(
              children: [
                _buildSearchAndFilters(),
                Expanded(
                  child: _isLoading
                      ? Center(
                          child: CircularProgressIndicator(color: KipikTheme.rouge),
                        )
                      : FadeTransition(
                          opacity: _listAnimation,
                          child: _buildTattooersList(),
                        ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchAndFilters() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Barre de recherche
          TextField(
            controller: _searchController,
            decoration: InputDecoration(
              hintText: 'Rechercher un tatoueur, style...',
              hintStyle: TextStyle(color: Colors.grey[400]),
              prefixIcon: Icon(Icons.search, color: KipikTheme.rouge),
              suffixIcon: _searchQuery.isNotEmpty
                  ? IconButton(
                      icon: Icon(Icons.clear, color: Colors.grey[400]),
                      onPressed: () {
                        _searchController.clear();
                        _applyFilters();
                      },
                    )
                  : null,
              filled: true,
              fillColor: Colors.black54,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide.none,
              ),
              contentPadding: const EdgeInsets.symmetric(vertical: 16),
            ),
            style: const TextStyle(color: Colors.white),
          ),

          const SizedBox(height: 16),

          // Filtres
          Row(
            children: [
              // Filtre par catÃ©gorie
              Expanded(
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: _filterOptions.map((filter) {
                      final isSelected = _selectedFilter == filter;
                      return Padding(
                        padding: const EdgeInsets.only(right: 8),
                        child: ChoiceChip(
                          label: Text(filter),
                          selected: isSelected,
                          onSelected: (selected) {
                            if (selected) {
                              setState(() {
                                _selectedFilter = filter;
                              });
                              _applyFilters();
                            }
                          },
                          backgroundColor: Colors.black54,
                          selectedColor: KipikTheme.rouge.withOpacity(0.3),
                          labelStyle: TextStyle(
                            color: isSelected ? KipikTheme.rouge : Colors.white70,
                            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ),
              ),

              // Filtre par style
              PopupMenuButton<TattooStyle?>(
                icon: Icon(
                  Icons.palette,
                  color: _selectedStyle != null ? KipikTheme.rouge : Colors.white70,
                ),
                color: Colors.grey[900],
                itemBuilder: (context) => [
                  const PopupMenuItem(
                    value: null,
                    child: Text('Tous les styles', style: TextStyle(color: Colors.white)),
                  ),
                  ...TattooStyle.values.map((style) => PopupMenuItem(
                    value: style,
                    child: Text(style.displayName, style: TextStyle(color: Colors.white)),
                  )),
                ],
                onSelected: (style) {
                  setState(() {
                    _selectedStyle = style;
                  });
                  _applyFilters();
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTattooersList() {
    if (_filteredTattooers.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.search_off, size: 64, color: Colors.grey[600]),
            const SizedBox(height: 16),
            Text(
              'Aucun tatoueur trouvÃ©',
              style: TextStyle(
                color: Colors.grey[400],
                fontSize: 18,
                fontFamily: 'PermanentMarker',
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Essayez de modifier vos critÃ¨res de recherche',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 14,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _filteredTattooers.length,
      itemBuilder: (context, index) {
        final tattooer = _filteredTattooers[index];
        return _buildTattooerCard(tattooer, index);
      },
    );
  }

  Widget _buildTattooerCard(ConventionTattooer tattooer, int index) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.black54,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: tattooer.isPremium 
              ? KipikTheme.rouge.withOpacity(0.5) 
              : Colors.grey.shade700,
          width: tattooer.isPremium ? 2 : 1,
        ),
      ),
      child: Column(
        children: [
          // Header avec photo et infos principales
          Padding(
            padding: const EdgeInsets.all(20),
            child: Row(
              children: [
                // Avatar
                Stack(
                  children: [
                    CircleAvatar(
                      radius: 35,
                      backgroundColor: tattooer.style.color.withOpacity(0.3),
                      child: Text(
                        tattooer.name.split(' ').map((n) => n[0]).join(),
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 18,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    if (tattooer.isPremium)
                      Positioned(
                        bottom: 0,
                        right: 0,
                        child: Container(
                          padding: const EdgeInsets.all(4),
                          decoration: BoxDecoration(
                            color: KipikTheme.rouge,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(Icons.star, color: Colors.white, size: 12),
                        ),
                      ),
                    if (tattooer.isNewParticipant)
                      Positioned(
                        top: 0,
                        right: 0,
                        child: Container(
                          padding: const EdgeInsets.all(4),
                          decoration: BoxDecoration(
                            color: Colors.green,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(Icons.fiber_new, color: Colors.white, size: 12),
                        ),
                      ),
                  ],
                ),

                const SizedBox(width: 16),

                // Infos principales
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              tattooer.name,
                              style: const TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 18,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: tattooer.style.color.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              tattooer.style.displayName,
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 11,
                                color: tattooer.style.color,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 8),

                      // Rating et expÃ©rience
                      Row(
                        children: [
                          Row(
                            children: List.generate(5, (i) => Icon(
                              Icons.star,
                              size: 14,
                              color: i < tattooer.rating.floor() 
                                  ? Colors.amber 
                                  : Colors.grey,
                            )),
                          ),
                          const SizedBox(width: 8),
                          Text(
                            '${tattooer.rating} (${tattooer.reviewCount})',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white70,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(width: 16),
                          Text(
                            '${tattooer.experienceYears} ans',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 8),

                      // Stand et prix
                      Row(
                        children: [
                          Icon(Icons.store, color: KipikTheme.rouge, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            'Stand ${tattooer.standNumber}',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white70,
                            ),
                          ),
                          const Spacer(),
                          Text(
                            tattooer.priceRange,
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.green.shade300,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          // Bio
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Text(
              tattooer.bio,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 13,
                color: Colors.white70,
                height: 1.4,
              ),
            ),
          ),

          const SizedBox(height: 16),

          // SpÃ©cialitÃ©s
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Wrap(
              spacing: 6,
              runSpacing: 6,
              children: tattooer.specialties.map((specialty) {
                return Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade800,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    specialty,
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      color: Colors.white70,
                    ),
                  ),
                );
              }).toList(),
            ),
          ),

          const SizedBox(height: 16),

          // DisponibilitÃ©s
          if (tattooer.availableSlots.isNotEmpty) ...[
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'CrÃ©neaux disponibles:',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.green.shade300,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  ...tattooer.availableSlots.take(3).map((slot) {
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Row(
                        children: [
                          Icon(Icons.access_time, color: Colors.green.shade300, size: 14),
                          const SizedBox(width: 8),
                          Text(
                            slot,
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 11,
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),
                    );
                  }),
                ],
              ),
            ),
            const SizedBox(height: 16),
          ] else ...[
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Row(
                children: [
                  Icon(Icons.event_busy, color: Colors.orange, size: 16),
                  const SizedBox(width: 8),
                  Text(
                    'Agenda complet',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.orange,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
          ],

          // Actions
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.black26,
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(20),
                bottomRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                // RÃ©seaux sociaux
                if (tattooer.social.isNotEmpty) ...[
                  ...tattooer.social.entries.take(2).map((entry) {
                    return Padding(
                      padding: const EdgeInsets.only(right: 8),
                      child: IconButton(
                        onPressed: () => _openSocialLink(entry.key, entry.value),
                        icon: Icon(
                          _getSocialIcon(entry.key),
                          color: Colors.white70,
                          size: 20,
                        ),
                        padding: const EdgeInsets.all(8),
                        constraints: const BoxConstraints(minWidth: 36, minHeight: 36),
                      ),
                    );
                  }),
                  const SizedBox(width: 8),
                ],

                const Spacer(),

                // Bouton portfolio
                OutlinedButton.icon(
                  onPressed: () => _viewPortfolio(tattooer),
                  icon: const Icon(Icons.photo_library, size: 16),
                  label: const Text(
                    'Portfolio',
                    style: TextStyle(fontSize: 12),
                  ),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.white70,
                    side: const BorderSide(color: Colors.white70),
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  ),
                ),

                const SizedBox(width: 8),

                // Bouton rÃ©server
                ElevatedButton.icon(
                  onPressed: tattooer.isAvailable 
                      ? () => _bookWithTattooer(tattooer) 
                      : null,
                  icon: Icon(
                    tattooer.isAvailable ? Icons.calendar_month : Icons.event_busy,
                    size: 16,
                  ),
                  label: Text(
                    tattooer.isAvailable ? 'RÃ©server' : 'Complet',
                    style: const TextStyle(fontSize: 12),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: tattooer.isAvailable 
                        ? KipikTheme.rouge 
                        : Colors.grey.shade700,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  IconData _getSocialIcon(String platform) {
    switch (platform.toLowerCase()) {
      case 'instagram':
        return Icons.camera_alt;
      case 'facebook':
        return Icons.facebook;
      case 'tiktok':
        return Icons.video_camera_back;
      case 'website':
        return Icons.language;
      default:
        return Icons.link;
    }
  }

  void _openSocialLink(String platform, String handle) {
    HapticFeedback.lightImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Ouverture de $platform: $handle'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _viewPortfolio(ConventionTattooer tattooer) {
    HapticFeedback.lightImpact();
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.95,
        minChildSize: 0.5,
        builder: (_, controller) => Container(
          decoration: BoxDecoration(
            color: Colors.black,
            borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          ),
          child: Column(
            children: [
              // Handle
              Container(
                margin: const EdgeInsets.symmetric(vertical: 12),
                width: 40,
                height: 5,
                decoration: BoxDecoration(
                  color: Colors.grey[400],
                  borderRadius: BorderRadius.circular(10),
                ),
              ),

              // Header
              Padding(
                padding: const EdgeInsets.all(20),
                child: Row(
                  children: [
                    CircleAvatar(
                      backgroundColor: tattooer.style.color.withOpacity(0.3),
                      child: Text(
                        tattooer.name.split(' ').map((n) => n[0]).join(),
                        style: const TextStyle(color: Colors.white),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            tattooer.name,
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 18,
                              color: Colors.white,
                            ),
                          ),
                          Text(
                            'Portfolio - ${tattooer.style.displayName}',
                            style: const TextStyle(
                              color: Colors.white70,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),

              // Portfolio (simulÃ©)
              Expanded(
                child: GridView.builder(
                  controller: controller,
                  padding: const EdgeInsets.all(20),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    crossAxisSpacing: 16,
                    mainAxisSpacing: 16,
                  ),
                  itemCount: 8,
                  itemBuilder: (context, index) => Container(
                    decoration: BoxDecoration(
                      color: Colors.grey.shade800,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Center(
                      child: Icon(Icons.image, color: Colors.grey, size: 40),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _bookWithTattooer(ConventionTattooer tattooer) {
    HapticFeedback.mediumImpact();
    
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ConventionBookingPage(
          conventionId: widget.conventionId,
          tattooerId: tattooer.id,
        ),
      ),
    );
  }
}

// ModÃ¨le pour les tatoueurs de convention
class ConventionTattooer {
  final String id;
  final String name;
  final String bio;
  final TattooStyle style;
  final int experienceYears;
  final double rating;
  final int reviewCount;
  final String standNumber;
  final bool isAvailable;
  final bool isPremium;
  final bool isNewParticipant;
  final String priceRange;
  final List<String> gallery;
  final List<String> specialties;
  final List<String> availableSlots;
  final Map<String, String> social;

  ConventionTattooer({
    required this.id,
    required this.name,
    required this.bio,
    required this.style,
    required this.experienceYears,
    required this.rating,
    required this.reviewCount,
    required this.standNumber,
    required this.isAvailable,
    required this.isPremium,
    required this.isNewParticipant,
    required this.priceRange,
    required this.gallery,
    required this.specialties,
    required this.availableSlots,
    required this.social,
  });
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\conventions\flash_list_convention_page.dart



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\legal\cgu_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';

class CGUPage extends StatefulWidget {
  const CGUPage({super.key});

  @override
  State<CGUPage> createState() => _CGUPageState();
}

class _CGUPageState extends State<CGUPage> {
  bool hasScrolledToBottom = false;
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(() {
      if (_scrollController.offset >= _scrollController.position.maxScrollExtent) {
        setState(() => hasScrolledToBottom = true);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final List<String> backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: "Conditions GÃ©nÃ©rales d'Utilisation",
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          SafeArea(
            child: Column(
              children: [
                Expanded(
                  child: SingleChildScrollView(
                    controller: _scrollController,
                    padding: const EdgeInsets.all(24.0),
                    child: const Text(
                      '''
Bienvenue sur KIPIK !

Les prÃ©sentes Conditions GÃ©nÃ©rales dâ€™Utilisation (ci-aprÃ¨s "CGU") encadrent juridiquement lâ€™utilisation de l'application KIPIK. Elles sâ€™appliquent Ã  tout utilisateur, quâ€™il soit professionnel ou particulier.

1. Acceptation des conditions
En utilisant KIPIK, vous acceptez sans rÃ©serve les prÃ©sentes CGU. Si vous Ãªtes en dÃ©saccord avec lâ€™un de leurs termes, vous Ãªtes libre de ne pas utiliser nos services.

2. Objet de l'application
KIPIK est une plateforme facilitant la mise en relation entre tatoueurs professionnels et particuliers. Elle permet la crÃ©ation de projets de tatouage, la gestion de rendez-vous, de devis, de paiements, dâ€™e-shop et de communication entre les parties.

3. AccÃ¨s au service
Lâ€™accÃ¨s Ã  lâ€™application est possible 24h/24 et 7j/7 sauf interruption pour maintenance ou cas de force majeure. Les utilisateurs sont responsables de la sÃ©curitÃ© de leurs identifiants.

4. Obligations de lâ€™utilisateur
Lâ€™utilisateur sâ€™engage Ã  fournir des informations exactes lors de son inscription. Il est seul responsable du contenu quâ€™il diffuse, notamment les images, descriptions et messages Ã©changÃ©s.

5. DonnÃ©es personnelles
KIPIK collecte des donnÃ©es personnelles pour permettre le fonctionnement optimal de la plateforme. Ces donnÃ©es sont traitÃ©es conformÃ©ment au RGPD. Lâ€™utilisateur dispose dâ€™un droit dâ€™accÃ¨s, de rectification et de suppression de ses donnÃ©es.

6. PropriÃ©tÃ© intellectuelle
Lâ€™ensemble des Ã©lÃ©ments (textes, images, logos, design, code, etc.) prÃ©sents sur KIPIK sont protÃ©gÃ©s par les lois en vigueur sur la propriÃ©tÃ© intellectuelle. Toute reproduction, modification ou diffusion sans autorisation est strictement interdite.

7. ResponsabilitÃ©
KIPIK ne peut Ãªtre tenu responsable des dommages directs ou indirects liÃ©s Ã  lâ€™utilisation de lâ€™application. Les utilisateurs restent seuls responsables des engagements contractuels ou financiers quâ€™ils prennent entre eux via la plateforme.

8. Modifications des CGU
KIPIK se rÃ©serve le droit de modifier Ã  tout moment les prÃ©sentes CGU. Lâ€™utilisateur sera informÃ© de toute modification majeure via lâ€™application.

9. Droit applicable
Les prÃ©sentes CGU sont soumises au droit franÃ§ais. En cas de litige, une solution amiable sera recherchÃ©e. Ã€ dÃ©faut, les tribunaux compÃ©tents seront ceux du ressort de la sociÃ©tÃ© Ã©ditrice.

Merci dâ€™utiliser KIPIK.
                      ''',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ),
                ),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16.0),
                  child: ElevatedButton(
                    onPressed: hasScrolledToBottom ? () => Navigator.pop(context, true) : null,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: hasScrolledToBottom ? Colors.redAccent : Colors.grey,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      "Jâ€™ai lu et jâ€™accepte les CGU",
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\legal\cgv_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';

class CGVPage extends StatefulWidget {
  const CGVPage({super.key});

  @override
  State<CGVPage> createState() => _CGVPageState();
}

class _CGVPageState extends State<CGVPage> {
  bool hasScrolledToBottom = false;
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(() {
      if (_scrollController.offset >= _scrollController.position.maxScrollExtent) {
        setState(() => hasScrolledToBottom = true);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final List<String> backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final selectedBackground = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: "Conditions GÃ©nÃ©rales de Vente",
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(selectedBackground, fit: BoxFit.cover),
          SafeArea(
            child: Column(
              children: [
                Expanded(
                  child: SingleChildScrollView(
                    controller: _scrollController,
                    padding: const EdgeInsets.all(24.0),
                    child: const Text(
                      '''
Conditions GÃ©nÃ©rales de Vente (CGV) â€“ Version 1

1. Objet du contrat

Lâ€™abonnement donne accÃ¨s Ã  des fonctionnalitÃ©s professionnelles telles que la gestion de projets, de devis, de paiements, de lâ€™agenda, des stocks, dâ€™un e-shop intÃ©grÃ©, du transfert Instagram, de la comptabilitÃ©, etc.

2. Tarifs

Le prix mensuel est de 79 â‚¬ TTC pour les 100 premiers abonnÃ©s, puis 99 â‚¬ TTC par mois. Les prix sont exprimÃ©s en euros toutes taxes comprises (TTC).

3. Formule dâ€™essai

Une seule fois, un tatoueur peut bÃ©nÃ©ficier dâ€™un test de 3 mois, facturÃ© immÃ©diatement par mandat SEPA Ã  hauteur de 3 Ã— 79 â‚¬ TTC (ou 3 Ã— 99 â‚¬ TTC pour les suivants). Si aucune dÃ©sinscription nâ€™est effectuÃ©e au moins 15 jours avant la fin de la pÃ©riode dâ€™essai via le compte ou par Ã©crit, lâ€™abonnement annuel est automatiquement activÃ©.

4. Engagement annuel

En dehors de lâ€™essai, tout abonnement est annuel, avec prÃ©lÃ¨vement mensuel automatique via SEPA. Lâ€™abonnement est reconduit tacitement chaque annÃ©e.

5. RÃ©siliation

Le professionnel peut rÃ©silier son abonnement en envoyant une demande Ã©crite (mail ou courrier) au moins un mois avant la date dâ€™anniversaire de son contrat. Ã€ dÃ©faut, lâ€™abonnement est reconduit pour une nouvelle pÃ©riode annuelle.

6. Moyens de paiement

Les paiements sont effectuÃ©s exclusivement via prÃ©lÃ¨vement SEPA. Lâ€™utilisateur est tenu de fournir ses informations bancaires de maniÃ¨re sÃ©curisÃ©e Ã  lâ€™inscription.

7. Parrainage

Tout professionnel parrainant un autre tatoueur via son lien personnel bÃ©nÃ©ficie dâ€™un mois offert sur son prochain abonnement annuel, sous condition que le filleul sâ€™abonne effectivement.

8. PropriÃ©tÃ© et services

Le logiciel KIPIK reste la propriÃ©tÃ© exclusive de la sociÃ©tÃ© Ã©ditrice. Lâ€™utilisateur dispose dâ€™un droit dâ€™utilisation personnel, non exclusif et non cessible.

9. Modification des CGV

KIPIK se rÃ©serve le droit de modifier les prÃ©sentes CGV. Lâ€™utilisateur en sera informÃ© par voie Ã©lectronique ou dans lâ€™application.

10. Litiges

Les CGV sont rÃ©gies par le droit franÃ§ais. En cas de litige, une solution amiable sera privilÃ©giÃ©e. Ã€ dÃ©faut, le tribunal compÃ©tent sera celui du ressort du siÃ¨ge de la sociÃ©tÃ© Ã©ditrice.

Merci dâ€™avoir choisi KIPIK !
                      ''',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ),
                ),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16.0),
                  child: ElevatedButton(
                    onPressed: hasScrolledToBottom ? () => Navigator.pop(context, true) : null,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: hasScrolledToBottom ? Colors.redAccent : Colors.grey,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      "Jâ€™ai lu et jâ€™accepte les CGV",
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\event_edit_page.dart

// lib/pages/organisateur/event_edit_page.dart

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../core/helpers/service_helper.dart';
import '../../core/helpers/widget_helper.dart';

enum ConventionType { tattoo, piercing, mixed, art }

class EventEditPage extends StatefulWidget {
  final String? conventionId;
  
  const EventEditPage({Key? key, this.conventionId}) : super(key: key);

  @override
  State<EventEditPage> createState() => _EventEditPageState();
}

class _EventEditPageState extends State<EventEditPage> with TickerProviderStateMixin {
  
  late AnimationController _controller;
  late Animation<Offset> _slideAnimation;

  final PageController _pageController = PageController();
  int _currentStep = 0;
  bool _isLoading = false;
  bool _isSaving = false;

  // ðŸ“ Form controllers - Map pour Ã©viter la redondance
  final Map<String, TextEditingController> _controllers = {};
  
  // ðŸ“Š Form data centralisÃ©
  final Map<String, dynamic> _formData = {
    'type': ConventionType.tattoo,
    'startDate': null,
    'endDate': null,
    'startTime': null,
    'endTime': null,
    'maxTattooers': 50,
    'expectedVisitors': 500,
    'standPrice': 300.0,
    'ticketPrice': 15.0,
    'allowOnlineBooking': true,
    'allowFractionalPayment': true,
    'selectedAmenities': <String>[],
    'hasZonePricing': false,
    'pricingZones': <Map<String, dynamic>>[],
    'selectedImage': null,
  };

  final _formKey = GlobalKey<FormState>();
  List<String> _validationErrors = [];

  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _initializeAnimations();
    _loadData();
  }

  void _initializeControllers() {
    final fields = ['name', 'description', 'location', 'address', 'website', 'email', 'phone'];
    for (final field in fields) {
      _controllers[field] = TextEditingController();
    }
  }

  void _initializeAnimations() {
    _controller = AnimationController(duration: const Duration(milliseconds: 600), vsync: this);
    _slideAnimation = Tween<Offset>(begin: const Offset(0, 1), end: Offset.zero)
        .animate(CurvedAnimation(parent: _controller, curve: Curves.easeOut));
    _controller.forward();
  }

  void _loadData() async {
    if (widget.conventionId == null) return;
    
    setState(() => _isLoading = true);
    
    final data = await ServiceHelper.getConventionData(widget.conventionId!);
    if (data.isNotEmpty && mounted) {
      _populateForm(data);
    }
    
    if (mounted) setState(() => _isLoading = false);
  }

  void _populateForm(Map<String, dynamic> data) {
    // ðŸ“ Populate controllers
    _controllers['name']?.text = data['basic']?['name'] ?? '';
    _controllers['description']?.text = data['basic']?['description'] ?? '';
    _controllers['location']?.text = data['location']?['venue'] ?? '';
    _controllers['address']?.text = data['location']?['address'] ?? '';
    _controllers['email']?.text = data['contact']?['email'] ?? '';
    _controllers['phone']?.text = data['contact']?['phone'] ?? '';
    _controllers['website']?.text = data['contact']?['website'] ?? '';

    // ðŸ“Š Populate form data
    setState(() {
      _formData['type'] = _parseType(data['basic']?['type']);
      _formData['maxTattooers'] = data['location']?['capacity'] ?? 50;
      _formData['expectedVisitors'] = data['dates']?['expectedVisitors'] ?? 500;
      _formData['standPrice'] = (data['pricing']?['standPrice'] ?? 300.0).toDouble();
      _formData['ticketPrice'] = (data['pricing']?['ticketPrice'] ?? 15.0).toDouble();
      _formData['allowOnlineBooking'] = data['settings']?['onlineBooking'] ?? true;
      _formData['allowFractionalPayment'] = data['settings']?['fractionalPayment'] ?? true;
      _formData['selectedAmenities'] = List<String>.from(data['settings']?['amenities'] ?? []);
      _formData['hasZonePricing'] = data['pricing']?['hasZonePricing'] ?? false;
      _formData['pricingZones'] = List<Map<String, dynamic>>.from(data['pricing']?['zones'] ?? []);
      _formData['selectedImage'] = data['media']?['coverImage'];
      
      // Dates
      final startTimestamp = data['dates']?['start'];
      if (startTimestamp is Timestamp) {
        final startDateTime = startTimestamp.toDate();
        _formData['startDate'] = startDateTime;
        _formData['startTime'] = TimeOfDay.fromDateTime(startDateTime);
      }
      
      final endTimestamp = data['dates']?['end'];
      if (endTimestamp is Timestamp) {
        final endDateTime = endTimestamp.toDate();
        _formData['endDate'] = endDateTime;
        _formData['endTime'] = TimeOfDay.fromDateTime(endDateTime);
      }
    });
  }

  ConventionType _parseType(String? type) {
    switch (type) {
      case 'tattoo': return ConventionType.tattoo;
      case 'piercing': return ConventionType.piercing;
      case 'mixed': return ConventionType.mixed;
      case 'art': return ConventionType.art;
      default: return ConventionType.tattoo;
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!ServiceHelper.isAuthenticated) {
      return KipikTheme.errorState(
        title: 'Non connectÃ©',
        message: 'Vous devez Ãªtre connectÃ© pour accÃ©der Ã  cette page',
        onRetry: () => Navigator.pushReplacementNamed(context, '/login'),
      );
    }

    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      endDrawer: DrawerFactory.of(context),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(kToolbarHeight),
        child: CustomAppBarKipik(
          title: widget.conventionId != null ? 'Modifier Convention' : 'Nouvelle Convention',
          subtitle: 'Ã‰tape ${_currentStep + 1}/4',
          showBackButton: true,
          useProStyle: true,
          actions: [
            if (_currentStep > 0)
              IconButton(
                icon: _isSaving 
                    ? const SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      )
                    : const Icon(Icons.save_outlined, color: Colors.white),
                onPressed: _isSaving ? null : _saveDraft,
              ),
          ],
        ),
      ),
      child: Stack(
        children: [
          KipikTheme.withSpecificBackground('assets/background_charbon.png', child: Container()),
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? Center(child: KipikTheme.loading()) : _buildContent(),
            ),
          ),
          
          // âœ… ASSISTANT IA CONTEXTUEL
          TattooAssistantButton(
            currentStep: _currentStep,
            formData: _formData,
            contextData: 'event_creation',
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        const SizedBox(height: 16),
        _buildProgress(),
        const SizedBox(height: 16),
        if (_validationErrors.isNotEmpty) _buildValidationErrors(),
        Expanded(
          child: PageView(
            controller: _pageController,
            onPageChanged: (index) => setState(() => _currentStep = index),
            children: [
              _buildBasicInfoStep(),
              _buildLocationDateStep(),
              _buildConfigurationStep(),
              _buildFinalizationStep(),
            ],
          ),
        ),
        _buildNavigation(),
        const SizedBox(height: 16),
      ],
    );
  }

  Widget _buildProgress() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: WidgetHelper.buildProgressIndicator(
        currentStep: _currentStep + 1,
        totalSteps: 4,
        stepTitle: _getStepTitle(_currentStep),
      ),
    );
  }

  Widget _buildValidationErrors() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.red.shade50,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.red.shade300),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.error, color: Colors.red.shade600, size: 20),
                const SizedBox(width: 8),
                const Text('Erreurs Ã  corriger', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red)),
              ],
            ),
            const SizedBox(height: 8),
            ..._validationErrors.map((error) => Text('â€¢ $error', style: TextStyle(color: Colors.red.shade700, fontSize: 12))),
          ],
        ),
      ),
    );
  }

  Widget _buildBasicInfoStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              WidgetHelper.buildStepHeader('Informations de Base', 'Nom, type et description', Icons.info),
              const SizedBox(height: 24),
              
              WidgetHelper.buildFormField(
                label: 'Nom de la convention *',
                controller: _controllers['name']!,
                hint: 'Ex: Paris Tattoo Convention 2025',
                validator: (value) => value?.isEmpty == true ? 'Le nom est obligatoire' : null,
              ),
              const SizedBox(height: 20),
              
              _buildTypeSelector(),
              const SizedBox(height: 20),
              
              WidgetHelper.buildFormField(
                label: 'Description *',
                controller: _controllers['description']!,
                hint: 'DÃ©crivez votre convention...',
                maxLines: 4,
                validator: (value) => (value?.length ?? 0) < 50 ? 'Description trop courte (min. 50 caractÃ¨res)' : null,
              ),
              const SizedBox(height: 20),
              
              _buildImageSelector(),
              const SizedBox(height: 20),
              
              Row(
                children: [
                  Expanded(
                    child: WidgetHelper.buildFormField(
                      label: 'Email',
                      controller: _controllers['email']!,
                      hint: 'contact@convention.com',
                      keyboardType: TextInputType.emailAddress,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: WidgetHelper.buildFormField(
                      label: 'TÃ©lÃ©phone',
                      controller: _controllers['phone']!,
                      hint: '01 23 45 67 89',
                      keyboardType: TextInputType.phone,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              WidgetHelper.buildFormField(
                label: 'Site web',
                controller: _controllers['website']!,
                hint: 'https://www.votre-convention.com',
                keyboardType: TextInputType.url,
              ),
              const SizedBox(height: 100),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLocationDateStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: SingleChildScrollView(
        child: Column(
          children: [
            WidgetHelper.buildStepHeader('Lieu et Dates', 'OÃ¹ et quand se dÃ©roulera votre convention', Icons.location_on),
            const SizedBox(height: 24),
            
            WidgetHelper.buildFormField(
              label: 'Nom du lieu *',
              controller: _controllers['location']!,
              hint: 'Ex: Paris Expo, Centre des CongrÃ¨s...',
              validator: (value) => value?.isEmpty == true ? 'Le lieu est obligatoire' : null,
            ),
            const SizedBox(height: 20),
            
            WidgetHelper.buildFormField(
              label: 'Adresse complÃ¨te *',
              controller: _controllers['address']!,
              hint: 'Adresse, ville, code postal',
              maxLines: 2,
              validator: (value) => value?.isEmpty == true ? 'L\'adresse est obligatoire' : null,
            ),
            const SizedBox(height: 20),
            
            _buildDateSelection(),
            const SizedBox(height: 20),
            
            _buildTimeSelection(),
            const SizedBox(height: 20),
            
            _buildCapacitySettings(),
            const SizedBox(height: 100),
          ],
        ),
      ),
    );
  }

  Widget _buildConfigurationStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: SingleChildScrollView(
        child: Column(
          children: [
            WidgetHelper.buildStepHeader('Configuration', 'Prix et options', Icons.settings),
            const SizedBox(height: 24),
            
            _buildZonePricingSection(),
            const SizedBox(height: 20),
            
            if (!_formData['hasZonePricing']) _buildPricingSection(),
            const SizedBox(height: 20),
            
            _buildBookingOptions(),
            const SizedBox(height: 20),
            
            WidgetHelper.buildAmenitiesSelector(
              selectedAmenities: _formData['selectedAmenities'],
              onChanged: (amenities) => setState(() => _formData['selectedAmenities'] = amenities),
            ),
            const SizedBox(height: 100),
          ],
        ),
      ),
    );
  }

  Widget _buildFinalizationStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: SingleChildScrollView(
        child: Column(
          children: [
            WidgetHelper.buildStepHeader('Finalisation', 'VÃ©rifiez et publiez', Icons.check_circle),
            const SizedBox(height: 24),
            
            _buildSummary(),
            const SizedBox(height: 20),
            
            _buildRevenueProjection(),
            const SizedBox(height: 20),
            
            _buildPublishOptions(),
            const SizedBox(height: 100),
          ],
        ),
      ),
    );
  }

  Widget _buildTypeSelector() {
    return WidgetHelper.buildTypeSelector<ConventionType>(
      label: 'Type de convention *',
      options: ConventionType.values,
      selectedValue: _formData['type'],
      getLabel: _getTypeLabel,
      getIcon: _getTypeIcon,
      onChanged: (type) => setState(() => _formData['type'] = type),
    );
  }

  Widget _buildDateSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Dates de la convention *',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: WidgetHelper.buildDateCard(
                'Date de dÃ©but',
                _formData['startDate'],
                (date) => setState(() => _formData['startDate'] = date),
                context,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: WidgetHelper.buildDateCard(
                'Date de fin',
                _formData['endDate'],
                (date) => setState(() => _formData['endDate'] = date),
                context,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildTimeSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Horaires d\'ouverture',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: WidgetHelper.buildTimeCard(
                'Ouverture',
                _formData['startTime'],
                (time) => setState(() => _formData['startTime'] = time),
                context,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: WidgetHelper.buildTimeCard(
                'Fermeture',
                _formData['endTime'],
                (time) => setState(() => _formData['endTime'] = time),
                context,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildImageSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Image de couverture',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
        ),
        const SizedBox(height: 12),
        GestureDetector(
          onTap: _selectImage,
          child: Container(
            height: 120,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: _formData['selectedImage'] != null
                ? ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: Image.asset(
                      _formData['selectedImage']!,
                      fit: BoxFit.cover,
                      width: double.infinity,
                    ),
                  )
                : Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.add_photo_alternate, size: 32, color: Colors.grey),
                        const SizedBox(height: 8),
                        Text(
                          'Ajouter une image',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 14,
                            color: Colors.grey,
                          ),
                        ),
                      ],
                    ),
                  ),
          ),
        ),
      ],
    );
  }

  Widget _buildCapacitySettings() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'CapacitÃ©s',
            style: TextStyle(
              fontFamily: KipikTheme.fontTitle,
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 16),
          
          WidgetHelper.buildSliderSetting(
            label: 'Nombre maximum de tatoueurs',
            value: _formData['maxTattooers'].toDouble(),
            min: 10,
            max: 200,
            onChanged: (value) => setState(() => _formData['maxTattooers'] = value.toInt()),
            displayValue: '${_formData['maxTattooers']} tatoueurs',
            context: context,
          ),
          
          const SizedBox(height: 16),
          
          WidgetHelper.buildSliderSetting(
            label: 'Visiteurs attendus',
            value: _formData['expectedVisitors'].toDouble(),
            min: 100,
            max: 5000,
            onChanged: (value) => setState(() => _formData['expectedVisitors'] = value.toInt()),
            displayValue: '${_formData['expectedVisitors']} visiteurs',
            context: context,
          ),
        ],
      ),
    );
  }

  Widget _buildZonePricingSection() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.map, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              Text(
                'SystÃ¨me de Prix par Zones',
                style: TextStyle(
                  fontFamily: KipikTheme.fontTitle,
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          WidgetHelper.buildSwitchTile(
            title: 'Activer les prix par zones',
            subtitle: _formData['hasZonePricing'] 
                ? 'DiffÃ©rents prix selon l\'emplacement (premium, standard, Ã©conomique)'
                : 'Prix unique pour tous les stands',
            value: _formData['hasZonePricing'],
            onChanged: (value) {
              setState(() {
                _formData['hasZonePricing'] = value;
                if (value && _formData['pricingZones'].isEmpty) {
                  _initializeDefaultZones();
                }
              });
            },
          ),
          
          if (_formData['hasZonePricing']) ...[
            const SizedBox(height: 16),
            _buildZonesList(),
          ],
        ],
      ),
    );
  }

  Widget _buildZonesList() {
    final zones = _formData['pricingZones'] as List<Map<String, dynamic>>;
    
    return Column(
      children: [
        ...zones.asMap().entries.map((entry) {
          final index = entry.key;
          final zone = entry.value;
          
          return Container(
            margin: const EdgeInsets.only(bottom: 12),
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.grey[200]!),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: TextFormField(
                        initialValue: zone['name']?.toString() ?? '',
                        decoration: InputDecoration(
                          labelText: 'Nom de la zone',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.all(8),
                        ),
                        onChanged: (value) {
                          setState(() {
                            zones[index]['name'] = value;
                          });
                        },
                      ),
                    ),
                    const SizedBox(width: 12),
                    IconButton(
                      icon: Icon(Icons.delete, color: Colors.red),
                      onPressed: () {
                        setState(() {
                          zones.removeAt(index);
                        });
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: TextFormField(
                        initialValue: zone['pricePerM2']?.toString() ?? '',
                        decoration: InputDecoration(
                          labelText: 'Prix/mÂ²',
                          border: OutlineInputBorder(),
                          suffixText: 'â‚¬',
                          contentPadding: EdgeInsets.all(8),
                        ),
                        keyboardType: TextInputType.number,
                        onChanged: (value) {
                          final price = double.tryParse(value);
                          if (price != null) {
                            setState(() {
                              zones[index]['pricePerM2'] = price;
                            });
                          }
                        },
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: DropdownButtonFormField<String>(
                        value: zone['type']?.toString() ?? 'standard',
                        decoration: InputDecoration(
                          labelText: 'Type',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.all(8),
                        ),
                        items: [
                          DropdownMenuItem(value: 'premium', child: Text('Premium')),
                          DropdownMenuItem(value: 'standard', child: Text('Standard')),
                          DropdownMenuItem(value: 'economic', child: Text('Ã‰conomique')),
                        ],
                        onChanged: (value) {
                          if (value != null) {
                            setState(() {
                              zones[index]['type'] = value;
                            });
                          }
                        },
                      ),
                    ),
                  ],
                ),
              ],
            ),
          );
        }),
        
        const SizedBox(height: 8),
        
        SizedBox(
          width: double.infinity,
          child: OutlinedButton.icon(
            onPressed: _addPricingZone,
            icon: Icon(Icons.add, size: 16),
            label: Text('Ajouter une zone'),
            style: OutlinedButton.styleFrom(
              foregroundColor: KipikTheme.rouge,
              side: BorderSide(color: KipikTheme.rouge),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPricingSection() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.euro, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              Text(
                'Tarification',
                style: TextStyle(
                  fontFamily: KipikTheme.fontTitle,
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Prix stand (â‚¬/mÂ²)',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.black87,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      initialValue: _formData['standPrice'].toStringAsFixed(0),
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                        suffixText: 'â‚¬/mÂ²',
                        contentPadding: EdgeInsets.all(12),
                      ),
                      onChanged: (value) {
                        final price = double.tryParse(value);
                        if (price != null) {
                          setState(() => _formData['standPrice'] = price);
                        }
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Prix billet (â‚¬)',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.black87,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      initialValue: _formData['ticketPrice'].toStringAsFixed(0),
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                        suffixText: 'â‚¬',
                        contentPadding: EdgeInsets.all(12),
                      ),
                      onChanged: (value) {
                        final price = double.tryParse(value);
                        if (price != null) {
                          setState(() => _formData['ticketPrice'] = price);
                        }
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBookingOptions() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.settings, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              Text(
                'Options de RÃ©servation',
                style: TextStyle(
                  fontFamily: KipikTheme.fontTitle,
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          WidgetHelper.buildSwitchTile(
            title: 'RÃ©servation en ligne',
            subtitle: 'Permettre aux tatoueurs de rÃ©server via l\'app',
            value: _formData['allowOnlineBooking'],
            onChanged: (value) => setState(() => _formData['allowOnlineBooking'] = value),
          ),
          
          WidgetHelper.buildSwitchTile(
            title: 'Paiement fractionnÃ©',
            subtitle: 'Autoriser le paiement en 2, 3 ou 4 fois',
            value: _formData['allowFractionalPayment'],
            onChanged: (value) => setState(() => _formData['allowFractionalPayment'] = value),
          ),
        ],
      ),
    );
  }

  Widget _buildSummary() {
    final summaryData = {
      'Nom': _controllers['name']?.text ?? '',
      'Type': _getTypeLabel(_formData['type']),
      'Lieu': _controllers['location']?.text ?? '',
      'CapacitÃ©': '${_formData['maxTattooers']} tatoueurs',
      'Prix stand': '${_formData['standPrice'].toStringAsFixed(0)}â‚¬/mÂ²',
      'Prix billet': '${_formData['ticketPrice'].toStringAsFixed(0)}â‚¬',
    };

    if (_formData['startDate'] != null && _formData['endDate'] != null) {
      summaryData['Dates'] = '${ServiceHelper.formatDate(_formData['startDate'])} - ${ServiceHelper.formatDate(_formData['endDate'])}';
    }

    return WidgetHelper.buildSummaryCard(
      title: 'RÃ©sumÃ© de la Convention',
      summaryData: summaryData,
    );
  }

  Widget _buildRevenueProjection() {
    // Calcul intelligent selon le systÃ¨me de prix
    double standRevenue = 0;
    if (_formData['hasZonePricing'] && (_formData['pricingZones'] as List).isNotEmpty) {
      // Calcul avec zones : moyenne pondÃ©rÃ©e
      final zones = _formData['pricingZones'] as List<Map<String, dynamic>>;
      final avgPrice = zones.fold(0.0, (sum, zone) {
        final price = zone['pricePerM2'];
        if (price is num) return sum + price.toDouble();
        return sum;
      }) / zones.length;
      standRevenue = _formData['maxTattooers'] * avgPrice * 6.0; // 6mÂ² moyenne par stand
    } else {
      standRevenue = _formData['maxTattooers'] * _formData['standPrice'] * 6.0;
    }
    
    final ticketRevenue = _formData['expectedVisitors'] * _formData['ticketPrice'];
    final totalRevenue = standRevenue + ticketRevenue;
    final kipikCommission = totalRevenue * 0.01; // 1% commission Kipik
    final netRevenue = totalRevenue - kipikCommission;

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.green.shade400, Colors.green.shade600],
        ),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.trending_up, color: Colors.white, size: 24),
              const SizedBox(width: 12),
              Text(
                'Projection de Revenus',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          _buildRevenueRow('Revenus stands', ServiceHelper.formatCurrency(standRevenue)),
          _buildRevenueRow('Revenus billets', ServiceHelper.formatCurrency(ticketRevenue)),
          Divider(color: Colors.white54),
          _buildRevenueRow('Total brut', ServiceHelper.formatCurrency(totalRevenue)),
          _buildRevenueRow('Commission Kipik (1%)', '-${ServiceHelper.formatCurrency(kipikCommission)}'),
          Divider(color: Colors.white54),
          _buildRevenueRow('Total net', ServiceHelper.formatCurrency(netRevenue), isBold: true),
          
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              children: [
                Icon(Icons.info, color: Colors.white70, size: 16),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    'Projection basÃ©e sur ${_formData['maxTattooers']} stands de 6mÂ² et ${_formData['expectedVisitors']} visiteurs',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 11,
                      color: Colors.white70,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRevenueRow(String label, String value, {bool isBold = false}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.white70,
              fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
            ),
          ),
          Text(
            value,
            style: TextStyle(
              fontFamily: isBold ? 'PermanentMarker' : 'Roboto',
              fontSize: isBold ? 14 : 12,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPublishOptions() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.publish, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              Text(
                'Publication',
                style: TextStyle(
                  fontFamily: KipikTheme.fontTitle,
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: WidgetHelper.buildActionButton(
                  text: 'Sauvegarder brouillon',
                  onPressed: _saveDraft,
                  isPrimary: false,
                  isLoading: _isSaving,
                  icon: Icons.save,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: WidgetHelper.buildActionButton(
                  text: 'Publier maintenant',
                  onPressed: _publishConvention,
                  isLoading: _isSaving,
                  icon: Icons.publish,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildNavigation() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Row(
        children: [
          if (_currentStep > 0)
            Expanded(
              child: WidgetHelper.buildActionButton(
                text: 'PrÃ©cÃ©dent',
                onPressed: _previousStep,
                isPrimary: false,
                icon: Icons.arrow_back,
              ),
            ),
          if (_currentStep > 0 && _currentStep < 3) const SizedBox(width: 12),
          if (_currentStep < 3)
            Expanded(
              child: WidgetHelper.buildActionButton(
                text: 'Suivant',
                onPressed: _nextStep,
                icon: Icons.arrow_forward,
              ),
            ),
        ],
      ),
    );
  }

  // Helper methods
  String _getStepTitle(int step) {
    switch (step) {
      case 0: return 'Informations de base';
      case 1: return 'Lieu et dates';
      case 2: return 'Configuration et prix';
      case 3: return 'Finalisation';
      default: return '';
    }
  }

  IconData _getTypeIcon(ConventionType type) {
    switch (type) {
      case ConventionType.tattoo: return Icons.brush;
      case ConventionType.piercing: return Icons.circle;
      case ConventionType.mixed: return Icons.palette;
      case ConventionType.art: return Icons.art_track;
    }
  }

  String _getTypeLabel(ConventionType type) {
    switch (type) {
      case ConventionType.tattoo: return 'Tatouage';
      case ConventionType.piercing: return 'Piercing';
      case ConventionType.mixed: return 'Mixte';
      case ConventionType.art: return 'Art corporel';
    }
  }

  bool _validateCurrentStep() {
    _validationErrors.clear();

    switch (_currentStep) {
      case 0:
        if (_controllers['name']?.text.isEmpty == true) {
          _validationErrors.add('Le nom de la convention est obligatoire');
        }
        if ((_controllers['description']?.text.length ?? 0) < 50) {
          _validationErrors.add('La description doit faire au moins 50 caractÃ¨res');
        }
        break;
      case 1:
        if (_controllers['location']?.text.isEmpty == true) {
          _validationErrors.add('Le lieu est obligatoire');
        }
        if (_controllers['address']?.text.isEmpty == true) {
          _validationErrors.add('L\'adresse est obligatoire');
        }
        if (_formData['startDate'] == null) {
          _validationErrors.add('La date de dÃ©but est obligatoire');
        }
        if (_formData['endDate'] == null) {
          _validationErrors.add('La date de fin est obligatoire');
        }
        if (_formData['startDate'] != null && _formData['endDate'] != null && 
            _formData['endDate'].isBefore(_formData['startDate'])) {
          _validationErrors.add('La date de fin doit Ãªtre aprÃ¨s la date de dÃ©but');
        }
        break;
      case 2:
        if (!_formData['hasZonePricing'] && _formData['standPrice'] <= 0) {
          _validationErrors.add('Le prix du stand doit Ãªtre supÃ©rieur Ã  0');
        }
        if (_formData['hasZonePricing'] && (_formData['pricingZones'] as List).isEmpty) {
          _validationErrors.add('Au moins une zone de prix est requise');
        }
        if (_formData['ticketPrice'] <= 0) {
          _validationErrors.add('Le prix du billet doit Ãªtre supÃ©rieur Ã  0');
        }
        break;
      case 3:
        // Validation finale complÃ¨te
        if (_controllers['name']?.text.isEmpty == true) {
          _validationErrors.add('Le nom est obligatoire pour publier');
        }
        if (_formData['startDate'] == null) {
          _validationErrors.add('Les dates sont obligatoires pour publier');
        }
        break;
    }

    setState(() {});
    return _validationErrors.isEmpty;
  }

  void _previousStep() {
    if (_currentStep > 0) {
      _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _nextStep() {
    if (_validateCurrentStep() && _currentStep < 3) {
      _pageController.nextPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _initializeDefaultZones() {
    _formData['pricingZones'] = [
      {
        'name': 'Zone Premium',
        'type': 'premium',
        'pricePerM2': _formData['standPrice'] * 1.5,
        'description': 'Emplacements privilÃ©giÃ©s (entrÃ©e, passages principaux)',
      },
      {
        'name': 'Zone Standard',
        'type': 'standard',
        'pricePerM2': _formData['standPrice'],
        'description': 'Emplacements centraux, bonne visibilitÃ©',
      },
      {
        'name': 'Zone Ã‰conomique',
        'type': 'economic',
        'pricePerM2': _formData['standPrice'] * 0.7,
        'description': 'Emplacements pÃ©riphÃ©riques, tarif rÃ©duit',
      },
    ];
  }

  void _addPricingZone() {
    setState(() {
      (_formData['pricingZones'] as List).add({
        'name': 'Nouvelle Zone',
        'type': 'standard',
        'pricePerM2': _formData['standPrice'],
        'description': '',
      });
    });
  }

  void _selectImage() {
    // Simulation sÃ©lection d'image
    setState(() {
      _formData['selectedImage'] = 'assets/convention_placeholder.jpg';
    });
    KipikTheme.showInfoSnackBar(
      context, 
      'Image sÃ©lectionnÃ©e ! (IntÃ©gration Firebase Storage Ã  venir)'
    );
  }

  // Firebase Actions
  Future<void> _saveDraft() async {
    if (_isSaving) return;
    
    setState(() => _isSaving = true);

    try {
      final conventionData = _buildConventionData('draft');
      
      if (widget.conventionId != null) {
        await ServiceHelper.update('conventions', widget.conventionId!, conventionData);
      } else {
        await ServiceHelper.create('conventions', conventionData);
      }

      if (mounted) {
        KipikTheme.showInfoSnackBar(context, 'Convention sauvegardÃ©e en brouillon');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la sauvegarde: $e');
      }
    } finally {
      if (mounted) setState(() => _isSaving = false);
    }
  }

  Future<void> _publishConvention() async {
    if (!_validateCurrentStep() || _isSaving) return;

    setState(() => _isSaving = true);

    try {
      final conventionData = _buildConventionData('published');
      
      if (widget.conventionId != null) {
        await ServiceHelper.update('conventions', widget.conventionId!, conventionData);
      } else {
        await ServiceHelper.create('conventions', conventionData);
      }

      if (mounted) {
        KipikTheme.showSuccessSnackBar(context, 'Convention publiÃ©e avec succÃ¨s ! ðŸŽ‰');
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la publication: $e');
      }
    } finally {
      if (mounted) setState(() => _isSaving = false);
    }
  }

  Map<String, dynamic> _buildConventionData(String status) {
    final startDateTime = _formData['startDate'] != null && _formData['startTime'] != null
        ? DateTime(
            _formData['startDate'].year,
            _formData['startDate'].month,
            _formData['startDate'].day,
            _formData['startTime'].hour,
            _formData['startTime'].minute,
          )
        : null;
    
    final endDateTime = _formData['endDate'] != null && _formData['endTime'] != null
        ? DateTime(
            _formData['endDate'].year,
            _formData['endDate'].month,
            _formData['endDate'].day,
            _formData['endTime'].hour,
            _formData['endTime'].minute,
          )
        : null;

    return {
      'basic': {
        'name': _controllers['name']?.text ?? '',
        'description': _controllers['description']?.text ?? '',
        'type': _formData['type'].toString().split('.').last,
        'status': status,
        'organizerId': ServiceHelper.currentUserId,
      },
      'location': {
        'venue': _controllers['location']?.text ?? '',
        'address': _controllers['address']?.text ?? '',
        'capacity': _formData['maxTattooers'],
        'coordinates': null,
      },
      'dates': {
        'start': startDateTime != null ? Timestamp.fromDate(startDateTime) : null,
        'end': endDateTime != null ? Timestamp.fromDate(endDateTime) : null,
        'timezone': 'Europe/Paris',
        'expectedVisitors': _formData['expectedVisitors'],
      },
      'pricing': {
        'hasZonePricing': _formData['hasZonePricing'],
        'standPrice': _formData['hasZonePricing'] ? null : _formData['standPrice'],
        'ticketPrice': _formData['ticketPrice'],
        'currency': 'EUR',
        'zones': _formData['hasZonePricing'] ? _formData['pricingZones'] : null,
      },
      'settings': {
        'onlineBooking': _formData['allowOnlineBooking'],
        'fractionalPayment': _formData['allowFractionalPayment'],
        'amenities': _formData['selectedAmenities'],
      },
      'contact': {
        'email': _controllers['email']?.text ?? '',
        'phone': _controllers['phone']?.text ?? '',
        'website': _controllers['website']?.text ?? '',
      },
      'stats': {
        'tattooersCount': 0,
        'maxTattooers': _formData['maxTattooers'],
        'ticketsSold': 0,
        'expectedVisitors': _formData['expectedVisitors'],
        'revenue': {
          'total': 0.0,
          'stands': 0.0,
          'tickets': 0.0,
          'kipikCommission': 0.0,
        },
      },
      'media': {
        'coverImage': _formData['selectedImage'],
        'gallery': [],
      },
    };
  }

  @override
  void dispose() {
    _controller.dispose();
    _pageController.dispose();
    for (final controller in _controllers.values) {
      controller.dispose();
    }
    super.dispose();
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\organisateur_billeterie_page.dart

// lib/theme/kipik_theme.dart
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart'; // âœ… AJOUTÃ‰ pour DragStartBehavior

class KipikTheme {
  // âœ… Couleurs existantes (inchangÃ©es)
  static const Color noir = Colors.black;
  static const Color blanc = Colors.white;
  static const Color rouge = Color.fromARGB(255, 134, 7, 7);
  static const String fontTitle = 'PermanentMarker';

  // âœ… NOUVEAU: Gestion centralisÃ©e des backgrounds
  static const List<String> backgrounds = [
    'assets/background1.png',
    'assets/background2.png',
    'assets/background3.png',
    'assets/background4.png',
  ];

  // âœ… Obtenir un background alÃ©atoire
  static String getRandomBackground() {
    return backgrounds[Random().nextInt(backgrounds.length)];
  }

  // âœ… Scaffold avec background automatique
  static Widget scaffoldWithBackground({
    required Widget child,
    AppBar? appBar,
    Widget? drawer,
    Widget? endDrawer,
    Widget? floatingActionButton,
    FloatingActionButtonLocation? floatingActionButtonLocation,
    String? specificBackground,
    bool extendBodyBehindAppBar = true,
    bool? resizeToAvoidBottomInset,
    Widget? bottomNavigationBar,
    Widget? bottomSheet,
    Color? backgroundColor,
    bool primary = true,
    DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start,
    bool extendBody = false,
    List<Widget>? persistentFooterButtons,
    AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd,
  }) {
    final bgAsset = specificBackground ?? getRandomBackground();
    
    return Scaffold(
      extendBodyBehindAppBar: extendBodyBehindAppBar,
      appBar: appBar,
      drawer: drawer,
      endDrawer: endDrawer,
      floatingActionButton: floatingActionButton,
      floatingActionButtonLocation: floatingActionButtonLocation,
      bottomNavigationBar: bottomNavigationBar,
      bottomSheet: bottomSheet,
      backgroundColor: backgroundColor,
      resizeToAvoidBottomInset: resizeToAvoidBottomInset,
      primary: primary,
      drawerDragStartBehavior: drawerDragStartBehavior,
      extendBody: extendBody,
      persistentFooterButtons: persistentFooterButtons,
      persistentFooterAlignment: persistentFooterAlignment,
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Background image
          Image.asset(
            bgAsset,
            fit: BoxFit.cover,
            errorBuilder: (context, error, stackTrace) {
              // Fallback en cas d'erreur de chargement
              return Container(
                decoration: const LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [noir, Color(0xFF1a1a1a)],
                ).createShader(const Rect.fromLTWH(0, 0, 100, 100)) as Decoration,
              );
            },
          ),
          // Contenu par-dessus
          child,
        ],
      ),
    );
  }

  // âœ… Version simplifiÃ©e pour les cas simples
  static Widget pageWithBackground({
    required Widget child,
    AppBar? appBar,
    Widget? drawer,
    Widget? endDrawer,
    Widget? floatingActionButton,
    String? specificBackground,
  }) {
    return scaffoldWithBackground(
      appBar: appBar,
      drawer: drawer,
      endDrawer: endDrawer,
      floatingActionButton: floatingActionButton,
      specificBackground: specificBackground,
      child: SafeArea(
        child: child,
      ),
    );
  }

  // âœ… Widget pour forcer un background spÃ©cifique
  static Widget withSpecificBackground(
    String backgroundAsset, {
    required Widget child,
  }) {
    return Stack(
      fit: StackFit.expand,
      children: [
        Image.asset(
          backgroundAsset,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) {
            return Container(color: noir);
          },
        ),
        child,
      ],
    );
  }

  // âœ… Helper pour les pages sans background (admin, etc.)
  static Widget scaffoldWithoutBackground({
    required Widget child,
    AppBar? appBar,
    Widget? drawer,
    Widget? endDrawer,
    Widget? floatingActionButton,
    Color? backgroundColor,
  }) {
    return Scaffold(
      appBar: appBar,
      drawer: drawer,
      endDrawer: endDrawer,
      floatingActionButton: floatingActionButton,
      backgroundColor: backgroundColor ?? noir,
      body: child,
    );
  }

  // âœ… Votre themeData existant (inchangÃ©)
  static ThemeData themeData = ThemeData(
    primaryColor: noir,
    scaffoldBackgroundColor: noir,
    fontFamily: 'Roboto',
    appBarTheme: const AppBarTheme(
      backgroundColor: noir,
      centerTitle: true,
      iconTheme: IconThemeData(color: blanc),
      titleTextStyle: TextStyle(
        fontFamily: fontTitle,
        color: blanc,
        fontSize: 22,
      ),
    ),
    textTheme: const TextTheme(
      bodyMedium: TextStyle(color: blanc),
    ),
  );

  // âœ… MÃ©thodes utilitaires pour les backgrounds
  static List<String> getAllBackgrounds() => List.from(backgrounds);
  
  static String getBackgroundByIndex(int index) {
    return backgrounds[index % backgrounds.length];
  }
  
  static bool hasBackground(String path) {
    return backgrounds.contains(path);
  }

  // âœ… MÃ©thodes pour les couleurs dÃ©rivÃ©es
  static Color get rougeLight => rouge.withOpacity(0.85);
  static Color get blancTransparent => blanc.withOpacity(0.7);
  static Color get noirTransparent => noir.withOpacity(0.8);

  // ===============================================
  // âœ… HELPERS RÃ‰CURRENTS DANS VOS PAGES
  // ===============================================

  // ðŸ“± Structure de page standard avec SafeArea + Padding
  static Widget pageContent({
    required List<Widget> children,
    EdgeInsets? padding,
    MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,
    CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,
  }) {
    return SafeArea(
      child: Padding(
        padding: padding ?? const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          mainAxisAlignment: mainAxisAlignment,
          crossAxisAlignment: crossAxisAlignment,
          children: children,
        ),
      ),
    );
  }

  // ðŸŽ¨ Styles de texte rÃ©currents
  static const TextStyle titleStyle = TextStyle(
    fontFamily: fontTitle,
    fontSize: 26,
    color: blanc,
  );

  static const TextStyle subtitleStyle = TextStyle(
    fontFamily: fontTitle,
    fontSize: 16,
    color: blanc,
  );

  static const TextStyle cardTitleStyle = TextStyle(
    fontFamily: fontTitle,
    fontSize: 18,
    color: blanc,
  );

  static const TextStyle bodyTextStyle = TextStyle(
    fontFamily: 'Roboto',
    fontSize: 14,
    color: blanc,
  );

  static TextStyle get bodyTextSecondary => TextStyle(
    fontFamily: 'Roboto',
    fontSize: 14,
    color: blancTransparent,
  );

  // ðŸ”„ Loading states
  static Widget loading({Color? color}) {
    return CircularProgressIndicator(
      valueColor: AlwaysStoppedAnimation<Color>(color ?? rouge),
    );
  }

  static Widget loadingWhite() {
    return const CircularProgressIndicator(
      valueColor: AlwaysStoppedAnimation<Color>(blanc),
    );
  }

  // ðŸ“Š Cards/Containers rÃ©currents
  static Widget kipikCard({
    required Widget child,
    EdgeInsets? padding,
    Color? backgroundColor,
    double borderRadius = 12,
  }) {
    return Container(
      padding: padding ?? const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: backgroundColor ?? rougeLight,
        borderRadius: BorderRadius.circular(borderRadius),
      ),
      child: child,
    );
  }

  static Widget dashboardCard({
    required IconData icon,
    required String title,
    required String value,
    required VoidCallback onTap,
    Color? backgroundColor,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: backgroundColor ?? rougeLight,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: blanc, size: 28),
            const SizedBox(height: 4),
            Text(
              value,
              textAlign: TextAlign.center,
              style: cardTitleStyle,
            ),
            const SizedBox(height: 2),
            Text(
              title,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: blancTransparent,
                fontFamily: fontTitle,
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ðŸŽ­ Badge mode dÃ©mo
  static Widget demoBadge({String? customText, String? prefix}) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
      decoration: BoxDecoration(
        color: Colors.orange,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        '${prefix ?? 'ðŸŽ­'} ${customText ?? 'MODE DÃ‰MO'}',
        style: const TextStyle(
          color: blanc,
          fontSize: 10,
          fontWeight: FontWeight.bold,
          fontFamily: 'Roboto',
        ),
      ),
    );
  }

  // ðŸ”˜ Boutons rÃ©currents
  static Widget primaryButton({
    required String text,
    required VoidCallback onPressed,
    Color? backgroundColor,
    Color? textColor,
    double? width,
    double height = 48,
  }) {
    return SizedBox(
      width: width ?? double.infinity,
      height: height,
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor ?? blanc,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        onPressed: onPressed,
        child: Text(
          text,
          style: TextStyle(
            fontFamily: fontTitle,
            color: textColor ?? noir,
            fontSize: 16,
          ),
        ),
      ),
    );
  }

  static Widget outlineButton({
    required String text,
    required VoidCallback onPressed,
    Color? borderColor,
    Color? textColor,
    double? width,
    double height = 48,
  }) {
    return SizedBox(
      width: width ?? double.infinity,
      height: height,
      child: OutlinedButton(
        style: OutlinedButton.styleFrom(
          backgroundColor: blanc,
          side: BorderSide(color: borderColor ?? rouge, width: 2),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        onPressed: onPressed,
        child: Text(
          text,
          textAlign: TextAlign.center,
          style: TextStyle(
            fontFamily: fontTitle,
            color: textColor ?? noir,
            fontSize: 16,
          ),
        ),
      ),
    );
  }

  // ðŸ“ Champs de saisie rÃ©currents
  static Widget searchField({
    required TextEditingController controller,
    required Function(String) onChanged,
    String? hintText,
    Color? backgroundColor,
    Color? textColor,
  }) {
    return TextField(
      controller: controller,
      onChanged: onChanged,
      style: TextStyle(
        color: textColor ?? blanc,
        fontFamily: 'Roboto',
      ),
      decoration: InputDecoration(
        hintText: hintText ?? 'Rechercher...',
        hintStyle: TextStyle(
          color: (textColor ?? blanc).withOpacity(0.7),
          fontFamily: 'Roboto',
        ),
        prefixIcon: Icon(
          Icons.search,
          color: textColor ?? blanc,
        ),
        suffixIcon: controller.text.isNotEmpty
            ? IconButton(
                icon: Icon(Icons.clear, color: textColor ?? blanc),
                onPressed: () {
                  controller.clear();
                  onChanged('');
                },
              )
            : null,
        filled: true,
        fillColor: backgroundColor ?? blanc.withOpacity(0.2),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  // ðŸ“Š Pages d'Ã©tat (vide, erreur, etc.)
  static Widget emptyState({
    required IconData icon,
    required String title,
    required String message,
    Color? iconColor,
    Widget? action,
  }) {
    return Center(
      child: kipikCard(
        padding: const EdgeInsets.all(32),
        backgroundColor: Colors.grey.withOpacity(0.85),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 64,
              color: iconColor ?? blanc,
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: titleStyle.copyWith(fontSize: 18),
            ),
            const SizedBox(height: 8),
            Text(
              message,
              textAlign: TextAlign.center,
              style: bodyTextSecondary,
            ),
            if (action != null) ...[
              const SizedBox(height: 16),
              action,
            ],
          ],
        ),
      ),
    );
  }

  static Widget errorState({
    required String title,
    required String message,
    VoidCallback? onRetry,
  }) {
    return emptyState(
      icon: Icons.error_outline,
      title: title,
      message: message,
      iconColor: Colors.red,
      action: onRetry != null
          ? primaryButton(
              text: 'RÃ©essayer',
              onPressed: onRetry,
              backgroundColor: Colors.red,
              textColor: blanc,
            )
          : null,
    );
  }

  // ðŸ·ï¸ Badges de statut
  static Widget statusBadge({
    required String text,
    required Color color,
    IconData? icon,
  }) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.9),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          if (icon != null) ...[
            Icon(icon, size: 12, color: blanc),
            const SizedBox(width: 4),
          ],
          Text(
            text,
            style: const TextStyle(
              fontSize: 10,
              color: blanc,
              fontFamily: fontTitle,
            ),
          ),
        ],
      ),
    );
  }

  // ðŸ“± SnackBars rÃ©currents
  static void showSuccessSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: const TextStyle(fontFamily: fontTitle),
        ),
        backgroundColor: Colors.green,
      ),
    );
  }

  static void showErrorSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: const TextStyle(fontFamily: 'Roboto'),
        ),
        backgroundColor: Colors.red,
      ),
    );
  }

  static void showInfoSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: const TextStyle(fontFamily: 'Roboto'),
        ),
        backgroundColor: rouge,
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\organisateur_conventions_page.dart

// lib/pages/organisateur/organisateur_conventions_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../services/organisateur/firebase_organisateur_service.dart';
import '../../services/organisateur/convention_management_service.dart';

enum ConventionStatus { draft, published, active, completed, cancelled }

class OrganisateurConventionsPage extends StatefulWidget {
  const OrganisateurConventionsPage({Key? key}) : super(key: key);

  @override
  State<OrganisateurConventionsPage> createState() => _OrganisateurConventionsPageState();
}

class _OrganisateurConventionsPageState extends State<OrganisateurConventionsPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _tabController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _tabAnimation;

  // Services Firebase
  final FirebaseOrganisateurService _organisateurService = FirebaseOrganisateurService();
  final ConventionManagementService _conventionService = ConventionManagementService();

  // State
  int _selectedTabIndex = 0;
  String _searchQuery = '';
  ConventionStatus? _statusFilter;

  // Data streams
  Stream<QuerySnapshot>? _conventionsStream;
  List<DocumentSnapshot> _filteredConventions = [];

  final TextEditingController _searchController = TextEditingController();
  String? _currentOrganizerId;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeFirebaseStreams();
    _setupSearchListener();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _tabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _tabAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _tabController, curve: Curves.easeOut),
    );

    _slideController.forward();
    _tabController.forward();
  }

  void _initializeFirebaseStreams() {
    _currentOrganizerId = _organisateurService.getCurrentOrganizerId();
    
    if (_currentOrganizerId != null) {
      _conventionsStream = _conventionService.getConventionsStream(_currentOrganizerId!);
    }
  }

  void _setupSearchListener() {
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text.toLowerCase();
      });
      _filterConventions();
    });
  }

  void _filterConventions() {
    // Le filtrage sera fait cÃ´tÃ© client aprÃ¨s rÃ©ception des donnÃ©es Firebase
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    if (_currentOrganizerId == null) {
      return _buildAuthenticationError();
    }

    return Scaffold(
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: 'Mes Conventions',
        subtitle: 'Gestion temps rÃ©el',
        showBackButton: true,
        showBurger: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.filter_list, color: Colors.white),
            onPressed: _showFilterOptions,
          ),
          IconButton(
            icon: const Icon(Icons.analytics, color: Colors.white),
            onPressed: _viewGlobalAnalytics,
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton.extended(
            heroTag: "create_convention",
            onPressed: _createNewConvention,
            backgroundColor: KipikTheme.rouge,
            icon: const Icon(Icons.add, color: Colors.white),
            label: const Text(
              'Nouvelle Convention',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAuthenticationError() {
    return Scaffold(
      body: Center(
        child: Container(
          padding: const EdgeInsets.all(32),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.error, size: 64, color: Colors.red[400]),
              const SizedBox(height: 16),
              const Text(
                'Erreur d\'authentification',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 8),
              const Text(
                'Vous devez Ãªtre connectÃ© en tant qu\'organisateur',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.grey,
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () => Navigator.pushReplacementNamed(context, '/connexion'),
                child: const Text('Se connecter'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        const SizedBox(height: 16),
        _buildSearchAndFilters(),
        const SizedBox(height: 16),
        _buildStatusTabs(),
        const SizedBox(height: 16),
        _buildStatsHeader(),
        const SizedBox(height: 16),
        Expanded(
          child: _buildConventionsList(),
        ),
      ],
    );
  }

  Widget _buildSearchAndFilters() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          children: [
            Icon(Icons.search, color: KipikTheme.rouge),
            const SizedBox(width: 12),
            Expanded(
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  hintText: 'Rechercher une convention...',
                  hintStyle: TextStyle(
                    fontFamily: 'Roboto',
                    color: Colors.grey[500],
                  ),
                  border: InputBorder.none,
                ),
              ),
            ),
            if (_searchQuery.isNotEmpty)
              IconButton(
                icon: const Icon(Icons.clear, color: Colors.grey),
                onPressed: () {
                  _searchController.clear();
                  _filterConventions();
                },
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatusTabs() {
    return AnimatedBuilder(
      animation: _tabAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _tabAnimation.value,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: StreamBuilder<QuerySnapshot>(
              stream: _conventionsStream,
              builder: (context, snapshot) {
                final allConventions = snapshot.hasData ? snapshot.data!.docs : <DocumentSnapshot>[];
                
                final tabs = [
                  {'label': 'Toutes', 'status': null, 'count': allConventions.length},
                  {'label': 'Actives', 'status': ConventionStatus.active, 'count': _getCountByStatus(allConventions, 'active')},
                  {'label': 'Brouillons', 'status': ConventionStatus.draft, 'count': _getCountByStatus(allConventions, 'draft')},
                  {'label': 'TerminÃ©es', 'status': ConventionStatus.completed, 'count': _getCountByStatus(allConventions, 'completed')},
                ];

                return Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.95),
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Row(
                    children: tabs.asMap().entries.map((entry) {
                      final index = entry.key;
                      final tab = entry.value;
                      final isSelected = _selectedTabIndex == index;

                      return Expanded(
                        child: GestureDetector(
                          onTap: () {
                            setState(() {
                              _selectedTabIndex = index;
                              _statusFilter = tab['status'] as ConventionStatus?;
                            });
                            _filterConventions();
                            HapticFeedback.lightImpact();
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            decoration: BoxDecoration(
                              gradient: isSelected ? LinearGradient(
                                colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                              ) : null,
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Column(
                              children: [
                                Text(
                                  tab['label'] as String,
                                  style: TextStyle(
                                    fontFamily: 'Roboto',
                                    fontSize: 12,
                                    fontWeight: FontWeight.w600,
                                    color: isSelected ? Colors.white : Colors.grey[600],
                                  ),
                                ),
                                const SizedBox(height: 2),
                                Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: isSelected ? Colors.white.withOpacity(0.2) : Colors.grey.withOpacity(0.2),
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Text(
                                    '${tab['count']}',
                                    style: TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                      color: isSelected ? Colors.white : Colors.grey[600],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                );
              },
            ),
          ),
        );
      },
    );
  }

  Widget _buildStatsHeader() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: StreamBuilder<QuerySnapshot>(
        stream: _conventionsStream,
        builder: (context, snapshot) {
          final conventions = snapshot.hasData ? snapshot.data!.docs : <DocumentSnapshot>[];
          
          double totalRevenue = 0;
          int totalTattooers = 0;
          double avgRevenue = 0;

          for (final doc in conventions) {
            final data = doc.data() as Map<String, dynamic>;
            final stats = data['stats'] as Map<String, dynamic>?;
            if (stats != null) {
              final revenue = stats['revenue'];
              if (revenue is Map<String, dynamic>) {
                totalRevenue += (revenue['total'] as num?)?.toDouble() ?? 0;
              }
              totalTattooers += (stats['tattooersCount'] as int?) ?? 0;
            }
          }

          if (conventions.isNotEmpty) {
            avgRevenue = totalRevenue / conventions.length;
          }

          return Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.purple.withOpacity(0.8), Colors.blue.withOpacity(0.8)],
              ),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem(
                  'Revenus Total',
                  '${totalRevenue.toStringAsFixed(0)}â‚¬',
                  Icons.euro,
                ),
                _buildStatItem(
                  'Tatoueurs',
                  totalTattooers.toString(),
                  Icons.people,
                ),
                _buildStatItem(
                  'Moy/Convention',
                  '${avgRevenue.toStringAsFixed(0)}â‚¬',
                  Icons.trending_up,
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 16,
            color: Colors.white,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 10,
            color: Colors.white70,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildConventionsList() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: StreamBuilder<QuerySnapshot>(
        stream: _conventionsStream,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator(color: Colors.white));
          }

          if (snapshot.hasError) {
            return Center(
              child: Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.red.shade50,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.error, color: Colors.red.shade600, size: 48),
                    const SizedBox(height: 8),
                    Text(
                      'Erreur de chargement',
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        color: Colors.red.shade600,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      snapshot.error.toString(),
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.grey,
                      ),
                    ),
                  ],
                ),
              ),
            );
          }

          final allConventions = snapshot.data?.docs ?? [];
          final filteredConventions = _applyFilters(allConventions);

          if (filteredConventions.isEmpty) {
            return _buildEmptyState();
          }

          return ListView.builder(
            itemCount: filteredConventions.length,
            itemBuilder: (context, index) {
              final doc = filteredConventions[index];
              final data = doc.data() as Map<String, dynamic>;
              return _buildConventionCard(doc.id, data);
            },
          );
        },
      ),
    );
  }

  List<DocumentSnapshot> _applyFilters(List<DocumentSnapshot> conventions) {
    return conventions.where((doc) {
      final data = doc.data() as Map<String, dynamic>;
      final basicInfo = data['basic'] as Map<String, dynamic>?;
      final locationInfo = data['location'] as Map<String, dynamic>?;
      
      // Filtre par recherche
      if (_searchQuery.isNotEmpty) {
        final name = basicInfo?['name']?.toString().toLowerCase() ?? '';
        final venue = locationInfo?['venue']?.toString().toLowerCase() ?? '';
        
        if (!name.contains(_searchQuery) && !venue.contains(_searchQuery)) {
          return false;
        }
      }
      
      // Filtre par statut
      if (_statusFilter != null) {
        final status = basicInfo?['status'];
        if (status != _statusFilter.toString().split('.').last) {
          return false;
        }
      }
      
      return true;
    }).toList();
  }

  Widget _buildConventionCard(String conventionId, Map<String, dynamic> data) {
    final basicInfo = data['basic'] as Map<String, dynamic>?;
    final locationInfo = data['location'] as Map<String, dynamic>?;
    final datesInfo = data['dates'] as Map<String, dynamic>?;
    final statsInfo = data['stats'] as Map<String, dynamic>?;
    
    final status = _parseStatus(basicInfo?['status']);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte avec statut
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [_getStatusColor(status), _getStatusColor(status).withOpacity(0.8)],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        basicInfo?['name'] ?? 'Convention sans nom',
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 18,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${locationInfo?['venue'] ?? 'Lieu TBD'} â€¢ ${_formatDate(datesInfo)}',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    _getStatusLabel(status),
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Contenu principal
          Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              children: [
                // MÃ©triques
                _buildMetricsRow(statsInfo),
                
                const SizedBox(height: 16),
                
                // Progression
                _buildProgressSection(statsInfo),
                
                const SizedBox(height: 16),
                
                // Actions
                _buildConventionActions(conventionId, data, status),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMetricsRow(Map<String, dynamic>? statsInfo) {
    final tattooersCount = statsInfo?['tattooersCount'] ?? 0;
    final maxTattooers = statsInfo?['maxTattooers'] ?? 0;
    final ticketsSold = statsInfo?['ticketsSold'] ?? 0;
    final revenue = statsInfo?['revenue'];
    final totalRevenue = revenue is Map<String, dynamic> ? (revenue['total'] ?? 0.0) : 0.0;

    return Row(
      children: [
        Expanded(
          child: _buildMetricCard(
            'Tatoueurs',
            '$tattooersCount',
            maxTattooers > 0 ? '/$maxTattooers' : '',
            Icons.people,
            Colors.blue,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildMetricCard(
            'Billets',
            '$ticketsSold',
            '',
            Icons.confirmation_number,
            Colors.green,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildMetricCard(
            'Revenus',
            '${totalRevenue.toStringAsFixed(0)}â‚¬',
            '',
            Icons.euro,
            KipikTheme.rouge,
          ),
        ),
      ],
    );
  }

  Widget _buildMetricCard(String label, String value, String suffix, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 6),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.baseline,
            textBaseline: TextBaseline.alphabetic,
            children: [
              Text(
                value,
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: color,
                ),
              ),
              if (suffix.isNotEmpty)
                Text(
                  suffix,
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: color.withOpacity(0.7),
                  ),
                ),
            ],
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 10,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProgressSection(Map<String, dynamic>? statsInfo) {
    final tattooersCount = (statsInfo?['tattooersCount'] ?? 0).toDouble();
    final maxTattooers = (statsInfo?['maxTattooers'] ?? 1).toDouble();
    final ticketsSold = (statsInfo?['ticketsSold'] ?? 0).toDouble();
    final expectedVisitors = (statsInfo?['expectedVisitors'] ?? 1).toDouble();
    
    final tattooersProgress = maxTattooers > 0 ? tattooersCount / maxTattooers : 0.0;
    final ticketsProgress = expectedVisitors > 0 ? ticketsSold / expectedVisitors : 0.0;
    
    return Column(
      children: [
        _buildProgressBar(
          'Occupation stands',
          tattooersProgress,
          '${(tattooersProgress * 100).toInt()}%',
          Colors.blue,
        ),
        const SizedBox(height: 8),
        _buildProgressBar(
          'Vente billets',
          ticketsProgress,
          '${(ticketsProgress * 100).toInt()}%',
          Colors.green,
        ),
      ],
    );
  }

  Widget _buildProgressBar(String label, double progress, String percentage, Color color) {
    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              label,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
            Text(
              percentage,
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
          ],
        ),
        const SizedBox(height: 4),
        LinearProgressIndicator(
          value: progress.clamp(0.0, 1.0),
          backgroundColor: Colors.grey[200],
          valueColor: AlwaysStoppedAnimation<Color>(color),
        ),
      ],
    );
  }

  Widget _buildConventionActions(String conventionId, Map<String, dynamic> data, ConventionStatus status) {
    switch (status) {
      case ConventionStatus.draft:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _editConvention(conventionId, data),
                icon: const Icon(Icons.edit, size: 16),
                label: const Text('Modifier', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _publishConvention(conventionId, data),
                icon: const Icon(Icons.publish, size: 16),
                label: const Text('Publier', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ConventionStatus.published:
      case ConventionStatus.active:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewAnalytics(conventionId, data),
                icon: const Icon(Icons.analytics, size: 16),
                label: const Text('Analytics', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                ),
              ),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _manageConvention(conventionId, data),
                icon: const Icon(Icons.settings, size: 16),
                label: const Text('GÃ©rer', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _viewConventionMap(conventionId, data),
                icon: const Icon(Icons.map, size: 16),
                label: const Text('Plan', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.purple,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ConventionStatus.completed:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _downloadReport(conventionId, data),
                icon: const Icon(Icons.download, size: 16),
                label: const Text('Rapport', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.indigo,
                  side: const BorderSide(color: Colors.indigo),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _duplicateConvention(conventionId, data),
                icon: const Icon(Icons.copy, size: 16),
                label: const Text('Dupliquer', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ConventionStatus.cancelled:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewConventionDetails(conventionId, data),
                icon: const Icon(Icons.info, size: 16),
                label: const Text('DÃ©tails', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey,
                  side: const BorderSide(color: Colors.grey),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _duplicateConvention(conventionId, data),
                icon: const Icon(Icons.refresh, size: 16),
                label: const Text('RecrÃ©er', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
    }
  }

  Widget _buildEmptyState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Container(
          padding: const EdgeInsets.all(32),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.event_busy,
                size: 64,
                color: Colors.grey[400],
              ),
              const SizedBox(height: 16),
              Text(
                'Aucune convention trouvÃ©e',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'CrÃ©ez votre premiÃ¨re convention pour commencer',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.grey[500],
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton.icon(
                onPressed: _createNewConvention,
                icon: const Icon(Icons.add, size: 16),
                label: const Text('CrÃ©er une convention'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper methods
  ConventionStatus _parseStatus(String? statusString) {
    switch (statusString) {
      case 'draft':
        return ConventionStatus.draft;
      case 'published':
        return ConventionStatus.published;
      case 'active':
        return ConventionStatus.active;
      case 'completed':
        return ConventionStatus.completed;
      case 'cancelled':
        return ConventionStatus.cancelled;
      default:
        return ConventionStatus.draft;
    }
  }

  Color _getStatusColor(ConventionStatus status) {
    switch (status) {
      case ConventionStatus.draft:
        return Colors.grey;
      case ConventionStatus.published:
        return Colors.blue;
      case ConventionStatus.active:
        return Colors.green;
      case ConventionStatus.completed:
        return Colors.indigo;
      case ConventionStatus.cancelled:
        return Colors.red;
    }
  }

  String _getStatusLabel(ConventionStatus status) {
    switch (status) {
      case ConventionStatus.draft:
        return 'BROUILLON';
      case ConventionStatus.published:
        return 'PUBLIÃ‰E';
      case ConventionStatus.active:
        return 'ACTIVE';
      case ConventionStatus.completed:
        return 'TERMINÃ‰E';
      case ConventionStatus.cancelled:
        return 'ANNULÃ‰E';
    }
  }

  int _getCountByStatus(List<DocumentSnapshot> conventions, String status) {
    return conventions.where((doc) {
      final data = doc.data() as Map<String, dynamic>;
      final basicInfo = data['basic'] as Map<String, dynamic>?;
      return basicInfo?['status'] == status;
    }).length;
  }

  String _formatDate(Map<String, dynamic>? datesInfo) {
    if (datesInfo == null) return 'Date TBD';
    
    try {
      final startTimestamp = datesInfo['start'] as Timestamp?;
      final endTimestamp = datesInfo['end'] as Timestamp?;
      
      if (startTimestamp != null && endTimestamp != null) {
        final startDate = startTimestamp.toDate();
        final endDate = endTimestamp.toDate();
        
        if (startDate.month == endDate.month) {
          return '${startDate.day}-${endDate.day}/${startDate.month}/${startDate.year}';
        } else {
          return '${startDate.day}/${startDate.month} - ${endDate.day}/${endDate.month}/${startDate.year}';
        }
      }
    } catch (e) {
      return 'Date invalide';
    }
    
    return 'Date TBD';
  }

  // Actions Firebase
  void _showFilterOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Filtres avancÃ©s',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),
            const Text('FonctionnalitÃ© Ã  implÃ©menter avec Firebase'),
            const SizedBox(height: 20),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Fermer'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _viewGlobalAnalytics() {
    Navigator.pushNamed(context, '/organisateur/analytics');
  }

  void _createNewConvention() {
    Navigator.pushNamed(context, '/organisateur/conventions/create');
  }

  void _editConvention(String conventionId, Map<String, dynamic> data) {
    Navigator.pushNamed(
      context, 
      '/organisateur/conventions/edit',
      arguments: conventionId,
    );
  }

  void _publishConvention(String conventionId, Map<String, dynamic> data) async {
    try {
      await _conventionService.publishConvention(conventionId);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Convention "${data['basic']['name']}" publiÃ©e avec succÃ¨s !'),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de la publication: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }

  void _viewAnalytics(String conventionId, Map<String, dynamic> data) {
    Navigator.pushNamed(
      context,
      '/organisateur/analytics/$conventionId',
      arguments: data,
    );
  }

  void _manageConvention(String conventionId, Map<String, dynamic> data) {
    Navigator.pushNamed(
      context,
      '/conventions/detail/$conventionId',
      arguments: {'role': 'organisateur'},
    );
  }

  void _viewConventionMap(String conventionId, Map<String, dynamic> data) {
    Navigator.pushNamed(
      context,
      '/conventions/detail/$conventionId',
      arguments: {'role': 'organisateur', 'openMap': true},
    );
  }

  void _downloadReport(String conventionId, Map<String, dynamic> data) async {
    try {
      // ImplÃ©menter gÃ©nÃ©ration de rapport Firebase
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('GÃ©nÃ©ration du rapport pour "${data['basic']['name']}"...'),
          backgroundColor: Colors.blue,
          behavior: SnackBarBehavior.floating,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erreur lors de la gÃ©nÃ©ration: $e'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  void _duplicateConvention(String conventionId, Map<String, dynamic> data) async {
    try {
      await _conventionService.duplicateConvention(conventionId);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Convention "${data['basic']['name']}" dupliquÃ©e avec succÃ¨s !'),
            backgroundColor: Colors.blue,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de la duplication: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }

  void _viewConventionDetails(String conventionId, Map<String, dynamic> data) {
    Navigator.pushNamed(
      context,
      '/conventions/detail/$conventionId',
      arguments: {'role': 'organisateur'},
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\organisateur_dashboard_page.dart

// lib/pages/organisateur/organisateur_dashboard_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../core/helpers/service_helper.dart'; // âœ… NOUVEAU
import '../../core/helpers/widget_helper.dart';  // âœ… NOUVEAU

class OrganisateurDashboardPage extends StatefulWidget {
  const OrganisateurDashboardPage({Key? key}) : super(key: key);

  @override
  State<OrganisateurDashboardPage> createState() => _OrganisateurDashboardPageState();
}

class _OrganisateurDashboardPageState extends State<OrganisateurDashboardPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _cardController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _cardAnimation;

  // âœ… CORRIGÃ‰ - Utilisation des helpers au lieu des services directs
  String? _currentOrganizerId;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _cardController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _cardController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _cardAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _cardController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      _cardController.forward();
    });
  }

  void _initializeData() {
    // âœ… SIMPLIFIÃ‰ - Utilisation de ServiceHelper
    _currentOrganizerId = ServiceHelper.currentUserId;
    setState(() => _isLoading = false);
  }

  @override
  Widget build(BuildContext context) {
    if (!ServiceHelper.isAuthenticated || _currentOrganizerId == null) {
      return _buildAuthenticationError();
    }

    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      endDrawer: DrawerFactory.of(context),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(kToolbarHeight),
        child: CustomAppBarKipik(
          title: 'Dashboard Organisateur',
          subtitle: 'Vue d\'ensemble temps rÃ©el',
          showBackButton: false,
          showBurger: true,
          useProStyle: true,
          actions: [
            _buildNotificationButton(),
            IconButton(
              icon: const Icon(Icons.settings, color: Colors.white),
              onPressed: _openSettings,
            ),
          ],
        ),
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton.extended(
            heroTag: "create_convention",
            onPressed: _createNewConvention,
            backgroundColor: KipikTheme.rouge,
            icon: const Icon(Icons.add, color: Colors.white),
            label: const Text(
              'Nouvelle Convention',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(
            contextPage: 'dashboard_organisateur',
            allowImageGeneration: false,
          ),
        ],
      ),
      child: Stack(
        children: [
          // Background
          KipikTheme.withSpecificBackground(
            'assets/background_charbon.png',
            child: Container(),
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? Center(child: KipikTheme.loading()) : _buildDashboardContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationButton() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('stand_requests', where: {'organizerId': _currentOrganizerId, 'status': 'pending'}),
      builder: (data) {
        final pendingCount = data.docs.length;
        
        return Stack(
          children: [
            IconButton(
              icon: const Icon(Icons.notifications, color: Colors.white),
              onPressed: _viewNotifications,
            ),
            if (pendingCount > 0)
              Positioned(
                right: 8,
                top: 8,
                child: Container(
                  padding: const EdgeInsets.all(2),
                  decoration: BoxDecoration(
                    color: Colors.red,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  constraints: const BoxConstraints(
                    minWidth: 16,
                    minHeight: 16,
                  ),
                  child: Text(
                    '$pendingCount',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
          ],
        );
      },
      loading: IconButton(
        icon: const Icon(Icons.notifications, color: Colors.white),
        onPressed: _viewNotifications,
      ),
    );
  }

  Widget _buildAuthenticationError() {
    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      child: KipikTheme.errorState(
        title: 'Erreur d\'authentification',
        message: 'Vous devez Ãªtre connectÃ© en tant qu\'organisateur',
        onRetry: () => Navigator.pushReplacementNamed(context, '/connexion'),
      ),
    );
  }

  Widget _buildDashboardContent() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildWelcomeHeader(),
          const SizedBox(height: 24),
          _buildKPICards(),
          const SizedBox(height: 32),
          _buildRevenueChart(),
          const SizedBox(height: 32),
          _buildActiveConventions(),
          const SizedBox(height: 32),
          _buildPendingRequests(),
          const SizedBox(height: 32),
          _buildQuickActions(),
          const SizedBox(height: 100), // Espace pour FAB
        ],
      ),
    );
  }

  Widget _buildWelcomeHeader() {
    return AnimatedBuilder(
      animation: _cardAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _cardAnimation.value,
          child: WidgetHelper.buildFutureWidget<Map<String, dynamic>>(
            future: ServiceHelper.getCurrentOrganizerData(),
            builder: (organizerData) {
              final organizerName = organizerData['profile']?['name'] ?? 'Organisateur';
              
              return WidgetHelper.buildFutureWidget<Map<String, dynamic>>(
                future: ServiceHelper.getAnalyticsData(_currentOrganizerId!),
                builder: (analyticsData) {
                  final monthlyRevenue = analyticsData['revenue']?['total'] ?? 0.0;
                  final growth = analyticsData['revenue']?['growth'] ?? 0.0;
                  
                  return Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.purple.shade600, Colors.blue.shade600],
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.2),
                          blurRadius: 12,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'ðŸ‘‹ Bonjour $organizerName !',
                          style: const TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 24,
                            color: Colors.white,
                          ),
                        ),
                        const SizedBox(height: 12),
                        _buildConventionsSummary(),
                        const SizedBox(height: 16),
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            children: [
                              const Icon(Icons.trending_up, color: Colors.white, size: 24),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      'Revenus du mois',
                                      style: TextStyle(
                                        fontFamily: 'Roboto',
                                        fontSize: 14,
                                        color: Colors.white70,
                                      ),
                                    ),
                                    Text(
                                      ServiceHelper.formatCurrency(monthlyRevenue),
                                      style: const TextStyle(
                                        fontFamily: 'PermanentMarker',
                                        fontSize: 20,
                                        color: Colors.white,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              if (growth > 0)
                                Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                  decoration: BoxDecoration(
                                    color: Colors.green,
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Text(
                                    '+${growth.toStringAsFixed(1)}%',
                                    style: const TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            },
          ),
        );
      },
    );
  }

  Widget _buildConventionsSummary() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('conventions', where: {'basic.organizerId': _currentOrganizerId}),
      builder: (conventionsData) {
        final activeConventions = conventionsData.docs.where((doc) => 
            (doc.data() as Map<String, dynamic>)['basic']['status'] == 'active').length;
        
        return WidgetHelper.buildStreamWidget<QuerySnapshot>(
          stream: ServiceHelper.getStream('stand_requests', where: {'organizerId': _currentOrganizerId, 'status': 'pending'}),
          builder: (requestsData) {
            final pendingRequests = requestsData.docs.length;
            
            return Text(
              'Vous avez $activeConventions conventions actives et $pendingRequests demandes en attente.',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                color: Colors.white70,
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildKPICards() {
    return AnimatedBuilder(
      animation: _cardAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, 50 * (1 - _cardAnimation.value)),
          child: Opacity(
            opacity: _cardAnimation.value,
            child: WidgetHelper.buildStreamWidget<QuerySnapshot>(
              stream: ServiceHelper.getStream('conventions', where: {'basic.organizerId': _currentOrganizerId}),
              builder: (conventionsData) {
                final activeConventions = conventionsData.docs.where((doc) => 
                    (doc.data() as Map<String, dynamic>)['basic']['status'] == 'active').length;
                
                return WidgetHelper.buildStreamWidget<QuerySnapshot>(
                  stream: ServiceHelper.getStream('stand_requests', where: {'organizerId': _currentOrganizerId, 'status': 'pending'}),
                  builder: (requestsData) {
                    final pendingRequests = requestsData.docs.length;
                    
                    return WidgetHelper.buildFutureWidget<Map<String, dynamic>>(
                      future: ServiceHelper.getAnalyticsData(_currentOrganizerId!),
                      builder: (analyticsData) {
                        final totalTattooers = analyticsData['tattooers']?['active'] ?? 0;
                        final kipikCommission = (analyticsData['revenue']?['total'] ?? 0.0) * 0.01;
                        
                        final kpis = [
                          {
                            'title': 'Conventions Actives',
                            'value': '$activeConventions',
                            'icon': Icons.event,
                            'color': KipikTheme.rouge,
                            'subtitle': '+${conventionsData.docs.length - activeConventions} inactives',
                          },
                          {
                            'title': 'Demandes en Attente',
                            'value': '$pendingRequests',
                            'icon': Icons.pending,
                            'color': Colors.orange,
                            'subtitle': 'Ã€ traiter',
                          },
                          {
                            'title': 'Tatoueurs Actifs',
                            'value': '$totalTattooers',
                            'icon': Icons.people,
                            'color': Colors.blue,
                            'subtitle': 'Toutes conventions',
                          },
                          {
                            'title': 'Commission Kipik',
                            'value': ServiceHelper.formatCurrency(kipikCommission),
                            'icon': Icons.account_balance_wallet,
                            'color': Colors.green,
                            'subtitle': '1% du CA',
                          },
                        ];

                        return GridView.count(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          crossAxisCount: 2,
                          crossAxisSpacing: 16,
                          mainAxisSpacing: 16,
                          childAspectRatio: 1.2,
                          children: kpis.map((kpi) => _buildKPICard(kpi)).toList(),
                        );
                      },
                    );
                  },
                );
              },
            ),
          ),
        );
      },
    );
  }

  Widget _buildKPICard(Map<String, dynamic> kpi) {
    return WidgetHelper.buildStatCard(
      title: kpi['title'],
      value: kpi['value'],
      icon: kpi['icon'],
      backgroundColor: Colors.white.withOpacity(0.95),
      onTap: () {
        // Navigation contextuelle selon le KPI
        switch (kpi['title']) {
          case 'Conventions Actives':
            Navigator.pushNamed(context, '/organisateur/conventions');
            break;
          case 'Demandes en Attente':
            Navigator.pushNamed(context, '/organisateur/inscriptions');
            break;
          case 'Tatoueurs Actifs':
            Navigator.pushNamed(context, '/organisateur/participants');
            break;
        }
      },
    );
  }

  Widget _buildRevenueChart() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.show_chart, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Ã‰volution des Revenus',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          Container(
            height: 200,
            decoration: BoxDecoration(
              color: Colors.grey[100],
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.analytics, size: 48, color: Colors.grey),
                  SizedBox(height: 8),
                  Text(
                    'Graphique des revenus temps rÃ©el',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 16,
                      color: Colors.grey,
                    ),
                  ),
                  Text(
                    'IntÃ©gration Charts.js + Firebase',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.grey,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActiveConventions() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('conventions', 
        where: {'basic.organizerId': _currentOrganizerId, 'basic.status': 'active'}, 
        limit: 3
      ),
      builder: (data) {
        return WidgetHelper.buildKipikContainer(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Icon(Icons.event_note, color: KipikTheme.rouge, size: 24),
                      const SizedBox(width: 12),
                      const Text(
                        'Conventions Actives',
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 18,
                          color: Colors.black87,
                        ),
                      ),
                    ],
                  ),
                  TextButton(
                    onPressed: () => Navigator.pushNamed(context, '/organisateur/conventions'),
                    child: const Text(
                      'Voir tout',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        color: Colors.blue,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              if (data.docs.isEmpty)
                Container(
                  padding: const EdgeInsets.all(32),
                  child: const Center(
                    child: Text(
                      'Aucune convention active',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        color: Colors.grey,
                      ),
                    ),
                  ),
                )
              else
                ...data.docs.map((doc) {
                  final conventionData = doc.data() as Map<String, dynamic>;
                  return _buildConventionCard(doc.id, conventionData);
                }),
            ],
          ),
        );
      },
    );
  }

  Widget _buildConventionCard(String conventionId, Map<String, dynamic> data) {
    final basicInfo = data['basic'] as Map<String, dynamic>?;
    final locationInfo = data['location'] as Map<String, dynamic>?;
    final statsInfo = data['stats'] as Map<String, dynamic>?;
    
    return WidgetHelper.buildListItem(
      title: basicInfo?['name'] ?? 'Convention',
      subtitle: '${locationInfo?['venue'] ?? 'Lieu'} â€¢ ${_formatDate(data['dates'])}',
      leading: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: KipikTheme.rouge.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Icon(Icons.event, color: KipikTheme.rouge, size: 20),
      ),
      actions: [
        Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              ServiceHelper.formatCurrency(statsInfo?['revenue']?['total'] ?? 0.0),
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 14,
                color: Colors.green[600],
              ),
            ),
            Text(
              '${statsInfo?['tattooersCount'] ?? 0} tatoueurs',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 10,
                color: Colors.grey,
              ),
            ),
          ],
        ),
        const SizedBox(width: 8),
        Icon(Icons.arrow_forward_ios, color: Colors.grey[400], size: 16),
      ],
      onTap: () => Navigator.pushNamed(
        context,
        '/conventions/detail/$conventionId',
        arguments: {'role': 'organisateur'},
      ),
    );
  }

  Widget _buildPendingRequests() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('stand_requests', 
        where: {'organizerId': _currentOrganizerId, 'status': 'pending'}, 
        limit: 3
      ),
      builder: (data) {
        if (data.docs.isEmpty) {
          return const SizedBox.shrink();
        }

        return Container(
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: Colors.orange.shade50,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: Colors.orange.shade200),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.pending, color: Colors.orange.shade600, size: 24),
                  const SizedBox(width: 12),
                  Text(
                    'Demandes en Attente (${data.docs.length})',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.orange.shade800,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              ...data.docs.map((doc) {
                final requestData = doc.data() as Map<String, dynamic>;
                final requesterInfo = requestData['requester'] as Map<String, dynamic>?;
                
                return Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      CircleAvatar(
                        radius: 16,
                        backgroundColor: Colors.orange.shade100,
                        child: Text(
                          requesterInfo?['name']?[0]?.toUpperCase() ?? '?',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.orange.shade700,
                          ),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              requesterInfo?['name'] ?? 'Tatoueur',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 13,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            Text(
                              'Stand ${requestData['stand']?['requestedSize']} - ${ServiceHelper.formatCurrency(requestData['pricing']?['requestedPrice'] ?? 0.0)}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 11,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      ),
                      ElevatedButton(
                        onPressed: () => Navigator.pushNamed(context, '/organisateur/inscriptions'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          foregroundColor: Colors.white,
                          minimumSize: const Size(60, 30),
                        ),
                        child: const Text(
                          'Voir',
                          style: TextStyle(fontSize: 12),
                        ),
                      ),
                    ],
                  ),
                );
              }),
              const SizedBox(height: 12),
              WidgetHelper.buildActionButton(
                text: 'Traiter toutes les demandes (${data.docs.length})',
                onPressed: () => Navigator.pushNamed(context, '/organisateur/inscriptions'),
                isPrimary: false,
              ),
            ],
          ),
        );
      },
      empty: const SizedBox.shrink(),
    );
  }

  Widget _buildQuickActions() {
    final actions = [
      {
        'title': 'Nouvelle Convention',
        'subtitle': 'CrÃ©er un Ã©vÃ©nement',
        'icon': Icons.add_circle,
        'color': KipikTheme.rouge,
        'onTap': _createNewConvention,
      },
      {
        'title': 'Demandes Stands',
        'subtitle': 'GÃ©rer les inscriptions',
        'icon': Icons.business,
        'color': Colors.orange,
        'onTap': () => Navigator.pushNamed(context, '/organisateur/inscriptions'),
      },
      {
        'title': 'Billeterie',
        'subtitle': 'Ventes & Analytics',
        'icon': Icons.confirmation_number,
        'color': Colors.green,
        'onTap': () => Navigator.pushNamed(context, '/organisateur/billeterie'),
      },
      {
        'title': 'Marketing',
        'subtitle': 'Promotion & Communication',
        'icon': Icons.campaign,
        'color': Colors.purple,
        'onTap': () => Navigator.pushNamed(context, '/organisateur/marketing'),
      },
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.flash_on, color: KipikTheme.rouge, size: 24),
            const SizedBox(width: 12),
            const Text(
              'Actions Rapides',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.white,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        GridView.count(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          crossAxisCount: 2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          childAspectRatio: 1.5,
          children: actions.map((action) => _buildActionCard(action)).toList(),
        ),
      ],
    );
  }

  Widget _buildActionCard(Map<String, dynamic> action) {
    return GestureDetector(
      onTap: () {
        HapticFeedback.mediumImpact();
        action['onTap']();
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: action['color'].withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                action['icon'],
                color: action['color'],
                size: 24,
              ),
            ),
            const Spacer(),
            Text(
              action['title'],
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              action['subtitle'],
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper methods
  String _formatDate(Map<String, dynamic>? datesInfo) {
    if (datesInfo == null) return 'Date TBD';
    
    try {
      final startTimestamp = datesInfo['start'] as Timestamp?;
      final endTimestamp = datesInfo['end'] as Timestamp?;
      
      if (startTimestamp != null && endTimestamp != null) {
        final startDate = startTimestamp.toDate();
        final endDate = endTimestamp.toDate();
        
        if (startDate.month == endDate.month) {
          return '${startDate.day}-${endDate.day}/${startDate.month}/${startDate.year}';
        } else {
          return '${startDate.day}/${startDate.month} - ${endDate.day}/${endDate.month}/${startDate.year}';
        }
      }
    } catch (e) {
      return 'Date invalide';
    }
    
    return 'Date TBD';
  }

  // Actions
  void _viewNotifications() {
    Navigator.pushNamed(context, '/organisateur/inscriptions');
  }

  void _openSettings() {
    Navigator.pushNamed(context, '/organisateur/settings');
  }

  void _createNewConvention() {
    Navigator.pushNamed(context, '/organisateur/conventions/create');
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\organisateur_inscriptions_page.dart

// lib/pages/organisateur/organisateur_inscriptions_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';

enum RequestStatus { pending, negotiating, accepted, rejected, paid, cancelled }
enum TattooerType { verified, premium, standard, new_user }

class OrganisateurInscriptionsPage extends StatefulWidget {
  const OrganisateurInscriptionsPage({Key? key}) : super(key: key);

  @override
  State<OrganisateurInscriptionsPage> createState() => _OrganisateurInscriptionsPageState();
}

class _OrganisateurInscriptionsPageState extends State<OrganisateurInscriptionsPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _tabController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _tabAnimation;

  int _selectedTabIndex = 0;
  bool _isLoading = true;
  String _searchQuery = '';
  RequestStatus? _statusFilter;

  List<Map<String, dynamic>> _standRequests = [];
  List<Map<String, dynamic>> _filteredRequests = [];
  Map<String, dynamic>? _selectedRequest;

  final TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadStandRequests();
    _setupSearchListener();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _tabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _tabAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _tabController, curve: Curves.easeOut),
    );

    _slideController.forward();
    _tabController.forward();
  }

  void _setupSearchListener() {
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text.toLowerCase();
      });
      _filterRequests();
    });
  }

  void _loadStandRequests() {
    Future.delayed(const Duration(seconds: 1), () {
      setState(() {
        _standRequests = _generateStandRequestsData();
        _filteredRequests = _standRequests;
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: 'Demandes de Stands',
        subtitle: '${_filteredRequests.length} demandes',
        showBackButton: true,
        showBurger: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.filter_alt, color: Colors.white),
            onPressed: _showAdvancedFilters,
          ),
          IconButton(
            icon: const Icon(Icons.download, color: Colors.white),
            onPressed: _exportRequests,
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            heroTag: "bulk_actions",
            onPressed: _showBulkActions,
            backgroundColor: Colors.orange,
            child: const Icon(Icons.select_all, color: Colors.white),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? _buildLoadingState() : _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Chargement des demandes...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        const SizedBox(height: 16),
        _buildSearchAndFilters(),
        const SizedBox(height: 16),
        _buildStatusTabs(),
        const SizedBox(height: 16),
        _buildStatsHeader(),
        const SizedBox(height: 16),
        Expanded(
          child: _buildRequestsList(),
        ),
      ],
    );
  }

  Widget _buildSearchAndFilters() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          children: [
            Icon(Icons.search, color: KipikTheme.rouge),
            const SizedBox(width: 12),
            Expanded(
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  hintText: 'Rechercher un tatoueur, style...',
                  hintStyle: TextStyle(
                    fontFamily: 'Roboto',
                    color: Colors.grey[500],
                  ),
                  border: InputBorder.none,
                ),
              ),
            ),
            if (_searchQuery.isNotEmpty)
              IconButton(
                icon: const Icon(Icons.clear, color: Colors.grey),
                onPressed: () {
                  _searchController.clear();
                  _filterRequests();
                },
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatusTabs() {
    final tabs = [
      {'label': 'Toutes', 'status': null, 'count': _standRequests.length},
      {'label': 'En attente', 'status': RequestStatus.pending, 'count': _standRequests.where((r) => r['status'] == RequestStatus.pending).length},
      {'label': 'NÃ©gociation', 'status': RequestStatus.negotiating, 'count': _standRequests.where((r) => r['status'] == RequestStatus.negotiating).length},
      {'label': 'AcceptÃ©es', 'status': RequestStatus.accepted, 'count': _standRequests.where((r) => r['status'] == RequestStatus.accepted).length},
      {'label': 'PayÃ©es', 'status': RequestStatus.paid, 'count': _standRequests.where((r) => r['status'] == RequestStatus.paid).length},
    ];

    return AnimatedBuilder(
      animation: _tabAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _tabAnimation.value,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Container(
              height: 80,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: tabs.length,
                itemBuilder: (context, index) {
                  final tab = tabs[index];
                  final isSelected = _selectedTabIndex == index;

                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        _selectedTabIndex = index;
                        _statusFilter = tab['status'] as RequestStatus?;
                      });
                      _filterRequests();
                      HapticFeedback.lightImpact();
                    },
                    child: Container(
                      margin: const EdgeInsets.only(right: 12),
                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
                      decoration: BoxDecoration(
                        gradient: isSelected ? LinearGradient(
                          colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                        ) : null,
                        color: isSelected ? null : Colors.white.withOpacity(0.95),
                        borderRadius: BorderRadius.circular(16),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            tab['label'] as String,
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              color: isSelected ? Colors.white : Colors.grey[700],
                            ),
                          ),
                          const SizedBox(height: 4),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: isSelected ? Colors.white.withOpacity(0.2) : KipikTheme.rouge.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              '${tab['count']}',
                              style: TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 12,
                                color: isSelected ? Colors.white : KipikTheme.rouge,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildStatsHeader() {
    final pendingCount = _standRequests.where((r) => r['status'] == RequestStatus.pending).length;
    final totalRevenue = _standRequests.where((r) => r['status'] == RequestStatus.paid).fold(0.0, (sum, r) => sum + r['standPrice']);
    final avgProcessingTime = 2.3; // En jours

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.purple.withOpacity(0.8), Colors.blue.withOpacity(0.8)],
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatItem(
              'En Attente',
              pendingCount.toString(),
              Icons.pending,
              pendingCount > 0 ? Colors.orange : Colors.white,
            ),
            _buildStatItem(
              'Revenus ConfirmÃ©s',
              '${totalRevenue.toStringAsFixed(0)}â‚¬',
              Icons.euro,
              Colors.green,
            ),
            _buildStatItem(
              'Temps Moyen',
              '${avgProcessingTime}j',
              Icons.timer,
              Colors.blue,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color iconColor) {
    return Column(
      children: [
        Icon(icon, color: iconColor, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 16,
            color: Colors.white,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 10,
            color: Colors.white70,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildRequestsList() {
    if (_filteredRequests.isEmpty) {
      return _buildEmptyState();
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: ListView.builder(
        itemCount: _filteredRequests.length,
        itemBuilder: (context, index) {
          return _buildRequestCard(_filteredRequests[index]);
        },
      ),
    );
  }

  Widget _buildRequestCard(Map<String, dynamic> request) {
    final status = request['status'] as RequestStatus;
    final tattooerType = request['tattooerType'] as TattooerType;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte avec statut
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [_getStatusColor(status), _getStatusColor(status).withOpacity(0.8)],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                // Avatar et infos tatoueur
                CircleAvatar(
                  radius: 25,
                  backgroundColor: Colors.white.withOpacity(0.2),
                  child: Text(
                    request['tattooerName'][0].toUpperCase(),
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Text(
                            request['tattooerName'],
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                              color: Colors.white,
                            ),
                          ),
                          const SizedBox(width: 8),
                          _buildTattooerTypeBadge(tattooerType),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Demande reÃ§ue le ${request['requestDate']}',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.white70,
                        ),
                      ),
                      if (request['rating'] > 0) ...[
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            Icon(Icons.star, color: Colors.amber[300], size: 16),
                            const SizedBox(width: 4),
                            Text(
                              '${request['rating']}/5',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.white70,
                              ),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              '${request['completedConventions']} conventions',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.white70,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ],
                  ),
                ),
                Column(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        _getStatusLabel(status),
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '${request['standPrice']}â‚¬',
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 16,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          // Contenu principal
          Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              children: [
                // DÃ©tails du stand demandÃ©
                _buildStandDetails(request),
                
                const SizedBox(height: 16),
                
                // SpÃ©cialitÃ©s et portfolio
                _buildTattooerInfo(request),
                
                const SizedBox(height: 16),
                
                // Message du tatoueur
                if (request['message'] != null) ...[
                  _buildTattooerMessage(request),
                  const SizedBox(height: 16),
                ],
                
                // Actions selon le statut
                _buildRequestActions(request, status),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTattooerTypeBadge(TattooerType type) {
    Color color;
    String label;
    IconData icon;

    switch (type) {
      case TattooerType.verified:
        color = Colors.green;
        label = 'VÃ‰RIFIÃ‰';
        icon = Icons.verified;
        break;
      case TattooerType.premium:
        color = Colors.purple;
        label = 'PREMIUM';
        icon = Icons.star;
        break;
      case TattooerType.standard:
        color = Colors.blue;
        label = 'STANDARD';
        icon = Icons.person;
        break;
      case TattooerType.new_user:
        color = Colors.orange;
        label = 'NOUVEAU';
        icon = Icons.new_label;
        break;
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.5)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, color: color, size: 12),
          const SizedBox(width: 4),
          Text(
            label,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 8,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStandDetails(Map<String, dynamic> request) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.store, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Demande de Stand',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          
          Row(
            children: [
              Expanded(
                child: _buildDetailItem('Taille', request['standSize']),
              ),
              Expanded(
                child: _buildDetailItem('Emplacement', request['preferredLocation'] ?? 'Flexible'),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: _buildDetailItem('Prix demandÃ©', '${request['standPrice']}â‚¬'),
              ),
              Expanded(
                child: _buildDetailItem('Paiement', request['paymentType']),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildDetailItem(String label, String value) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 11,
            color: Colors.grey,
          ),
        ),
        const SizedBox(height: 2),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 13,
            fontWeight: FontWeight.w600,
            color: Colors.black87,
          ),
        ),
      ],
    );
  }

  Widget _buildTattooerInfo(Map<String, dynamic> request) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.blue[50],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.palette, color: Colors.blue[600], size: 20),
              const SizedBox(width: 8),
              const Text(
                'Profil Artistique',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          
          // SpÃ©cialitÃ©s
          if (request['specialties'] != null) ...[
            const Text(
              'SpÃ©cialitÃ©s:',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 6),
            Wrap(
              spacing: 6,
              children: (request['specialties'] as List).map((specialty) => 
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.blue[100],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    specialty,
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      color: Colors.blue[700],
                    ),
                  ),
                ),
              ).toList(),
            ),
            const SizedBox(height: 8),
          ],
          
          // Portfolio et rÃ©seaux
          Row(
            children: [
              if (request['portfolioImages'] > 0) ...[
                Icon(Icons.photo_library, color: Colors.blue[600], size: 16),
                const SizedBox(width: 4),
                Text(
                  '${request['portfolioImages']} photos',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 11,
                    color: Colors.blue[600],
                  ),
                ),
                const SizedBox(width: 12),
              ],
              if (request['instagramFollowers'] > 0) ...[
                Icon(Icons.camera_alt, color: Colors.blue[600], size: 16),
                const SizedBox(width: 4),
                Text(
                  '${_formatNumber(request['instagramFollowers'])} followers',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 11,
                    color: Colors.blue[600],
                  ),
                ),
              ],
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTattooerMessage(Map<String, dynamic> request) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.amber[50],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.amber[200]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.message, color: Colors.amber[600], size: 20),
              const SizedBox(width: 8),
              const Text(
                'Message du tatoueur',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            request['message'],
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 13,
              color: Colors.black87,
              fontStyle: FontStyle.italic,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRequestActions(Map<String, dynamic> request, RequestStatus status) {
    switch (status) {
      case RequestStatus.pending:
        return Column(
          children: [
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => _viewTattooerProfile(request),
                    icon: const Icon(Icons.person, size: 16),
                    label: const Text('Profil', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.blue,
                      side: const BorderSide(color: Colors.blue),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => _rejectRequest(request),
                    icon: const Icon(Icons.close, size: 16),
                    label: const Text('Refuser', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      side: const BorderSide(color: Colors.red),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _acceptRequest(request),
                    icon: const Icon(Icons.check, size: 16),
                    label: const Text('Accepter', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            SizedBox(
              width: double.infinity,
              child: OutlinedButton.icon(
                onPressed: () => _startNegotiation(request),
                icon: const Icon(Icons.forum, size: 16),
                label: const Text('NÃ©gocier', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
              ),
            ),
          ],
        );
        
      case RequestStatus.negotiating:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewNegotiation(request),
                icon: const Icon(Icons.chat, size: 16),
                label: const Text('Chat', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _finalizeNegotiation(request),
                icon: const Icon(Icons.handshake, size: 16),
                label: const Text('Finaliser', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case RequestStatus.accepted:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _sendContract(request),
                icon: const Icon(Icons.description, size: 16),
                label: const Text('Contrat', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange[100],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Text(
                  'En attente de paiement',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: Colors.orange,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],
        );
        
      case RequestStatus.paid:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _assignStand(request),
                icon: const Icon(Icons.place, size: 16),
                label: const Text('Assigner', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.purple,
                  side: const BorderSide(color: Colors.purple),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.green[100],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Text(
                  'âœ“ PayÃ© - ConfirmÃ©',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: Colors.green,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],
        );
        
      default:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewRequestDetails(request),
                icon: const Icon(Icons.info, size: 16),
                label: const Text('DÃ©tails', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey,
                  side: const BorderSide(color: Colors.grey),
                ),
              ),
            ),
          ],
        );
    }
  }

  Widget _buildEmptyState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Container(
          padding: const EdgeInsets.all(32),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.inbox,
                size: 64,
                color: Colors.grey[400],
              ),
              const SizedBox(height: 16),
              Text(
                'Aucune demande trouvÃ©e',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Les demandes de stands apparaÃ®tront ici',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.grey[500],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper methods
  Color _getStatusColor(RequestStatus status) {
    switch (status) {
      case RequestStatus.pending:
        return Colors.orange;
      case RequestStatus.negotiating:
        return Colors.blue;
      case RequestStatus.accepted:
        return Colors.green;
      case RequestStatus.rejected:
        return Colors.red;
      case RequestStatus.paid:
        return Colors.purple;
      case RequestStatus.cancelled:
        return Colors.grey;
    }
  }

  String _getStatusLabel(RequestStatus status) {
    switch (status) {
      case RequestStatus.pending:
        return 'EN ATTENTE';
      case RequestStatus.negotiating:
        return 'NÃ‰GOCIATION';
      case RequestStatus.accepted:
        return 'ACCEPTÃ‰E';
      case RequestStatus.rejected:
        return 'REFUSÃ‰E';
      case RequestStatus.paid:
        return 'PAYÃ‰E';
      case RequestStatus.cancelled:
        return 'ANNULÃ‰E';
    }
  }

  String _formatNumber(int number) {
    if (number >= 1000000) {
      return '${(number / 1000000).toStringAsFixed(1)}M';
    } else if (number >= 1000) {
      return '${(number / 1000).toStringAsFixed(1)}k';
    }
    return number.toString();
  }

  void _filterRequests() {
    setState(() {
      _filteredRequests = _standRequests.where((request) {
        // Filtre par recherche
        if (_searchQuery.isNotEmpty) {
          final query = _searchQuery.toLowerCase();
          if (!request['tattooerName'].toLowerCase().contains(query) &&
              !(request['specialties'] as List).any((s) => s.toLowerCase().contains(query))) {
            return false;
          }
        }
        
        // Filtre par statut
        if (_statusFilter != null) {
          if (request['status'] != _statusFilter) {
            return false;
          }
        }
        
        return true;
      }).toList();
    });
  }

  // Actions
  void _showAdvancedFilters() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Filtres avancÃ©s - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _exportRequests() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Export des demandes - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showBulkActions() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Actions groupÃ©es - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewTattooerProfile(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Profil ${request['tattooerName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _acceptRequest(Map<String, dynamic> request) {
    setState(() {
      request['status'] = RequestStatus.accepted;
    });
    _filterRequests();
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Demande de ${request['tattooerName']} acceptÃ©e'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _rejectRequest(Map<String, dynamic> request) {
    setState(() {
      request['status'] = RequestStatus.rejected;
    });
    _filterRequests();
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Demande de ${request['tattooerName']} refusÃ©e'),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _startNegotiation(Map<String, dynamic> request) {
    setState(() {
      request['status'] = RequestStatus.negotiating;
    });
    _filterRequests();
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('NÃ©gociation avec ${request['tattooerName']} dÃ©marrÃ©e'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewNegotiation(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Chat avec ${request['tattooerName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _finalizeNegotiation(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Finalisation nÃ©gociation ${request['tattooerName']} - Ã€ implÃ©menter'),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _sendContract(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Envoi contrat ${request['tattooerName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _assignStand(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Attribution stand ${request['tattooerName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewRequestDetails(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('DÃ©tails demande ${request['tattooerName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.grey,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // DonnÃ©es de test
  List<Map<String, dynamic>> _generateStandRequestsData() {
    return [
      {
        'id': '1',
        'tattooerName': 'Mike Tattoo',
        'tattooerType': TattooerType.verified,
        'status': RequestStatus.pending,
        'requestDate': '22/12/2024',
        'standSize': '3x3m',
        'standPrice': 450.0,
        'preferredLocation': 'EntrÃ©e principale',
        'paymentType': 'Paiement fractionnÃ© 3x',
        'rating': 4.8,
        'completedConventions': 12,
        'specialties': ['RÃ©alisme', 'Portraits'],
        'portfolioImages': 45,
        'instagramFollowers': 8500,
        'message': 'Bonjour, je souhaiterais participer Ã  votre convention. Je me spÃ©cialise dans le rÃ©alisme et les portraits. Merci !',
      },
      {
        'id': '2',
        'tattooerName': 'Sarah Ink',
        'tattooerType': TattooerType.premium,
        'status': RequestStatus.negotiating,
        'requestDate': '21/12/2024',
        'standSize': '2x3m',
        'standPrice': 320.0,
        'preferredLocation': null,
        'paymentType': 'Paiement comptant',
        'rating': 4.6,
        'completedConventions': 8,
        'specialties': ['Japonais', 'Traditionnel'],
        'portfolioImages': 67,
        'instagramFollowers': 12000,
        'message': null,
      },
      {
        'id': '3',
        'tattooerName': 'Alex Neo',
        'tattooerType': TattooerType.standard,
        'status': RequestStatus.accepted,
        'requestDate': '20/12/2024',
        'standSize': '3x4m',
        'standPrice': 520.0,
        'preferredLocation': 'Zone centrale',
        'paymentType': 'Paiement fractionnÃ© 2x',
        'rating': 4.3,
        'completedConventions': 5,
        'specialties': ['GÃ©omÃ©trique', 'Blackwork'],
        'portfolioImages': 32,
        'instagramFollowers': 4200,
        'message': 'PremiÃ¨re participation Ã  une convention, trÃ¨s motivÃ© !',
      },
      {
        'id': '4',
        'tattooerName': 'Emma Style',
        'tattooerType': TattooerType.new_user,
        'status': RequestStatus.paid,
        'requestDate': '19/12/2024',
        'standSize': '2x2m',
        'standPrice': 280.0,
        'preferredLocation': null,
        'paymentType': 'Paiement comptant',
        'rating': 0,
        'completedConventions': 0,
        'specialties': ['Minimaliste', 'Fine Line'],
        'portfolioImages': 18,
        'instagramFollowers': 1800,
        'message': 'Nouvelle sur Kipik, j\'aimerais commencer par une petite convention pour faire mes preuves.',
      },
      {
        'id': '5',
        'tattooerName': 'David Iron',
        'tattooerType': TattooerType.verified,
        'status': RequestStatus.rejected,
        'requestDate': '18/12/2024',
        'standSize': '4x4m',
        'standPrice': 680.0,
        'preferredLocation': 'Angle de salle',
        'paymentType': 'Paiement fractionnÃ© 4x',
        'rating': 4.9,
        'completedConventions': 25,
        'specialties': ['Old School', 'Pin-up'],
        'portfolioImages': 89,
        'instagramFollowers': 15600,
        'message': null,
      },
    ];
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\organisateur_marketing_page.dart

// lib/pages/organisateur/organisateur_marketing_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../core/helpers/service_helper.dart';
import '../../core/helpers/widget_helper.dart';

enum CampaignType { email, social, push, sms }
enum CampaignStatus { draft, scheduled, active, paused, completed }

class OrganisateurMarketingPage extends StatefulWidget {
  const OrganisateurMarketingPage({Key? key}) : super(key: key);

  @override
  State<OrganisateurMarketingPage> createState() => _OrganisateurMarketingPageState();
}

class _OrganisateurMarketingPageState extends State<OrganisateurMarketingPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _cardController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _cardAnimation;

  String? _selectedConventionId;
  String? _currentOrganizerId;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _cardController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _cardController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _cardAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _cardController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      _cardController.forward();
    });
  }

  void _initializeData() {
    _currentOrganizerId = ServiceHelper.currentUserId;
    setState(() => _isLoading = false);
  }

  @override
  Widget build(BuildContext context) {
    if (!ServiceHelper.isAuthenticated || _currentOrganizerId == null) {
      return _buildAuthenticationError();
    }

    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      endDrawer: DrawerFactory.of(context),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(kToolbarHeight),
        child: CustomAppBarKipik(
          title: 'Marketing & Communication',
          subtitle: 'Promotion temps rÃ©el',
          showBackButton: true,
          showBurger: true,
          useProStyle: true,
          actions: [
            IconButton(
              icon: const Icon(Icons.analytics, color: Colors.white),
              onPressed: _viewDetailedAnalytics,
            ),
            IconButton(
              icon: const Icon(Icons.settings, color: Colors.white),
              onPressed: _openMarketingSettings,
            ),
          ],
        ),
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton.extended(
            heroTag: "create_campaign",
            onPressed: _createCampaign,
            backgroundColor: Colors.purple,
            icon: const Icon(Icons.campaign, color: Colors.white),
            label: const Text(
              'Nouvelle Campagne',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(
            contextPage: 'marketing_organisateur',
            allowImageGeneration: true,
          ),
        ],
      ),
      child: Stack(
        children: [
          KipikTheme.withSpecificBackground('assets/background_charbon.png', child: Container()),
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? Center(child: KipikTheme.loading()) : _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAuthenticationError() {
    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      child: KipikTheme.errorState(
        title: 'Erreur d\'authentification',
        message: 'Vous devez Ãªtre connectÃ© en tant qu\'organisateur',
        onRetry: () => Navigator.pushReplacementNamed(context, '/connexion'),
      ),
    );
  }

  Widget _buildContent() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildConventionSelector(),
          const SizedBox(height: 24),
          _buildMarketingOverview(),
          const SizedBox(height: 32),
          _buildQuickActions(),
          const SizedBox(height: 32),
          _buildActiveCampaigns(),
          const SizedBox(height: 32),
          _buildEngagementAnalytics(),
          const SizedBox(height: 32),
          _buildSocialMediaManagement(),
          const SizedBox(height: 32),
          _buildEmailMarketing(),
          const SizedBox(height: 100),
        ],
      ),
    );
  }

  Widget _buildConventionSelector() {
    return AnimatedBuilder(
      animation: _cardAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _cardAnimation.value,
          child: WidgetHelper.buildStreamWidget<QuerySnapshot>(
            stream: ServiceHelper.getStream('conventions', where: {'basic.organizerId': _currentOrganizerId}),
            builder: (data) {
              return WidgetHelper.buildKipikContainer(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.event, color: KipikTheme.rouge, size: 24),
                        const SizedBox(width: 12),
                        const Text(
                          'Convention Ã  Promouvoir',
                          style: TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 18,
                            color: Colors.black87,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    
                    DropdownButtonFormField<String>(
                      value: _selectedConventionId,
                      decoration: InputDecoration(
                        hintText: 'Choisir une convention',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        contentPadding: const EdgeInsets.all(16),
                      ),
                      items: [
                        const DropdownMenuItem<String>(
                          value: null,
                          child: Text('Toutes les conventions'),
                        ),
                        ...data.docs.map((doc) {
                          final conventionData = doc.data() as Map<String, dynamic>;
                          final basicInfo = conventionData['basic'] as Map<String, dynamic>?;
                          
                          return DropdownMenuItem<String>(
                            value: doc.id,
                            child: Text(basicInfo?['name'] ?? 'Convention sans nom'),
                          );
                        }),
                      ],
                      onChanged: (value) {
                        setState(() {
                          _selectedConventionId = value;
                        });
                      },
                    ),
                  ],
                ),
              );
            },
          ),
        );
      },
    );
  }

  Widget _buildMarketingOverview() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('marketing_analytics', where: {'organizerId': _currentOrganizerId}),
      builder: (analyticsData) {
        // âœ… VRAIES DONNÃ‰ES - Collection marketing_analytics Firebase
        final doc = analyticsData.docs.isNotEmpty ? analyticsData.docs.first : null;
        final data = doc?.data() as Map<String, dynamic>?;
        
        final reach = data?['reach']?['total'] ?? 0;
        final engagement = (data?['engagement']?['rate'] ?? 0.0).toDouble();
        final conversions = data?['conversions']?['total'] ?? 0;
        final roi = (data?['roi']?['percentage'] ?? 0.0).toDouble();

        return Container(
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.purple.shade600, Colors.pink.shade600],
            ),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'ðŸ“ˆ Performance Marketing',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 20,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 24),
              
              GridView.count(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: 1.5,
                children: [
                  _buildOverviewCard(
                    'PortÃ©e Totale',
                    _formatNumber(reach),
                    Icons.visibility,
                    Colors.white,
                  ),
                  _buildOverviewCard(
                    'Engagement',
                    '${(engagement * 100).toStringAsFixed(1)}%',
                    Icons.favorite,
                    Colors.white,
                  ),
                  _buildOverviewCard(
                    'Conversions',
                    conversions.toString(),
                    Icons.shopping_cart,
                    Colors.white,
                  ),
                  _buildOverviewCard(
                    'ROI',
                    '${roi.toStringAsFixed(1)}%',
                    Icons.trending_up,
                    Colors.white,
                  ),
                ],
              ),
            ],
          ),
        );
      },
      empty: _buildEmptyMarketingOverview(),
    );
  }

  Widget _buildEmptyMarketingOverview() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.grey.shade600, Colors.grey.shade700],
        ),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          const Text(
            'ðŸ“ˆ Performance Marketing',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'Aucune donnÃ©e marketing disponible.\nLancez votre premiÃ¨re campagne pour voir les statistiques.',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.white70,
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: _createCampaign,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.purple,
              foregroundColor: Colors.white,
            ),
            child: const Text('CrÃ©er ma premiÃ¨re campagne'),
          ),
        ],
      ),
    );
  }

  Widget _buildOverviewCard(String title, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: color, size: 24),
          const Spacer(),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 18,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            title,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: color.withOpacity(0.8),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQuickActions() {
    final actions = [
      {
        'title': 'Campagne Email',
        'subtitle': 'Newsletter & promo',
        'icon': Icons.email,
        'color': Colors.blue,
        'onTap': () => _createSpecificCampaign(CampaignType.email),
      },
      {
        'title': 'RÃ©seaux Sociaux',
        'subtitle': 'Posts automatiques',
        'icon': Icons.share,
        'color': Colors.purple,
        'onTap': () => _createSpecificCampaign(CampaignType.social),
      },
      {
        'title': 'Notifications Push',
        'subtitle': 'Alertes mobiles',
        'icon': Icons.notifications,
        'color': Colors.orange,
        'onTap': () => _createSpecificCampaign(CampaignType.push),
      },
      {
        'title': 'Templates',
        'subtitle': 'ModÃ¨les prÃªts',
        'icon': Icons.library_books, // âœ… CORRIGÃ‰ - IcÃ´ne valide
        'color': Colors.green,
        'onTap': _viewTemplates,
      },
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.flash_on, color: KipikTheme.rouge, size: 24),
            const SizedBox(width: 12),
            const Text(
              'Actions Rapides',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.white,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        
        GridView.count(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          crossAxisCount: 2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          childAspectRatio: 1.5,
          children: actions.map((action) => _buildActionCard(action)).toList(),
        ),
      ],
    );
  }

  Widget _buildActionCard(Map<String, dynamic> action) {
    return GestureDetector(
      onTap: () {
        HapticFeedback.mediumImpact();
        action['onTap']();
      },
      child: WidgetHelper.buildKipikContainer(
        borderRadius: 16,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: action['color'].withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                action['icon'],
                color: action['color'],
                size: 24,
              ),
            ),
            const Spacer(),
            Text(
              action['title'],
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              action['subtitle'],
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActiveCampaigns() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('marketing_campaigns', 
        where: _selectedConventionId != null 
          ? {'organizerId': _currentOrganizerId, 'status': 'active', 'conventionId': _selectedConventionId}
          : {'organizerId': _currentOrganizerId, 'status': 'active'}, 
        limit: 3
      ),
      builder: (data) {
        return WidgetHelper.buildKipikContainer(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Icon(Icons.campaign, color: KipikTheme.rouge, size: 24),
                      const SizedBox(width: 12),
                      const Text(
                        'Campagnes Actives',
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 18,
                          color: Colors.black87,
                        ),
                      ),
                    ],
                  ),
                  TextButton(
                    onPressed: _viewAllCampaigns,
                    child: const Text(
                      'Voir tout',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        color: Colors.blue,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              
              if (data.docs.isEmpty)
                Container(
                  padding: const EdgeInsets.all(32),
                  child: const Center(
                    child: Text(
                      'Aucune campagne active',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        color: Colors.grey,
                      ),
                    ),
                  ),
                )
              else
                ...data.docs.map((doc) {
                  final campaignData = doc.data() as Map<String, dynamic>;
                  return _buildCampaignCard(doc.id, campaignData);
                }),
            ],
          ),
        );
      },
    );
  }

  Widget _buildCampaignCard(String campaignId, Map<String, dynamic> data) {
    // âœ… VRAIES DONNÃ‰ES - Structure Firebase marketing_campaigns
    final campaignInfo = data['campaign'] as Map<String, dynamic>? ?? {};
    final metricsInfo = data['metrics'] as Map<String, dynamic>? ?? {};
    
    final type = _parseCampaignType(campaignInfo['type']);
    final status = _parseCampaignStatus(data['status']);
    
    return WidgetHelper.buildListItem(
      title: campaignInfo['name'] ?? 'Campagne',
      subtitle: '${metricsInfo['reach'] ?? 0} personnes atteintes â€¢ ${metricsInfo['engagement'] ?? 0} interactions',
      leading: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: _getCampaignTypeColor(type).withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Icon(
          _getCampaignTypeIcon(type),
          color: _getCampaignTypeColor(type),
          size: 20,
        ),
      ),
      actions: [
        Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            WidgetHelper.buildStatusBadge(data['status'] ?? 'active'),
            const SizedBox(height: 4),
            Text(
              '${((metricsInfo['engagement_rate'] ?? 0) * 100).toStringAsFixed(1)}%',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 12,
                color: _getCampaignTypeColor(type),
              ),
            ),
          ],
        ),
        PopupMenuButton(
          icon: const Icon(Icons.more_vert, color: Colors.grey, size: 16),
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'view',
              child: Row(
                children: [
                  Icon(Icons.visibility, size: 16),
                  SizedBox(width: 8),
                  Text('Voir dÃ©tails'),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'edit',
              child: Row(
                children: [
                  Icon(Icons.edit, size: 16),
                  SizedBox(width: 8),
                  Text('Modifier'),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'pause',
              child: Row(
                children: [
                  Icon(Icons.pause, size: 16),
                  SizedBox(width: 8),
                  Text('Mettre en pause'),
                ],
              ),
            ),
          ],
          onSelected: (value) => _handleCampaignAction(campaignId, value as String),
        ),
      ],
    );
  }

  Widget _buildEngagementAnalytics() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('social_engagement', 
        where: _selectedConventionId != null 
          ? {'organizerId': _currentOrganizerId, 'conventionId': _selectedConventionId}
          : {'organizerId': _currentOrganizerId}
      ),
      builder: (engagementData) {
        // âœ… VRAIES DONNÃ‰ES - Collection social_engagement Firebase
        final doc = engagementData.docs.isNotEmpty ? engagementData.docs.first : null;
        final data = doc?.data() as Map<String, dynamic>?;
        
        final likes = data?['metrics']?['likes'] ?? 0;
        final shares = data?['metrics']?['shares'] ?? 0;
        final comments = data?['metrics']?['comments'] ?? 0;
        final clicks = data?['metrics']?['clicks'] ?? 0;
        final rate = (data?['metrics']?['engagement_rate'] ?? 0.0).toDouble();

        return Container(
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.indigo.shade600, Colors.blue.shade600],
            ),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'ðŸ’¬ Analytics d\'Engagement',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 20,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 24),
              
              Row(
                children: [
                  Expanded(
                    child: _buildEngagementMetric(
                      'Likes',
                      '$likes',
                      Icons.thumb_up,
                    ),
                  ),
                  Expanded(
                    child: _buildEngagementMetric(
                      'Partages',
                      '$shares',
                      Icons.share,
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 16),
              
              Row(
                children: [
                  Expanded(
                    child: _buildEngagementMetric(
                      'Commentaires',
                      '$comments',
                      Icons.comment,
                    ),
                  ),
                  Expanded(
                    child: _buildEngagementMetric(
                      'Clics',
                      '$clicks',
                      Icons.mouse,
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 20),
              
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          'Taux d\'engagement moyen',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 14,
                            color: Colors.white70,
                          ),
                        ),
                        Text(
                          '${(rate * 100).toStringAsFixed(1)}%',
                          style: const TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 18,
                            color: Colors.white,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    LinearProgressIndicator(
                      value: rate,
                      backgroundColor: Colors.white.withOpacity(0.2),
                      valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
      empty: _buildEmptyEngagementAnalytics(),
    );
  }

  Widget _buildEmptyEngagementAnalytics() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.grey.shade600, Colors.grey.shade700],
        ),
        borderRadius: BorderRadius.circular(20),
      ),
      child: const Column(
        children: [
          Text(
            'ðŸ’¬ Analytics d\'Engagement',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 16),
          Text(
            'Aucune donnÃ©e d\'engagement disponible.\nPubliez du contenu sur les rÃ©seaux sociaux pour voir les mÃ©triques.',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEngagementMetric(String label, String value, IconData icon) {
    return Container(
      margin: const EdgeInsets.all(4),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Icon(icon, color: Colors.white, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 11,
              color: Colors.white70,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildSocialMediaManagement() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('social_platforms', where: {'organizerId': _currentOrganizerId}),
      builder: (platformsData) {
        // âœ… VRAIES DONNÃ‰ES - Collection social_platforms Firebase
        final platforms = <Map<String, dynamic>>[];
        
        for (final doc in platformsData.docs) {
          final data = doc.data() as Map<String, dynamic>;
          platforms.add({
            'platform': data['platform'],
            'followers': data['followers'] ?? 0,
            'growth': data['growth_rate'] ?? 0.0,
            'icon': _getSocialIcon(data['platform']),
            'color': _getSocialColor(data['platform']),
          });
        }

        return WidgetHelper.buildKipikContainer(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.share, color: KipikTheme.rouge, size: 24),
                  const SizedBox(width: 12),
                  const Text(
                    'Gestion RÃ©seaux Sociaux',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.black87,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              
              if (platforms.isEmpty)
                Container(
                  padding: const EdgeInsets.all(32),
                  child: const Center(
                    child: Text(
                      'Aucun compte de rÃ©seau social connectÃ©.\nConnectez vos comptes pour voir les statistiques.',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        color: Colors.grey,
                      ),
                    ),
                  ),
                )
              else
                _buildSocialPlatformsGrid(platforms),
              
              const SizedBox(height: 16),
              
              WidgetHelper.buildActionButton(
                text: 'Programmer une publication',
                onPressed: _schedulePost,
                isPrimary: false,
                icon: Icons.schedule,
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildSocialPlatformsGrid(List<Map<String, dynamic>> platforms) {
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
        childAspectRatio: 1.2,
      ),
      itemCount: platforms.length,
      itemBuilder: (context, index) {
        final platform = platforms[index];
        return _buildSocialPlatformCard(
          platform['platform'],
          platform['icon'],
          platform['color'],
          _formatNumber(platform['followers']),
          '${(platform['growth'] * 100).toStringAsFixed(1)}%',
        );
      },
    );
  }

  Widget _buildSocialPlatformCard(String platform, IconData icon, Color color, String followers, String growth) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            platform,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            followers,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: color,
            ),
          ),
          const SizedBox(height: 2),
          Text(
            growth,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 10,
              color: Colors.green,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmailMarketing() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('email_marketing', where: {'organizerId': _currentOrganizerId}),
      builder: (emailData) {
        // âœ… VRAIES DONNÃ‰ES - Collection email_marketing Firebase
        final doc = emailData.docs.isNotEmpty ? emailData.docs.first : null;
        final data = doc?.data() as Map<String, dynamic>?;
        
        final subscribers = data?['subscribers']?['total'] ?? 0;
        final openRate = (data?['metrics']?['open_rate'] ?? 0.0).toDouble();
        final clickRate = (data?['metrics']?['click_rate'] ?? 0.0).toDouble();
        final unsubscribes = data?['metrics']?['unsubscribes'] ?? 0;

        return WidgetHelper.buildKipikContainer(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.email, color: KipikTheme.rouge, size: 24),
                  const SizedBox(width: 12),
                  const Text(
                    'Email Marketing',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.black87,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              
              Column(
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: _buildEmailMetric(
                          'AbonnÃ©s',
                          '$subscribers',
                          Icons.people,
                          Colors.blue,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _buildEmailMetric(
                          'Taux d\'ouverture',
                          '${(openRate * 100).toStringAsFixed(1)}%',
                          Icons.mark_email_read,
                          Colors.green,
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 12),
                  
                  Row(
                    children: [
                      Expanded(
                        child: _buildEmailMetric(
                          'Taux de clic',
                          '${(clickRate * 100).toStringAsFixed(1)}%',
                          Icons.mouse,
                          Colors.orange,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _buildEmailMetric(
                          'DÃ©sabonnements',
                          '$unsubscribes',
                          Icons.unsubscribe,
                          Colors.red,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              
              const SizedBox(height: 16),
              
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: _createNewsletter,
                      icon: const Icon(Icons.newspaper, size: 16),
                      label: const Text(
                        'Newsletter',
                        style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                      ),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.blue,
                        side: const BorderSide(color: Colors.blue),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: _manageSubscribers,
                      icon: const Icon(Icons.group, size: 16),
                      label: const Text(
                        'AbonnÃ©s',
                        style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
      empty: _buildEmptyEmailMarketing(),
    );
  }

  Widget _buildEmptyEmailMarketing() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        children: [
          Row(
            children: [
              Icon(Icons.email, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Email Marketing',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          const Text(
            'Aucune campagne email configurÃ©e.\nCommencez par crÃ©er votre premiÃ¨re newsletter.',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: _createNewsletter,
            icon: const Icon(Icons.newspaper, size: 16),
            label: const Text('CrÃ©er ma premiÃ¨re newsletter'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmailMetric(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 11,
              color: Colors.grey,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  // Helper methods
  String _formatNumber(int number) {
    if (number >= 1000000) {
      return '${(number / 1000000).toStringAsFixed(1)}M';
    } else if (number >= 1000) {
      return '${(number / 1000).toStringAsFixed(1)}k';
    }
    return number.toString();
  }

  IconData _getSocialIcon(String platform) {
    switch (platform.toLowerCase()) {
      case 'instagram': return Icons.camera_alt;
      case 'facebook': return Icons.facebook;
      case 'tiktok': return Icons.music_note;
      case 'youtube': return Icons.play_arrow;
      case 'twitter': return Icons.alternate_email;
      case 'linkedin': return Icons.business;
      default: return Icons.share;
    }
  }

  Color _getSocialColor(String platform) {
    switch (platform.toLowerCase()) {
      case 'instagram': return Colors.purple;
      case 'facebook': return Colors.blue;
      case 'tiktok': return Colors.black;
      case 'youtube': return Colors.red;
      case 'twitter': return Colors.lightBlue;
      case 'linkedin': return Colors.indigo;
      default: return Colors.grey;
    }
  }

  CampaignType _parseCampaignType(String? typeString) {
    switch (typeString) {
      case 'email': return CampaignType.email;
      case 'social': return CampaignType.social;
      case 'push': return CampaignType.push;
      case 'sms': return CampaignType.sms;
      default: return CampaignType.email;
    }
  }

  CampaignStatus _parseCampaignStatus(String? statusString) {
    switch (statusString) {
      case 'draft': return CampaignStatus.draft;
      case 'scheduled': return CampaignStatus.scheduled;
      case 'active': return CampaignStatus.active;
      case 'paused': return CampaignStatus.paused;
      case 'completed': return CampaignStatus.completed;
      default: return CampaignStatus.draft;
    }
  }

  Color _getCampaignTypeColor(CampaignType type) {
    switch (type) {
      case CampaignType.email: return Colors.blue;
      case CampaignType.social: return Colors.purple;
      case CampaignType.push: return Colors.orange;
      case CampaignType.sms: return Colors.green;
    }
  }

  IconData _getCampaignTypeIcon(CampaignType type) {
    switch (type) {
      case CampaignType.email: return Icons.email;
      case CampaignType.social: return Icons.share;
      case CampaignType.push: return Icons.notifications;
      case CampaignType.sms: return Icons.sms;
    }
  }

  // Actions Firebase avec vraies donnÃ©es
  void _viewDetailedAnalytics() async {
    try {
      await ServiceHelper.trackEvent('marketing_analytics_viewed', {
        'organizerId': _currentOrganizerId,
        'conventionId': _selectedConventionId,
      });
      
      Navigator.pushNamed(context, '/organisateur/marketing/analytics');
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur lors de l\'ouverture des analytics');
    }
  }

  void _openMarketingSettings() {
    Navigator.pushNamed(context, '/organisateur/marketing/settings');
  }

  void _createCampaign() async {
    try {
      await ServiceHelper.trackEvent('marketing_campaign_creation_started', {
        'organizerId': _currentOrganizerId,
        'conventionId': _selectedConventionId,
      });
      
      Navigator.pushNamed(context, '/organisateur/marketing/create-campaign');
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur lors de la crÃ©ation de campagne');
    }
  }

  void _createSpecificCampaign(CampaignType type) async {
    try {
      await ServiceHelper.trackEvent('specific_campaign_creation_started', {
        'organizerId': _currentOrganizerId,
        'campaignType': type.name,
        'conventionId': _selectedConventionId,
      });
      
      Navigator.pushNamed(
        context, 
        '/organisateur/marketing/create-campaign',
        arguments: {
          'type': type, 
          'conventionId': _selectedConventionId,
        },
      );
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur lors de la crÃ©ation de campagne ${type.name}');
    }
  }

  void _viewTemplates() {
    Navigator.pushNamed(context, '/organisateur/marketing/templates');
  }

  void _viewAllCampaigns() {
    Navigator.pushNamed(context, '/organisateur/marketing/campaigns');
  }

  void _handleCampaignAction(String campaignId, String action) async {
    switch (action) {
      case 'view':
        Navigator.pushNamed(
          context, 
          '/organisateur/marketing/campaign-detail',
          arguments: campaignId,
        );
        break;
      case 'edit':
        Navigator.pushNamed(
          context, 
          '/organisateur/marketing/edit-campaign',
          arguments: campaignId,
        );
        break;
      case 'pause':
        await _pauseCampaign(campaignId);
        break;
    }
  }

  Future<void> _pauseCampaign(String campaignId) async {
    try {
      await ServiceHelper.update('marketing_campaigns', campaignId, {
        'status': 'paused',
        'pausedAt': FieldValue.serverTimestamp(),
        'pausedBy': _currentOrganizerId,
      });
      
      await ServiceHelper.trackEvent('campaign_paused', {
        'campaignId': campaignId,
        'organizerId': _currentOrganizerId,
      });
      
      if (mounted) {
        KipikTheme.showSuccessSnackBar(context, 'Campagne mise en pause');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la mise en pause: $e');
      }
    }
  }

  void _schedulePost() async {
    try {
      await ServiceHelper.trackEvent('social_post_scheduling_started', {
        'organizerId': _currentOrganizerId,
        'conventionId': _selectedConventionId,
      });
      
      Navigator.pushNamed(context, '/organisateur/marketing/schedule-post');
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur lors de la programmation de publication');
    }
  }

  void _createNewsletter() async {
    try {
      await ServiceHelper.trackEvent('newsletter_creation_started', {
        'organizerId': _currentOrganizerId,
        'conventionId': _selectedConventionId,
      });
      
      Navigator.pushNamed(context, '/organisateur/marketing/create-newsletter');
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur lors de la crÃ©ation de newsletter');
    }
  }

  void _manageSubscribers() {
    Navigator.pushNamed(context, '/organisateur/marketing/subscribers');
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\organisateur\organisateur_settings_page.dart

// lib/pages/organisateur/organisateur_settings_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../core/helpers/service_helper.dart';
import '../../core/helpers/widget_helper.dart';
import '../../services/payment/firebase_payment_service.dart'; // âœ… Votre service existant

enum NotificationType { email, push, sms }
enum PaymentMethod { stripe, paypal, bank_transfer }
enum SubscriptionPlan { free, pro, premium }

class OrganisateurSettingsPage extends StatefulWidget {
  const OrganisateurSettingsPage({Key? key}) : super(key: key);

  @override
  State<OrganisateurSettingsPage> createState() => _OrganisateurSettingsPageState();
}

class _OrganisateurSettingsPageState extends State<OrganisateurSettingsPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _sectionController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _sectionAnimation;

  // Controllers pour les champs
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _companyController = TextEditingController();
  final _siretController = TextEditingController();
  final _addressController = TextEditingController();

  String? _currentOrganizerId;
  bool _isLoading = true;
  bool _isSaving = false;
  
  // Settings state
  Map<String, bool> _notificationSettings = {
    'email_new_requests': true,
    'email_payments': true,
    'push_enabled': true,
    'email_reminders': true,
    'email_newsletter': false,
    '2fa_enabled': false,
  };
  Map<String, dynamic> _paymentSettings = {
    'preferred_method': 'stripe',
  };

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _sectionController.dispose();
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _companyController.dispose();
    _siretController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _sectionController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _sectionAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _sectionController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      _sectionController.forward();
    });
  }

  void _initializeData() {
    _currentOrganizerId = ServiceHelper.currentUserId;
    _loadInitialData();
  }

  void _loadInitialData() async {
    try {
      if (_currentOrganizerId != null) {
        // Charger le profil organisateur
        final profileData = await ServiceHelper.getCurrentOrganizerData();
        _populateProfileData(profileData);
        
        // Charger les paramÃ¨tres
        final settingsDoc = await ServiceHelper.get('organizer_settings', _currentOrganizerId!);
        if (settingsDoc.exists) {
          _populateSettingsData(settingsDoc.data() as Map<String, dynamic>);
        }
      }
      
      setState(() => _isLoading = false);
    } catch (e) {
      setState(() => _isLoading = false);
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors du chargement: $e');
      }
    }
  }

  void _populateProfileData(Map<String, dynamic> data) {
    final profile = data['profile'] as Map<String, dynamic>? ?? {};
    final company = data['company'] as Map<String, dynamic>? ?? {};
    
    setState(() {
      _nameController.text = profile['name'] ?? '';
      _emailController.text = profile['email'] ?? '';
      _phoneController.text = profile['phone'] ?? '';
      _companyController.text = company['name'] ?? '';
      _siretController.text = company['siret'] ?? '';
      _addressController.text = company['address'] ?? '';
    });
  }

  void _populateSettingsData(Map<String, dynamic> data) {
    setState(() {
      _notificationSettings = Map<String, bool>.from(data['notifications'] ?? _notificationSettings);
      _paymentSettings = Map<String, dynamic>.from(data['payment'] ?? _paymentSettings);
    });
  }

  @override
  Widget build(BuildContext context) {
    if (!ServiceHelper.isAuthenticated || _currentOrganizerId == null) {
      return _buildAuthenticationError();
    }

    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      endDrawer: DrawerFactory.of(context),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(kToolbarHeight),
        child: CustomAppBarKipik(
          title: 'ParamÃ¨tres Organisateur',
          subtitle: 'Configuration & abonnement',
          showBackButton: true,
          showBurger: true,
          useProStyle: true,
          actions: [
            IconButton(
              icon: _isSaving 
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : const Icon(Icons.save, color: Colors.white),
              onPressed: _isSaving ? null : _saveAllSettings,
            ),
          ],
        ),
      ),
      floatingActionButton: const TattooAssistantButton(
        contextPage: 'settings_organisateur',
        allowImageGeneration: false,
      ),
      child: Stack(
        children: [
          KipikTheme.withSpecificBackground('assets/background_charbon.png', child: Container()),
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? _buildLoadingState() : _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAuthenticationError() {
    return KipikTheme.scaffoldWithoutBackground(
      backgroundColor: KipikTheme.noir,
      child: KipikTheme.errorState(
        title: 'Erreur d\'authentification',
        message: 'Vous devez Ãªtre connectÃ© en tant qu\'organisateur',
        onRetry: () => Navigator.pushReplacementNamed(context, '/connexion'),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Center(child: KipikTheme.loading());
  }

  Widget _buildContent() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: AnimatedBuilder(
        animation: _sectionAnimation,
        builder: (context, child) {
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildSubscriptionSection(),
              const SizedBox(height: 32),
              _buildProfileSection(),
              const SizedBox(height: 32),
              _buildCompanySection(),
              const SizedBox(height: 32),
              _buildNotificationSettings(),
              const SizedBox(height: 32),
              _buildPaymentSettings(),
              const SizedBox(height: 32),
              _buildCommissionSettings(),
              const SizedBox(height: 32),
              _buildSecuritySection(),
              const SizedBox(height: 32),
              _buildDangerZone(),
              const SizedBox(height: 100),
            ],
          );
        },
      ),
    );
  }

  Widget _buildSubscriptionSection() {
    return Transform.translate(
      offset: Offset(0, 50 * (1 - _sectionAnimation.value)),
      child: Opacity(
        opacity: _sectionAnimation.value,
        child: WidgetHelper.buildStreamWidget<QuerySnapshot>(
          stream: ServiceHelper.getStream('subscriptions', where: {'userId': _currentOrganizerId}),
          builder: (querySnapshot) {
            final doc = querySnapshot.docs.isNotEmpty ? querySnapshot.docs.first : null;
            final subscriptionData = doc?.data() as Map<String, dynamic>? ?? {};
            final currentPlan = subscriptionData['plan'] ?? 'free';
            final nextBilling = subscriptionData['nextBilling'];
            final features = subscriptionData['features'] as List? ?? [];

            return Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.amber.shade600, Colors.orange.shade600],
                ),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'ðŸ‘‘ Abonnement Premium',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  Row(
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Plan actuel: ${_getPlanLabel(currentPlan)}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                                color: Colors.white,
                              ),
                            ),
                            if (nextBilling != null) ...[
                              const SizedBox(height: 4),
                              Text(
                                'Prochaine facturation: ${ServiceHelper.formatDate(ServiceHelper.timestampToDateTime(nextBilling))}',
                                style: const TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 14,
                                  color: Colors.white70,
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),
                      ElevatedButton(
                        onPressed: _managePlan,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: Colors.amber[700],
                        ),
                        child: const Text(
                          'GÃ©rer',
                          style: TextStyle(fontFamily: 'Roboto'),
                        ),
                      ),
                    ],
                  ),
                  
                  if (features.isNotEmpty) ...[
                    const SizedBox(height: 16),
                    const Text(
                      'FonctionnalitÃ©s incluses:',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Wrap(
                      spacing: 8,
                      runSpacing: 4,
                      children: features.map((feature) => 
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            feature.toString(),
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ).toList(),
                    ),
                  ],
                ],
              ),
            );
          },
          empty: _buildEmptySubscriptionSection(),
        ),
      ),
    );
  }

  Widget _buildEmptySubscriptionSection() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.grey.shade600, Colors.grey.shade700],
        ),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          const Text(
            'ðŸ‘‘ Abonnement',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'Plan Gratuit actuel\nPassez au Premium pour plus de fonctionnalitÃ©s !',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.white70,
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: _managePlan,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.amber,
              foregroundColor: Colors.white,
            ),
            child: const Text('DÃ©couvrir Premium'),
          ),
        ],
      ),
    );
  }

  Widget _buildProfileSection() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.person, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Profil Personnel',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          
          WidgetHelper.buildFormField(
            label: 'Nom complet *',
            controller: _nameController,
            hint: 'Votre nom et prÃ©nom',
          ),
          const SizedBox(height: 16),
          WidgetHelper.buildFormField(
            label: 'Email *',
            controller: _emailController,
            hint: 'votre@email.com',
            keyboardType: TextInputType.emailAddress,
          ),
          const SizedBox(height: 16),
          WidgetHelper.buildFormField(
            label: 'TÃ©lÃ©phone',
            controller: _phoneController,
            hint: '01 23 45 67 89',
            keyboardType: TextInputType.phone,
          ),
        ],
      ),
    );
  }

  Widget _buildCompanySection() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.business, color: Colors.blue, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Informations Entreprise',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          
          WidgetHelper.buildFormField(
            label: 'Nom de l\'entreprise',
            controller: _companyController,
            hint: 'Votre sociÃ©tÃ©',
          ),
          const SizedBox(height: 16),
          WidgetHelper.buildFormField(
            label: 'SIRET',
            controller: _siretController,
            hint: '12345678901234',
            keyboardType: TextInputType.number,
          ),
          const SizedBox(height: 16),
          WidgetHelper.buildFormField(
            label: 'Adresse complÃ¨te',
            controller: _addressController,
            hint: 'Adresse, ville, code postal',
            maxLines: 2,
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationSettings() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.notifications, color: Colors.orange, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Notifications',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          
          _buildNotificationSwitch(
            'Nouvelles demandes de stands',
            'email_new_requests',
            'Recevez un email Ã  chaque nouvelle demande',
          ),
          _buildNotificationSwitch(
            'Paiements reÃ§us',
            'email_payments',
            'Notification lors des paiements confirmÃ©s',
          ),
          _buildNotificationSwitch(
            'Notifications push',
            'push_enabled',
            'Alertes mobiles importantes',
          ),
          _buildNotificationSwitch(
            'Rappels Ã©vÃ©nements',
            'email_reminders',
            'Rappels avant vos conventions',
          ),
          _buildNotificationSwitch(
            'Newsletter Kipik',
            'email_newsletter',
            'Conseils et nouveautÃ©s organisateurs',
          ),
        ],
      ),
    );
  }

  Widget _buildPaymentSettings() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.payment, color: Colors.green, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Paiements & Facturation',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          
          const Text(
            'MÃ©thode de paiement prÃ©fÃ©rÃ©e:',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 12),
          
          _buildPaymentMethodTile(
            'Stripe',
            'Cartes bancaires, virements SEPA',
            Icons.credit_card,
            'stripe',
          ),
          _buildPaymentMethodTile(
            'PayPal',
            'Compte PayPal Business',
            Icons.account_balance_wallet,
            'paypal',
          ),
          _buildPaymentMethodTile(
            'Virement bancaire',
            'RIB franÃ§ais uniquement',
            Icons.account_balance,
            'bank_transfer',
          ),
          
          const SizedBox(height: 16),
          
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.blue.shade200),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info, color: Colors.blue.shade600, size: 20),
                    const SizedBox(width: 8),
                    const Text(
                      'Commissions Kipik',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.blue,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Text(
                  'â€¢ 1% sur les ventes de billets\nâ€¢ 1% sur les rÃ©servations de stands\nâ€¢ Paiement mensuel automatique',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.blue,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCommissionSettings() {
    return WidgetHelper.buildStreamWidget<QuerySnapshot>(
      stream: ServiceHelper.getStream('organizers', where: {'id': _currentOrganizerId}),
      builder: (querySnapshot) {
        final doc = querySnapshot.docs.isNotEmpty ? querySnapshot.docs.first : null;
        final profileData = doc?.data() as Map<String, dynamic>? ?? {};
        final stats = profileData['stats'] as Map<String, dynamic>? ?? {};
        final totalRevenue = (stats['totalRevenue'] as num?)?.toDouble() ?? 0.0;
        final kipikCommission = totalRevenue * 0.01;

        return WidgetHelper.buildKipikContainer(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.monetization_on, color: Colors.purple, size: 24),
                  const SizedBox(width: 12),
                  const Text(
                    'Commissions & Revenus',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.black87,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              Row(
                children: [
                  Expanded(
                    child: _buildRevenueCard(
                      'Revenus Total',
                      ServiceHelper.formatCurrency(totalRevenue),
                      Colors.green,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildRevenueCard(
                      'Commission Kipik',
                      ServiceHelper.formatCurrency(kipikCommission),
                      Colors.purple,
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 16),
              
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.green.shade100, Colors.teal.shade100],
                  ),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'ðŸ’° Optimisation des Revenus',
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 16,
                        color: Colors.black87,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text(
                      'Conseils pour maximiser vos revenus:',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.black87,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text(
                      'â€¢ Encouragez les rÃ©servations via Kipik\nâ€¢ Utilisez le paiement fractionnÃ©\nâ€¢ Activez les notifications automatiques\nâ€¢ Proposez des tarifs prÃ©fÃ©rentiels early-bird',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.black87,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildSecuritySection() {
    return WidgetHelper.buildKipikContainer(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.security, color: Colors.red, size: 24),
              const SizedBox(width: 12),
              const Text(
                'SÃ©curitÃ© & ConfidentialitÃ©',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          
          ListTile(
            leading: const Icon(Icons.lock, color: Colors.orange),
            title: const Text(
              'Changer le mot de passe',
              style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
            ),
            subtitle: const Text(
              'DerniÃ¨re modification il y a 30 jours',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: _changePassword,
          ),
          
          const Divider(),
          
          ListTile(
            leading: const Icon(Icons.smartphone, color: Colors.blue),
            title: const Text(
              'Authentification Ã  2 facteurs',
              style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
            ),
            subtitle: const Text(
              'SÃ©curisez votre compte',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            trailing: Switch(
              value: _notificationSettings['2fa_enabled'] ?? false,
              onChanged: (value) {
                setState(() {
                  _notificationSettings['2fa_enabled'] = value;
                });
              },
              activeColor: KipikTheme.rouge,
            ),
          ),
          
          const Divider(),
          
          ListTile(
            leading: const Icon(Icons.download, color: Colors.green),
            title: const Text(
              'Exporter mes donnÃ©es',
              style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
            ),
            subtitle: const Text(
              'TÃ©lÃ©charger toutes vos donnÃ©es',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: _exportData,
          ),
        ],
      ),
    );
  }

  Widget _buildDangerZone() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.red.shade50,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: Colors.red.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.warning, color: Colors.red.shade600, size: 24),
              const SizedBox(width: 12),
              Text(
                'Zone de Danger',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.red.shade700,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          ListTile(
            leading: Icon(Icons.pause_circle, color: Colors.orange.shade600),
            title: const Text(
              'Suspendre le compte temporairement',
              style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
            ),
            subtitle: const Text(
              'DÃ©sactiver temporairement votre activitÃ©',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: _suspendAccount,
          ),
          
          const Divider(),
          
          ListTile(
            leading: Icon(Icons.delete_forever, color: Colors.red.shade600),
            title: Text(
              'Supprimer dÃ©finitivement le compte',
              style: TextStyle(
                fontFamily: 'Roboto', 
                fontWeight: FontWeight.w600,
                color: Colors.red.shade700,
              ),
            ),
            subtitle: const Text(
              'Action irrÃ©versible - toutes les donnÃ©es seront perdues',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: _deleteAccount,
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationSwitch(String title, String key, String subtitle) {
    return SwitchListTile(
      title: Text(
        title,
        style: const TextStyle(
          fontFamily: 'Roboto',
          fontSize: 14,
          fontWeight: FontWeight.w600,
        ),
      ),
      subtitle: Text(
        subtitle,
        style: const TextStyle(fontSize: 12, color: Colors.grey),
      ),
      value: _notificationSettings[key] ?? false,
      onChanged: (value) {
        setState(() {
          _notificationSettings[key] = value;
        });
      },
      activeColor: KipikTheme.rouge,
    );
  }

  Widget _buildPaymentMethodTile(String title, String subtitle, IconData icon, String method) {
    final isSelected = _paymentSettings['preferred_method'] == method;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        leading: Icon(icon, color: isSelected ? KipikTheme.rouge : Colors.grey),
        title: Text(
          title,
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: isSelected ? KipikTheme.rouge : Colors.black87,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: const TextStyle(fontSize: 12, color: Colors.grey),
        ),
        trailing: Radio<String>(
          value: method,
          groupValue: _paymentSettings['preferred_method'],
          onChanged: (value) {
            setState(() {
              _paymentSettings['preferred_method'] = value;
            });
          },
          activeColor: KipikTheme.rouge,
        ),
        onTap: () {
          setState(() {
            _paymentSettings['preferred_method'] = method;
          });
        },
      ),
    );
  }

  Widget _buildRevenueCard(String title, String amount, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Text(
            amount,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.grey,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  // Helper methods
  String _getPlanLabel(String plan) {
    switch (plan) {
      case 'free': return 'Gratuit';
      case 'pro': return 'Pro';
      case 'premium': return 'Premium';
      default: return 'Inconnu';
    }
  }

  // Actions Firebase avec vraies donnÃ©es
  Future<void> _saveAllSettings() async {
    if (_isSaving) return;
    
    setState(() => _isSaving = true);

    try {
      // Sauvegarder le profil organisateur
      await ServiceHelper.update('organizers', _currentOrganizerId!, {
        'profile': {
          'name': _nameController.text,
          'email': _emailController.text,
          'phone': _phoneController.text,
        },
        'company': {
          'name': _companyController.text,
          'siret': _siretController.text,
          'address': _addressController.text,
        },
      });

      // Sauvegarder les paramÃ¨tres
      await ServiceHelper.update('organizer_settings', _currentOrganizerId!, {
        'notifications': _notificationSettings,
        'payment': _paymentSettings,
      });

      // Tracker l'Ã©vÃ©nement
      await ServiceHelper.trackEvent('organizer_settings_updated', {
        'organizerId': _currentOrganizerId,
        'sections': ['profile', 'notifications', 'payment'],
      });

      if (mounted) {
        KipikTheme.showSuccessSnackBar(context, 'ParamÃ¨tres sauvegardÃ©s avec succÃ¨s');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la sauvegarde: $e');
      }
    } finally {
      if (mounted) {
        setState(() => _isSaving = false);
      }
    }
  }

  void _managePlan() async {
    try {
      // Utiliser votre service de paiement existant
      final paymentService = FirebasePaymentService.instance;
      
      await ServiceHelper.trackEvent('subscription_management_accessed', {
        'organizerId': _currentOrganizerId,
      });
      
      Navigator.pushNamed(context, '/organisateur/subscription');
    } catch (e) {
      KipikTheme.showErrorSnackBar(context, 'Erreur d\'accÃ¨s Ã  la gestion d\'abonnement');
    }
  }

  void _changePassword() {
    Navigator.pushNamed(context, '/organisateur/change-password');
  }

  void _exportData() async {
    try {
      await ServiceHelper.trackEvent('data_export_requested', {
        'organizerId': _currentOrganizerId,
        'requestedAt': DateTime.now().toIso8601String(),
      });
      
      // Simuler la demande d'export
      await ServiceHelper.create('data_export_requests', {
        'userId': _currentOrganizerId,
        'status': 'pending',
        'requestedAt': FieldValue.serverTimestamp(),
      });
      
      if (mounted) {
        KipikTheme.showInfoSnackBar(context, 'Export demandÃ© - vous recevrez un email avec vos donnÃ©es');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la demande d\'export: $e');
      }
    }
  }

  void _suspendAccount() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Suspendre le compte'),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir suspendre temporairement votre compte ? '
          'Vos conventions seront mises en pause.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _performSuspendAccount();
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('Suspendre'),
          ),
        ],
      ),
    );
  }

  void _deleteAccount() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          'Supprimer le compte',
          style: TextStyle(color: Colors.red.shade700),
        ),
        content: const Text(
          'ATTENTION: Cette action est irrÃ©versible. Toutes vos donnÃ©es, '
          'conventions et paramÃ¨tres seront dÃ©finitivement supprimÃ©s.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _performDeleteAccount();
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Supprimer dÃ©finitivement'),
          ),
        ],
      ),
    );
  }

  Future<void> _performSuspendAccount() async {
    try {
      await ServiceHelper.update('organizers', _currentOrganizerId!, {
        'status': 'suspended',
        'suspendedAt': FieldValue.serverTimestamp(),
        'suspendedBy': _currentOrganizerId,
      });

      await ServiceHelper.trackEvent('account_suspended', {
        'organizerId': _currentOrganizerId,
        'reason': 'user_requested',
      });
      
      if (mounted) {
        KipikTheme.showInfoSnackBar(context, 'Compte suspendu temporairement');
        Navigator.pushReplacementNamed(context, '/connexion');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la suspension: $e');
      }
    }
  }

  Future<void> _performDeleteAccount() async {
    try {
      // Soft delete avec timestamp
      await ServiceHelper.update('organizers', _currentOrganizerId!, {
        'status': 'deleted',
        'deletedAt': FieldValue.serverTimestamp(),
        'deletedBy': _currentOrganizerId,
      });

      await ServiceHelper.trackEvent('account_deleted', {
        'organizerId': _currentOrganizerId,
        'reason': 'user_requested',
      });
      
      if (mounted) {
        KipikTheme.showInfoSnackBar(context, 'Compte supprimÃ© dÃ©finitivement');
        Navigator.pushReplacementNamed(context, '/welcome');
      }
    } catch (e) {
      if (mounted) {
        KipikTheme.showErrorSnackBar(context, 'Erreur lors de la suppression: $e');
      }
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\accueil_particulier_page.dart

// lib/pages/particulier/accueil_particulier_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../widgets/common/drawers/custom_drawer_particulier.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../theme/kipik_theme.dart';
import '../../core/database_manager.dart';
import '../../services/auth/secure_auth_service.dart';
import 'recherche_tatoueur_page.dart';
import 'rdv_jour_page.dart';
import 'mes_devis_page.dart';
import 'mes_projets_particulier_page.dart';
import 'messages_particulier_page.dart';

class AccueilParticulierPage extends StatefulWidget {
  const AccueilParticulierPage({Key? key}) : super(key: key);

  @override
  State<AccueilParticulierPage> createState() => _AccueilParticulierPageState();
}

class _AccueilParticulierPageState extends State<AccueilParticulierPage> {
  late final String _bgAsset;
  
  // âœ… DonnÃ©es utilisateur dynamiques
  String _userName = 'Utilisateur';
  String? _avatarUrl;
  bool _isLoading = true;
  
  // âœ… DonnÃ©es dynamiques depuis Firestore
  int _requestsCount = 0;
  int _projectsCount = 0;
  String? _nextAppointment;
  int _messagesCount = 0;

  // âœ… Services
  SecureAuthService get _authService => SecureAuthService.instance;
  DatabaseManager get _databaseManager => DatabaseManager.instance;

  @override
  void initState() {
    super.initState();
    const backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    _bgAsset = backgrounds[Random().nextInt(backgrounds.length)];
    
    _initializeUserData();
  }

  // âœ… Initialisation des donnÃ©es utilisateur
  Future<void> _initializeUserData() async {
    try {
      await _loadUserProfile();
      await _loadUserStats();
    } catch (e) {
      print('âŒ Erreur initialisation donnÃ©es utilisateur: $e');
      // âœ… En cas d'erreur, charger des donnÃ©es par dÃ©faut
      _setDefaultData();
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  // âœ… NOUVEAU: DonnÃ©es par dÃ©faut en cas d'erreur
  void _setDefaultData() {
    if (mounted) {
      setState(() {
        _userName = 'Client Kipik';
        _requestsCount = 0;
        _projectsCount = 0;
        _nextAppointment = 'Aucun RDV';
        _messagesCount = 0;
      });
    }
  }

  // âœ… Charger le profil utilisateur
  Future<void> _loadUserProfile() async {
    try {
      final currentUser = _authService.currentUser;
      if (currentUser == null) return;

      final userId = currentUser['uid'] ?? currentUser['id'];
      if (userId == null) return;

      final userDoc = await _databaseManager.firestore
          .collection('users')
          .doc(userId)
          .get();

      if (userDoc.exists && mounted) {
        final userData = userDoc.data()!;
        
        setState(() {
          _userName = userData['displayName'] ?? 
                     userData['name'] ?? 
                     userData['email']?.split('@')[0] ?? 
                     'Client Kipik';
          _avatarUrl = userData['profileImageUrl'];
        });
      }
    } catch (e) {
      print('âŒ Erreur chargement profil: $e');
      // Utiliser des donnÃ©es par dÃ©faut
      if (mounted) {
        setState(() {
          _userName = 'Client Kipik';
        });
      }
    }
  }

  // âœ… Charger les statistiques utilisateur avec gestion d'erreur
  Future<void> _loadUserStats() async {
    try {
      final currentUser = _authService.currentUser;
      if (currentUser == null) return;

      final userId = currentUser['uid'] ?? currentUser['id'];
      if (userId == null) return;

      final firestore = _databaseManager.firestore;

      // âœ… Charger chaque statistique individuellement avec gestion d'erreur
      final requests = await _loadQuoteRequests(firestore, userId);
      final projects = await _loadProjects(firestore, userId);
      final nextAppt = await _loadNextAppointment(firestore, userId);
      final messages = await _loadMessages(firestore, userId);

      if (mounted) {
        setState(() {
          _requestsCount = requests;
          _projectsCount = projects;
          _nextAppointment = nextAppt;
          _messagesCount = messages;
        });
      }
    } catch (e) {
      print('âŒ Erreur chargement statistiques: $e');
      // Valeurs par dÃ©faut en cas d'erreur
      if (mounted) {
        setState(() {
          _requestsCount = 0;
          _projectsCount = 0;
          _nextAppointment = 'Aucun RDV';
          _messagesCount = 0;
        });
      }
    }
  }

  // âœ… Charger les demandes de devis avec gestion d'erreur
  Future<int> _loadQuoteRequests(FirebaseFirestore firestore, String userId) async {
    try {
      final snapshot = await firestore
          .collection('quote_requests')
          .where('clientId', isEqualTo: userId)
          .where('status', whereIn: ['pending', 'in_progress'])
          .get();
      
      return snapshot.docs.length;
    } catch (e) {
      print('âŒ Erreur chargement devis: $e');
      return 0;
    }
  }

  // âœ… Charger les projets avec gestion d'erreur
  Future<int> _loadProjects(FirebaseFirestore firestore, String userId) async {
    try {
      final snapshot = await firestore
          .collection('projects')
          .where('clientId', isEqualTo: userId)
          .where('status', whereIn: ['active', 'in_progress', 'scheduled'])
          .get();
      
      return snapshot.docs.length;
    } catch (e) {
      print('âŒ Erreur chargement projets: $e');
      return 0;
    }
  }

  // âœ… Charger le prochain rendez-vous avec gestion d'erreur
  Future<String?> _loadNextAppointment(FirebaseFirestore firestore, String userId) async {
    try {
      final now = DateTime.now();
      final snapshot = await firestore
          .collection('appointments')
          .where('clientId', isEqualTo: userId)
          .where('dateTime', isGreaterThan: Timestamp.fromDate(now))
          .orderBy('dateTime', descending: false)
          .limit(1)
          .get();
      
      if (snapshot.docs.isNotEmpty) {
        final appointment = snapshot.docs.first.data();
        final dateTime = (appointment['dateTime'] as Timestamp).toDate();
        
        final day = dateTime.day.toString().padLeft(2, '0');
        final month = dateTime.month.toString().padLeft(2, '0');
        final year = dateTime.year;
        final hour = dateTime.hour.toString().padLeft(2, '0');
        final minute = dateTime.minute.toString().padLeft(2, '0');
        
        return '$day/$month/$year â€¢ ${hour}h$minute';
      }
      
      return 'Aucun RDV';
    } catch (e) {
      print('âŒ Erreur chargement RDV: $e');
      return 'Aucun RDV';
    }
  }

  // âœ… Charger les messages avec gestion d'erreur
  Future<int> _loadMessages(FirebaseFirestore firestore, String userId) async {
    try {
      final snapshot = await firestore
          .collection('conversations')
          .where('participants', arrayContains: userId)
          .where('hasUnreadMessages.$userId', isEqualTo: true)
          .get();
      
      return snapshot.docs.length;
    } catch (e) {
      print('âŒ Erreur chargement messages: $e');
      return 0;
    }
  }

  // âœ… Actualiser les donnÃ©es
  Future<void> _refreshData() async {
    if (mounted) {
      setState(() {
        _isLoading = true;
      });
    }
    
    await _initializeUserData();
  }

  // âœ… GÃ©rer le clic sur l'avatar
  void _handleAvatarTap() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(height: 20),
            const Text(
              'Photo de profil',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                fontFamily: 'PermanentMarker',
              ),
            ),
            const SizedBox(height: 20),
            ListTile(
              leading: const Icon(Icons.camera_alt, color: Colors.blue),
              title: const Text('Prendre une photo'),
              onTap: () {
                Navigator.pop(context);
                _updateProfilePicture('camera');
              },
            ),
            ListTile(
              leading: const Icon(Icons.photo_library, color: Colors.green),
              title: const Text('Choisir dans la galerie'),
              onTap: () {
                Navigator.pop(context);
                _updateProfilePicture('gallery');
              },
            ),
            if (_avatarUrl != null)
              ListTile(
                leading: const Icon(Icons.delete, color: Colors.red),
                title: const Text('Supprimer la photo'),
                onTap: () {
                  Navigator.pop(context);
                  _removeProfilePicture();
                },
              ),
            ListTile(
              leading: const Icon(Icons.settings, color: Colors.orange),
              title: const Text('Aller aux paramÃ¨tres'),
              onTap: () {
                Navigator.pop(context);
                _goToSettings();
              },
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  // âœ… Mettre Ã  jour la photo de profil
  void _updateProfilePicture(String source) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Upload photo depuis $source - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  // âœ… Supprimer la photo de profil
  Future<void> _removeProfilePicture() async {
    try {
      final currentUser = _authService.currentUser;
      if (currentUser == null) return;

      final userId = currentUser['uid'] ?? currentUser['id'];
      if (userId == null) return;

      await _databaseManager.firestore
          .collection('users')
          .doc(userId)
          .update({
        'profileImageUrl': FieldValue.delete(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      if (mounted) {
        setState(() {
          _avatarUrl = null;
        });

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Photo de profil supprimÃ©e'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // âœ… Aller aux paramÃ¨tres
  void _goToSettings() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Navigation vers paramÃ¨tres - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final w = MediaQuery.of(context).size.width;
    final cardW = (w - 48 - 12) / 2;

    return PopScope(
      canPop: false,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        endDrawer: const CustomDrawerParticulier(),
        appBar: const CustomAppBarParticulier(
          title: 'Accueil',
          showBackButton: false,
          showBurger: true,
          showNotificationIcon: true,
          redirectToHome: false,
        ),
        floatingActionButton: const TattooAssistantButton(
          allowImageGeneration: false,
        ),
        body: Stack(
          fit: StackFit.expand,
          children: [
            Image.asset(_bgAsset, fit: BoxFit.cover),
            SafeArea(
              bottom: true,
              child: _isLoading
                  ? const Center(
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : RefreshIndicator(
                      onRefresh: _refreshData,
                      color: KipikTheme.rouge,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 24),
                        child: Column(
                          children: [
                            const SizedBox(height: 8),
                            Text(
                              'Bienvenue, $_userName',
                              textAlign: TextAlign.center,
                              style: const TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 26,
                                color: Colors.white,
                              ),
                            ),
                            const SizedBox(height: 4),
                            
                            // âœ… Indicateur base de donnÃ©es si mode dÃ©mo
                            if (_databaseManager.isDemoMode) ...[
                              Container(
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 12, 
                                  vertical: 4,
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.orange,
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: const Text(
                                  'ðŸŽ­ MODE DÃ‰MO',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 10,
                                    fontWeight: FontWeight.bold,
                                    fontFamily: 'Roboto',
                                  ),
                                ),
                              ),
                              const SizedBox(height: 4),
                            ],
                            
                            const Text(
                              'Encre tes idÃ©es, Ã  toi de jouer',
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 16,
                                color: Colors.white70,
                              ),
                            ),
                            const SizedBox(height: 12),
                            
                            // âœ… Avatar cliquable avec avatar client par dÃ©faut
                            GestureDetector(
                              onTap: _handleAvatarTap,
                              child: Container(
                                width: cardW,
                                height: cardW,
                                decoration: BoxDecoration(
                                  color: Colors.white24,
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                    color: Colors.white.withOpacity(0.3),
                                    width: 2,
                                  ),
                                ),
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(12),
                                  child: Stack(
                                    fit: StackFit.expand,
                                    children: [
                                      // âœ… Image de profil ou avatar client par dÃ©faut
                                      if (_avatarUrl != null && _avatarUrl!.isNotEmpty)
                                        Image.network(
                                          _avatarUrl!,
                                          fit: BoxFit.cover,
                                          loadingBuilder: (context, child, loadingProgress) {
                                            if (loadingProgress == null) return child;
                                            return const Center(
                                              child: CircularProgressIndicator(
                                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                              ),
                                            );
                                          },
                                          errorBuilder: (context, error, stackTrace) {
                                            print('Erreur chargement avatar rÃ©seau: $error');
                                            return _buildDefaultAvatar();
                                          },
                                        )
                                      else
                                        _buildDefaultAvatar(),
                                      
                                      // Overlay pour indiquer que c'est cliquable
                                      Positioned(
                                        bottom: 8,
                                        right: 8,
                                        child: Container(
                                          padding: const EdgeInsets.all(4),
                                          decoration: BoxDecoration(
                                            color: Colors.black54,
                                            borderRadius: BorderRadius.circular(6),
                                          ),
                                          child: const Icon(
                                            Icons.edit,
                                            color: Colors.white,
                                            size: 16,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            
                            const SizedBox(height: 12),
                            SizedBox(
                              width: double.infinity,
                              height: 48,
                              child: OutlinedButton(
                                style: OutlinedButton.styleFrom(
                                  backgroundColor: Colors.white,
                                  side: BorderSide(color: KipikTheme.rouge, width: 2),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                ),
                                onPressed: () => Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => const RechercheTatoueurPage(),
                                  ),
                                ),
                                child: const Text(
                                  'Rechercher mon tatoueur',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    fontFamily: 'PermanentMarker',
                                    color: Colors.black87,
                                    fontSize: 16,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(height: 12),
                            Expanded(
                              child: GridView.count(
                                crossAxisCount: 2,
                                crossAxisSpacing: 12,
                                mainAxisSpacing: 12,
                                physics: const AlwaysScrollableScrollPhysics(),
                                children: [
                                  _DashboardCard(
                                    icon: Icons.event,
                                    title: 'Prochain RDV',
                                    value: _nextAppointment ?? 'Aucun RDV',
                                    onTap: () => Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (_) => const RdvJourPage(),
                                      ),
                                    ),
                                  ),
                                  _DashboardCard(
                                    icon: Icons.request_quote,
                                    title: 'Demande de devis\nen cours',
                                    value: '$_requestsCount',
                                    onTap: () => Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (_) => const MesDevisPage(),
                                      ),
                                    ),
                                  ),
                                  _DashboardCard(
                                    icon: Icons.work_outline,
                                    title: 'Projets en cours',
                                    value: '$_projectsCount',
                                    onTap: () => Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (_) =>
                                            const MesProjetsParticulierPage(),
                                      ),
                                    ),
                                  ),
                                  _DashboardCard(
                                    icon: Icons.chat_bubble,
                                    title: 'Messages',
                                    value: '$_messagesCount',
                                    onTap: () => Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (_) =>
                                            const MessagesParticulierPage(),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }

  // âœ… Widget pour l'avatar par dÃ©faut
  Widget _buildDefaultAvatar() {
    return Container(
      color: Colors.white,
      child: Image.asset(
        'assets/avatars/avatar_client.png', // âœ… CORRIGÃ‰: Utilise avatar_client.png
        fit: BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          print('Erreur chargement avatar_client.png: $error');
          // Fallback vers une icÃ´ne
          return Container(
            color: Colors.white,
            child: Icon(
              Icons.person,
              color: KipikTheme.rouge,
              size: 60,
            ),
          );
        },
      ),
    );
  }
}

class _DashboardCard extends StatelessWidget {
  final IconData icon;
  final String title;
  final String value;
  final VoidCallback onTap;

  const _DashboardCard({
    required this.icon,
    required this.title,
    required this.value,
    required this.onTap,
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: KipikTheme.rouge.withOpacity(0.85),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: Colors.white, size: 28),
            const SizedBox(height: 4),
            Text(
              value,
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 16,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 2),
            Text(
              title,
              textAlign: TextAlign.center,
              style: const TextStyle(
                color: Colors.white70,
                fontFamily: 'PermanentMarker',
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\aide_support_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import 'accueil_particulier_page.dart';

class AideSupportPage extends StatefulWidget {
  const AideSupportPage({Key? key}) : super(key: key);

  @override
  State<AideSupportPage> createState() => _AideSupportPageState();
}

class _AideSupportPageState extends State<AideSupportPage> {
  final List<FAQItem> _faqItems = [
    FAQItem(
      question: 'Comment prendre rendez-vous avec un tatoueur ?',
      answer:
          'Pour prendre rendez-vous avec un tatoueur, parcourez la liste des artistes disponibles, consultez leur profil et leurs crÃ©ations. SÃ©lectionnez ensuite "Demander un devis" sur leur profil. Vous pourrez dÃ©crire votre projet, envoyer des rÃ©fÃ©rences et convenir d\'une date pour discuter des dÃ©tails de votre tatouage.',
    ),
    FAQItem(
      question: 'Comment fonctionne le systÃ¨me de devis ?',
      answer:
          'Le systÃ¨me de devis permet aux tatoueurs d\'Ã©valuer votre projet et de vous proposer un tarif. AprÃ¨s avoir soumis votre demande, le tatoueur vous rÃ©pond gÃ©nÃ©ralement sous 48h avec un prix estimÃ©, une durÃ©e de rÃ©alisation et des disponibilitÃ©s. Vous pouvez alors accepter le devis ou continuer Ã  chercher d\'autres artistes.',
    ),
    FAQItem(
      question: 'Puis-je annuler ou modifier mon rendez-vous ?',
      answer:
          'Oui, vous pouvez modifier ou annuler votre rendez-vous jusqu\'Ã  48h avant la date prÃ©vue sans frais. Pour cela, accÃ©dez Ã  la section "Mes rendez-vous" dans votre profil et sÃ©lectionnez le rendez-vous concernÃ©. Toute annulation moins de 48h avant la session peut entraÃ®ner des frais selon la politique du tatoueur.',
    ),
    FAQItem(
      question: 'Comment sont sÃ©curisÃ©s mes paiements ?',
      answer:
          'Tous les paiements effectuÃ©s via Kipik sont sÃ©curisÃ©s par un systÃ¨me de cryptage SSL. Nous n\'enregistrons jamais vos informations bancaires. Le paiement d\'arrhes est dÃ©bitÃ© uniquement lorsque le tatoueur accepte votre demande, et le solde n\'est versÃ© Ã  l\'artiste qu\'une fois la prestation terminÃ©e et validÃ©e par vos soins.',
    ),
    FAQItem(
      question: 'Que faire en cas de souci avec un tatoueur ?',
      answer:
          'Si vous rencontrez un problÃ¨me avec un tatoueur, nous vous encourageons d\'abord Ã  communiquer directement avec l\'artiste via notre messagerie intÃ©grÃ©e. Si le problÃ¨me persiste, contactez notre service client via l\'option "Signaler un problÃ¨me" accessible depuis la conversation ou le profil du tatoueur. Notre Ã©quipe de modÃ©ration interviendra sous 24h.',
    ),
    FAQItem(
      question: 'Comment devenir tatoueur sur Kipik ?',
      answer:
          'Pour rejoindre Kipik en tant que tatoueur professionnel, vous devez disposer d\'un numÃ©ro SIRET valide, d\'une attestation de formation en hygiÃ¨ne et d\'un book reprÃ©sentatif de votre travail. Rendez-vous sur kipik.com/devenir-tatoueur et soumettez votre candidature. Notre Ã©quipe l\'examinera et vous recontactera sous 5 jours ouvrÃ©s.',
    ),
    FAQItem(
      question: 'Comment trouver de l\'inspiration pour mon tatouage ?',
      answer:
          'Kipik propose une section "Inspirations" oÃ¹ vous pouvez parcourir des milliers de crÃ©ations classÃ©es par styles, zones du corps et thÃ¨mes. Vous pouvez sauvegarder vos designs prÃ©fÃ©rÃ©s dans vos "Favoris" et les partager avec les tatoueurs lors de votre demande de devis. Nous organisons Ã©galement des Ã©vÃ©nements thÃ©matiques chaque mois pour dÃ©couvrir de nouveaux styles.',
    ),
  ];

  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo1.png',
    'assets/background_tatoo2.png',
    'assets/background_tatoo3.png',
  ];

  late String _selectedBackground;
  int? _expandedIndex;

  @override
  void initState() {
    super.initState();
    _selectedBackground =
        _backgroundImages[Random().nextInt(_backgroundImages.length)];
  }

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'support@kipik.com',
      queryParameters: {
        'subject': 'Demande d\'assistance Kipik',
      },
    );
    try {
      await launchUrl(emailUri);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Impossible d\'ouvrir l\'application email'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _showLiveChatDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: Text(
          'Chat en direct',
          style: TextStyle(
            color: KipikTheme.blanc,
            fontFamily: KipikTheme.fontTitle,
          ),
        ),
        content: Container(
          constraints: const BoxConstraints(maxWidth: 400),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.chat, size: 60, color: KipikTheme.rouge),
              const SizedBox(height: 16),
              Text(
                'Notre service de chat en direct sera disponible dÃ©but juin 2025. '
                'En attendant, n\'hÃ©sitez pas Ã  nous contacter par email.',
                style: TextStyle(color: KipikTheme.blanc.withOpacity(0.9)),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Fermer', style: TextStyle(color: KipikTheme.rouge)),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _launchEmail();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text('Envoyer un email', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Aide & Support',
        showBackButton: true,
        redirectToHome: true,
        showBurger: false,
        showNotificationIcon: false,
        onBackButtonPressed: () {
          // Navigation directe vers la page d'accueil
          Navigator.of(context).pushAndRemoveUntil(
            MaterialPageRoute(
              builder: (context) => const AccueilParticulierPage(),
            ),
            (route) => false,
          );
        },
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond alÃ©atoire
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            alignment: Alignment.topCenter,
          ),
          // Overlay
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withOpacity(0.3),
                  Colors.black.withOpacity(0.7),
                ],
              ),
            ),
          ),
          // Contenu
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.only(
                left: 16, right: 16, top: 20, bottom: 40),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Besoin d'aide
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.7),
                      borderRadius: BorderRadius.circular(20),
                      border: Border.all(color: KipikTheme.rouge.withOpacity(0.5)),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.2),
                          blurRadius: 10,
                          offset: const Offset(0, 5),
                        ),
                      ],
                    ),
                    child: Column(
                      children: [
                        Text(
                          'Besoin d\'aide ?',
                          style: TextStyle(
                            fontFamily: KipikTheme.fontTitle,
                            fontSize: 24,
                            color: KipikTheme.blanc,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 15),
                        Text(
                          'Notre Ã©quipe est disponible 7j/7 pour vous aider dans votre expÃ©rience de tatouage.',
                          style: TextStyle(
                            color: KipikTheme.blanc.withOpacity(0.9),
                            fontSize: 16,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 20),
                        Row(
                          children: [
                            Expanded(
                              child: _buildSupportOption(
                                icon: Icons.email_outlined,
                                title: 'Email',
                                subtitle: 'support@kipik.com',
                                onTap: _launchEmail,
                              ),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: _buildSupportOption(
                                icon: Icons.chat_bubble_outline,
                                title: 'Chat',
                                subtitle: 'Disponible 9h-18h',
                                onTap: _showLiveChatDialog,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),

                  const SizedBox(height: 25),

                  // FAQ
                  _buildAnimatedSectionHeader('Questions frÃ©quentes', Icons.help_outline),
                  const SizedBox(height: 15),
                  ...List.generate(
                    _faqItems.length,
                    (index) => Padding(
                      padding: const EdgeInsets.only(bottom: 10),
                      child: _buildFAQItem(index),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAnimatedSectionHeader(String title, IconData icon) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            KipikTheme.rouge.withOpacity(0.3),
            KipikTheme.rouge.withOpacity(0.1),
          ],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: KipikTheme.rouge.withOpacity(0.5), width: 1),
      ),
      child: Row(
        children: [
          Icon(icon, color: KipikTheme.rouge, size: 24),
          const SizedBox(width: 10),
          Text(
            title,
            style: const TextStyle(
              color: Colors.white, fontSize: 18, fontFamily: 'PermanentMarker'),
          ),
        ],
      ),
    );
  }

  Widget _buildSupportOption({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 12),
        decoration: BoxDecoration(
          color: Colors.black45,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
        ),
        child: Column(
          children: [
            Icon(icon, color: KipikTheme.rouge, size: 32),
            const SizedBox(height: 10),
            Text(
              title,
              style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: TextStyle(color: Colors.white.withOpacity(0.7), fontSize: 12),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFAQItem(int index) {
    final faq = _faqItems[index];
    final isExpanded = _expandedIndex == index;
    return Container(
      decoration: BoxDecoration(
        color: Colors.black45,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isExpanded
              ? KipikTheme.rouge.withOpacity(0.5)
              : Colors.white10,
        ),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () => setState(() {
            _expandedIndex = isExpanded ? null : index;
          }),
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(
                      isExpanded ? Icons.remove_circle : Icons.add_circle,
                      color: isExpanded ? KipikTheme.rouge : Colors.white70,
                      size: 20,
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        faq.question,
                        style: TextStyle(
                          color: isExpanded ? KipikTheme.rouge : Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                if (isExpanded) ...[
                  const SizedBox(height: 12),
                  Padding(
                    padding: const EdgeInsets.only(left: 32, right: 8),
                    child: Text(
                      faq.answer,
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.9),
                        fontSize: 14,
                        height: 1.4,
                      ),
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class FAQItem {
  final String question;
  final String answer;
  FAQItem({required this.question, required this.answer});
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\confirmation_inscription_particulier_page.dart

// lib/pages/particulier/confirmation_inscription_particulier_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/pages/particulier/accueil_particulier_page.dart'; // âœ… Redirection vers le dashboard particulier
import 'package:kipik_v5/theme/kipik_theme.dart';

class ConfirmationInscriptionParticulierPage extends StatelessWidget {
  const ConfirmationInscriptionParticulierPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: "Bienvenue",
        showBackButton: false,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Background avec overlay pour lisibilitÃ©
          Image.asset(bg, fit: BoxFit.cover),
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withOpacity(0.3),
                  Colors.black.withOpacity(0.6),
                ],
              ),
            ),
          ),
          SafeArea(
            child: Center(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 24),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // âœ… IcÃ´ne de succÃ¨s
                    Container(
                      width: 100,
                      height: 100,
                      decoration: BoxDecoration(
                        color: Colors.green,
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.green.withOpacity(0.3),
                            blurRadius: 20,
                            offset: const Offset(0, 10),
                          ),
                        ],
                      ),
                      child: const Icon(
                        Icons.check_circle,
                        color: Colors.white,
                        size: 60,
                      ),
                    ),
                    
                    const SizedBox(height: 30),
                    
                    // âœ… Message de bienvenue amÃ©liorÃ©
                    Container(
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(
                          color: Colors.white.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      child: const Column(
                        children: [
                          Text(
                            "ðŸŽ‰ Inscription rÃ©ussie !",
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 24,
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: 16),
                          Text(
                            "Bienvenue dans l'univers KIPIK !\n\n"
                            "Votre compte particulier est maintenant activÃ©.\n"
                            "DÃ©couvrez les meilleurs tatoueurs prÃ¨s de chez vous\n"
                            "et donnez vie Ã  vos projets de tatouage.",
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 16,
                              color: Colors.white,
                              height: 1.5,
                            ),
                          ),
                        ],
                      ),
                    ),
                    
                    const SizedBox(height: 40),
                    
                    // âœ… Bouton principal vers le dashboard
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pushReplacement(
                            context,
                            MaterialPageRoute(
                              builder: (_) => AccueilParticulierPage(), // âœ… Redirection vers le dashboard particulier
                            ),
                          );
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: KipikTheme.rouge,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            vertical: 18,
                            horizontal: 32,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          elevation: 8,
                          shadowColor: KipikTheme.rouge.withOpacity(0.3),
                          textStyle: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'PermanentMarker',
                          ),
                        ),
                        child: const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.home, size: 24),
                            SizedBox(width: 12),
                            Text("AccÃ©der Ã  mon espace"),
                          ],
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // âœ… Bouton secondaire pour rechercher un tatoueur
                    SizedBox(
                      width: double.infinity,
                      child: OutlinedButton(
                        onPressed: () {
                          // Navigation vers la recherche de tatoueur (si cette page existe)
                          Navigator.pushReplacement(
                            context,
                            MaterialPageRoute(
                              builder: (_) => AccueilParticulierPage(), // Pour l'instant, mÃªme destination
                            ),
                          );
                        },
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.white,
                          side: const BorderSide(color: Colors.white, width: 2),
                          padding: const EdgeInsets.symmetric(
                            vertical: 16,
                            horizontal: 32,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          textStyle: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Roboto',
                          ),
                        ),
                        child: const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.search, size: 20),
                            SizedBox(width: 8),
                            Text("Trouver un tatoueur"),
                          ],
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 30),
                    
                    // âœ… Message d'encouragement
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: Colors.blue.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      child: const Row(
                        children: [
                          Icon(Icons.lightbulb, color: Colors.blue, size: 20),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              "Conseil : Prenez le temps de parcourir les portfolios des tatoueurs pour trouver le style qui vous correspond !",
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                                fontFamily: 'Roboto',
                                fontStyle: FontStyle.italic,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\conversation_page.dart

// lib/pages/particulier/conversation_page.dart
import 'package:flutter/material.dart';
import 'dart:math';
import '../../theme/kipik_theme.dart';
import 'messages_particulier_page.dart';

class ConversationPage extends StatefulWidget {
  final TattooerConversation conversation;

  const ConversationPage({
    Key? key,
    required this.conversation,
  }) : super(key: key);

  @override
  State<ConversationPage> createState() => _ConversationPageState();
}

class _ConversationPageState extends State<ConversationPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  
  // Exemple de messages pour la dÃ©monstration
  late List<ChatMessage> _messages;
  
  // Liste des images de fond disponibles
  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo1.png',
    'assets/background_tatoo2.png',
    'assets/background_tatoo3.png',
  ];
  
  // Variable pour stocker l'image de fond sÃ©lectionnÃ©e alÃ©atoirement
  late String _selectedBackground;

  @override
  void initState() {
    super.initState();
    
    // SÃ©lection alÃ©atoire de l'image de fond
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
    
    // Initialiser les messages de dÃ©mo
    _loadDemoMessages();
  }
  
  void _loadDemoMessages() {
    final now = DateTime.now();
    
    // Images gÃ©nÃ©riques URL (pas besoin d'assets)
    final String tattoExampleUrl = 'https://images.unsplash.com/photo-1586074911330-9a772f19e722';
    final String sketchUrl = 'https://images.unsplash.com/photo-1550537687-c91072c4792d';
    
    // CrÃ©er quelques messages fictifs pour la dÃ©mo
    _messages = [
      ChatMessage(
        senderId: 'tattooer',
        content: 'Bonjour ! Comment puis-je t\'aider pour ton projet de ${widget.conversation.projectName} ?',
        timestamp: now.subtract(const Duration(days: 3, hours: 2)),
        messageType: MessageType.text,
      ),
      ChatMessage(
        senderId: 'user',
        content: 'Salut ! Je cherche un design dans un style plutÃ´t minimaliste.',
        timestamp: now.subtract(const Duration(days: 3, hours: 1, minutes: 45)),
        messageType: MessageType.text,
      ),
      ChatMessage(
        senderId: 'tattooer',
        content: 'Je peux te proposer quelques designs. As-tu des rÃ©fÃ©rences ou des exemples de ce que tu aimes ?',
        timestamp: now.subtract(const Duration(days: 3, hours: 1, minutes: 30)),
        messageType: MessageType.text,
      ),
      ChatMessage(
        senderId: 'user',
        content: tattoExampleUrl,
        timestamp: now.subtract(const Duration(days: 3, hours: 1)),
        messageType: MessageType.image,
      ),
      ChatMessage(
        senderId: 'user',
        content: 'Quelque chose dans ce style, mais peut-Ãªtre avec des lignes plus fines.',
        timestamp: now.subtract(const Duration(days: 3, hours: 1)),
        messageType: MessageType.text,
      ),
      ChatMessage(
        senderId: 'tattooer',
        content: 'C\'est notÃ© ! Je vais te prÃ©parer une esquisse. Pour l\'emplacement, tu penses Ã  quelle partie du corps ?',
        timestamp: now.subtract(const Duration(days: 2, hours: 5)),
        messageType: MessageType.text,
      ),
      ChatMessage(
        senderId: 'user',
        content: 'Je pensais Ã  l\'avant-bras, cÃ´tÃ© intÃ©rieur.',
        timestamp: now.subtract(const Duration(days: 2, hours: 4)),
        messageType: MessageType.text,
      ),
      ChatMessage(
        senderId: 'tattooer',
        content: sketchUrl,
        timestamp: now.subtract(const Duration(hours: 3)),
        messageType: MessageType.image,
      ),
      ChatMessage(
        senderId: 'tattooer',
        content: 'Voici l\'esquisse pour ton tatouage, qu\'en penses-tu ? On peut ajuster si nÃ©cessaire.',
        timestamp: now.subtract(const Duration(hours: 3)),
        messageType: MessageType.text,
      ),
    ];
    
    // Si la conversation a des messages non lus, ajouter les derniers messages du tatoueur
    if (widget.conversation.unreadCount > 0) {
      _messages.add(
        ChatMessage(
          senderId: 'tattooer',
          content: 'J\'ai aussi pensÃ© Ã  cette variante, peut-Ãªtre plus adaptÃ©e Ã  l\'emplacement.',
          timestamp: now.subtract(const Duration(minutes: 15)),
          messageType: MessageType.text,
        ),
      );
      
      _messages.add(
        ChatMessage(
          senderId: 'tattooer',
          content: 'https://images.unsplash.com/photo-1598587741472-cb57904efbc1',
          timestamp: now.subtract(const Duration(minutes: 15)),
          messageType: MessageType.image,
        ),
      );
    }
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _sendMessage() {
    if (_messageController.text.trim().isEmpty) return;

    setState(() {
      _messages.add(
        ChatMessage(
          senderId: 'user',
          content: _messageController.text,
          timestamp: DateTime.now(),
          messageType: MessageType.text,
        ),
      );
      _messageController.clear();
    });

    // Faire dÃ©filer vers le dernier message
    Future.delayed(const Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _showAttachmentOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.symmetric(vertical: 20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Envoyer',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
              ),
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildAttachmentOption(
                  icon: Icons.photo,
                  label: 'Galerie',
                  onTap: () {
                    Navigator.pop(context);
                    // Logique pour sÃ©lectionner une image
                    _simulateImageUpload();
                  },
                ),
                _buildAttachmentOption(
                  icon: Icons.camera_alt,
                  label: 'Appareil photo',
                  onTap: () {
                    Navigator.pop(context);
                    // Logique pour prendre une photo
                    _simulateImageUpload();
                  },
                ),
                _buildAttachmentOption(
                  icon: Icons.insert_drive_file,
                  label: 'Document',
                  onTap: () {
                    Navigator.pop(context);
                    // Logique pour sÃ©lectionner un document
                    _simulateDocumentUpload();
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAttachmentOption({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            padding: const EdgeInsets.all(15),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: Icon(icon, color: KipikTheme.rouge, size: 30),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: const TextStyle(fontSize: 14),
          ),
        ],
      ),
    );
  }

  // Simule l'envoi d'une image (pour la dÃ©mo)
  void _simulateImageUpload() {
    setState(() {
      _messages.add(
        ChatMessage(
          senderId: 'user',
          content: 'https://images.unsplash.com/photo-1571816119553-df62a2eedf56', // Image gÃ©nÃ©rique
          timestamp: DateTime.now(),
          messageType: MessageType.image,
        ),
      );
    });

    // Faire dÃ©filer vers le dernier message
    Future.delayed(const Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  // Simule l'envoi d'un document (pour la dÃ©mo)
  void _simulateDocumentUpload() {
    setState(() {
      _messages.add(
        ChatMessage(
          senderId: 'user',
          content: 'emplacement_tatouage.pdf',
          timestamp: DateTime.now(),
          messageType: MessageType.document,
        ),
      );
    });

    // Faire dÃ©filer vers le dernier message
    Future.delayed(const Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _showProjectInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          'Informations du projet',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: Icon(Icons.format_paint, color: KipikTheme.rouge),
              title: const Text('Projet'),
              subtitle: Text(widget.conversation.projectName),
            ),
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: Icon(Icons.person, color: KipikTheme.rouge),
              title: const Text('Tatoueur'),
              subtitle: Text(widget.conversation.tattooerName),
            ),
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: Icon(Icons.calendar_today, color: KipikTheme.rouge),
              title: const Text('DerniÃ¨re activitÃ©'),
              subtitle: Text('${widget.conversation.lastMessageTime.day}/${widget.conversation.lastMessageTime.month}/${widget.conversation.lastMessageTime.year}'),
            ),
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: Icon(Icons.info_outline, color: KipikTheme.rouge),
              title: const Text('Statut'),
              subtitle: const Text('En discussion'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Fermer',
              style: TextStyle(color: KipikTheme.rouge),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        // Bouton retour ajoutÃ©
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Row(
          children: [
            CircleAvatar(
              backgroundImage: NetworkImage(widget.conversation.avatarUrl),
              radius: 20,
            ),
            const SizedBox(width: 12),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.conversation.tattooerName,
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 18,
                    color: Colors.white,
                  ),
                ),
                Text(
                  widget.conversation.projectName,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.white.withOpacity(0.8),
                  ),
                ),
              ],
            ),
          ],
        ),
        actions: [
          // Bouton d'appel vidÃ©o
          IconButton(
            icon: const Icon(Icons.videocam, color: Colors.white),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Appel vidÃ©o non disponible pour le moment'),
                  duration: Duration(seconds: 2),
                ),
              );
            },
          ),
          // Bouton d'info projet avec tooltip explicatif
          Tooltip(
            message: 'Informations du projet',
            child: IconButton(
              icon: const Icon(Icons.info_outline, color: Colors.white),
              onPressed: _showProjectInfo,
            ),
          ),
        ],
      ),
      body: Stack(
        children: [
          // Fond alÃ©atoire
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          // Contenu principal
          Column(
            children: [
              // Liste des messages
              Expanded(
                child: ListView.builder(
                  controller: _scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
                  itemCount: _messages.length,
                  itemBuilder: (context, index) {
                    final message = _messages[index];
                    return _buildMessageItem(message);
                  },
                ),
              ),
              
              // Barre de saisie
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: Colors.white,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10,
                      offset: const Offset(0, -2),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    // Bouton pour les piÃ¨ces jointes
                    IconButton(
                      icon: Icon(Icons.attach_file, color: KipikTheme.rouge),
                      onPressed: _showAttachmentOptions,
                    ),
                    // Champ de saisie du message
                    Expanded(
                      child: TextField(
                        controller: _messageController,
                        decoration: InputDecoration(
                          hintText: 'Votre message...',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(20),
                            borderSide: BorderSide.none,
                          ),
                          filled: true,
                          fillColor: Colors.grey[100],
                          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                        ),
                        maxLines: null,
                        textCapitalization: TextCapitalization.sentences,
                      ),
                    ),
                    const SizedBox(width: 8),
                    // Bouton d'envoi
                    Container(
                      decoration: BoxDecoration(
                        color: KipikTheme.rouge,
                        shape: BoxShape.circle,
                      ),
                      child: IconButton(
                        icon: const Icon(Icons.send, color: Colors.white),
                        onPressed: _sendMessage,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMessageItem(ChatMessage message) {
    final isUser = message.senderId == 'user';
    
    // Formatage de l'heure du message
    final timeString = '${message.timestamp.hour.toString().padLeft(2, '0')}:${message.timestamp.minute.toString().padLeft(2, '0')}';
    
    // Widget pour afficher la bulle de message
    Widget messageContent;
    
    switch (message.messageType) {
      case MessageType.text:
        messageContent = Text(
          message.content,
          style: TextStyle(
            color: isUser ? Colors.white : Colors.black,
            fontSize: 16,
          ),
        );
        break;
        
      case MessageType.image:
        messageContent = Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                message.content, // URL de l'image
                width: 200,
                height: 150,
                fit: BoxFit.cover,
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) return child;
                  return Container(
                    width: 200,
                    height: 150,
                    color: Colors.grey[300],
                    child: Center(
                      child: CircularProgressIndicator(
                        value: loadingProgress.expectedTotalBytes != null
                            ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes!
                            : null,
                        valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                      ),
                    ),
                  );
                },
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    width: 200,
                    height: 150,
                    color: Colors.grey[300],
                    child: const Center(
                      child: Icon(
                        Icons.broken_image,
                        color: Colors.grey,
                        size: 48,
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(height: 4),
            Text(
              'Image',
              style: TextStyle(
                color: isUser ? Colors.white.withOpacity(0.7) : Colors.black.withOpacity(0.7),
                fontStyle: FontStyle.italic,
                fontSize: 12,
              ),
            ),
          ],
        );
        break;
        
      case MessageType.document:
        messageContent = Container(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.insert_drive_file,
                color: isUser ? Colors.white : KipikTheme.rouge,
                size: 24,
              ),
              const SizedBox(width: 8),
              Flexible(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      message.content,
                      style: TextStyle(
                        color: isUser ? Colors.white : Colors.black,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 2),
                    Text(
                      'Document PDF',
                      style: TextStyle(
                        color: isUser ? Colors.white.withOpacity(0.7) : Colors.black.withOpacity(0.7),
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
        break;
    }
    
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        mainAxisAlignment: isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          // Avatar pour le tatoueur
          if (!isUser) ...[
            CircleAvatar(
              backgroundImage: NetworkImage(widget.conversation.avatarUrl),
              radius: 16,
            ),
            const SizedBox(width: 8),
          ],
          
          // Bulle de message
          Container(
            constraints: BoxConstraints(
              maxWidth: MediaQuery.of(context).size.width * 0.7,
            ),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            decoration: BoxDecoration(
              color: isUser ? KipikTheme.rouge : Colors.white,
              borderRadius: BorderRadius.circular(16).copyWith(
                bottomLeft: isUser ? const Radius.circular(16) : const Radius.circular(0),
                bottomRight: isUser ? const Radius.circular(0) : const Radius.circular(16),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 5,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                messageContent,
                const SizedBox(height: 4),
                Align(
                  alignment: Alignment.bottomRight,
                  child: Text(
                    timeString,
                    style: TextStyle(
                      color: isUser 
                          ? Colors.white.withOpacity(0.7) 
                          : Colors.black.withOpacity(0.5),
                      fontSize: 10,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// Types de messages
enum MessageType {
  text,
  image,
  document,
}

// ModÃ¨le pour les messages
class ChatMessage {
  final String senderId; // 'user' ou 'tattooer'
  final String content;
  final DateTime timestamp;
  final MessageType messageType;

  ChatMessage({
    required this.senderId,
    required this.content,
    required this.timestamp,
    required this.messageType,
  });
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\demande_devis_page.dart

// lib/pages/particulier/demande_devis_page.dart

import 'dart:io';
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:kipik_v5/services/demande_devis/firebase_demande_devis_service.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/utils/screenshot_helper.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_particulier.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class DemandeDevisPage extends StatefulWidget {
  // âœ… PARAMÃˆTRES CORRIGÃ‰S - noms cohÃ©rents avec le profil tatoueur
  final Map<String, dynamic>? prefilledFlash;
  final String? tatoueurId; // âœ… ChangÃ© de targetTattooerId Ã  tatoueurId
  final String? tatoueurName; // âœ… AjoutÃ© pour affichage
  
  const DemandeDevisPage({
    Key? key,
    this.prefilledFlash,
    this.tatoueurId,
    this.tatoueurName,
  }) : super(key: key);

  @override
  State<DemandeDevisPage> createState() => _DemandeDevisPageState();
}

class _DemandeDevisPageState extends State<DemandeDevisPage> {
  FirebaseDemandeDevisService get _devisService => FirebaseDemandeDevisService.instance;
  SecureAuthService get _authService => SecureAuthService.instance;

  late final String _backgroundImage;
  
  final TextEditingController _descriptionController = TextEditingController();
  final GlobalKey _zonesKey = GlobalKey();
  List<String> _zonesSelectionnees = [];
  bool _isLoading = false;
  
  // âœ… DonnÃ©es utilisateur prÃ©remplies
  Map<String, dynamic>? _userProfile;
  bool _isLoadingProfile = true;
  
  String _tailleSelectionnee = "10x10 cm";
  
  final List<Map<String, dynamic>> _tailles = [
    {'value': "5x5 cm", 'category': 'Petit', 'price': 'â‚¬', 'range': '80-150â‚¬'},
    {'value': "7x7 cm", 'category': 'Petit', 'price': 'â‚¬', 'range': '100-200â‚¬'},
    {'value': "10x10 cm", 'category': 'Moyen', 'price': 'â‚¬â‚¬', 'range': '150-300â‚¬'},
    {'value': "15x15 cm", 'category': 'Moyen', 'price': 'â‚¬â‚¬', 'range': '250-450â‚¬'},
    {'value': "15x20 cm", 'category': 'Grand', 'price': 'â‚¬â‚¬â‚¬', 'range': '350-600â‚¬'},
    {'value': "20x20 cm", 'category': 'Grand', 'price': 'â‚¬â‚¬â‚¬', 'range': '450-750â‚¬'},
    {'value': "20x30 cm", 'category': 'TrÃ¨s grand', 'price': 'â‚¬â‚¬â‚¬â‚¬', 'range': '600-1000â‚¬'},
    {'value': "30x30 cm", 'category': 'TrÃ¨s grand', 'price': 'â‚¬â‚¬â‚¬â‚¬', 'range': '800-1500â‚¬'},
    {'value': "Grande piÃ¨ce (plus de 30 cm)", 'category': 'Extra large', 'price': 'â‚¬â‚¬â‚¬â‚¬â‚¬', 'range': '1000â‚¬+'},
  ];
  
  File? _photoEmplacement;
  List<File> _fichiersReference = [];
  List<String> _imagesGenerees = [];

  String? _estimatedBudget;
  String _urgency = 'normal';
  String? _preferredStyle;
  String? _colorPreference;
  
  // âœ… Contraintes pour forcer passage par l'app
  bool _acceptTerms = false;
  bool _agreeToAppOnlyContact = false;

  @override
  void initState() {
    super.initState();
    
    if (!_authService.isAuthenticated) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.pushReplacementNamed(context, '/login');
      });
      return;
    }

    _backgroundImage = _getRandomBackground();
    _loadUserProfile();
    _initializeWithFlash(); // âœ… PrÃ©remplir si flash fourni
    IaGenerationService.instance.onImageGenerated.listen(_ajouterImageGeneree);
  }

  // âœ… Charger le profil utilisateur depuis SecureAuthService
  Future<void> _loadUserProfile() async {
    setState(() => _isLoadingProfile = true);
    
    try {
      // âœ… Utiliser les vraies donnÃ©es utilisateur quand disponibles
      final currentUser = _authService.currentUser;
      final userProfile = _authService.userProfile;
      
      if (currentUser != null && userProfile != null) {
        _userProfile = {
          'firstName': userProfile['firstName'] ?? userProfile['displayName']?.split(' ').first ?? 'Utilisateur',
          'lastName': userProfile['lastName'] ?? userProfile['displayName']?.split(' ').skip(1).join(' ') ?? '',
          'email': currentUser.email ?? 'Email non renseignÃ©',
          'phone': userProfile['phone'] ?? userProfile['phoneNumber'] ?? 'TÃ©lÃ©phone non renseignÃ©',
          'address': userProfile['address'] ?? 'Adresse non renseignÃ©e',
          'dateOfBirth': userProfile['dateOfBirth'],
          'preferredStyles': userProfile['preferredStyles'] ?? ['Non dÃ©fini'],
          'allergies': userProfile['allergies'] ?? 'Aucune allergie connue',
          'previousTattoos': userProfile['previousTattoos'] ?? 0,
          'preferredBudget': userProfile['preferredBudget'] ?? 'Non dÃ©fini',
        };
      } else {
        // Fallback avec donnÃ©es par dÃ©faut
        _userProfile = {
          'firstName': 'Utilisateur',
          'lastName': 'Kipik',
          'email': _authService.currentUser?.email ?? 'email@exemple.com',
          'phone': 'TÃ©lÃ©phone non renseignÃ©',
          'address': 'Adresse non renseignÃ©e',
          'preferredStyles': ['Non dÃ©fini'],
          'allergies': 'Aucune allergie connue',
          'previousTattoos': 0,
          'preferredBudget': 'Non dÃ©fini',
        };
      }
      
    } catch (e) {
      print('âŒ Erreur chargement profil: $e');
      // Profil d'urgence en cas d'erreur
      _userProfile = {
        'firstName': 'Utilisateur',
        'lastName': 'Kipik',
        'email': 'email@exemple.com',
        'phone': 'TÃ©lÃ©phone Ã  renseigner',
        'address': 'Adresse Ã  renseigner',
        'preferredStyles': ['Ã€ dÃ©finir'],
        'allergies': 'Ã€ prÃ©ciser',
        'previousTattoos': 0,
        'preferredBudget': 'Ã€ dÃ©finir',
      };
    } finally {
      setState(() => _isLoadingProfile = false);
    }
  }

  // âœ… Initialiser avec flash prÃ©rempli
  void _initializeWithFlash() {
    if (widget.prefilledFlash != null) {
      final flash = widget.prefilledFlash!;
      
      setState(() {
        // âœ… Message prÃ©rempli intelligent selon le type de flash
        final isFlashMinute = flash['status'] == 'flashminute';
        final discount = flash['discount'];
        
        String baseMessage = 'Je souhaite rÃ©server ce flash : "${flash['title']}".\n\n';
        
        if (isFlashMinute && discount != null) {
          baseMessage += 'ðŸ”¥ FLASH MINUTE ACTIF (-${discount}%) !\n';
          baseMessage += 'Prix original : ${flash['originalPrice']}â‚¬\n';
          baseMessage += 'Prix Flash Minute : ${flash['price']}â‚¬\n\n';
        } else {
          baseMessage += 'Prix : ${flash['price']}â‚¬\n\n';
        }
        
        baseMessage += 'Style : ${flash['style']}\n';
        baseMessage += 'Taille : ${flash['size']}\n\n';
        
        if (flash['tags'] != null && flash['tags'].isNotEmpty) {
          baseMessage += 'Tags : ${(flash['tags'] as List).join(', ')}\n\n';
        }
        
        baseMessage += 'Merci de me confirmer :\n';
        baseMessage += 'â€¢ Les crÃ©neaux disponibles\n';
        baseMessage += 'â€¢ Les modalitÃ©s de rÃ©servation\n';
        baseMessage += 'â€¢ Le montant de l\'acompte requis\n\n';
        
        if (isFlashMinute) {
          baseMessage += 'âš¡ Je comprends que cette offre Flash Minute est limitÃ©e dans le temps.';
        }

        _descriptionController.text = baseMessage;
        
        // PrÃ©remplir les autres champs
        _tailleSelectionnee = flash['size'] ?? "10x10 cm";
        _preferredStyle = flash['style'];
        
        // PrÃ©remplir les zones si disponibles
        if (flash['placement'] != null) {
          _zonesSelectionnees = List<String>.from(flash['placement']);
        }
      });
    }
  }
  
  String _getRandomBackground() {
    const backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    return backgrounds[Random().nextInt(backgrounds.length)];
  }
  
  void _onZonesSelected(List<String> zones) {
    setState(() => _zonesSelectionnees = zones);
  }
  
  void _ajouterImageGeneree(String imageUrl) {
    if (mounted) {
      setState(() {
        _imagesGenerees.add(imageUrl);
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("âœ… Image IA ajoutÃ©e Ã  votre demande"),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }
  
  Future<void> _choisirPhotoEmplacement() async {
    try {
      const XTypeGroup imagesGroup = XTypeGroup(
        label: 'Images',
        extensions: ['jpg', 'jpeg', 'png', 'webp'],
      );
      
      final XFile? file = await openFile(
        acceptedTypeGroups: [imagesGroup],
      );
      
      if (file != null) {
        final fileSize = await File(file.path).length();
        if (fileSize > 10 * 1024 * 1024) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text("Fichier trop volumineux (max 10MB)"),
                backgroundColor: Colors.orange,
              ),
            );
          }
          return;
        }

        setState(() {
          _photoEmplacement = File(file.path);
        });
      }
    } catch (e) {
      debugPrint("Erreur sÃ©lection photo: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("Impossible de sÃ©lectionner cette photo"),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  Future<void> _choisirFichiersReference() async {
    try {
      const XTypeGroup imagesGroup = XTypeGroup(
        label: 'Images',
        extensions: ['jpg', 'jpeg', 'png', 'webp'],
      );
      
      const XTypeGroup documentsGroup = XTypeGroup(
        label: 'Documents',
        extensions: ['pdf'],
      );
      
      final List<XFile> files = await openFiles(
        acceptedTypeGroups: [imagesGroup, documentsGroup],
      );
      
      if (files.isNotEmpty) {
        final nouveauxFichiers = <File>[];
        int totalSize = 0;

        for (final xFile in files) {
          final file = File(xFile.path);
          final fileSize = await file.length();
          totalSize += fileSize;

          if (fileSize > 10 * 1024 * 1024) {
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text("Fichier ${xFile.name} trop volumineux (max 10MB)"),
                  backgroundColor: Colors.orange,
                ),
              );
            }
            continue;
          }

          nouveauxFichiers.add(file);
        }

        if (totalSize > 50 * 1024 * 1024) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text("Taille totale des fichiers trop importante (max 50MB)"),
                backgroundColor: Colors.orange,
              ),
            );
          }
          return;
        }
        
        setState(() {
          if (_fichiersReference.length + nouveauxFichiers.length > 5) {
            final nbAjouter = 5 - _fichiersReference.length;
            if (nbAjouter > 0) {
              _fichiersReference.addAll(nouveauxFichiers.take(nbAjouter));
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text("Maximum 5 fichiers de rÃ©fÃ©rence autorisÃ©s"),
                  backgroundColor: Colors.orange,
                ),
              );
            }
          } else {
            _fichiersReference.addAll(nouveauxFichiers);
          }
        });
      }
    } catch (e) {
      debugPrint("Erreur sÃ©lection fichiers: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Erreur lors de la sÃ©lection: $e"),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  void _supprimerFichierReference(int index) {
    setState(() {
      _fichiersReference.removeAt(index);
    });
  }
  
  void _supprimerImageGeneree(int index) {
    setState(() {
      _imagesGenerees.removeAt(index);
    });
  }

  bool _validerFormulaire() {
    if (_descriptionController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Merci de dÃ©crire ton projet de tatouage"),
          backgroundColor: Colors.orange,
        ),
      );
      return false;
    }
    
    if (_descriptionController.text.trim().length < 20) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Description trop courte (minimum 20 caractÃ¨res)"),
          backgroundColor: Colors.orange,
        ),
      );
      return false;
    }
    
    if (_zonesSelectionnees.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("SÃ©lectionne au moins une zone corporelle"),
          backgroundColor: Colors.orange,
        ),
      );
      return false;
    }

    // âœ… Validation des conditions renforcÃ©es
    if (!_acceptTerms) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Veuillez accepter les conditions d'utilisation"),
          backgroundColor: Colors.orange,
        ),
      );
      return false;
    }

    if (!_agreeToAppOnlyContact) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Veuillez accepter de passer exclusivement par l'application"),
          backgroundColor: Colors.orange,
        ),
      );
      return false;
    }
    
    return true;
  }

  Future<void> _envoyerDemande() async {
    if (!_validerFormulaire()) {
      return;
    }

    setState(() => _isLoading = true);

    try {
      String? zoneImageUrl;
      String? photoEmplacementUrl;
      List<String> fichiersReferenceUrls = [];

      final imagePath = await ScreenshotHelper.captureAvatar(
        context,
        _zonesKey,
      );

      if (imagePath != null) {
        zoneImageUrl = await _devisService.uploadImage(
          File(imagePath),
          'zones/${DateTime.now().millisecondsSinceEpoch}_zone.png',
        );
      }
      
      if (_photoEmplacement != null) {
        photoEmplacementUrl = await _devisService.uploadImage(
          _photoEmplacement!,
          'emplacements/${DateTime.now().millisecondsSinceEpoch}_emplacement.jpg',
        );
      }
      
      if (_fichiersReference.isNotEmpty) {
        fichiersReferenceUrls = await _devisService.uploadMultipleImages(
          _fichiersReference,
          'references',
        );
      }

      // âœ… DonnÃ©es enrichies avec profil utilisateur et flash
      final demandeData = {
        'description': _descriptionController.text.trim(),
        'taille': _tailleSelectionnee,
        'zones': _zonesSelectionnees,
        'zoneImageUrl': zoneImageUrl,
        'photoEmplacementUrl': photoEmplacementUrl,
        'fichiersReferenceUrls': fichiersReferenceUrls,
        'imagesGenerees': _imagesGenerees,
        
        // âœ… DonnÃ©es flash si prÃ©rempli
        'isFlashBooking': widget.prefilledFlash != null,
        'flashData': widget.prefilledFlash,
        'targetTattooerId': widget.tatoueurId,
        'targetTatoueurName': widget.tatoueurName,
        
        // âœ… DonnÃ©es utilisateur prÃ©remplies
        'clientProfile': _userProfile,
        'estimatedBudget': _estimatedBudget,
        'urgency': _urgency,
        'preferredStyle': _preferredStyle,
        'colorPreference': _colorPreference,
        
        // âœ… Contraintes application
        'acceptedTerms': _acceptTerms,
        'agreeToAppOnlyContact': _agreeToAppOnlyContact,
        'mustUseAppForBooking': true,
        'commissionRate': 0.01, // 1% de commission
        
        // âœ… MÃ©tadonnÃ©es enrichies
        'requestType': widget.prefilledFlash != null ? 'flash_booking' : 'custom_design',
        'isFlashMinute': widget.prefilledFlash?['status'] == 'flashminute',
        'flashMinuteDiscount': widget.prefilledFlash?['discount'],
        'urgentUntil': widget.prefilledFlash?['urgentUntil']?.toString(),
        'totalImages': fichiersReferenceUrls.length + _imagesGenerees.length,
        'hasPhotoEmplacement': _photoEmplacement != null,
        'zonesCount': _zonesSelectionnees.length,
        'descriptionLength': _descriptionController.text.trim().length,
        'submissionTimestamp': DateTime.now().toIso8601String(),
        'clientId': _authService.currentUserId,
        'complexity': _calculateComplexity(),
      };

      await _devisService.createDemandeDevis(demandeData);

      if (mounted) {
        final isFlashMinute = widget.prefilledFlash?['status'] == 'flashminute';
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              widget.prefilledFlash != null 
                  ? isFlashMinute 
                      ? "âš¡ Demande Flash Minute envoyÃ©e !"
                      : "âœ… Demande de rÃ©servation flash envoyÃ©e !"
                  : "âœ… Demande de devis envoyÃ©e avec succÃ¨s !"
            ),
            backgroundColor: isFlashMinute ? Colors.orange : Colors.green,
            duration: const Duration(seconds: 3),
          ),
        );

        // âœ… RÃ©initialiser le formulaire
        _resetForm();
        
        // âœ… Retourner avec succÃ¨s
        Future.delayed(const Duration(seconds: 1), () {
          if (mounted && Navigator.canPop(context)) {
            Navigator.pop(context, true); // âœ… true = succÃ¨s
          }
        });
      }
      
    } catch (e) {
      debugPrint("Erreur envoi demande : $e");
      if (mounted) {
        String errorMessage = "âŒ Ã‰chec de l'envoi, rÃ©essaye plus tard.";
        
        if (e.toString().contains('Validation de sÃ©curitÃ©')) {
          errorMessage = "âŒ Validation de sÃ©curitÃ© Ã©chouÃ©e. RÃ©essayez dans quelques minutes.";
        } else if (e.toString().contains('trop volumineux')) {
          errorMessage = "âŒ Fichiers trop volumineux. Compressez vos images.";
        } else if (e.toString().contains('non connectÃ©')) {
          errorMessage = "âŒ Session expirÃ©e. Reconnectez-vous.";
          Navigator.pushReplacementNamed(context, '/login');
          return;
        }
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: Colors.redAccent,
            duration: const Duration(seconds: 4),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  // âœ… Calculer la complexitÃ© du projet
  String _calculateComplexity() {
    int score = 0;
    
    // Taille
    if (_tailleSelectionnee.contains('30x30') || _tailleSelectionnee.contains('Grande piÃ¨ce')) {
      score += 3;
    } else if (_tailleSelectionnee.contains('20x')) {
      score += 2;
    } else if (_tailleSelectionnee.contains('15x')) {
      score += 1;
    }
    
    // Nombre de zones
    score += (_zonesSelectionnees.length / 2).ceil();
    
    // Nombre d'images de rÃ©fÃ©rence
    score += (_fichiersReference.length / 2).ceil();
    
    // Description dÃ©taillÃ©e
    if (_descriptionController.text.length > 200) score += 1;
    if (_descriptionController.text.length > 500) score += 1;
    
    if (score <= 2) return 'simple';
    if (score <= 5) return 'medium';
    return 'complex';
  }

  // âœ… RÃ©initialiser le formulaire
  void _resetForm() {
    _descriptionController.clear();
    setState(() {
      _zonesSelectionnees = [];
      _tailleSelectionnee = "10x10 cm";
      _photoEmplacement = null;
      _fichiersReference = [];
      _imagesGenerees = [];
      _estimatedBudget = null;
      _urgency = 'normal';
      _preferredStyle = null;
      _colorPreference = null;
      _acceptTerms = false;
      _agreeToAppOnlyContact = false;
    });
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_authService.isAuthenticated) {
      return const Scaffold(
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    if (_isLoadingProfile) {
      return Scaffold(
        appBar: const CustomAppBarKipik(
          title: 'Demande de Devis',
          showBackButton: true,
        ),
        body: const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text('Chargement de votre profil...'),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      endDrawer: const CustomDrawerParticulier(),
      appBar: CustomAppBarKipik(
        title: widget.prefilledFlash != null 
            ? widget.prefilledFlash!['status'] == 'flashminute'
                ? 'âš¡ Flash Minute'
                : 'RÃ©server ce Flash' 
            : 'Demande de Devis',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: true,
      ),
      floatingActionButton: const TattooAssistantButton(
        allowImageGeneration: true,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(_backgroundImage, fit: BoxFit.cover),
          Container(color: Colors.black.withOpacity(0.3)),
          
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  const SizedBox(height: 12),
                  
                  // âœ… Infos utilisateur prÃ©remplies
                  _buildUserProfileCard(),
                  const SizedBox(height: 16),
                  
                  // âœ… Flash prÃ©rempli si applicable
                  if (widget.prefilledFlash != null) ...[
                    _buildFlashInfoCard(),
                    const SizedBox(height: 16),
                  ],
                  
                  _buildSectionDescription(),
                  const SizedBox(height: 24),
                  _buildSectionTaille(),
                  const SizedBox(height: 24),
                  _buildSectionPreferences(),
                  const SizedBox(height: 24),
                  _buildSectionPhotoEmplacement(),
                  const SizedBox(height: 24),
                  _buildSectionImagesReference(),
                  _buildSectionImagesGenerees(),
                  const SizedBox(height: 24),
                  
                  // âœ… AVATAR AMÃ‰LIORÃ‰
                  _buildSectionZonesCorps(),
                  const SizedBox(height: 24),
                  
                  // âœ… Conditions d'utilisation
                  _buildSectionConditions(),
                  const SizedBox(height: 24),
                  
                  _buildBoutonEnvoyer(),
                  const SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // âœ… Card profil utilisateur prÃ©rempli
  Widget _buildUserProfileCard() {
    return _buildSectionWithTitle(
      title: 'VOS INFORMATIONS',
      icon: Icons.person,
      content: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.green.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.green.withOpacity(0.3)),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.check_circle, color: Colors.green, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Informations automatiquement remplies depuis votre profil',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              '${_userProfile?['firstName']} ${_userProfile?['lastName']}',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              _userProfile?['email'] ?? '',
              style: TextStyle(
                color: Colors.white.withOpacity(0.8),
                fontSize: 14,
              ),
            ),
            Text(
              _userProfile?['phone'] ?? '',
              style: TextStyle(
                color: Colors.white.withOpacity(0.8),
                fontSize: 14,
              ),
            ),
            if (_userProfile?['previousTattoos'] != null) ...[
              const SizedBox(height: 8),
              Text(
                'Tatouages prÃ©cÃ©dents : ${_userProfile!['previousTattoos']}',
                style: TextStyle(
                  color: Colors.white.withOpacity(0.8),
                  fontSize: 12,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  // âœ… Card flash prÃ©rempli avec info Flash Minute
  Widget _buildFlashInfoCard() {
    final flash = widget.prefilledFlash!;
    final isFlashMinute = flash['status'] == 'flashminute';
    final hasDiscount = flash['discount'] != null;
    
    return _buildSectionWithTitle(
      title: isFlashMinute ? 'âš¡ FLASH MINUTE SÃ‰LECTIONNÃ‰' : 'FLASH SÃ‰LECTIONNÃ‰',
      icon: isFlashMinute ? Icons.flash_on : Icons.star,
      content: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: isFlashMinute 
              ? Colors.orange.withOpacity(0.1)
              : Colors.blue.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isFlashMinute 
                ? Colors.orange.withOpacity(0.3)
                : Colors.blue.withOpacity(0.3)
          ),
        ),
        child: Column(
          children: [
            Row(
              children: [
                Container(
                  width: 60,
                  height: 60,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(8),
                    color: Colors.grey[300],
                  ),
                  child: const Icon(Icons.image, color: Colors.grey),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        flash['title'] ?? 'Flash sans titre',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        '${flash['style']} â€¢ ${flash['size']}',
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.8),
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          if (hasDiscount) ...[
                            Text(
                              '${flash['originalPrice']}â‚¬',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.white.withOpacity(0.6),
                                decoration: TextDecoration.lineThrough,
                              ),
                            ),
                            const SizedBox(width: 8),
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: Colors.green,
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Text(
                                '-${flash['discount']}%',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                          ],
                          Text(
                            '${flash['price']}â‚¬',
                            style: TextStyle(
                              color: isFlashMinute ? Colors.orange : Colors.blue,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
            
            // âœ… Info Flash Minute avec countdown
            if (isFlashMinute && flash['urgentUntil'] != null) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.access_time, color: Colors.orange, size: 16),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Offre limitÃ©e - Se termine le ${DateTime.parse(flash['urgentUntil']).toString().substring(0, 16)}',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  // âœ… Section description adaptÃ©e pour flash
  Widget _buildSectionDescription() {
    final isFlash = widget.prefilledFlash != null;
    final isFlashMinute = widget.prefilledFlash?['status'] == 'flashminute';
    
    return _buildSectionWithTitle(
      title: isFlash 
          ? isFlashMinute 
              ? 'âš¡ MESSAGE FLASH MINUTE *'
              : 'MESSAGE POUR LE TATOUEUR *' 
          : 'DÃ‰CRIS TON PROJET *',
      icon: isFlash ? Icons.message : Icons.description,
      content: Column(
        children: [
          _buildTextField(
            controller: _descriptionController,
            hint: isFlash 
                ? isFlashMinute
                    ? 'Confirmez votre rÃ©servation Flash Minute et prÃ©cisez vos attentes...'
                    : 'Ajoutez un message pour le tatoueur concernant ce flash...'
                : 'DÃ©cris prÃ©cisÃ©ment ton idÃ©e de tatouage, le style souhaitÃ©, les couleurs, l\'ambiance...',
            maxLines: 5,
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(
                isFlash ? Icons.schedule : Icons.info_outline, 
                color: Colors.white.withOpacity(0.7), 
                size: 16
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  isFlash
                      ? isFlashMinute
                          ? 'RÃ©servation rapide - Le tatoueur vous rÃ©pondra en prioritÃ©'
                          : 'PrÃ©cisez vos attentes, questions ou demandes spÃ©cifiques'
                      : 'Minimum 20 caractÃ¨res - Plus tu donnes de dÃ©tails, meilleur sera le devis',
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.7),
                    fontSize: 12,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // [AUTRES MÃ‰THODES INCHANGÃ‰ES...]
  Widget _buildSectionTaille() {
    final isFlashWithSize = widget.prefilledFlash != null && widget.prefilledFlash!['size'] != null;
    
    return _buildSectionWithTitle(
      title: 'TAILLE DU TATOUAGE *',
      icon: Icons.straighten,
      content: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.9),
          borderRadius: BorderRadius.circular(8),
        ),
        child: DropdownButton<String>(
          value: _tailleSelectionnee,
          onChanged: isFlashWithSize ? null : (String? newValue) {
            if (newValue != null) {
              setState(() {
                _tailleSelectionnee = newValue;
              });
            }
          },
          items: _tailles.map<DropdownMenuItem<String>>((Map<String, dynamic> taille) {
            return DropdownMenuItem<String>(
              value: taille['value'],
              child: Row(
                children: [
                  Expanded(
                    child: Text(taille['value']),
                  ),
                  Text(
                    '${taille['category']} ${taille['price']}',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            );
          }).toList(),
          isExpanded: true,
          dropdownColor: Colors.white,
          style: TextStyle(
            color: isFlashWithSize ? Colors.grey : Colors.black87, 
            fontSize: 16,
          ),
          underline: Container(),
        ),
      ),
    );
  }

  Widget _buildSectionPreferences() {
    return _buildSectionWithTitle(
      title: 'PRÃ‰FÃ‰RENCES (OPTIONNEL)',
      icon: Icons.tune,
      content: Column(
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.9),
              borderRadius: BorderRadius.circular(8),
            ),
            child: DropdownButton<String>(
              value: _estimatedBudget,
              hint: Text('Budget estimÃ© (${_userProfile?['preferredBudget'] ?? 'Non dÃ©fini'})'),
              onChanged: (String? newValue) {
                setState(() => _estimatedBudget = newValue);
              },
              items: [
                'Moins de 100â‚¬',
                '100â‚¬ - 300â‚¬',
                '300â‚¬ - 500â‚¬',
                '500â‚¬ - 1000â‚¬',
                'Plus de 1000â‚¬',
              ].map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
              isExpanded: true,
              dropdownColor: Colors.white,
              style: const TextStyle(color: Colors.black87, fontSize: 16),
              underline: Container(),
            ),
          ),
          const SizedBox(height: 12),
          
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.9),
              borderRadius: BorderRadius.circular(8),
            ),
            child: DropdownButton<String>(
              value: _urgency,
              onChanged: (String? newValue) {
                setState(() => _urgency = newValue!);
              },
              items: [
                'normal',
                'rapide',
                'urgent',
              ].map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value == 'normal' ? 'Pas pressÃ©' : 
                              value == 'rapide' ? 'Assez rapide' : 'Urgent'),
                );
              }).toList(),
              isExpanded: true,
              dropdownColor: Colors.white,
              style: const TextStyle(color: Colors.black87, fontSize: 16),
              underline: Container(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionConditions() {
    return _buildSectionWithTitle(
      title: 'CONDITIONS D\'UTILISATION *',
      icon: Icons.gavel,
      content: Column(
        children: [
          // Conditions gÃ©nÃ©rales
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.blue.withOpacity(0.3)),
            ),
            child: Column(
              children: [
                CheckboxListTile(
                  value: _acceptTerms,
                  onChanged: (value) => setState(() => _acceptTerms = value ?? false),
                  title: const Text(
                    'J\'accepte les conditions gÃ©nÃ©rales d\'utilisation',
                    style: TextStyle(color: Colors.white, fontSize: 14),
                  ),
                  controlAffinity: ListTileControlAffinity.leading,
                  activeColor: Colors.blue,
                  checkColor: Colors.white,
                ),
                CheckboxListTile(
                  value: _agreeToAppOnlyContact,
                  onChanged: (value) => setState(() => _agreeToAppOnlyContact = value ?? false),
                  title: const Text(
                    'Je m\'engage Ã  passer exclusivement par l\'application Kipik pour toute communication et rÃ©servation avec le tatoueur',
                    style: TextStyle(color: Colors.white, fontSize: 14),
                  ),
                  controlAffinity: ListTileControlAffinity.leading,
                  activeColor: Colors.blue,
                  checkColor: Colors.white,
                ),
              ],
            ),
          ),
          const SizedBox(height: 16),
          
          // âœ… Pourquoi passer par l'app
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.security, color: KipikTheme.rouge, size: 20),
                    const SizedBox(width: 8),
                    const Text(
                      'Pourquoi utiliser exclusivement Kipik ?',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                const Text(
                  'â€¢ Protection de vos paiements et acomptes\n'
                  'â€¢ Chat sÃ©curisÃ© et historique conservÃ©\n'
                  'â€¢ Gestion automatique des rendez-vous\n'
                  'â€¢ Support client en cas de litige\n'
                  'â€¢ VisioconfÃ©rence intÃ©grÃ©e pour les consultations\n'
                  'â€¢ Validation Ã©tape par Ã©tape de votre projet',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    height: 1.4,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // [SECTIONS INCHANGÃ‰ES]
  Widget _buildSectionPhotoEmplacement() {
    return _buildSectionWithTitle(
      title: 'PHOTO DE L\'EMPLACEMENT',
      icon: Icons.add_a_photo,
      content: GestureDetector(
        onTap: _choisirPhotoEmplacement,
        child: Container(
          height: 180,
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.15),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.white.withOpacity(0.3)),
          ),
          child: _photoEmplacement != null
              ? ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.file(
                    _photoEmplacement!,
                    fit: BoxFit.cover,
                    width: double.infinity,
                  ),
                )
              : Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(Icons.add_a_photo, color: Colors.white, size: 50),
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      decoration: BoxDecoration(
                        color: KipikTheme.rouge.withOpacity(0.7),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: const Text(
                        'Ajouter une photo (optionnel)',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Aide le tatoueur Ã  mieux comprendre l\'emplacement',
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.7),
                        fontSize: 12,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
        ),
      ),
    );
  }

  Widget _buildSectionImagesReference() {
    return _buildSectionWithTitle(
      title: 'IMAGES DE RÃ‰FÃ‰RENCE',
      icon: Icons.image,
      content: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Ajoute jusqu\'Ã  5 images de rÃ©fÃ©rence (max 10MB chacune)',
                style: TextStyle(
                  color: Colors.white.withOpacity(0.9),
                  fontSize: 14,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                onPressed: _choisirFichiersReference,
                icon: const Icon(Icons.add, size: 18),
                label: Text('Ajouter (${_fichiersReference.length}/5)'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  elevation: 3,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 10),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          if (_fichiersReference.isEmpty)
            Container(
              padding: const EdgeInsets.symmetric(vertical: 20),
              child: Center(
                child: Text(
                  'Aucune image de rÃ©fÃ©rence',
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.7),
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ),
            )
          else
            SizedBox(
              height: 120,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: _fichiersReference.length,
                itemBuilder: (context, index) {
                  final file = _fichiersReference[index];
                  final String path = file.path.toLowerCase();
                  final bool isPdf = path.endsWith('.pdf');
                  final bool isImage = path.endsWith('.jpg') || 
                                      path.endsWith('.jpeg') || 
                                      path.endsWith('.png') || 
                                      path.endsWith('.webp');
                  
                  return Container(
                    width: 100,
                    margin: const EdgeInsets.only(right: 8),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      color: !isImage ? Colors.grey[800] : null,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.2),
                          blurRadius: 4,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Stack(
                      children: [
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: isPdf 
                            ? const Center(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Icon(Icons.picture_as_pdf, color: Colors.white, size: 40),
                                    SizedBox(height: 4),
                                    Text('PDF', style: TextStyle(color: Colors.white)),
                                  ],
                                ),
                              )
                            : isImage
                                ? Image.file(
                                    file,
                                    fit: BoxFit.cover,
                                    height: 120,
                                    width: 100,
                                  )
                                : const Center(
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        Icon(Icons.insert_drive_file, color: Colors.white, size: 40),
                                        SizedBox(height: 4),
                                        Text('Fichier', style: TextStyle(color: Colors.white)),
                                      ],
                                    ),
                                  ),
                        ),
                        Positioned(
                          top: 4,
                          right: 4,
                          child: GestureDetector(
                            onTap: () => _supprimerFichierReference(index),
                            child: Container(
                              padding: const EdgeInsets.all(4),
                              decoration: BoxDecoration(
                                color: Colors.black.withOpacity(0.7),
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(Icons.close, color: Colors.white, size: 18),
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildSectionImagesGenerees() {
    if (_imagesGenerees.isEmpty) {
      return const SizedBox.shrink();
    }
    
    return Padding(
      padding: const EdgeInsets.only(top: 24),
      child: _buildSectionWithTitle(
        title: 'IMAGES GÃ‰NÃ‰RÃ‰ES PAR L\'IA',
        icon: Icons.auto_awesome,
        content: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              height: 120,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: _imagesGenerees.length,
                itemBuilder: (context, index) {
                  return Container(
                    width: 100,
                    margin: const EdgeInsets.only(right: 8),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.2),
                          blurRadius: 4,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Stack(
                      children: [
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: Image.network(
                            _imagesGenerees[index],
                            fit: BoxFit.cover,
                            height: 120,
                            width: 100,
                            loadingBuilder: (context, child, loadingProgress) {
                              if (loadingProgress == null) return child;
                              return Container(
                                height: 120,
                                width: 100,
                                color: Colors.black45,
                                child: const Center(
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                ),
                              );
                            },
                            errorBuilder: (context, error, stackTrace) {
                              return Container(
                                height: 120,
                                width: 100,
                                color: Colors.black45,
                                child: const Center(
                                  child: Icon(Icons.broken_image, color: Colors.white54),
                                ),
                              );
                            },
                          ),
                        ),
                        Positioned(
                          top: 4,
                          right: 4,
                          child: GestureDetector(
                            onTap: () => _supprimerImageGeneree(index),
                            child: Container(
                              padding: const EdgeInsets.all(4),
                              decoration: BoxDecoration(
                                color: Colors.black.withOpacity(0.7),
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(Icons.close, color: Colors.white, size: 18),
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionZonesCorps() {
    return _buildSectionWithTitle(
      title: 'ZONES Ã€ TATOUER *',
      icon: Icons.person_outline,
      content: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'SÃ©lectionne les zones oÃ¹ tu veux Ãªtre tatouÃ©(e)',
            style: TextStyle(
              color: Colors.white.withOpacity(0.9),
              fontSize: 14,
            ),
          ),
          const SizedBox(height: 16),
          
          RepaintBoundary(
            key: _zonesKey,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.3),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: Colors.white.withOpacity(0.2),
                  width: 1,
                ),
              ),
              height: 500,
              child: ImprovedBodyZoneSelector(
                selectedZones: _zonesSelectionnees,
                onZonesSelected: _onZonesSelected,
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          if (_zonesSelectionnees.isNotEmpty) ...[
            const Text(
              "Zones sÃ©lectionnÃ©es :",
              style: TextStyle(
                color: Colors.white, 
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            SizedBox(
              height: 40,
              child: ListView(
                scrollDirection: Axis.horizontal,
                children: _buildZoneChips(),
              ),
            ),
          ],
        ],
      ),
    );
  }

  List<Widget> _buildZoneChips() {
    List<Widget> chips = [];
    
    for (String zone in _zonesSelectionnees) {
      chips.add(
        Padding(
          padding: const EdgeInsets.only(right: 8),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.8),
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 3,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
            child: Text(
              zone,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
                fontSize: 12,
              ),
            ),
          ),
        ),
      );
    }
    
    return chips;
  }

  Widget _buildBoutonEnvoyer() {
    final isFlash = widget.prefilledFlash != null;
    final isFlashMinute = widget.prefilledFlash?['status'] == 'flashminute';
    
    return ElevatedButton(
      onPressed: _isLoading ? null : _envoyerDemande,
      style: ElevatedButton.styleFrom(
        backgroundColor: _isLoading 
            ? Colors.grey 
            : isFlashMinute 
                ? Colors.orange 
                : KipikTheme.rouge,
        padding: const EdgeInsets.symmetric(vertical: 18),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        elevation: 5,
        shadowColor: Colors.black.withOpacity(0.5),
      ),
      child: _isLoading
          ? const Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                SizedBox(
                  width: 24,
                  height: 24,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    color: Colors.white,
                  ),
                ),
                SizedBox(width: 12),
                Text(
                  'ENVOI EN COURS...',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white,
                    letterSpacing: 1,
                  ),
                ),
              ],
            )
          : Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  isFlashMinute 
                      ? Icons.flash_on 
                      : isFlash 
                          ? Icons.bookmark 
                          : Icons.send,
                  color: Colors.white,
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  isFlashMinute 
                      ? 'âš¡ RÃ‰SERVER FLASH MINUTE'
                      : isFlash 
                          ? 'RÃ‰SERVER CE FLASH'
                          : 'ENVOYER MA DEMANDE',
                  style: const TextStyle(
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                    color: Colors.white,
                    letterSpacing: 1,
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildSectionWithTitle({
    required String title,
    required Widget content,
    IconData? icon,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Colors.white.withOpacity(0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 10,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.8),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(12),
                topRight: Radius.circular(12),
              ),
            ),
            child: Row(
              children: [
                if (icon != null) ...[
                  Icon(icon, color: Colors.white, size: 22),
                  const SizedBox(width: 8),
                ],
                Text(
                  title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    letterSpacing: 0.5,
                  ),
                ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.4),
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(12),
                bottomRight: Radius.circular(12),
              ),
            ),
            child: content,
          ),
        ],
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hint,
    int maxLines = 1,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(8),
      ),
      child: TextField(
        controller: controller,
        maxLines: maxLines,
        style: const TextStyle(color: Colors.black87, fontSize: 16),
        decoration: InputDecoration(
          hintText: hint,
          hintStyle: const TextStyle(color: Colors.black54, fontSize: 15),
          contentPadding: const EdgeInsets.all(12),
          border: InputBorder.none,
          counterText: maxLines > 1 ? '${controller.text.length} caractÃ¨res' : null,
          counterStyle: const TextStyle(color: Colors.black54, fontSize: 12),
        ),
        onChanged: maxLines > 1 ? (value) => setState(() {}) : null,
      ),
    );
  }
}

// âœ… SÃ©lecteur de zones corporelles amÃ©liorÃ©
class ImprovedBodyZoneSelector extends StatefulWidget {
  final List<String> selectedZones;
  final Function(List<String>) onZonesSelected;

  const ImprovedBodyZoneSelector({
    Key? key,
    required this.selectedZones,
    required this.onZonesSelected,
  }) : super(key: key);

  @override
  State<ImprovedBodyZoneSelector> createState() => _ImprovedBodyZoneSelectorState();
}

class _ImprovedBodyZoneSelectorState extends State<ImprovedBodyZoneSelector> 
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final Set<String> _selectedZones = <String>{};

  // âœ… Zones anatomiques prÃ©cises et rÃ©alistes
  final Map<String, Map<String, dynamic>> _bodyZones = {
    // Face avant
    'front': {
      'title': 'Face avant',
      'zones': [
        {'name': 'Visage', 'x': 0.5, 'y': 0.1, 'width': 0.12, 'height': 0.08},
        {'name': 'Cou', 'x': 0.5, 'y': 0.18, 'width': 0.08, 'height': 0.06},
        {'name': 'Ã‰paule gauche', 'x': 0.25, 'y': 0.24, 'width': 0.12, 'height': 0.08},
        {'name': 'Ã‰paule droite', 'x': 0.75, 'y': 0.24, 'width': 0.12, 'height': 0.08},
        {'name': 'Poitrine', 'x': 0.5, 'y': 0.32, 'width': 0.2, 'height': 0.12},
        {'name': 'Bras gauche', 'x': 0.18, 'y': 0.38, 'width': 0.08, 'height': 0.15},
        {'name': 'Bras droit', 'x': 0.82, 'y': 0.38, 'width': 0.08, 'height': 0.15},
        {'name': 'Abdomen', 'x': 0.5, 'y': 0.44, 'width': 0.16, 'height': 0.12},
        {'name': 'Avant-bras gauche', 'x': 0.15, 'y': 0.53, 'width': 0.06, 'height': 0.15},
        {'name': 'Avant-bras droit', 'x': 0.85, 'y': 0.53, 'width': 0.06, 'height': 0.15},
        {'name': 'Bassin', 'x': 0.5, 'y': 0.56, 'width': 0.14, 'height': 0.08},
        {'name': 'Main gauche', 'x': 0.12, 'y': 0.68, 'width': 0.05, 'height': 0.06},
        {'name': 'Main droite', 'x': 0.88, 'y': 0.68, 'width': 0.05, 'height': 0.06},
        {'name': 'Cuisse gauche', 'x': 0.42, 'y': 0.64, 'width': 0.08, 'height': 0.18},
        {'name': 'Cuisse droite', 'x': 0.58, 'y': 0.64, 'width': 0.08, 'height': 0.18},
        {'name': 'Genou gauche', 'x': 0.42, 'y': 0.82, 'width': 0.06, 'height': 0.04},
        {'name': 'Genou droit', 'x': 0.58, 'y': 0.82, 'width': 0.06, 'height': 0.04},
        {'name': 'Tibia gauche', 'x': 0.42, 'y': 0.86, 'width': 0.05, 'height': 0.12},
        {'name': 'Tibia droit', 'x': 0.58, 'y': 0.86, 'width': 0.05, 'height': 0.12},
        {'name': 'Pied gauche', 'x': 0.42, 'y': 0.98, 'width': 0.06, 'height': 0.04},
        {'name': 'Pied droit', 'x': 0.58, 'y': 0.98, 'width': 0.06, 'height': 0.04},
      ],
    },
    // Face arriÃ¨re
    'back': {
      'title': 'Face arriÃ¨re',
      'zones': [
        {'name': 'CrÃ¢ne', 'x': 0.5, 'y': 0.1, 'width': 0.12, 'height': 0.08},
        {'name': 'Nuque', 'x': 0.5, 'y': 0.18, 'width': 0.08, 'height': 0.06},
        {'name': 'Ã‰paule gauche', 'x': 0.25, 'y': 0.24, 'width': 0.12, 'height': 0.08},
        {'name': 'Ã‰paule droite', 'x': 0.75, 'y': 0.24, 'width': 0.12, 'height': 0.08},
        {'name': 'Haut du dos', 'x': 0.5, 'y': 0.32, 'width': 0.2, 'height': 0.08},
        {'name': 'Omoplate gauche', 'x': 0.35, 'y': 0.36, 'width': 0.08, 'height': 0.08},
        {'name': 'Omoplate droite', 'x': 0.65, 'y': 0.36, 'width': 0.08, 'height': 0.08},
        {'name': 'Milieu du dos', 'x': 0.5, 'y': 0.44, 'width': 0.16, 'height': 0.08},
        {'name': 'Bas du dos', 'x': 0.5, 'y': 0.52, 'width': 0.14, 'height': 0.08},
        {'name': 'Fesse gauche', 'x': 0.42, 'y': 0.6, 'width': 0.08, 'height': 0.08},
        {'name': 'Fesse droite', 'x': 0.58, 'y': 0.6, 'width': 0.08, 'height': 0.08},
        {'name': 'Cuisse gauche (arriÃ¨re)', 'x': 0.42, 'y': 0.68, 'width': 0.08, 'height': 0.16},
        {'name': 'Cuisse droite (arriÃ¨re)', 'x': 0.58, 'y': 0.68, 'width': 0.08, 'height': 0.16},
        {'name': 'Mollet gauche', 'x': 0.42, 'y': 0.84, 'width': 0.06, 'height': 0.12},
        {'name': 'Mollet droit', 'x': 0.58, 'y': 0.84, 'width': 0.06, 'height': 0.12},
        {'name': 'Talon gauche', 'x': 0.42, 'y': 0.96, 'width': 0.05, 'height': 0.04},
        {'name': 'Talon droit', 'x': 0.58, 'y': 0.96, 'width': 0.05, 'height': 0.04},
      ],
    },
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _selectedZones.addAll(widget.selectedZones);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  void _toggleZone(String zoneName) {
    setState(() {
      if (_selectedZones.contains(zoneName)) {
        _selectedZones.remove(zoneName);
      } else {
        _selectedZones.add(zoneName);
      }
      widget.onZonesSelected(_selectedZones.toList());
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Tabs pour face avant/arriÃ¨re
        Container(
          decoration: BoxDecoration(
            color: KipikTheme.rouge.withOpacity(0.7),
            borderRadius: const BorderRadius.only(
              topLeft: Radius.circular(8),
              topRight: Radius.circular(8),
            ),
          ),
          child: TabBar(
            controller: _tabController,
            tabs: const [
              Tab(text: 'FACE AVANT'),
              Tab(text: 'FACE ARRIÃˆRE'),
            ],
            labelColor: Colors.white,
            unselectedLabelColor: Colors.white70,
            indicatorColor: Colors.white,
          ),
        ),
        
        // Contenu des tabs avec silhouettes amÃ©liorÃ©es
        Expanded(
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.3),
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(8),
                bottomRight: Radius.circular(8),
              ),
            ),
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildBodySilhouette('front'),
                _buildBodySilhouette('back'),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildBodySilhouette(String view) {
    final viewData = _bodyZones[view]!;
    final zones = viewData['zones'] as List<Map<String, dynamic>>;

    return Container(
      padding: const EdgeInsets.all(16),
      child: Stack(
        children: [
          // âœ… Silhouette de base avec CustomPainter
          Center(
            child: Container(
              width: 200,
              height: 400,
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(100),
                border: Border.all(color: Colors.white.withOpacity(0.3), width: 2),
              ),
              child: CustomPaint(
                painter: BodySilhouettePainter(view: view),
                size: const Size(200, 400),
              ),
            ),
          ),
          
          // âœ… Zones cliquables superposÃ©es
          ...zones.map((zone) {
            final isSelected = _selectedZones.contains(zone['name']);
            return Positioned(
              left: (zone['x'] as double) * 200 - (zone['width'] as double) * 100,
              top: (zone['y'] as double) * 400 - (zone['height'] as double) * 200,
              child: GestureDetector(
                onTap: () => _toggleZone(zone['name']),
                child: Container(
                  width: (zone['width'] as double) * 200,
                  height: (zone['height'] as double) * 200,
                  decoration: BoxDecoration(
                    color: isSelected 
                        ? KipikTheme.rouge.withOpacity(0.7)
                        : Colors.transparent,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(
                      color: isSelected 
                          ? Colors.white 
                          : Colors.white.withOpacity(0.3),
                      width: isSelected ? 2 : 1,
                    ),
                  ),
                  child: isSelected
                      ? const Center(
                          child: Icon(
                            Icons.check,
                            color: Colors.white,
                            size: 16,
                          ),
                        )
                      : null,
                ),
              ),
            );
          }).toList(),
          
          // âœ… LÃ©gende des zones sÃ©lectionnÃ©es
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                _selectedZones.isEmpty 
                    ? 'Touchez les zones pour les sÃ©lectionner'
                    : '${_selectedZones.length} zone${_selectedZones.length > 1 ? 's' : ''} sÃ©lectionnÃ©e${_selectedZones.length > 1 ? 's' : ''}',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// âœ… Painter pour dessiner les silhouettes
class BodySilhouettePainter extends CustomPainter {
  final String view;

  BodySilhouettePainter({required this.view});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.white.withOpacity(0.2)
      ..style = PaintingStyle.fill;

    final outlinePaint = Paint()
      ..color = Colors.white.withOpacity(0.5)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2;

    if (view == 'front') {
      _drawFrontSilhouette(canvas, size, paint, outlinePaint);
    } else {
      _drawBackSilhouette(canvas, size, paint, outlinePaint);
    }
  }

  void _drawFrontSilhouette(Canvas canvas, Size size, Paint fillPaint, Paint outlinePaint) {
    final path = Path();
    final centerX = size.width / 2;
    
    // TÃªte (cercle)
    canvas.drawCircle(
      Offset(centerX, size.height * 0.1),
      size.width * 0.06,
      fillPaint,
    );
    canvas.drawCircle(
      Offset(centerX, size.height * 0.1),
      size.width * 0.06,
      outlinePaint,
    );
    
    // Corps principal
    path.moveTo(centerX, size.height * 0.16); // Cou
    
    // Ã‰paules
    path.lineTo(centerX - size.width * 0.15, size.height * 0.24);
    path.lineTo(centerX - size.width * 0.2, size.height * 0.32);
    
    // Bras gauche
    path.lineTo(centerX - size.width * 0.22, size.height * 0.55);
    path.lineTo(centerX - size.width * 0.18, size.height * 0.68);
    path.lineTo(centerX - size.width * 0.15, size.height * 0.66);
    path.lineTo(centerX - size.width * 0.12, size.height * 0.52);
    
    // Torse gauche
    path.lineTo(centerX - size.width * 0.1, size.height * 0.44);
    path.lineTo(centerX - size.width * 0.08, size.height * 0.56);
    
    // Jambe gauche
    path.lineTo(centerX - size.width * 0.06, size.height * 0.64);
    path.lineTo(centerX - size.width * 0.05, size.height * 0.82);
    path.lineTo(centerX - size.width * 0.04, size.height * 0.98);
    path.lineTo(centerX - size.width * 0.01, size.height * 0.98);
    path.lineTo(centerX, size.height * 0.82);
    
    // Milieu
    path.lineTo(centerX, size.height * 0.64);
    path.lineTo(centerX, size.height * 0.82);
    
    // Jambe droite (symÃ©trique)
    path.lineTo(centerX + size.width * 0.01, size.height * 0.98);
    path.lineTo(centerX + size.width * 0.04, size.height * 0.98);
    path.lineTo(centerX + size.width * 0.05, size.height * 0.82);
    path.lineTo(centerX + size.width * 0.06, size.height * 0.64);
    
    // Torse droit
    path.lineTo(centerX + size.width * 0.08, size.height * 0.56);
    path.lineTo(centerX + size.width * 0.1, size.height * 0.44);
    
    // Bras droit
    path.lineTo(centerX + size.width * 0.12, size.height * 0.52);
    path.lineTo(centerX + size.width * 0.15, size.height * 0.66);
    path.lineTo(centerX + size.width * 0.18, size.height * 0.68);
    path.lineTo(centerX + size.width * 0.22, size.height * 0.55);
    path.lineTo(centerX + size.width * 0.2, size.height * 0.32);
    
    // Ã‰paule droite
    path.lineTo(centerX + size.width * 0.15, size.height * 0.24);
    path.lineTo(centerX, size.height * 0.16);
    
    path.close();
    
    canvas.drawPath(path, fillPaint);
    canvas.drawPath(path, outlinePaint);
  }

  void _drawBackSilhouette(Canvas canvas, Size size, Paint fillPaint, Paint outlinePaint) {
    // Similaire Ã  la face avant mais avec quelques diffÃ©rences pour le dos
    final path = Path();
    final centerX = size.width / 2;
    
    // TÃªte
    canvas.drawCircle(
      Offset(centerX, size.height * 0.1),
      size.width * 0.06,
      fillPaint,
    );
    canvas.drawCircle(
      Offset(centerX, size.height * 0.1),
      size.width * 0.06,
      outlinePaint,
    );
    
    // Corps (similaire mais lÃ©gÃ¨rement diffÃ©rent pour le dos)
    path.moveTo(centerX, size.height * 0.16);
    path.lineTo(centerX - size.width * 0.15, size.height * 0.24);
    path.lineTo(centerX - size.width * 0.2, size.height * 0.32);
    path.lineTo(centerX - size.width * 0.22, size.height * 0.55);
    path.lineTo(centerX - size.width * 0.18, size.height * 0.68);
    path.lineTo(centerX - size.width * 0.15, size.height * 0.66);
    path.lineTo(centerX - size.width * 0.12, size.height * 0.52);
    path.lineTo(centerX - size.width * 0.1, size.height * 0.44);
    path.lineTo(centerX - size.width * 0.08, size.height * 0.56);
    path.lineTo(centerX - size.width * 0.06, size.height * 0.64);
    path.lineTo(centerX - size.width * 0.05, size.height * 0.82);
    path.lineTo(centerX - size.width * 0.04, size.height * 0.98);
    path.lineTo(centerX + size.width * 0.04, size.height * 0.98);
    path.lineTo(centerX + size.width * 0.05, size.height * 0.82);
    path.lineTo(centerX + size.width * 0.06, size.height * 0.64);
    path.lineTo(centerX + size.width * 0.08, size.height * 0.56);
    path.lineTo(centerX + size.width * 0.1, size.height * 0.44);
    path.lineTo(centerX + size.width * 0.12, size.height * 0.52);
    path.lineTo(centerX + size.width * 0.15, size.height * 0.66);
    path.lineTo(centerX + size.width * 0.18, size.height * 0.68);
    path.lineTo(centerX + size.width * 0.22, size.height * 0.55);
    path.lineTo(centerX + size.width * 0.2, size.height * 0.32);
    path.lineTo(centerX + size.width * 0.15, size.height * 0.24);
    path.lineTo(centerX, size.height * 0.16);
    path.close();
    
    canvas.drawPath(path, fillPaint);
    canvas.drawPath(path, outlinePaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

// âœ… Service IA conservÃ©
class IaGenerationService {
  static final IaGenerationService _instance = IaGenerationService._internal();
  static IaGenerationService get instance => _instance;
  
  final StreamController<String> _imageController = StreamController<String>.broadcast();
  Stream<String> get onImageGenerated => _imageController.stream;
  
  IaGenerationService._internal();
  
  void ajouterImage(String imageUrl) {
    _imageController.add(imageUrl);
  }
  
  void dispose() {
    _imageController.close();
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\detail_devis_page.dart

// lib/pages/particulier/detail_devis_page.dart
import 'package:flutter/material.dart';
import '../../theme/kipik_theme.dart';
import 'mes_devis_page.dart'; // pour le modÃ¨le Devis et StatutDevis

class DetailDevisPage extends StatelessWidget {
  final Devis devis;
  const DetailDevisPage({ required this.devis, Key? key }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: Text(
          '${devis.id} â€“ ${devis.userLastName}_${devis.userFirstName}',
          style: const TextStyle(fontFamily: 'PermanentMarker', fontSize: 20),
        ),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _sectionTitle('TATTOEUR'),
            Text(devis.tattooerName,
                style: const TextStyle(color: Colors.white70, fontSize: 18)),

            const SizedBox(height: 16),
            _sectionTitle('DÃ‰TAILS DU DEVIS'),
            _infoRow('Date de la demande',
                '${devis.date.day}/${devis.date.month}/${devis.date.year}'),
            _infoRow('Montant estimÃ©', '${devis.montant.toStringAsFixed(2)} â‚¬'),
            _infoRow('Statut', devis.statut.label,
                valueColor: devis.statut.color),

            const SizedBox(height: 16),
            _sectionTitle('PLANIFICATION'),
            // Tu peux Ã©tendre ton modÃ¨le Devis pour y inclure ces champs :
            _infoRow('Date de rÃ©alisation', 'Ã  dÃ©finir'),
            _infoRow('DurÃ©e estimÃ©e', '2 heures'),
            _infoRow('Nombre dâ€™heures', '2'),

            const SizedBox(height: 16),
            _sectionTitle('COMMENTAIRES DU TATOUEUR'),
            const Text(
              'Le tatoueur devra prÃ©ciser ici les informations supplÃ©mentaires ou validations.',
              style: TextStyle(color: Colors.white70),
            ),

            const SizedBox(height: 24),
            Center(
              child: ElevatedButton(
                onPressed: () => Navigator.pop(context),
                style: ElevatedButton.styleFrom(backgroundColor: KipikTheme.rouge),
                child: const Text(
                  'Retour',
                  style: TextStyle(color: Colors.white),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }

  Widget _sectionTitle(String text) {
    return Text(text,
        style: const TextStyle(
            color: Colors.white, fontSize: 16, fontWeight: FontWeight.bold));
  }

  Widget _infoRow(String label, String value, {Color? valueColor}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        children: [
          Expanded(
              flex: 3,
              child: Text(label,
                  style: const TextStyle(color: Colors.white70, fontSize: 14))),
          Expanded(
              flex: 5,
              child: Text(value,
                  style: TextStyle(
                      color: valueColor ?? Colors.white, fontSize: 14))),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\detail_projet_particulier_page.dart

// lib/pages/particulier/detail_projet_particulier_page.dart - Version corrigÃ©e

import 'package:flutter/material.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../widgets/utils/facture_widget.dart';
import '../../models/facture.dart';
import '../particulier/document_item.dart'; // Import du widget corrigÃ©
import 'dart:math';

class DetailProjetParticulierPage extends StatefulWidget {
  final String projetId;
  final bool enCours;
  // Ajouter un callback pour retourner Ã  la page prÃ©cÃ©dente
  final VoidCallback? onBack;

  const DetailProjetParticulierPage({
    Key? key,
    required this.projetId,
    required this.enCours,
    this.onBack,
  }) : super(key: key);

  @override
  State<DetailProjetParticulierPage> createState() => _DetailProjetParticulierPageState();
}

class _DetailProjetParticulierPageState extends State<DetailProjetParticulierPage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  late final String _bg;
  Map<String, dynamic>? _projet;

  // DonnÃ©es fictives des projets (serait normalement rÃ©cupÃ©rÃ©es d'une base de donnÃ©es)
  final Map<String, Map<String, dynamic>> _projetsData = {
    '1': {
      'id': '1',
      'titre': 'Mandala sur l\'Ã©paule',
      'tatoueur': 'Marie Lefevre',
      'studio': 'Dark Ink',
      'avatar': 'assets/avatars/tatoueur2.jpg',
      'date_debut': '15/04/2025',
      'prochainRdv': '25/05/2025',
      'statusRdv': 'ConfirmÃ©',
      'nbSeances': 2,
      'seancesTerminees': 0,
      'montantDevis': '350â‚¬',
      'typePreRdv': 'En physique',
      'preRdvEffectue': true,
      'status': 'Projet validÃ©',
      'couverture': 'assets/background1.png',
      'description': 'Mandala gÃ©omÃ©trique sur l\'Ã©paule droite, style blackwork avec possibilitÃ© d\'ombres grises.',
      'taille': '20 cm de diamÃ¨tre',
      'emplacement': 'Ã‰paule droite',
      'date_devis': '10/04/2025',
      'chat': [
        {
          'expediteur': 'tatoueur',
          'message': 'Bonjour, j\'ai prÃ©parÃ© le design selon vos indications. Qu\'en pensez-vous ?',
          'date': '12/04/2025',
          'heure': '14:30',
          'image': 'assets/background1.png',
        },
        {
          'expediteur': 'client',
          'message': 'J\'adore ! Est-ce qu\'on pourrait juste accentuer un peu plus la partie centrale ?',
          'date': '12/04/2025',
          'heure': '15:45',
        },
        {
          'expediteur': 'tatoueur',
          'message': 'Bien sÃ»r, je vais modifier Ã§a et vous envoyer une nouvelle version.',
          'date': '12/04/2025',
          'heure': '16:20',
        },
        {
          'expediteur': 'tatoueur',
          'message': 'Voici la version modifiÃ©e avec la partie centrale plus dÃ©taillÃ©e.',
          'date': '13/04/2025',
          'heure': '10:15',
          'image': 'assets/background4.png',
        },
        {
          'expediteur': 'client',
          'message': 'Parfait ! C\'est exactement ce que je voulais !',
          'date': '13/04/2025',
          'heure': '11:30',
        },
        {
          'expediteur': 'tatoueur',
          'message': 'Super ! Je viens de vous envoyer la fiche de soins et la fiche de dÃ©charge Ã  signer avant notre rendez-vous.',
          'date': '14/04/2025',
          'heure': '09:45',
          'document': 'Fiche de soins.pdf',
        },
        {
          'expediteur': 'tatoueur',
          'message': 'Et voici Ã©galement la fiche de dÃ©charge.',
          'date': '14/04/2025',
          'heure': '09:46',
          'document': 'Fiche de dÃ©charge.pdf',
        },
        {
          'expediteur': 'client',
          'message': 'Merci, je les ai signÃ©es et renvoyÃ©es. J\'ai quelques questions sur le dessin...',
          'date': '10/05/2025',
          'heure': '14:22',
        },
      ],
      'documents': [
        {
          'nom': 'Devis_Mandala_MLefevre.pdf',
          'type': 'Devis',
          'date': '10/04/2025',
          'taille': '125 Ko',
          'signÃ©': true,
        },
        {
          'nom': 'Fiche_de_soins.pdf',
          'type': 'Fiche de soins',
          'date': '14/04/2025',
          'taille': '250 Ko',
          'signÃ©': true,
        },
        {
          'nom': 'Fiche_de_dÃ©charge.pdf',
          'type': 'Fiche de dÃ©charge',
          'date': '14/04/2025',
          'taille': '180 Ko',
          'signÃ©': true,
        },
      ],
      'rendezVous': [
        {
          'type': 'PrÃ©-rendez-vous',
          'date': '20/04/2025',
          'heure': '14:00',
          'durÃ©e': '30 minutes',
          'mode': 'En physique',
          'statut': 'EffectuÃ©',
          'notes': 'Discussion sur le design final et prise de mesures',
        },
        {
          'type': 'SÃ©ance de tatouage #1',
          'date': '25/05/2025',
          'heure': '10:00',
          'durÃ©e': '3 heures',
          'mode': 'En physique',
          'statut': 'ConfirmÃ©',
          'notes': 'PremiÃ¨re sÃ©ance, contours et dÃ©but d\'ombres',
        },
        {
          'type': 'SÃ©ance de tatouage #2',
          'date': 'Ã€ dÃ©finir',
          'heure': 'Ã€ dÃ©finir',
          'durÃ©e': '2 heures',
          'mode': 'En physique',
          'statut': 'Ã€ programmer',
          'notes': 'Finition et dÃ©tails',
        },
      ],
      'photos': [
        {
          'titre': 'Design initial',
          'date': '12/04/2025',
          'url': 'assets/background1.png',
          'description': 'PremiÃ¨re proposition de design',
        },
        {
          'titre': 'Design final',
          'date': '13/04/2025',
          'url': 'assets/background4.png',
          'description': 'Version finale avec partie centrale retravaillÃ©e',
        },
      ],
    },
    // Les autres projets...
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
    _bg = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ][Random().nextInt(4)];
    
    // RÃ©cupÃ©rer les donnÃ©es du projet
    _projet = _projetsData[widget.projetId];
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_projet == null) {
      return Scaffold(
        appBar: const CustomAppBarParticulier(
          title: 'DÃ©tail du projet',
          showBackButton: true,
        ),
        body: const Center(
          child: Text('Projet non trouvÃ©', style: TextStyle(color: Colors.white)),
        ),
      );
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: CustomAppBarParticulier(
        title: _projet!['titre'],
        showBackButton: true,
        showNotificationIcon: true,
        // Utiliser le callback onBack s'il est fourni
        onBackButtonPressed: widget.onBack,
      ),
      floatingActionButton: widget.enCours 
        ? const TattooAssistantButton(allowImageGeneration: false)
        : null,
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond d'Ã©cran
          Image.asset(_bg, fit: BoxFit.cover),
          
          // Contenu principal
          SafeArea(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  // En-tÃªte du projet
                  _buildProjetHeader(),
                  
                  // TabBar personnalisÃ©
                  Container(
                    margin: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.7),
                      borderRadius: BorderRadius.circular(30),
                      border: Border.all(color: KipikTheme.rouge, width: 2),
                    ),
                    child: TabBar(
                      controller: _tabController,
                      indicator: BoxDecoration(
                        color: KipikTheme.rouge,
                        borderRadius: BorderRadius.circular(30),
                      ),
                      labelColor: Colors.white,
                      unselectedLabelColor: Colors.white70,
                      labelStyle: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 14,
                      ),
                      isScrollable: true,
                      tabs: [
                        Tab(text: widget.enCours ? 'Chat' : 'RÃ©sumÃ©'),
                        const Tab(text: 'Photos'),
                        const Tab(text: 'Rendez-vous'),
                        const Tab(text: 'Documents'),
                        const Tab(text: 'DÃ©tails'),
                      ],
                    ),
                  ),
                  
                  // Contenu des onglets
                  SizedBox(
                    // Hauteur fixe pour les onglets, permettant le dÃ©filement dans chaque onglet
                    height: MediaQuery.of(context).size.height * 0.6,
                    child: TabBarView(
                      controller: _tabController,
                      children: [
                        // Onglet "Chat" ou "RÃ©sumÃ©"
                        widget.enCours ? _buildChat() : _buildResume(),
                        
                        // Onglet "Photos"
                        _buildPhotos(),
                        
                        // Onglet "Rendez-vous"
                        _buildRendezVous(),
                        
                        // Onglet "Documents"
                        _buildDocuments(),
                        
                        // Onglet "DÃ©tails"
                        _buildDetails(),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // En-tÃªte du projet
  Widget _buildProjetHeader() {
    return Container(
      margin: const EdgeInsets.fromLTRB(16, 16, 16, 0),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.7),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: _getStatusColor(_projet!['status']), width: 2),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Titre et statut
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _projet!['titre'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontFamily: 'PermanentMarker',
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _projet!['description'],
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                decoration: BoxDecoration(
                  color: _getStatusColor(_projet!['status']),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Text(
                  _projet!['status'],
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Informations tatoueur
          Row(
            children: [
              CircleAvatar(
                radius: 24,
                backgroundImage: AssetImage(_projet!['avatar']),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _projet!['tatoueur'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      _projet!['studio'],
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              
              // Afficher la note pour les projets terminÃ©s
              if (!widget.enCours && _projet!.containsKey('noteTatoueur'))
                Column(
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Row(
                      children: [
                        const Icon(Icons.star, color: Colors.amber, size: 20),
                        const SizedBox(width: 4),
                        Text(
                          '${_projet!['noteTatoueur']}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    Text(
                      'Projet terminÃ©',
                      style: TextStyle(
                        color: _getStatusColor(_projet!['status']),
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          // Dates et informations clÃ©s
          Row(
            children: [
              // Dates
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'PÃ©riode',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 12,
                      ),
                    ),
                    Text(
                      widget.enCours
                          ? 'Depuis le ${_projet!['date_debut']}'
                          : '${_projet!['date_debut']} - ${_projet!['date_fin']}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              
              // Montant ou sÃ©ances
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.enCours ? 'Devis' : 'Montant final',
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 12,
                      ),
                    ),
                    Text(
                      widget.enCours
                          ? _projet!['montantDevis']
                          : _projet!['montantFinal'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              
              // SÃ©ances
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'SÃ©ances',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 12,
                      ),
                    ),
                    Text(
                      '${_projet!['seancesTerminees']}/${_projet!['nbSeances']}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // Onglet Chat (pour les projets en cours)
  Widget _buildChat() {
    final List chatMessages = _projet!['chat'] ?? [];
    
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.7),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: [
          // En-tÃªte du chat
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.7),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                CircleAvatar(
                  radius: 20,
                  backgroundImage: AssetImage(_projet!['avatar']),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _projet!['tatoueur'],
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const Text(
                        'Chat disponible jusqu\'Ã  la fin du projet',
                        style: TextStyle(
                          color: Colors.white70,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          // Messages
          Expanded(
            child: chatMessages.isEmpty
                ? const Center(
                    child: Text(
                      'Aucun message pour le moment',
                      style: TextStyle(color: Colors.white70),
                    ),
                  )
                : ListView.builder(
                    padding: const EdgeInsets.all(16),
                    itemCount: chatMessages.length,
                    itemBuilder: (context, index) {
                      final message = chatMessages[index];
                      final bool isClient = message['expediteur'] == 'client';
                      
                      return Align(
                        alignment: isClient
                            ? Alignment.centerRight
                            : Alignment.centerLeft,
                        child: Container(
                          margin: const EdgeInsets.only(bottom: 16),
                          constraints: BoxConstraints(
                            maxWidth: MediaQuery.of(context).size.width * 0.75,
                          ),
                          child: Column(
                            crossAxisAlignment: isClient
                                ? CrossAxisAlignment.end
                                : CrossAxisAlignment.start,
                            children: [
                              // Info expÃ©diteur et date
                              Padding(
                                padding: EdgeInsets.only(
                                  left: isClient ? 0 : 12,
                                  right: isClient ? 12 : 0,
                                  bottom: 4,
                                ),
                                child: Text(
                                  '${isClient ? 'Vous' : _projet!['tatoueur']} - ${message['date']} ${message['heure']}',
                                  style: const TextStyle(
                                    color: Colors.white54,
                                    fontSize: 12,
                                  ),
                                ),
                              ),
                              
                              // Bulle de message
                              Container(
                                padding: const EdgeInsets.all(12),
                                decoration: BoxDecoration(
                                  color: isClient
                                      ? KipikTheme.rouge.withOpacity(0.7)
                                      : Colors.grey[800],
                                  borderRadius: BorderRadius.circular(16),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.1),
                                      blurRadius: 4,
                                      offset: const Offset(0, 2),
                                    ),
                                  ],
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    // Texte du message
                                    Text(
                                      message['message'],
                                      style: const TextStyle(
                                        color: Colors.white,
                                        fontSize: 14,
                                      ),
                                    ),
                                    
                                    // Image si prÃ©sente
                                    if (message['image'] != null)
                                      Padding(
                                        padding: const EdgeInsets.only(top: 8),
                                        child: ClipRRect(
                                          borderRadius: BorderRadius.circular(8),
                                          child: Image.asset(
                                            message['image'],
                                            height: 150,
                                            width: double.infinity,
                                            fit: BoxFit.cover,
                                          ),
                                        ),
                                      ),
                                    
                                    // Document si prÃ©sent
                                    if (message['document'] != null)
                                      Padding(
                                        padding: const EdgeInsets.only(top: 8),
                                        child: Container(
                                          padding: const EdgeInsets.all(8),
                                          decoration: BoxDecoration(
                                            color: Colors.white.withOpacity(0.1),
                                            borderRadius: BorderRadius.circular(8),
                                          ),
                                          child: Row(
                                            children: [
                                              const Icon(
                                                Icons.insert_drive_file,
                                                color: Colors.white70,
                                                size: 24,
                                              ),
                                              const SizedBox(width: 8),
                                              Expanded(
                                                child: Text(
                                                  message['document'],
                                                  style: const TextStyle(
                                                    color: Colors.white,
                                                    fontSize: 14,
                                                  ),
                                                ),
                                              ),
                                              const Icon(
                                                Icons.download,
                                                color: Colors.white70,
                                                size: 20,
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
          ),
          
          // Zone de saisie
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.8),
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(16),
                bottomRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.attach_file, color: Colors.white70),
                  onPressed: () {
                    // Logic pour joindre un fichier
                  },
                ),
                IconButton(
                  icon: const Icon(Icons.photo, color: Colors.white70),
                  onPressed: () {
                    // Logic pour joindre une photo
                  },
                ),
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(
                      hintText: 'Ã‰crivez votre message...',
                      hintStyle: const TextStyle(color: Colors.white54),
                      filled: true,
                      fillColor: Colors.grey[800],
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 10,
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(24),
                        borderSide: BorderSide.none,
                      ),
                    ),
                    style: const TextStyle(color: Colors.white),
                  ),
                ),
                const SizedBox(width: 8),
                CircleAvatar(
                  backgroundColor: KipikTheme.rouge,
                  child: IconButton(
                    icon: const Icon(Icons.send, color: Colors.white),
                    onPressed: () {
                      // Logic pour envoyer le message
                    },
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Onglet RÃ©sumÃ© (pour les projets terminÃ©s)
  Widget _buildResume() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Carte de rÃ©sumÃ©
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.7),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: Colors.green, width: 2),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'RÃ©sumÃ© du projet',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                const SizedBox(height: 16),
                
                // Informations principales
                _buildInfoRow('Titre', _projet!['titre']),
                _buildInfoRow('Style', _projet!['description'].split(',')[0]),
                _buildInfoRow('Emplacement', _projet!['emplacement']),
                _buildInfoRow('Taille', _projet!['taille']),
                _buildInfoRow('Nombre de sÃ©ances', '${_projet!['nbSeances']}'),
                _buildInfoRow('Montant final', _projet!['montantFinal']),
                _buildInfoRow('Date de dÃ©but', _projet!['date_debut']),
                _buildInfoRow('Date de fin', _projet!['date_fin']),
                
                const Divider(color: Colors.white24, height: 32),
                
                // Commentaire et note
                const Text(
                  'Votre avis',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    const Icon(Icons.star, color: Colors.amber, size: 20),
                    const SizedBox(width: 4),
                    Text(
                      '${_projet!['noteTatoueur']}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Text(
                        _projet!['commentaire'] ?? '',
                        style: const TextStyle(
                          color: Colors.white70,
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Photos du rÃ©sultat final
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.7),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Photos finales',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                const SizedBox(height: 16),
                
                SizedBox(
                  height: 200,
                  child: _projet!.containsKey('photos') && _projet!['photos'].isNotEmpty
                    ? ListView.builder(
                        scrollDirection: Axis.horizontal,
                        itemCount: _projet!['photos'].length,
                        itemBuilder: (context, index) {
                          final photo = _projet!['photos'][index];
                          return Container(
                            margin: const EdgeInsets.only(right: 12),
                            width: 160,
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Stack(
                                fit: StackFit.expand,
                                children: [
                                  Image.asset(
                                    photo['url'],
                                    fit: BoxFit.cover,
                                  ),
                                  Positioned(
                                    bottom: 0,
                                    left: 0,
                                    right: 0,
                                    child: Container(
                                      padding: const EdgeInsets.all(8),
                                      decoration: BoxDecoration(
                                        gradient: LinearGradient(
                                          begin: Alignment.bottomCenter,
                                          end: Alignment.topCenter,
                                          colors: [
                                            Colors.black.withOpacity(0.7),
                                            Colors.transparent,
                                          ],
                                        ),
                                      ),
                                      child: Text(
                                        photo['titre'],
                                        style: const TextStyle(
                                          color: Colors.white,
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                        ),
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      )
                    : const Center(
                        child: Text(
                          'Aucune photo disponible',
                          style: TextStyle(color: Colors.white70),
                        ),
                      ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Documents importants
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.7),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Documents principaux',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                const SizedBox(height: 16),
                
                // Liste des documents importants (devis, facture)
                _projet!.containsKey('documents') && _projet!['documents'].isNotEmpty
                  ? ListView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemCount: _projet!['documents'].length,
                      itemBuilder: (context, index) {
                        final document = _projet!['documents'][index];
                        return ListTile(
                          contentPadding: EdgeInsets.zero,
                          leading: Icon(
                            document['type'] == 'Facture'
                                ? Icons.receipt_long
                                : Icons.insert_drive_file,
                            color: document['type'] == 'Facture'
                                ? Colors.green
                                : Colors.white70,
                          ),
                          title: Text(
                            document['nom'],
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                          subtitle: Text(
                            '${document['type']} - ${document['date']}',
                            style: const TextStyle(
                              color: Colors.white54,
                              fontSize: 12,
                            ),
                          ),
                          trailing: IconButton(
                            icon: const Icon(
                              Icons.download,
                              color: Colors.white70,
                            ),
                            onPressed: () {
                              // Logique pour tÃ©lÃ©charger le document
                            },
                          ),
                        );
                      },
                    )
                  : const Center(
                      child: Text(
                        'Aucun document disponible',
                        style: TextStyle(color: Colors.white70),
                      ),
                    ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Onglet Photos  
  Widget _buildPhotos() {
    final List photos = _projet!['photos'] ?? [];
    
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.7),
        borderRadius: BorderRadius.circular(16),
      ),
      child: photos.isEmpty
          ? const Center(
              child: Text(
                'Aucune photo disponible',
                style: TextStyle(color: Colors.white70),
              ),
            )
          : GridView.builder(
              padding: const EdgeInsets.all(16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.75,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: photos.length,
              itemBuilder: (context, index) {
                final photo = photos[index];
                return GestureDetector(
                  onTap: () {
                    // Logic pour afficher la photo en plein Ã©cran
                    showDialog(
                      context: context,
                      builder: (ctx) => Dialog(
                        backgroundColor: Colors.transparent,
                        insetPadding: EdgeInsets.zero,
                        child: Stack(
                          alignment: Alignment.center,
                          children: [
                            InteractiveViewer(
                              child: Image.asset(
                                photo['url'],
                                fit: BoxFit.contain,
                              ),
                            ),
                            Positioned(
                              top: 40,
                              right: 16,
                              child: CircleAvatar(
                                backgroundColor: Colors.black45,
                                child: IconButton(
                                  icon: const Icon(Icons.close, color: Colors.white),
                                  onPressed: () => Navigator.pop(ctx),
                                ),
                              ),
                            ),
                            Positioned(
                              bottom: 40,
                              left: 16,
                              right: 16,
                              child: Container(
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  color: Colors.black.withOpacity(0.7),
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      photo['titre'],
                                      style: const TextStyle(
                                        color: Colors.white,
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      'Date: ${photo['date']}',
                                      style: const TextStyle(
                                        color: Colors.white70,
                                        fontSize: 14,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    Text(
                                      photo['description'] ?? '',
                                      style: const TextStyle(
                                        color: Colors.white,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: Stack(
                      fit: StackFit.expand,
                      children: [
                        Image.asset(
                          photo['url'],
                          fit: BoxFit.cover,
                        ),
                        Positioned(
                          bottom: 0,
                          left: 0,
                          right: 0,
                          child: Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                begin: Alignment.bottomCenter,
                                end: Alignment.topCenter,
                                colors: [
                                  Colors.black.withOpacity(0.7),
                                  Colors.transparent,
                                ],
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Text(
                                  photo['titre'],
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                Text(
                                  photo['date'],
                                  style: const TextStyle(
                                    color: Colors.white70,
                                    fontSize: 12,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
    );
  }

  // Onglet Rendez-vous
  Widget _buildRendezVous() {
    final List rendezVous = _projet!['rendezVous'] ?? [];
    
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.7),
        borderRadius: BorderRadius.circular(16),
      ),
      child: rendezVous.isEmpty
          ? const Center(
              child: Text(
                'Aucun rendez-vous programmÃ©',
                style: TextStyle(color: Colors.white70),
              ),
            )
          : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: rendezVous.length,
              itemBuilder: (context, index) {
                final rdv = rendezVous[index];
                final IconData icon = rdv['mode'] == 'En physique'
                    ? Icons.person
                    : rdv['mode'] == 'En distanciel'
                        ? Icons.videocam
                        : Icons.event;
                        
                final Color statusColor = rdv['statut'] == 'EffectuÃ©'
                    ? Colors.green
                    : rdv['statut'] == 'ConfirmÃ©'
                        ? Colors.blue
                        : rdv['statut'] == 'En attente'
                            ? Colors.orange
                            : rdv['statut'] == 'Ã€ venir'
                                ? Colors.purple
                                : Colors.grey;
                
                return Container(
                  margin: const EdgeInsets.only(bottom: 16),
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: statusColor.withOpacity(0.5), width: 1),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Type et statut
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              rdv['type'],
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: statusColor.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(8),
                              border: Border.all(color: statusColor, width: 1),
                            ),
                            child: Text(
                              rdv['statut'],
                              style: TextStyle(
                                color: statusColor,
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),
                      
                      const SizedBox(height: 12),
                      
                      // Date et heure
                      Row(
                        children: [
                          const Icon(Icons.event, color: Colors.white70, size: 16),
                          const SizedBox(width: 8),
                          Text(
                            '${rdv['date']} Ã  ${rdv['heure']}',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                          const SizedBox(width: 16),
                          const Icon(Icons.access_time, color: Colors.white70, size: 16),
                          const SizedBox(width: 8),
                          Text(
                            rdv['durÃ©e'],
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                      
                      const SizedBox(height: 8),
                      
                      // Mode
                      Row(
                        children: [
                          Icon(icon, color: Colors.white70, size: 16),
                          const SizedBox(width: 8),
                          Text(
                            rdv['mode'],
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                      
                      // Notes
                      if (rdv['notes'] != null && rdv['notes'].isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 12),
                          child: Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(Icons.note, color: Colors.white70, size: 16),
                                const SizedBox(width: 8),
                                Expanded(
                                  child: Text(
                                    rdv['notes'],
                                    style: const TextStyle(
                                      color: Colors.white70,
                                      fontSize: 14,
                                      fontStyle: FontStyle.italic,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      
                      // Boutons d'action (pour les RDV Ã  venir)
                      if (rdv['statut'] == 'Ã€ venir' || rdv['statut'] == 'En attente' || rdv['statut'] == 'Ã€ confirmer')
                        Padding(
                          padding: const EdgeInsets.only(top: 16),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              ElevatedButton.icon(
                                onPressed: () {
                                  // Logic pour confirmer le RDV
                                },
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.green,
                                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                ),
                                icon: const Icon(Icons.check, color: Colors.white, size: 16),
                                label: const Text('Confirmer', style: TextStyle(color: Colors.white)),
                              ),
                              const SizedBox(width: 8),
                              OutlinedButton.icon(
                                onPressed: () {
                                  // Logic pour reprogrammer le RDV
                                },
                                style: OutlinedButton.styleFrom(
                                  foregroundColor: Colors.white,
                                  side: const BorderSide(color: Colors.white),
                                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                ),
                                icon: const Icon(Icons.calendar_today, size: 16),
                                label: const Text('Reprogrammer'),
                              ),
                            ],
                          ),
                        ),
                    ],
                  ),
                );
              },
            ),
    );
  }

  // Onglet Documents
  Widget _buildDocuments() {
    final List documents = _projet!['documents'] ?? [];
    
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.7),
        borderRadius: BorderRadius.circular(16),
      ),
      child: documents.isEmpty
          ? const Center(
              child: Text(
                'Aucun document disponible',
                style: TextStyle(color: Colors.white70),
              ),
            )
          : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: documents.length + (widget.enCours ? 0 : 1), // Ajouter la facture pour les projets terminÃ©s
              itemBuilder: (context, index) {
                // Pour les projets terminÃ©s, ajouter la facture en haut de la liste
                if (!widget.enCours && index == 0) {
                  return Container(
                    margin: const EdgeInsets.only(bottom: 12),
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.3),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.green.withOpacity(0.5), width: 1),
                    ),
                    child: Row(
                      children: [
                        // IcÃ´ne du document
                        Container(
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.green.withOpacity(0.1),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.receipt_long,
                            color: Colors.green,
                            size: 24,
                          ),
                        ),
                        
                        const SizedBox(width: 16),
                        
                        // DÃ©tails du document
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'Facture finale',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              const SizedBox(height: 4),
                              Row(
                                children: [
                                  const Text(
                                    'Facture',
                                    style: TextStyle(
                                      color: Colors.green,
                                      fontSize: 12,
                                    ),
                                  ),
                                  const SizedBox(width: 12),
                                  const Icon(Icons.calendar_today, color: Colors.white54, size: 12),
                                  const SizedBox(width: 4),
                                  Text(
                                    _projet!['date_fin'],
                                    style: const TextStyle(
                                      color: Colors.white54,
                                      fontSize: 12,
                                    ),
                                  ),
                                ],
                              ),
                              
                              // Badge acquittÃ©
                              Padding(
                                padding: const EdgeInsets.only(top: 8),
                                child: Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: Colors.green.withOpacity(0.2),
                                    borderRadius: BorderRadius.circular(4),
                                    border: Border.all(
                                      color: Colors.green,
                                      width: 1,
                                    ),
                                  ),
                                  child: const Text(
                                    'AcquittÃ©e',
                                    style: TextStyle(
                                      color: Colors.green,
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        
                        // Boutons d'action
                        Column(
                          children: [
                            IconButton(
                              icon: const Icon(Icons.visibility, color: Colors.white70),
                              onPressed: () {
                                // Afficher la facture
                                _showFacture();
                              },
                            ),
                            IconButton(
                              icon: const Icon(Icons.download, color: Colors.white70),
                              onPressed: () {
                                // Logique pour tÃ©lÃ©charger la facture
                              },
                            ),
                          ],
                        ),
                      ],
                    ),
                  );
                }
                
                // Pour les autres documents
                final document = documents[widget.enCours ? index : index - 1];
                IconData iconData;
                Color iconColor;
                
                switch (document['type']) {
                  case 'Devis':
                  case 'Devis modifiÃ©':
                    iconData = Icons.description;
                    iconColor = Colors.blue;
                    break;
                  case 'Facture':
                    iconData = Icons.receipt_long;
                    iconColor = Colors.green;
                    break;
                  case 'Fiche de soins':
                    iconData = Icons.healing;
                    iconColor = Colors.purple;
                    break;
                  case 'Fiche de dÃ©charge':
                    iconData = Icons.assignment;
                    iconColor = Colors.orange;
                    break;
                  default:
                    iconData = Icons.insert_drive_file;
                    iconColor = Colors.grey;
                }
                
                return Container(
                  margin: const EdgeInsets.only(bottom: 12),
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: iconColor.withOpacity(0.5), width: 1),
                  ),
                  child: Row(
                    children: [
                      // IcÃ´ne du document
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: iconColor.withOpacity(0.1),
                          shape: BoxShape.circle,
                        ),
                        child: Icon(
                          iconData,
                          color: iconColor,
                          size: 24,
                        ),
                      ),
                      
                      const SizedBox(width: 16),
                      
                      // DÃ©tails du document
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              document['nom'],
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                Text(
                                  document['type'],
                                  style: TextStyle(
                                    color: iconColor,
                                    fontSize: 12,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                const Icon(Icons.calendar_today, color: Colors.white54, size: 12),
                                const SizedBox(width: 4),
                                Text(
                                  document['date'],
                                  style: const TextStyle(
                                    color: Colors.white54,
                                    fontSize: 12,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                const Icon(Icons.data_usage, color: Colors.white54, size: 12),
                                const SizedBox(width: 4),
                                Text(
                                  document['taille'],
                                  style: const TextStyle(
                                    color: Colors.white54,
                                    fontSize: 12,
                                  ),
                                ),
                              ],
                            ),
                            
                            // Badge de signature (si applicable)
                            if (document['signÃ©'] != null)
                              Padding(
                                padding: const EdgeInsets.only(top: 8),
                                child: Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: document['signÃ©']
                                        ? Colors.green.withOpacity(0.2)
                                        : Colors.orange.withOpacity(0.2),
                                    borderRadius: BorderRadius.circular(4),
                                    border: Border.all(
                                      color: document['signÃ©'] ? Colors.green : Colors.orange,
                                      width: 1,
                                    ),
                                  ),
                                  child: Text(
                                    document['signÃ©'] ? 'SignÃ©' : 'Non signÃ©',
                                    style: TextStyle(
                                      color: document['signÃ©'] ? Colors.green : Colors.orange,
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ),
                          ],
                        ),
                      ),
                      
                      // Boutons d'action
                      Column(
                        children: [
                          IconButton(
                            icon: const Icon(Icons.visibility, color: Colors.white70),
                            onPressed: () {
                              // Logique pour visualiser le document
                            },
                          ),
                          IconButton(
                            icon: const Icon(Icons.download, color: Colors.white70),
                            onPressed: () {
                              // Logique pour tÃ©lÃ©charger le document
                            },
                          ),
                        ],
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }
  
  // Afficher la facture en plein Ã©cran
  void _showFacture() {
    // GÃ©nÃ©rer une facture Ã  partir des donnÃ©es du projet
    final facture = Facture.genererDepuisProjet(
      _projet!,
      'John Doe', // Remplacer par les vraies donnÃ©es client
      '15 Rue de la RÃ©publique, 75001 Paris',
      'client@example.com',
    );
    
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: Colors.transparent,
        child: Container(
          width: double.infinity,
          height: MediaQuery.of(context).size.height * 0.9,
          decoration: BoxDecoration(
            color: Colors.grey[900],
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              // En-tÃªte avec bouton fermer
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(16),
                    topRight: Radius.circular(16),
                  ),
                ),
                child: Row(
                  children: [
                    const Text(
                      'Facture',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.white),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ),
              
              // Contenu de la facture
              Expanded(
                child: FactureWidget(facture: facture),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Onglet DÃ©tails
  Widget _buildDetails() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Carte des dÃ©tails du projet
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.7),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'DÃ©tails du projet',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                const SizedBox(height: 16),
                
                // Informations dÃ©taillÃ©es
                _buildInfoRow('Titre', _projet!['titre']),
                _buildInfoRow('Description', _projet!['description']),
                _buildInfoRow('Emplacement', _projet!['emplacement']),
                _buildInfoRow('Taille', _projet!['taille']),
                _buildInfoRow('Date de dÃ©but', _projet!['date_debut']),
                if (!widget.enCours) _buildInfoRow('Date de fin', _projet!['date_fin']),
                _buildInfoRow('Tatoueur', _projet!['tatoueur']),
                _buildInfoRow('Studio', _projet!['studio']),
                _buildInfoRow('Nombre de sÃ©ances prÃ©vues', '${_projet!['nbSeances']}'),
                _buildInfoRow('SÃ©ances effectuÃ©es', '${_projet!['seancesTerminees']}'),
                
                if (_projet!['typePreRdv'] != 'Aucun')
                  _buildInfoRow(
                    'PrÃ©-rendez-vous',
                    '${_projet!['typePreRdv']} - ${_projet!['preRdvEffectue'] ? 'EffectuÃ©' : 'Non effectuÃ©'}',
                  ),
                
                _buildInfoRow(
                  widget.enCours ? 'Devis' : 'Montant final',
                  widget.enCours ? _projet!['montantDevis'] : _projet!['montantFinal'],
                ),
                
                if (!widget.enCours && _projet!.containsKey('noteTatoueur')) 
                  _buildInfoRow('Note attribuÃ©e', '${_projet!['noteTatoueur']}'),
                if (!widget.enCours && _projet!.containsKey('commentaire'))
                  _buildInfoRow('Commentaire', _projet!['commentaire']),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Statistiques du projet
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.7),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Statistiques',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
                const SizedBox(height: 16),
                
                // Progression
                const Text(
                  'Progression du projet',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                LinearProgressIndicator(
                  value: _projet!['seancesTerminees'] / _projet!['nbSeances'],
                  backgroundColor: Colors.white24,
                  valueColor: AlwaysStoppedAnimation<Color>(_getStatusColor(_projet!['status'])),
                  minHeight: 10,
                  borderRadius: BorderRadius.circular(8),
                ),
                Padding(
                  padding: const EdgeInsets.only(top: 8),
                  child: Text(
                    '${_projet!['seancesTerminees']}/${_projet!['nbSeances']} sÃ©ances rÃ©alisÃ©es',
                    style: const TextStyle(
                      color: Colors.white70,
                      fontSize: 14,
                    ),
                  ),
                ),
                
                const SizedBox(height: 24),
                
                // Photos et documents
                Row(
                  children: [
                    Expanded(
                      child: _buildStatCard(
                        icon: Icons.photo_library,
                        title: 'Photos',
                        value: '${_projet!['photos']?.length ?? 0}',
                        color: Colors.blue,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: _buildStatCard(
                        icon: Icons.file_copy,
                        title: 'Documents',
                        value: '${_projet!['documents']?.length ?? 0}',
                        color: Colors.amber,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: _buildStatCard(
                        icon: Icons.event,
                        title: 'Rendez-vous',
                        value: '${_projet!['rendezVous']?.length ?? 0}',
                        color: Colors.purple,
                      ),
                    ),
                  ],
                ),
                
                if (widget.enCours && _projet!.containsKey('chat'))
                  Padding(
                    padding: const EdgeInsets.only(top: 16),
                    child: Row(
                      children: [
                        Expanded(
                          child: _buildStatCard(
                            icon: Icons.message,
                            title: 'Messages Ã©changÃ©s',
                            value: '${_projet!['chat'].length}',
                            color: KipikTheme.rouge,
                          ),
                        ),
                      ],
                    ),
                  ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Boutons d'action
          if (widget.enCours)
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Actions',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  // Boutons d'action pour les projets en cours
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildActionButton(
                        icon: Icons.message,
                        label: 'Contacter',
                        color: KipikTheme.rouge,
                        onTap: () {
                          // Naviguer vers l'onglet Chat
                          _tabController.animateTo(0);
                        },
                      ),
                      _buildActionButton(
                        icon: Icons.camera_alt,
                        label: 'Ajouter photo',
                        color: Colors.blue,
                        onTap: () {
                          // Logic pour ajouter une photo
                        },
                      ),
                      _buildActionButton(
                        icon: Icons.calendar_today,
                        label: 'RDV',
                        color: Colors.purple,
                        onTap: () {
                          // Naviguer vers l'onglet Rendez-vous
                          _tabController.animateTo(2);
                        },
                      ),
                    ],
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  // Helper pour afficher une ligne d'information
  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Helper pour afficher une carte de statistique
  Widget _buildStatCard({
    required IconData icon,
    required String title,
    required String value,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3), width: 1),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              color: color,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            title,
            style: const TextStyle(
              color: Colors.white70,
              fontSize: 12,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  // Helper pour afficher un bouton d'action
  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required Color color,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          CircleAvatar(
            radius: 28,
            backgroundColor: color.withOpacity(0.2),
            child: Icon(icon, color: color, size: 28),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }

  // Helper pour obtenir la couleur en fonction du statut
  Color _getStatusColor(String status) {
    switch (status) {
      case 'En attente':
        return Colors.orange;
      case 'Projet validÃ©':
        return Colors.blue;
      case 'SÃ©ance en cours':
        return Colors.purple;
      case 'En finition':
        return Colors.teal;
      case 'TerminÃ©':
        return Colors.green;
      default:
        return KipikTheme.rouge;
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\detail_tattooist_page.dart

// lib/pages/particulier/detail_tattooist_page.dart

import 'package:flutter/material.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../models/tatoueur_summary.dart';
import '../../services/tattooist/firebase_tattooist_service.dart';
import '../../services/inspiration/firebase_inspiration_service.dart';
import '../../services/auth/secure_auth_service.dart';
import '../../core/database_manager.dart';
import '../../theme/kipik_theme.dart';
import '../shared/inspirations/detail_inspiration_page.dart';

class DetailTattooistPage extends StatefulWidget {
  final TatoueurSummary tatoueur;
  final String? tattooistId;
  
  const DetailTattooistPage({
    Key? key,
    required this.tatoueur,
    this.tattooistId,
  }) : super(key: key);

  @override
  State<DetailTattooistPage> createState() => _DetailTattooistPageState();
}

class _DetailTattooistPageState extends State<DetailTattooistPage> {
  late TatoueurSummary _tatoueur;
  final FirebaseTattooistService _tattooistService = FirebaseTattooistService.instance;
  final FirebaseInspirationService _inspirationService = FirebaseInspirationService.instance;
  
  List<Map<String, dynamic>> _tattooistPosts = [];
  Map<String, dynamic>? _detailedProfile;
  bool _isLoadingPosts = false;
  bool _isLoadingProfile = false;
  bool _isFavorite = false;
  
  @override
  void initState() {
    super.initState();
    _tatoueur = widget.tatoueur;
    _loadTattooistData();
  }
  
  Future<void> _loadTattooistData() async {
    await Future.wait([
      _loadDetailedProfile(),
      _loadTattooistPosts(),
      _checkFavoriteStatus(),
    ]);
  }
  
  Future<void> _loadDetailedProfile() async {
    setState(() => _isLoadingProfile = true);
    
    try {
      final profileData = await _tattooistService.getTattooistProfile(
        widget.tattooistId ?? _tatoueur.id
      );
      
      setState(() {
        _detailedProfile = profileData;
        _isLoadingProfile = false;
      });
    } catch (e) {
      print('âŒ Erreur chargement profil dÃ©taillÃ©: $e');
      setState(() => _isLoadingProfile = false);
    }
  }
  
  Future<void> _loadTattooistPosts() async {
    setState(() => _isLoadingPosts = true);
    
    try {
      if (DatabaseManager.instance.isDemoMode) {
        // Mode dÃ©mo - GÃ©nÃ©rer des posts factices
        await Future.delayed(const Duration(milliseconds: 800));
        _tattooistPosts = _generateDemoPosts();
      } else {
        // Mode production - RÃ©cupÃ©rer les vraies inspirations du tatoueur
        final posts = await _inspirationService.getInspirations(
          authorId: widget.tattooistId ?? _tatoueur.id,
          limit: 12,
        );
        _tattooistPosts = posts;
      }
      
      setState(() => _isLoadingPosts = false);
    } catch (e) {
      print('âŒ Erreur chargement posts: $e');
      setState(() => _isLoadingPosts = false);
      
      // Fallback vers des donnÃ©es dÃ©mo en cas d'erreur
      _tattooistPosts = _generateDemoPosts();
    }
  }
  
  Future<void> _checkFavoriteStatus() async {
    final currentUser = SecureAuthService.instance.currentUser;
    if (currentUser == null) return;
    
    try {
      final isFav = await _tattooistService.isFavorite(
        tattooistId: widget.tattooistId ?? _tatoueur.id,
        userId: currentUser.uid,
      );
      
      setState(() => _isFavorite = isFav);
    } catch (e) {
      print('âŒ Erreur vÃ©rification favori: $e');
    }
  }
  
  Future<void> _toggleFavorite() async {
    final currentUser = SecureAuthService.instance.currentUser;
    if (currentUser == null) {
      _showLoginRequired();
      return;
    }
    
    try {
      final newFavoriteStatus = await _tattooistService.toggleFavorite(
        tattooistId: widget.tattooistId ?? _tatoueur.id,
        userId: currentUser.uid,
      );
      
      setState(() => _isFavorite = newFavoriteStatus);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              newFavoriteStatus 
                ? 'AjoutÃ© aux tatoueurs favoris' 
                : 'RetirÃ© des tatoueurs favoris'
            ),
            backgroundColor: newFavoriteStatus ? Colors.green : Colors.grey[700],
            duration: const Duration(seconds: 2),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    } catch (e) {
      print('âŒ Erreur toggle favori: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  void _showLoginRequired() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Connectez-vous pour ajouter des favoris'),
        backgroundColor: Colors.orange,
      ),
    );
  }
  
  List<Map<String, dynamic>> _generateDemoPosts() {
    final styles = _tatoueur.specialties.isNotEmpty 
        ? _tatoueur.specialties 
        : ['RÃ©alisme', 'Traditionnel'];
    
    return List.generate(6, (index) {
      final style = styles[index % styles.length];
      return {
        'id': 'demo_post_${_tatoueur.id}_$index',
        'title': '$style par ${_tatoueur.name}',
        'imageUrl': 'https://picsum.photos/seed/${_tatoueur.id}_$index/400/600',
        'description': '[DÃ‰MO] RÃ©alisation $style par ${_tatoueur.name}. Å’uvre unique et personnalisÃ©e.',
        'style': style,
        'category': 'Tatouage',
        'authorName': _tatoueur.name,
        'authorId': _tatoueur.id,
        'likes': (index + 1) * 12 + 8,
        'views': (index + 1) * 45 + 23,
        'createdAt': DateTime.now().subtract(Duration(days: index * 7 + 2)).toIso8601String(),
        '_source': 'demo',
      };
    });
  }
  
  // Getters pour donnÃ©es combinÃ©es
  String get _displayName => _detailedProfile?['name'] ?? _tatoueur.name;
  String get _displayLocation => _detailedProfile?['location'] ?? _tatoueur.location;
  double get _displayRating => (_detailedProfile?['rating'] as num?)?.toDouble() ?? _tatoueur.rating ?? 4.5;
  int get _displayReviewsCount => _detailedProfile?['reviewCount'] as int? ?? _tatoueur.reviewsCount ?? 0;
  String get _displayBio => _detailedProfile?['bio'] ?? 'Tatoueur professionnel passionnÃ© par l\'art du tatouage.';
  List<String> get _displayStyles => (_detailedProfile?['specialties'] as List<dynamic>?)?.cast<String>() ?? _tatoueur.specialties;
  String get _profileImageUrl => _detailedProfile?['profileImage'] ?? _tatoueur.avatarUrl;
  String get _coverImageUrl => _detailedProfile?['coverImage'] ?? 'https://picsum.photos/seed/${_tatoueur.id}_cover/800/400';
  
  @override
  Widget build(BuildContext context) {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    return Scaffold(
      body: CustomScrollView(
        slivers: [
          // âœ… AppBar avec image de couverture et indicateur mode
          SliverAppBar(
            expandedHeight: 200,
            pinned: true,
            flexibleSpace: FlexibleSpaceBar(
              background: Stack(
                fit: StackFit.expand,
                children: [
                  // Image de couverture
                  Image.network(
                    _coverImageUrl,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return Container(
                        color: KipikTheme.rouge.withOpacity(0.8),
                        child: const Icon(
                          Icons.person,
                          size: 80,
                          color: Colors.white,
                        ),
                      );
                    },
                  ),
                  // DÃ©gradÃ© pour meilleure lisibilitÃ©
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [
                          Colors.black.withOpacity(0.4),
                          Colors.black.withOpacity(0.7),
                        ],
                      ),
                    ),
                  ),
                  // âœ… Badge mode dÃ©mo
                  if (isDemoMode)
                    Positioned(
                      top: 60,
                      left: 16,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Colors.orange.withOpacity(0.9),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          'ðŸŽ­ ${DatabaseManager.instance.activeDatabaseConfig.name}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                ],
              ),
              title: Text(
                _displayName,
                style: const TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 22,
                ),
              ),
              centerTitle: true,
            ),
            leading: IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed: () => Navigator.pop(context),
            ),
            actions: [
              IconButton(
                icon: Icon(
                  _isFavorite ? Icons.favorite : Icons.favorite_border,
                  color: _isFavorite 
                      ? (isDemoMode ? Colors.orange : KipikTheme.rouge)
                      : Colors.white,
                ),
                onPressed: _toggleFavorite,
              ),
              IconButton(
                icon: const Icon(Icons.share),
                onPressed: () {
                  // TODO: ImplÃ©menter le partage
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('FonctionnalitÃ© de partage Ã  implÃ©menter')),
                  );
                },
              ),
            ],
          ),
          
          // âœ… Contenu principal
          SliverToBoxAdapter(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Profil du tatoueur
                Container(
                  color: Colors.white,
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Avatar et infos principales
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Hero(
                            tag: 'avatar_${_tatoueur.id}',
                            child: CircleAvatar(
                              radius: 40,
                              backgroundImage: NetworkImage(_profileImageUrl),
                              child: _isLoadingProfile 
                                  ? const CircularProgressIndicator(strokeWidth: 2)
                                  : null,
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Expanded(
                                      child: Text(
                                        _displayName,
                                        style: const TextStyle(
                                          fontSize: 22,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                    if (isDemoMode)
                                      Container(
                                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                        decoration: BoxDecoration(
                                          color: Colors.orange,
                                          borderRadius: BorderRadius.circular(8),
                                        ),
                                        child: const Text(
                                          'DÃ‰MO',
                                          style: TextStyle(
                                            color: Colors.white,
                                            fontSize: 10,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                  ],
                                ),
                                const SizedBox(height: 4),
                                Row(
                                  children: [
                                    Icon(
                                      Icons.location_on, 
                                      size: 16, 
                                      color: isDemoMode ? Colors.orange : Colors.grey,
                                    ),
                                    const SizedBox(width: 4),
                                    Text(
                                      _displayLocation,
                                      style: const TextStyle(
                                        color: Colors.grey,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 4),
                                Row(
                                  children: [
                                    Icon(
                                      Icons.star, 
                                      size: 16, 
                                      color: isDemoMode ? Colors.orange : Colors.amber,
                                    ),
                                    const SizedBox(width: 4),
                                    Text(
                                      '${_displayRating.toStringAsFixed(1)} ($_displayReviewsCount avis)',
                                      style: const TextStyle(fontSize: 14),
                                    ),
                                  ],
                                ),
                                if (_tatoueur.distanceText.isNotEmpty) ...[
                                  const SizedBox(height: 4),
                                  Row(
                                    children: [
                                      Icon(
                                        Icons.near_me, 
                                        size: 16, 
                                        color: isDemoMode ? Colors.orange : Colors.grey,
                                      ),
                                      const SizedBox(width: 4),
                                      Text(
                                        _tatoueur.distanceText,
                                        style: const TextStyle(
                                          color: Colors.grey,
                                          fontSize: 14,
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ],
                      ),
                      
                      const SizedBox(height: 16),
                      
                      // Description/Bio
                      Text(
                        _displayBio,
                        style: const TextStyle(
                          fontSize: 14,
                          height: 1.4,
                        ),
                      ),
                      
                      const SizedBox(height: 16),
                      
                      // Styles de tatouage
                      const Text(
                        'SpÃ©cialitÃ©s',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Wrap(
                        spacing: 8,
                        runSpacing: 8,
                        children: _displayStyles.map((style) {
                          return Chip(
                            label: Text(style),
                            backgroundColor: isDemoMode 
                                ? Colors.orange.withOpacity(0.1)
                                : Colors.grey[200],
                            side: BorderSide(
                              color: isDemoMode ? Colors.orange : Colors.grey,
                              width: 0.5,
                            ),
                          );
                        }).toList(),
                      ),
                      
                      const SizedBox(height: 16),
                      
                      // Boutons d'action
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          _buildActionButton(
                            icon: Icons.message,
                            label: 'Message',
                            onTap: () {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(content: Text('Messagerie Ã  implÃ©menter')),
                              );
                            },
                            isDemoMode: isDemoMode,
                          ),
                          _buildActionButton(
                            icon: Icons.calendar_today,
                            label: 'RÃ©server',
                            onTap: () {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(content: Text('RÃ©servation Ã  implÃ©menter')),
                              );
                            },
                            isPrimary: true,
                            isDemoMode: isDemoMode,
                          ),
                          _buildActionButton(
                            icon: Icons.info_outline,
                            label: 'Infos',
                            onTap: () {
                              _showStudioInfo();
                            },
                            isDemoMode: isDemoMode,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                
                // SÃ©parateur
                Container(
                  height: 8,
                  color: Colors.grey[200],
                ),
                
                // âœ… RÃ©alisations du tatoueur
                Container(
                  color: Colors.white,
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Text(
                            'RÃ©alisations',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          if (isDemoMode) ...[
                            const SizedBox(width: 8),
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: Colors.orange,
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: const Text(
                                'DÃ‰MO',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ],
                        ],
                      ),
                      
                      const SizedBox(height: 16),
                      
                      if (_isLoadingPosts)
                        Center(
                          child: Padding(
                            padding: const EdgeInsets.all(32.0),
                            child: CircularProgressIndicator(
                              color: isDemoMode ? Colors.orange : KipikTheme.rouge,
                            ),
                          ),
                        )
                      else if (_tattooistPosts.isEmpty)
                        Center(
                          child: Padding(
                            padding: const EdgeInsets.all(32.0),
                            child: Column(
                              children: [
                                Icon(
                                  Icons.image_not_supported,
                                  size: 48,
                                  color: Colors.grey[400],
                                ),
                                const SizedBox(height: 16),
                                Text(
                                  isDemoMode 
                                      ? 'Aucune rÃ©alisation en dÃ©mo'
                                      : 'Aucune rÃ©alisation pour le moment',
                                  style: TextStyle(
                                    color: Colors.grey[600],
                                    fontSize: 16,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                      else
                        GridView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 3,
                            childAspectRatio: 1,
                            crossAxisSpacing: 4,
                            mainAxisSpacing: 4,
                          ),
                          itemCount: _tattooistPosts.length,
                          itemBuilder: (context, index) {
                            final post = _tattooistPosts[index];
                            return _buildRealisationItem(post, isDemoMode);
                          },
                        ),
                      
                      if (_tattooistPosts.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 16),
                          child: Center(
                            child: TextButton(
                              onPressed: () {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(content: Text('Galerie complÃ¨te Ã  implÃ©menter')),
                                );
                              },
                              style: TextButton.styleFrom(
                                foregroundColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
                              ),
                              child: const Text('Voir toutes les rÃ©alisations'),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
                
                // SÃ©parateur
                Container(
                  height: 8,
                  color: Colors.grey[200],
                ),
                
                // âœ… Section avis avec mode dÃ©mo
                _buildReviewsSection(isDemoMode),
                
                // Espace en bas
                const SizedBox(height: 32),
              ],
            ),
          ),
        ],
      ),
      // âœ… Bouton flottant adaptÃ© au mode
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(isDemoMode 
                  ? 'Contact simulÃ© en mode dÃ©mo' 
                  : 'Contacter le tatoueur'),
            ),
          );
        },
        backgroundColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
        child: const Icon(Icons.message, color: Colors.white),
      ),
    );
  }
  
  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    bool isPrimary = false,
    bool isDemoMode = false,
  }) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: TextButton(
          onPressed: onTap,
          style: TextButton.styleFrom(
            backgroundColor: isPrimary 
                ? (isDemoMode ? Colors.orange : KipikTheme.rouge)
                : Colors.grey[200],
            foregroundColor: isPrimary ? Colors.white : Colors.black87,
            padding: const EdgeInsets.symmetric(vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(icon, size: 20),
              const SizedBox(height: 4),
              Text(label, style: const TextStyle(fontSize: 12)),
            ],
          ),
        ),
      ),
    );
  }
  
  Widget _buildRealisationItem(Map<String, dynamic> post, bool isDemoMode) {
    return GestureDetector(
      onTap: () {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(isDemoMode 
                ? 'Navigation dÃ©mo vers: ${post['title']}'
                : 'Ouverture de ${post['title']}'),
          ),
        );
      },
      child: Hero(
        tag: 'inspiration_${post['id']}',
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(4),
            border: isDemoMode 
                ? Border.all(color: Colors.orange, width: 1)
                : null,
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(4),
            child: Stack(
              fit: StackFit.expand,
              children: [
                Image.network(
                  post['imageUrl'],
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return Container(
                      color: Colors.grey[300],
                      child: const Icon(Icons.image_not_supported),
                    );
                  },
                ),
                if (isDemoMode)
                  Positioned(
                    top: 4,
                    right: 4,
                    child: Container(
                      padding: const EdgeInsets.all(2),
                      decoration: BoxDecoration(
                        color: Colors.orange,
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: const Text(
                        'D',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 8,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  Widget _buildReviewsSection(bool isDemoMode) {
    return Container(
      color: Colors.white,
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Text(
                'Avis',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: isDemoMode ? Colors.orange : Colors.amber,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.star, size: 16, color: Colors.white),
                    const SizedBox(width: 4),
                    Text(
                      _displayRating.toStringAsFixed(1),
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 8),
              Text(
                '($_displayReviewsCount)',
                style: const TextStyle(color: Colors.grey),
              ),
              if (isDemoMode) ...[
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                  decoration: BoxDecoration(
                    color: Colors.orange,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Text(
                    'DÃ‰MO',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Avis factices pour la dÃ©mo
          _buildReviewItem(
            name: 'Sophie L.',
            date: 'Il y a 2 semaines',
            rating: 5,
            text: isDemoMode 
                ? '[DÃ‰MO] Super expÃ©rience ! Le tatoueur a parfaitement compris ma demande.'
                : 'Super expÃ©rience ! Le tatoueur a parfaitement compris ma demande et le rÃ©sultat est magnifique.',
            avatarUrl: 'https://i.pravatar.cc/150?img=5',
            isDemoMode: isDemoMode,
          ),
          
          const Divider(),
          
          _buildReviewItem(
            name: 'Thomas B.',
            date: 'Il y a 1 mois',
            rating: 4,
            text: isDemoMode
                ? '[DÃ‰MO] TrÃ¨s bon travail, je suis satisfait du rÃ©sultat.'
                : 'TrÃ¨s bon travail, je suis satisfait du rÃ©sultat. Le seul bÃ©mol est le temps d\'attente.',
            avatarUrl: 'https://i.pravatar.cc/150?img=12',
            isDemoMode: isDemoMode,
          ),
          
          const Divider(),
          
          _buildReviewItem(
            name: 'Marie D.',
            date: 'Il y a 3 mois',
            rating: 5,
            text: isDemoMode
                ? '[DÃ‰MO] C\'Ã©tait mon premier tatouage et j\'Ã©tais stressÃ©e, mais tout s\'est bien passÃ© !'
                : 'C\'Ã©tait mon premier tatouage et j\'Ã©tais un peu stressÃ©e, mais le tatoueur a su me mettre Ã  l\'aise.',
            avatarUrl: 'https://i.pravatar.cc/150?img=9',
            isDemoMode: isDemoMode,
          ),
          
          Center(
            child: TextButton(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(isDemoMode 
                        ? 'Tous les avis (mode dÃ©mo)' 
                        : 'Voir tous les avis'),
                  ),
                );
              },
              style: TextButton.styleFrom(
                foregroundColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
              ),
              child: const Text('Voir tous les avis'),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildReviewItem({
    required String name,
    required String date,
    required int rating,
    required String text,
    required String avatarUrl,
    bool isDemoMode = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              CircleAvatar(
                radius: 16,
                backgroundImage: NetworkImage(avatarUrl),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      name,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(
                      date,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
              Row(
                children: List.generate(5, (index) {
                  return Icon(
                    index < rating ? Icons.star : Icons.star_border,
                    color: isDemoMode ? Colors.orange : Colors.amber,
                    size: 16,
                  );
                }),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            text,
            style: const TextStyle(fontSize: 14),
          ),
        ],
      ),
    );
  }
  
  void _showStudioInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Informations du studio'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (_detailedProfile?['studioName'] != null) ...[
              Text('Studio: ${_detailedProfile!['studioName']}'),
              const SizedBox(height: 8),
            ],
            if (_detailedProfile?['address'] != null) ...[
              Text('Adresse: ${_detailedProfile!['address']}'),
              const SizedBox(height: 8),
            ],
            if (_detailedProfile?['phone'] != null) ...[
              Text('TÃ©lÃ©phone: ${_detailedProfile!['phone']}'),
              const SizedBox(height: 8),
            ],
            Text('DisponibilitÃ©: ${_tatoueur.availability}'),
            if (DatabaseManager.instance.isDemoMode) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange),
                ),
                child: const Text(
                  'ðŸŽ­ Ces informations sont simulÃ©es en mode dÃ©mo',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.orange,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Fermer'),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\document_card_widget.dart

// lib/pages/particulier/document_card_widget.dart

import 'package:flutter/material.dart';

class DocumentCard extends StatelessWidget {
  final String title;
  final String type;
  final String date;
  final String? size;
  final bool? isSigned;
  final IconData iconData;
  final Color iconColor;
  final VoidCallback onView;
  final VoidCallback onDownload;

  const DocumentCard({
    Key? key,
    required this.title,
    required this.type,
    required this.date,
    this.size,
    this.isSigned,
    required this.iconData,
    required this.iconColor,
    required this.onView,
    required this.onDownload,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Calculer la largeur maximale disponible
    final screenWidth = MediaQuery.of(context).size.width;
    final maxWidth = screenWidth - 64; // 32px pour les marges de la carte + 32px pour les marges de la liste
    
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.3),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: iconColor.withOpacity(0.6), width: 1),
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: onView,
            child: Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Ligne 1: IcÃ´ne et titre
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // IcÃ´ne du document dans un cercle colorÃ©
                      Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: iconColor.withOpacity(0.2),
                          shape: BoxShape.circle,
                        ),
                        child: Icon(
                          iconData,
                          color: iconColor,
                          size: 20,
                        ),
                      ),
                      
                      const SizedBox(width: 12),
                      
                      // Titre du document (avec largeur limitÃ©e)
                      Expanded(
                        child: Text(
                          title,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'PermanentMarker',
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 10),
                  
                  // Ligne 2: Type de document
                  Row(
                    children: [
                      Flexible(
                        child: Text(
                          type.toUpperCase(),
                          style: TextStyle(
                            color: iconColor,
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 4),
                  
                  // Ligne 3: Date et taille
                  Row(
                    children: [
                      // Date
                      const Icon(Icons.calendar_today, color: Colors.white54, size: 12),
                      const SizedBox(width: 4),
                      Text(
                        date,
                        style: const TextStyle(
                          color: Colors.white54,
                          fontSize: 12,
                        ),
                      ),
                      
                      // Taille (si disponible)
                      if (size != null) ...[
                        const SizedBox(width: 10),
                        const Icon(Icons.data_usage, color: Colors.white54, size: 12),
                        const SizedBox(width: 4),
                        Flexible(
                          child: Text(
                            size!,
                            style: const TextStyle(
                              color: Colors.white54,
                              fontSize: 12,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ],
                  ),
                  
                  const SizedBox(height: 10),
                  
                  // Ligne 4: Badge "SignÃ©" et boutons d'action
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // Badge "SignÃ©" ou "Non signÃ©" (si applicable)
                      if (isSigned != null)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                          decoration: BoxDecoration(
                            color: isSigned! ? Colors.green : Colors.orange,
                            borderRadius: BorderRadius.circular(16),
                          ),
                          child: Text(
                            isSigned! ? 'SIGNÃ‰' : 'NON SIGNÃ‰',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      
                      // Boutons d'action
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          // Bouton Visualiser
                          IconButton(
                            icon: const Icon(Icons.visibility, color: Colors.white),
                            onPressed: onView,
                            padding: EdgeInsets.zero,
                            constraints: const BoxConstraints(),
                            iconSize: 24,
                          ),
                          const SizedBox(width: 12),
                          // Bouton TÃ©lÃ©charger
                          IconButton(
                            icon: const Icon(Icons.download, color: Colors.white),
                            onPressed: onDownload,
                            padding: EdgeInsets.zero,
                            constraints: const BoxConstraints(),
                            iconSize: 24,
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\document_item.dart

// lib/pages/particulier/document_item.dart
import 'package:flutter/material.dart';

class DocumentItem extends StatelessWidget {
  final String fileName;
  final String type;
  final String date;
  final String? size;
  final bool? signed;
  final Color color;
  final IconData icon;
  final VoidCallback onView;
  final VoidCallback onDownload;

  const DocumentItem({
    Key? key,
    required this.fileName,
    required this.type,
    required this.date,
    this.size,
    this.signed,
    required this.color,
    required this.icon,
    required this.onView,
    required this.onDownload,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    
    // VÃ©rifier que nous avons suffisamment d'espace
    final contentWidth = width - 64; // 32px de marge de container + 32px de marge de ListView

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      width: contentWidth,
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.3),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: color, width: 1.5),
      ),
      child: Column(
        children: [
          // Pour Ã©viter les problÃ¨mes de dÃ©bordement, je vais limiter explicitement la largeur des Ã©lÃ©ments
          SizedBox(
            width: contentWidth,
            child: Stack(
              children: [
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // PremiÃ¨re ligne: icÃ´ne et nom du fichier
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // IcÃ´ne
                          Container(
                            width: 40,
                            height: 40,
                            decoration: BoxDecoration(
                              color: color.withOpacity(0.2),
                              shape: BoxShape.circle,
                            ),
                            child: Icon(icon, color: color, size: 20),
                          ),
                          
                          const SizedBox(width: 16),
                          
                          // Nom du fichier (avec limitation de largeur)
                          Container(
                            width: contentWidth - 140, // 40px icÃ´ne + 16px espace + 84px pour les marges et la bordure
                            child: Text(
                              fileName,
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontFamily: 'PermanentMarker',
                                fontWeight: FontWeight.bold,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ],
                      ),
                      
                      const SizedBox(height: 12),
                      
                      // Type de document (couleur correspondante)
                      Container(
                        width: contentWidth - 32, // Marge de padding
                        child: Text(
                          type.toUpperCase(),
                          style: TextStyle(
                            color: color,
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      
                      const SizedBox(height: 4),
                      
                      // Date et taille (si disponible)
                      Row(
                        children: [
                          Icon(Icons.calendar_today, color: Colors.white54, size: 12),
                          const SizedBox(width: 4),
                          Text(
                            date,
                            style: const TextStyle(
                              color: Colors.white54,
                              fontSize: 12,
                            ),
                          ),
                          
                          if (size != null) ...[
                            const SizedBox(width: 16),
                            Icon(Icons.data_usage, color: Colors.white54, size: 12),
                            const SizedBox(width: 4),
                            Text(
                              size!,
                              style: const TextStyle(
                                color: Colors.white54,
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ],
                      ),
                      
                      const SizedBox(height: 12),
                      
                      // Badge SIGNÃ‰ (si applicable)
                      if (signed != null)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                          decoration: BoxDecoration(
                            color: signed! ? Colors.green : Colors.orange,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            signed! ? 'SIGNÃ‰' : 'NON SIGNÃ‰',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
                
                // Boutons d'action (Ã  droite)
                Positioned(
                  top: 0,
                  bottom: 0,
                  right: 0,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // Bouton visualiser
                      IconButton(
                        icon: const Icon(Icons.visibility, color: Colors.white),
                        onPressed: onView,
                      ),
                      
                      // Bouton tÃ©lÃ©charger
                      IconButton(
                        icon: const Icon(Icons.download, color: Colors.white),
                        onPressed: onDownload,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\favoris_page.dart

// lib/pages/particulier/favoris_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';

import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../theme/kipik_theme.dart';
import '../../core/database_manager.dart'; // âœ… AJOUTÃ‰
import '../../services/auth/secure_auth_service.dart'; // âœ… AJOUTÃ‰
import '../../services/inspiration/firebase_inspiration_service.dart'; // âœ… AJOUTÃ‰
import '../../services/tattooist/firebase_tattooist_service.dart'; // âœ… AJOUTÃ‰
import '../../models/tatoueur_summary.dart'; // âœ… AJOUTÃ‰
import '../pro/profil_tatoueur.dart'; // âœ… Pour navigation vers profils
import '../../models/user_role.dart'; // âœ… Pour mode client

class FavorisPage extends StatefulWidget {
  const FavorisPage({Key? key}) : super(key: key);

  @override
  State<FavorisPage> createState() => _FavorisPageState();
}

class _FavorisPageState extends State<FavorisPage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  
  // âœ… SERVICES MODERNES
  final FirebaseInspirationService _inspirationService = FirebaseInspirationService.instance;
  final FirebaseTattooistService _tattooistService = FirebaseTattooistService.instance;

  // âœ… DONNÃ‰ES TYPÃ‰ES
  List<Map<String, dynamic>> _favoriteInspirations = [];
  List<TatoueurSummary> _favoriteTattooists = [];
  bool _isLoadingInspirations = false;
  bool _isLoadingTattooists = false;
  String? _errorMessage;

  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo2.png',
    'assets/background1.png',
    'assets/background2.png',
  ];

  late String _selectedBackground;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
    _loadFavorites();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  /// âœ… CHARGER TOUS LES FAVORIS
  Future<void> _loadFavorites() async {
    await Future.wait([
      _loadFavoriteInspirations(),
      _loadFavoriteTattooists(),
    ]);
  }

  /// âœ… CHARGER INSPIRATIONS FAVORITES
  Future<void> _loadFavoriteInspirations() async {
    setState(() {
      _isLoadingInspirations = true;
      _errorMessage = null;
    });

    try {
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… MODE DÃ‰MO - DonnÃ©es factices
        await Future.delayed(const Duration(milliseconds: 800));
        _favoriteInspirations = _generateDemoInspirations();
        print('ðŸŽ­ ${_favoriteInspirations.length} inspirations dÃ©mo chargÃ©es');
      } else {
        // âœ… MODE PRODUCTION - Firebase rÃ©el
        final currentUser = SecureAuthService.instance.currentUser;
        if (currentUser != null) {
          _favoriteInspirations = await _inspirationService.getFavoriteInspirations(
            userId: currentUser.uid,
          );
          print('ðŸ­ ${_favoriteInspirations.length} inspirations favorites chargÃ©es');
        } else {
          _favoriteInspirations = [];
        }
      }
    } catch (e) {
      print('âŒ Erreur chargement inspirations: $e');
      setState(() => _errorMessage = 'Erreur chargement inspirations: $e');
      
      // Fallback en cas d'erreur
      if (DatabaseManager.instance.isDemoMode) {
        _favoriteInspirations = _generateDemoInspirations();
      }
    } finally {
      setState(() => _isLoadingInspirations = false);
    }
  }

  /// âœ… CHARGER TATOUEURS FAVORIS
  Future<void> _loadFavoriteTattooists() async {
    setState(() {
      _isLoadingTattooists = true;
      _errorMessage = null;
    });

    try {
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… MODE DÃ‰MO - DonnÃ©es factices
        await Future.delayed(const Duration(milliseconds: 600));
        _favoriteTattooists = _generateDemoTattooists();
        print('ðŸŽ­ ${_favoriteTattooists.length} tatoueurs dÃ©mo chargÃ©s');
      } else {
        // âœ… MODE PRODUCTION - Firebase rÃ©el
        final currentUser = SecureAuthService.instance.currentUser;
        if (currentUser != null) {
          final rawTattooists = await _tattooistService.getFavoriteTattooists(
            userId: currentUser.uid,
          );
          
          // Convertir en TatoueurSummary
          _favoriteTattooists = rawTattooists.map((data) => 
            TatoueurSummary.fromFirestore(data, data['id'])
          ).toList();
          
          print('ðŸ­ ${_favoriteTattooists.length} tatoueurs favoris chargÃ©s');
        } else {
          _favoriteTattooists = [];
        }
      }
    } catch (e) {
      print('âŒ Erreur chargement tatoueurs: $e');
      setState(() => _errorMessage = 'Erreur chargement tatoueurs: $e');
      
      // Fallback en cas d'erreur
      if (DatabaseManager.instance.isDemoMode) {
        _favoriteTattooists = _generateDemoTattooists();
      }
    } finally {
      setState(() => _isLoadingTattooists = false);
    }
  }

  /// âœ… GÃ‰NÃ‰RER INSPIRATIONS DÃ‰MO
  List<Map<String, dynamic>> _generateDemoInspirations() {
    final styles = ['RÃ©alisme', 'Japonais', 'GÃ©omÃ©trique', 'Minimaliste', 'Traditionnel', 'Aquarelle'];
    final authors = ['Alex Ink', 'Maya Art', 'Vincent Style', 'Sarah Design', 'Lucas Black', 'Emma Vision'];
    
    return List.generate(8, (i) {
      final style = styles[Random().nextInt(styles.length)];
      final author = authors[Random().nextInt(authors.length)];
      
      return {
        'id': 'demo_inspiration_$i',
        'title': 'Inspiration $style ${i + 1}',
        'imageUrl': 'https://picsum.photos/seed/inspiration$i/${300 + (i * 50)}/${400 + (i * 30)}',
        'style': style,
        'category': 'Tatouage',
        'description': '[DÃ‰MO] Une magnifique Å“uvre de style $style crÃ©Ã©e par notre artiste $author.',
        'authorName': author,
        'authorAvatarUrl': 'https://picsum.photos/seed/author$i/100/100',
        'isFromProfessional': Random().nextBool(),
        'isFavorite': true,
        'likes': Random().nextInt(150) + 20,
        'views': Random().nextInt(500) + 100,
        'tags': [style, 'Inspirant', 'CrÃ©atif'],
        'createdAt': DateTime.now().subtract(Duration(days: Random().nextInt(30))).toIso8601String(),
        '_source': 'demo',
      };
    });
  }

  /// âœ… GÃ‰NÃ‰RER TATOUEURS DÃ‰MO
  List<TatoueurSummary> _generateDemoTattooists() {
    // Utiliser les donnÃ©es de dÃ©monstration du modÃ¨le TatoueurSummary
    final demoTattooists = TatoueurSummaryDemo.generateDemoList(count: 6);
    
    // Marquer tous comme favoris en mode dÃ©mo
    return demoTattooists.map((tatoueur) => tatoueur.copyWith()).toList();
  }

  /// âœ… TOGGLE FAVORI INSPIRATION
  Future<void> _toggleInspirationFavorite(Map<String, dynamic> inspiration) async {
    try {
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… MODE DÃ‰MO - Simulation
        await Future.delayed(const Duration(milliseconds: 300));
        setState(() {
          _favoriteInspirations.removeWhere((p) => p['id'] == inspiration['id']);
        });
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text('ðŸŽ­ Favori retirÃ© (mode dÃ©mo)'),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
            ),
          );
        }
      } else {
        // âœ… MODE PRODUCTION - Firebase rÃ©el
        final currentUser = SecureAuthService.instance.currentUser;
        if (currentUser != null) {
          await _inspirationService.toggleFavorite(
            inspirationId: inspiration['id'],
            userId: currentUser.uid,
          );
          
          // Recharger la liste
          await _loadFavoriteInspirations();
        }
      }
    } catch (e) {
      print('âŒ Erreur toggle favori inspiration: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  /// âœ… TOGGLE FAVORI TATOUEUR
  Future<void> _toggleTattooistFavorite(TatoueurSummary tatoueur) async {
    try {
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… MODE DÃ‰MO - Simulation
        await Future.delayed(const Duration(milliseconds: 300));
        setState(() {
          _favoriteTattooists.removeWhere((t) => t.id == tatoueur.id);
        });
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text('ðŸŽ­ Tatoueur retirÃ© des favoris (mode dÃ©mo)'),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
            ),
          );
        }
      } else {
        // âœ… MODE PRODUCTION - Firebase rÃ©el
        final currentUser = SecureAuthService.instance.currentUser;
        if (currentUser != null) {
          await _tattooistService.toggleFavorite(
            tattooistId: tatoueur.id,
            userId: currentUser.uid,
          );
          
          // Recharger la liste
          await _loadFavoriteTattooists();
        }
      }
    } catch (e) {
      print('âŒ Erreur toggle favori tatoueur: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: isDemoMode ? 'Mes favoris ðŸŽ­' : 'Mes favoris',
        showBackButton: true,
        redirectToHome: true,
        showNotificationIcon: true,
      ),
      body: Stack(
        children: [
          // Fond alÃ©atoire
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),

          // âœ… Indicateur mode dÃ©mo
          if (isDemoMode) ...[
            Positioned(
              top: 10,
              right: 10,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.9),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'ðŸŽ­ Mode ${DatabaseManager.instance.activeDatabaseConfig.name}',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ],

          Column(
            children: [
              Container(
                color: Colors.black.withOpacity(0.7),
                child: TabBar(
                  controller: _tabController,
                  indicatorColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
                  labelColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
                  unselectedLabelColor: Colors.white,
                  tabs: const [
                    Tab(icon: Icon(Icons.image), text: 'Inspirations'),
                    Tab(icon: Icon(Icons.person), text: 'Tatoueurs'),
                  ],
                ),
              ),
              
              // âœ… Message d'erreur si nÃ©cessaire
              if (_errorMessage != null) ...[
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(8),
                  color: Colors.red.withOpacity(0.1),
                  child: Text(
                    _errorMessage!,
                    style: const TextStyle(color: Colors.red, fontSize: 12),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
              
              Expanded(
                child: TabBarView(
                  controller: _tabController,
                  children: [
                    _buildInspirationsTab(),
                    _buildTattooersTab(),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildInspirationsTab() {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    if (_isLoadingInspirations) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(
              color: isDemoMode ? Colors.orange : KipikTheme.rouge,
            ),
            const SizedBox(height: 16),
            Text(
              isDemoMode 
                  ? 'Chargement des inspirations dÃ©mo...'
                  : 'Chargement de vos inspirations...',
              style: const TextStyle(color: Colors.white),
            ),
          ],
        ),
      );
    }
    
    if (_favoriteInspirations.isEmpty) {
      return Center(
        child: Container(
          padding: const EdgeInsets.all(24),
          margin: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(24),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.favorite_border, 
                size: 64, 
                color: (isDemoMode ? Colors.orange : KipikTheme.rouge).withOpacity(0.5)
              ),
              const SizedBox(height: 16),
              Text(
                isDemoMode 
                    ? 'Pas d\'inspirations en mode dÃ©mo'
                    : 'Pas encore d\'inspirations favorites',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 20,
                  color: KipikTheme.noir,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                isDemoMode
                    ? 'Explorez les inspirations pour voir le contenu dÃ©mo'
                    : 'Explorez les inspirations et ajoutez-les Ã  vos favoris',
                style: TextStyle(color: Colors.grey[600], fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () => Navigator.pushNamed(context, '/inspirations'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                ),
                child: const Text('Explorer les inspirations'),
              ),
            ],
          ),
        ),
      );
    }

    return MasonryGridView.count(
      crossAxisCount: 2,
      mainAxisSpacing: 8,
      crossAxisSpacing: 8,
      padding: const EdgeInsets.all(8),
      itemCount: _favoriteInspirations.length,
      itemBuilder: (_, i) => _buildInspirationCard(_favoriteInspirations[i]),
    );
  }

  Widget _buildTattooersTab() {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    if (_isLoadingTattooists) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(
              color: isDemoMode ? Colors.orange : KipikTheme.rouge,
            ),
            const SizedBox(height: 16),
            Text(
              isDemoMode 
                  ? 'Chargement des tatoueurs dÃ©mo...'
                  : 'Chargement de vos tatoueurs favoris...',
              style: const TextStyle(color: Colors.white),
            ),
          ],
        ),
      );
    }
    
    if (_favoriteTattooists.isEmpty) {
      return Center(
        child: Container(
          padding: const EdgeInsets.all(24),
          margin: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(24),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.favorite_border, 
                size: 64, 
                color: (isDemoMode ? Colors.orange : KipikTheme.rouge).withOpacity(0.5)
              ),
              const SizedBox(height: 16),
              Text(
                isDemoMode
                    ? 'Pas de tatoueurs en mode dÃ©mo'
                    : 'Pas encore de tatoueurs favoris',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 20,
                  color: KipikTheme.noir,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                isDemoMode
                    ? 'Explorez les tatoueurs pour voir le contenu dÃ©mo'
                    : 'Explorez les tatoueurs et ajoutez-les Ã  vos favoris',
                style: TextStyle(color: Colors.grey[600], fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () => Navigator.pushNamed(context, '/recherche_tatoueur'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                ),
                child: const Text('DÃ©couvrir des tatoueurs'),
              ),
            ],
          ),
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _favoriteTattooists.length,
      itemBuilder: (_, i) => _buildTattooistCard(_favoriteTattooists[i]),
    );
  }

  /// âœ… CARTE INSPIRATION MODERNE
  Widget _buildInspirationCard(Map<String, dynamic> inspiration) {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    final cardHeight = 150 + (inspiration['id'].hashCode % 100).toDouble();
    
    return GestureDetector(
      onTap: () {
        // TODO: Navigation vers dÃ©tail inspiration
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              isDemoMode 
                  ? 'ðŸŽ­ DÃ©tail inspiration "${inspiration['title']}" (dÃ©mo)'
                  : 'DÃ©tail inspiration "${inspiration['title']}"'
            ),
            backgroundColor: isDemoMode ? Colors.orange : KipikTheme.rouge,
          ),
        );
      },
      child: Card(
        clipBehavior: Clip.antiAlias,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(
            color: (isDemoMode ? Colors.orange : KipikTheme.rouge).withOpacity(0.3), 
            width: 1
          ),
        ),
        elevation: 4,
        child: Stack(
          children: [
            SizedBox(
              height: cardHeight,
              width: double.infinity,
              child: Hero(
                tag: 'inspiration_${inspiration['id']}',
                child: Image.network(
                  inspiration['imageUrl'],
                  fit: BoxFit.cover,
                  loadingBuilder: (context, child, loadingProgress) {
                    if (loadingProgress == null) return child;
                    return Container(
                      color: Colors.grey[300],
                      child: const Center(child: CircularProgressIndicator()),
                    );
                  },
                  errorBuilder: (context, error, stackTrace) {
                    return Container(
                      color: Colors.grey[300],
                      child: const Icon(Icons.error, size: 50),
                    );
                  },
                ),
              ),
            ),
            
            // Informations auteur
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.bottomCenter,
                    end: Alignment.topCenter,
                    colors: [Colors.black.withOpacity(0.7), Colors.transparent],
                  ),
                ),
                child: Row(
                  children: [
                    CircleAvatar(
                      radius: 16, 
                      backgroundImage: NetworkImage(inspiration['authorAvatarUrl']),
                      onBackgroundImageError: (error, stackTrace) {},
                      child: inspiration['authorAvatarUrl'] == null 
                          ? const Icon(Icons.person, size: 16)
                          : null,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            inspiration['authorName'],
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 12,
                              fontFamily: 'PermanentMarker',
                            ),
                            overflow: TextOverflow.ellipsis,
                          ),
                          Text(
                            inspiration['style'] ?? 'Style',
                            style: const TextStyle(
                              color: Colors.white70,
                              fontSize: 10,
                            ),
                            overflow: TextOverflow.ellipsis,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            
            // Bouton favori
            Positioned(
              top: 8,
              right: 8,
              child: GestureDetector(
                onTap: () => _toggleInspirationFavorite(inspiration),
                child: Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.5),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.favorite, 
                    color: isDemoMode ? Colors.orange : KipikTheme.rouge, 
                    size: 20
                  ),
                ),
              ),
            ),
            
            // Badge PRO ou DÃ‰MO
            Positioned(
              top: 8,
              left: 8,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: isDemoMode ? Colors.orange : KipikTheme.rouge,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  isDemoMode 
                      ? 'DÃ‰MO'
                      : (inspiration['isFromProfessional'] == true ? 'PRO' : 'USER'),
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 10,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// âœ… CARTE TATOUEUR MODERNE
  Widget _buildTattooistCard(TatoueurSummary tatoueur) {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(
          color: isDemoMode ? Colors.orange : KipikTheme.rouge, 
          width: 1.5
        ),
      ),
      child: InkWell(
        onTap: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => ProfilTatoueur(
              tatoueurId: tatoueur.id,
              forceMode: UserRole.client,
              name: tatoueur.name,
              studio: tatoueur.studioName ?? 'Studio indÃ©pendant',
              style: tatoueur.specialtiesText,
              location: tatoueur.location,
              availability: tatoueur.availability,
              note: tatoueur.rating ?? 4.5,
              instagram: tatoueur.instagram ?? '@tatoueur',
              distance: tatoueur.distanceText,
              address: 'Adresse du studio',
            ),
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Image de couverture simulÃ©e
            SizedBox(
              height: 120,
              width: double.infinity,
              child: Stack(
                fit: StackFit.expand,
                children: [
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Colors.grey[800]!,
                          Colors.grey[600]!,
                        ],
                      ),
                    ),
                    child: tatoueur.avatarUrl.isNotEmpty
                        ? Image.network(
                            tatoueur.avatarUrl,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) {
                              return Container(
                                color: Colors.grey[300],
                                child: const Icon(Icons.person, size: 50),
                              );
                            },
                          )
                        : const Icon(Icons.person, size: 50, color: Colors.white),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [
                          Colors.transparent,
                          Colors.black.withOpacity(0.7),
                        ],
                      ),
                    ),
                  ),
                  Positioned(
                    bottom: 8,
                    right: 8,
                    child: IconButton(
                      icon: Icon(
                        Icons.favorite, 
                        color: isDemoMode ? Colors.orange : KipikTheme.rouge, 
                        size: 28
                      ),
                      onPressed: () => _toggleTattooistFavorite(tatoueur),
                    ),
                  ),
                  if (isDemoMode) ...[
                    Positioned(
                      top: 8,
                      left: 8,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.orange.withOpacity(0.9),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Text(
                          'DÃ‰MO',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
            
            // Infos tatoueur
            Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundColor: Colors.grey[300],
                    backgroundImage: tatoueur.avatarUrl.isNotEmpty 
                        ? NetworkImage(tatoueur.avatarUrl)
                        : null,
                    child: tatoueur.avatarUrl.isEmpty 
                        ? Text(
                            tatoueur.name.isNotEmpty ? tatoueur.name[0].toUpperCase() : '?',
                            style: const TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                            ),
                          )
                        : null,
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                tatoueur.name,
                                style: const TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 18,
                                  fontFamily: 'PermanentMarker',
                                ),
                              ),
                            ),
                            Row(
                              children: [
                                const Icon(Icons.star, color: Colors.amber, size: 16),
                                const SizedBox(width: 4),
                                Text(
                                  tatoueur.ratingText,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 14,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            Icon(Icons.location_on, size: 16, color: Colors.grey[600]),
                            const SizedBox(width: 4),
                            Expanded(
                              child: Text(
                                tatoueur.location,
                                style: TextStyle(color: Colors.grey[600]),
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            Icon(Icons.style, size: 16, color: Colors.grey[600]),
                            const SizedBox(width: 4),
                            Expanded(
                              child: Text(
                                tatoueur.specialtiesText,
                                style: TextStyle(color: Colors.grey[600]),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            Icon(Icons.access_time, size: 16, color: Colors.grey[600]),
                            const SizedBox(width: 4),
                            Text(
                              tatoueur.availability,
                              style: TextStyle(color: Colors.grey[600], fontSize: 12),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\flash_dispo_page.dart

// lib/pages/particulier/flash_dispo_page.dart
import 'package:flutter/material.dart';
class FlashDispoPage extends StatelessWidget {
  const FlashDispoPage({Key? key}) : super(key: key);
  @override Widget build(BuildContext c) => Scaffold(
    appBar: AppBar(title: const Text('La chance est avec toi')),
    body: const Center(child: Text('Flashs disponibles aujourdâ€™hui')),
  );
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\guide_tatouage_page.dart

// lib/pages/particulier/guide_tatouage_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_particulier.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_particulier.dart';

class GuideTatouagePage extends StatefulWidget {
  const GuideTatouagePage({Key? key}) : super(key: key);

  @override
  State<GuideTatouagePage> createState() => _GuideTatouagePageState();
}

class _GuideTatouagePageState extends State<GuideTatouagePage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  
  final List<String> _backgroundImages = [
    'assets/images/header_tattoo_wallpaper.png',
    'assets/images/header_tattoo_wallpaper2.png',
    'assets/images/header_tattoo_wallpaper3.png',
  ];
  late String _selectedBackground;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Guide du tatouage',
        showBackButton: true,
        redirectToHome: true,
        showBurger: false,
        showNotificationIcon: true,
      ),
      drawer: const CustomDrawerParticulier(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond avec image alÃ©atoire
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            alignment: Alignment.topCenter,
          ),
          
          // Overlay dÃ©gradÃ©
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withOpacity(0.3),
                  Colors.black.withOpacity(0.7),
                ],
              ),
            ),
          ),
          
          Column(
            children: [
              // Header avec tabs
              Container(
                margin: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.8),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: KipikTheme.rouge.withOpacity(0.5),
                    width: 1,
                  ),
                ),
                child: TabBar(
                  controller: _tabController,
                  indicatorColor: KipikTheme.rouge,
                  indicatorWeight: 3,
                  labelColor: KipikTheme.rouge,
                  unselectedLabelColor: Colors.white70,
                  labelStyle: const TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 12,
                  ),
                  tabs: const [
                    Tab(
                      icon: Icon(Icons.info_outline, size: 20),
                      text: 'Avant',
                    ),
                    Tab(
                      icon: Icon(Icons.healing, size: 20),
                      text: 'AprÃ¨s',
                    ),
                    Tab(
                      icon: Icon(Icons.palette, size: 20),
                      text: 'Styles',
                    ),
                    Tab(
                      icon: Icon(Icons.help_outline, size: 20),
                      text: 'FAQ',
                    ),
                  ],
                ),
              ),
              
              // Contenu des tabs
              Expanded(
                child: TabBarView(
                  controller: _tabController,
                  children: [
                    _buildAvantTab(),
                    _buildApresTab(),
                    _buildStylesTab(),
                    _buildFAQTab(),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAvantTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionCard(
            title: 'ðŸŽ¯ PrÃ©paration mentale',
            icon: Icons.psychology,
            content: [
              'RÃ©flÃ©chis bien au design et Ã  l\'emplacement',
              'Un tatouage est permanent, prends ton temps',
              'Ã‰vite les dÃ©cisions impulsives ou sous influence',
              'Pense Ã  l\'Ã©volution de ton corps dans le temps',
            ],
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'ðŸ” Choisir son tatoueur',
            icon: Icons.person_search,
            content: [
              'VÃ©rifie le portfolio et les rÃ©alisations',
              'Assure-toi que le salon respecte les normes d\'hygiÃ¨ne',
              'Lis les avis clients et demande des recommandations',
              'N\'hÃ©site pas Ã  rencontrer plusieurs tatoueurs',
              'VÃ©rifie les certifications et licences',
            ],
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'ðŸ’° Budget et timing',
            icon: Icons.account_balance_wallet,
            content: [
              'PrÃ©vois un budget rÃ©aliste (qualitÃ© = prix)',
              'Ne nÃ©glige pas les pourboires (10-20%)',
              'Planifie selon la saison (Ã©vite l\'Ã©tÃ© pour certaines zones)',
              'RÃ©serve Ã  l\'avance, les bons tatoueurs sont demandÃ©s',
            ],
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'ðŸš« Contre-indications',
            icon: Icons.warning,
            content: [
              'Ã‰vite l\'alcool 24h avant',
              'Ne prends pas d\'aspirine ou anticoagulants',
              'Ã‰vite si tu es malade ou fatiguÃ©',
              'Attention aux allergies (encres, latex)',
              'Femmes enceintes : attendre aprÃ¨s l\'accouchement',
            ],
            isWarning: true,
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'ðŸ¥— PrÃ©paration physique',
            icon: Icons.fitness_center,
            content: [
              'Mange bien avant la sÃ©ance',
              'Hydrate-toi correctement',
              'Dors suffisamment la nuit prÃ©cÃ©dente',
              'Porte des vÃªtements confortables et adaptÃ©s',
              'PrÃ©pare de quoi t\'occuper (musique, livre)',
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildApresTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionCard(
            title: 'ðŸ§¼ Nettoyage et soins',
            icon: Icons.clean_hands,
            content: [
              'Retire le film plastique aprÃ¨s 2-3h',
              'Lave dÃ©licatement Ã  l\'eau tiÃ¨de et savon neutre',
              'SÃ¨che en tamponnant (pas de frottement)',
              'Applique une crÃ¨me cicatrisante fine',
              'RÃ©pÃ¨te 2-3 fois par jour pendant 2 semaines',
            ],
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'ðŸš¿ HygiÃ¨ne quotidienne',
            icon: Icons.shower,
            content: [
              'Douches courtes Ã  l\'eau tiÃ¨de',
              'Ã‰vite les bains, piscines, jacuzzis (2 semaines)',
              'Ne gratte jamais, mÃªme si Ã§a dÃ©mange',
              'Porte des vÃªtements propres et amples',
              'Change rÃ©guliÃ¨rement tes draps',
            ],
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'â˜€ï¸ Protection solaire',
            icon: Icons.wb_sunny,
            content: [
              'Ã‰vite totalement le soleil les premiers jours',
              'Utilise un Ã©cran total (SPF 50+) aprÃ¨s cicatrisation',
              'ProtÃ¨ge avec des vÃªtements si possible',
              'Le soleil fait pÃ¢lir les couleurs',
            ],
          ),
          
          const SizedBox(height: 16),
          
          _buildSectionCard(
            title: 'ðŸš¨ Signes d\'alerte',
            icon: Icons.emergency,
            content: [
              'Rougeur excessive qui s\'Ã©tend',
              'Chaleur anormale de la zone',
              'Pus ou Ã©coulement suspect',
              'FiÃ¨vre ou malaise gÃ©nÃ©ral',
              'Douleur qui s\'aggrave aprÃ¨s 48h',
            ],
            isWarning: true,
          ),
          
          const SizedBox(height: 16),
          
          _buildTimelineCard(),
        ],
      ),
    );
  }

  Widget _buildStylesTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          _buildStyleCard(
            title: 'RÃ©alisme',
            description: 'Portraits, paysages ultra-dÃ©taillÃ©s',
            features: ['Noir et gris', 'Couleurs rÃ©alistes', 'TrÃ¨s dÃ©taillÃ©'],
            difficulty: 'Expert',
            duration: '4-8h par sÃ©ance',
          ),
          
          const SizedBox(height: 16),
          
          _buildStyleCard(
            title: 'Traditionnel',
            description: 'Style old school classique',
            features: ['Traits Ã©pais', 'Couleurs vives', 'Motifs iconiques'],
            difficulty: 'IntermÃ©diaire',
            duration: '2-4h par sÃ©ance',
          ),
          
          const SizedBox(height: 16),
          
          _buildStyleCard(
            title: 'GÃ©omÃ©trique',
            description: 'Formes et motifs gÃ©omÃ©triques',
            features: ['Lignes prÃ©cises', 'SymÃ©trie', 'Moderne'],
            difficulty: 'IntermÃ©diaire',
            duration: '3-6h par sÃ©ance',
          ),
          
          const SizedBox(height: 16),
          
          _buildStyleCard(
            title: 'Minimaliste',
            description: 'Designs simples et Ã©purÃ©s',
            features: ['Traits fins', 'Peu de couleurs', 'Symbolique'],
            difficulty: 'DÃ©butant',
            duration: '1-2h par sÃ©ance',
          ),
          
          const SizedBox(height: 16),
          
          _buildStyleCard(
            title: 'Japonais',
            description: 'Art traditionnel du Japon',
            features: ['Grandes piÃ¨ces', 'Couleurs vives', 'Symbolisme fort'],
            difficulty: 'Expert',
            duration: '6-10h par sÃ©ance',
          ),
        ],
      ),
    );
  }

  Widget _buildFAQTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          _buildFAQCard(
            question: 'Est-ce que Ã§a fait mal ?',
            answer: 'La douleur varie selon la zone et votre seuil de tolÃ©rance. '
                   'Les zones osseuses (cÃ´tes, chevilles) sont plus sensibles. '
                   'C\'est supportable pour la plupart des gens.',
          ),
          
          const SizedBox(height: 12),
          
          _buildFAQCard(
            question: 'Combien Ã§a coÃ»te ?',
            answer: 'Les prix varient de 80â‚¬ Ã  200â‚¬/heure selon le tatoueur. '
                   'Un petit tatouage : 80-150â‚¬. Un tatouage moyen : 200-500â‚¬. '
                   'Une grande piÃ¨ce : 800â‚¬ et plus.',
          ),
          
          const SizedBox(height: 12),
          
          _buildFAQCard(
            question: 'Combien de temps Ã§a cicatrise ?',
            answer: 'La cicatrisation superficielle prend 2-3 semaines. '
                   'La cicatrisation complÃ¨te prend 3-6 mois. '
                   'Respecte les soins pour Ã©viter les complications.',
          ),
          
          const SizedBox(height: 12),
          
          _buildFAQCard(
            question: 'Peut-on faire du sport aprÃ¨s ?',
            answer: 'Ã‰vite le sport intense pendant 1-2 semaines. '
                   'La transpiration et les frottements retardent la cicatrisation. '
                   'Reprends progressivement.',
          ),
          
          const SizedBox(height: 12),
          
          _buildFAQCard(
            question: 'Et si je regrette ?',
            answer: 'Le dÃ©tatouage au laser est possible mais coÃ»teux et long. '
                   'Plusieurs sÃ©ances nÃ©cessaires (6-15). '
                   'Mieux vaut bien rÃ©flÃ©chir avant !',
          ),
          
          const SizedBox(height: 12),
          
          _buildFAQCard(
            question: 'Ã‚ge minimum pour un tatouage ?',
            answer: 'En France : 18 ans. Entre 16-18 ans avec autorisation parentale. '
                   'Beaucoup de tatoueurs prÃ©fÃ¨rent attendre 18 ans pour '
                   'des questions de maturitÃ©.',
          ),
          
          const SizedBox(height: 12),
          
          _buildFAQCard(
            question: 'Tatouage et don du sang ?',
            answer: 'DÃ©lai de 4 mois aprÃ¨s un tatouage en France. '
                   'VÃ©rifie que ton tatoueur respecte les normes d\'hygiÃ¨ne. '
                   'Garde tes certificats de tatouage.',
          ),
        ],
      ),
    );
  }

  Widget _buildSectionCard({
    required String title,
    required IconData icon,
    required List<String> content,
    bool isWarning = false,
  }) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.8),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: isWarning 
              ? Colors.orange.withOpacity(0.5)
              : KipikTheme.rouge.withOpacity(0.5),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: isWarning 
                        ? Colors.orange.withOpacity(0.2)
                        : KipikTheme.rouge.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(
                    icon,
                    color: isWarning ? Colors.orange : KipikTheme.rouge,
                    size: 24,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      color: isWarning ? Colors.orange : KipikTheme.rouge,
                      fontSize: 18,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // Content
            ...content.map((item) => Padding(
              padding: const EdgeInsets.only(bottom: 8),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    width: 6,
                    height: 6,
                    margin: const EdgeInsets.only(top: 8, right: 12),
                    decoration: BoxDecoration(
                      color: isWarning ? Colors.orange : KipikTheme.rouge,
                      shape: BoxShape.circle,
                    ),
                  ),
                  Expanded(
                    child: Text(
                      item,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 15,
                        height: 1.4,
                      ),
                    ),
                  ),
                ],
              ),
            )),
          ],
        ),
      ),
    );
  }

  Widget _buildTimelineCard() {
    final steps = [
      {'time': 'Jour 1-3', 'desc': 'Suintement normal, rougeur', 'color': Colors.red},
      {'time': 'Jour 4-7', 'desc': 'Formation de croÃ»tes', 'color': Colors.orange},
      {'time': 'Jour 8-14', 'desc': 'Desquamation, dÃ©mangeaisons', 'color': Colors.yellow},
      {'time': 'Jour 15-30', 'desc': 'Peau encore sensible', 'color': Colors.blue},
      {'time': '1-3 mois', 'desc': 'Cicatrisation complÃ¨te', 'color': Colors.green},
    ];

    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.8),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: KipikTheme.rouge.withOpacity(0.5),
          width: 1,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.timeline, color: KipikTheme.rouge, size: 24),
                const SizedBox(width: 12),
                const Text(
                  'ðŸ“… Timeline de cicatrisation',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'PermanentMarker',
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 20),
            
            ...steps.asMap().entries.map((entry) {
              final index = entry.key;
              final step = entry.value;
              final isLast = index == steps.length - 1;
              
              return Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Timeline indicator
                  Column(
                    children: [
                      Container(
                        width: 12,
                        height: 12,
                        decoration: BoxDecoration(
                          color: step['color'] as Color,
                          shape: BoxShape.circle,
                        ),
                      ),
                      if (!isLast)
                        Container(
                          width: 2,
                          height: 40,
                          color: Colors.white.withOpacity(0.3),
                        ),
                    ],
                  ),
                  
                  const SizedBox(width: 16),
                  
                  // Content
                  Expanded(
                    child: Padding(
                      padding: EdgeInsets.only(bottom: isLast ? 0 : 24),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            step['time'] as String,
                            style: TextStyle(
                              color: step['color'] as Color,
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            step['desc'] as String,
                            style: const TextStyle(
                              color: Colors.white70,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              );
            }),
          ],
        ),
      ),
    );
  }

  Widget _buildStyleCard({
    required String title,
    required String description,
    required List<String> features,
    required String difficulty,
    required String duration,
  }) {
    Color difficultyColor = difficulty == 'DÃ©butant' ? Colors.green :
                            difficulty == 'IntermÃ©diaire' ? Colors.orange :
                            Colors.red;

    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.8),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: KipikTheme.rouge.withOpacity(0.5),
          width: 1,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Row(
              children: [
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      color: KipikTheme.rouge,
                      fontSize: 20,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: difficultyColor.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: difficultyColor.withOpacity(0.5)),
                  ),
                  child: Text(
                    difficulty,
                    style: TextStyle(
                      color: difficultyColor,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 8),
            
            Text(
              description,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Features
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: features.map((feature) => Container(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
                ),
                child: Text(
                  feature,
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 12,
                  ),
                ),
              )).toList(),
            ),
            
            const SizedBox(height: 12),
            
            // Duration
            Row(
              children: [
                Icon(Icons.access_time, color: Colors.white70, size: 16),
                const SizedBox(width: 6),
                Text(
                  duration,
                  style: const TextStyle(
                    color: Colors.white70,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFAQCard({
    required String question,
    required String answer,
  }) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.8),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: KipikTheme.rouge.withOpacity(0.3),
          width: 1,
        ),
      ),
      child: ExpansionTile(
        title: Text(
          question,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
        iconColor: KipikTheme.rouge,
        collapsedIconColor: Colors.white70,
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
            child: Text(
              answer,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\inscription_particulier_page.dart

// lib/pages/particulier/inscription_particulier_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';

import 'package:kipik_v5/services/auth/secure_auth_service.dart'; // âœ… MIGRATION
import 'package:kipik_v5/services/auth/captcha_manager.dart'; // âœ… MIGRATION: reCAPTCHA
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/utils/cgu_cgv_validation_widget.dart';
import 'package:kipik_v5/pages/particulier/confirmation_inscription_particulier_page.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/services/config/api_config.dart'; // âœ… NOUVEAU - ApiConfig

class InscriptionParticulierPage extends StatefulWidget {
  const InscriptionParticulierPage({
    Key? key,
  }) : super(key: key);

  @override
  State<InscriptionParticulierPage> createState() =>
      _InscriptionParticulierPageState();
}

class _InscriptionParticulierPageState
    extends State<InscriptionParticulierPage> {
  final _formKey = GlobalKey<FormState>();

  // âœ… MIGRATION: Service sÃ©curisÃ© centralisÃ©
  SecureAuthService get _authService => SecureAuthService.instance;

  // Controllers
  final nomController = TextEditingController();
  final prenomController = TextEditingController();
  final numeroController = TextEditingController();
  final rueController = TextEditingController();
  final codePostalController = TextEditingController();
  final villeController = TextEditingController();
  final telController = TextEditingController();
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  final confirmPasswordController = TextEditingController();

  DateTime? dateNaissance;
  XFile? pieceIdentite;

  bool newsletterAccepted = false;
  bool showPassword = false;
  bool showConfirmPassword = false;
  bool cguLu = false;
  bool cgvLu = false;
  bool _isLoading = false; // âœ… Ã‰tat de chargement
  
  // âœ… NOUVEAU: Variables pour la vÃ©rification d'Ã¢ge
  bool majoriteConfirmee = false; // âœ… Certification majoritÃ©
  String? ageError; // âœ… Erreur d'Ã¢ge

  static const Map<String, List<String>> villesParCodePostal = {
    '54510': ['Tomblaine'],
    '75001': ['Paris 1er'],
    '69001': ['Lyon 1er'],
    // Ajoutez plus de codes postaux selon vos besoins
  };

  String? _requiredValidator(String? v) =>
      (v == null || v.trim().isEmpty) ? 'Champ obligatoire' : null;

  String? _validateEmail(String? v) {
    if (v == null || v.isEmpty) return 'Email requis';
    final reg = RegExp(r'^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$');
    if (!reg.hasMatch(v.trim())) return 'Email invalide';
    return null;
  }

  String? _validatePassword(String? v) {
    if (v == null || v.isEmpty) return 'Mot de passe requis';
    if (v.length < 6) return '6 caractÃ¨res minimum';
    return null;
  }

  String? _validateConfirmPassword(String? v) {
    if (v != passwordController.text) return 'Les mots de passe ne correspondent pas';
    return null;
  }

  // âœ… NOUVEAU: MÃ©thode de vÃ©rification d'Ã¢ge
  bool _isOver18(DateTime birthDate) {
    final today = DateTime.now();
    final age = today.year - birthDate.year;
    
    // VÃ©rification prÃ©cise avec mois et jour
    if (today.month < birthDate.month || 
        (today.month == birthDate.month && today.day < birthDate.day)) {
      return age - 1 >= 18;
    }
    return age >= 18;
  }

  // âœ… MISE Ã€ JOUR: Validation avec vÃ©rification d'Ã¢ge
  bool get isFormValid =>
      _formKey.currentState?.validate() == true &&
      cguLu &&
      cgvLu &&
      pieceIdentite != null &&
      dateNaissance != null &&
      majoriteConfirmee && // âœ… Certification obligatoire
      (dateNaissance != null ? _isOver18(dateNaissance!) : false); // âœ… VÃ©rification Ã¢ge

  Future<void> _submitForm() async {
    if (!isFormValid) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Merci de remplir tous les champs obligatoires')),
      );
      return;
    }

    setState(() => _isLoading = true);

    try {
      // âœ… MIGRATION: Validation reCAPTCHA pour sÃ©curitÃ©
      final captchaResult = await CaptchaManager.instance.validateInvisibleCaptcha('signup');

      if (!captchaResult.isValid) {
        throw Exception('Validation de sÃ©curitÃ© Ã©chouÃ©e');
      }

      // âœ… MIGRATION: Nouvelle mÃ©thode SecureAuthService
      final user = await _authService.createUserWithEmailAndPassword(
        email: emailController.text.trim(),
        password: passwordController.text.trim(),
        displayName: '${prenomController.text.trim()} ${nomController.text.trim()}',
        userRole: 'client', // âœ… RÃ´le explicite pour particulier
        captchaResult: captchaResult,
      );

      if (user != null) {
        // âœ… MIGRATION: Mise Ã  jour du profil avec donnÃ©es additionnelles
        await _authService.updateUserProfile(
          additionalData: {
            'type': 'particulier',
            'nom': nomController.text.trim(),
            'prenom': prenomController.text.trim(),
            'telephone': telController.text.trim(),
            'adresse': {
              'numero': numeroController.text.trim(),
              'rue': rueController.text.trim(),
              'codePostal': codePostalController.text.trim(),
              'ville': villeController.text.trim(),
            },
            'dateNaissance': dateNaissance?.toIso8601String(),
            'newsletter': newsletterAccepted,
            'pieceIdentiteNom': pieceIdentite?.name,
            'inscriptionCompleted': true,
            'profileComplete': true,
            'signupCaptchaScore': captchaResult.score,
            'majoriteConfirmee': majoriteConfirmee, // âœ… Enregistrement de la certification
          },
        );

        if (mounted) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (_) => const ConfirmationInscriptionParticulierPage(),
            ),
          );
        }
      } else {
        throw Exception('Erreur lors de la crÃ©ation du compte');
      }
    } catch (e) {
      print('âŒ Erreur inscription particulier: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de l\'inscription: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  // âœ… NOUVEAU - Test Google Vision API
  Future<void> _testGoogleVisionAPI() async {
    try {
      print('ðŸ” Test complet de Google Vision...');
      
      // Test 1: Configuration
      final isConfigured = await ApiConfig.isGoogleVisionConfigured;
      print('âœ… Google Vision configurÃ©: $isConfigured');
      
      // Test 2: RÃ©cupÃ©ration clÃ©
      final apiKey = await ApiConfig.googleApiKey;
      print('âœ… ClÃ© API rÃ©cupÃ©rÃ©e: ${apiKey.substring(0, 15)}...');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('âœ… Google Vision API prÃªt ! (${apiKey.substring(0, 10)}...)'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
      }
    } catch (e) {
      print('âŒ Test Google Vision Ã©chouÃ©: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('âŒ Erreur: $e'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 5),
          ),
        );
      }
    }
  }

  // âœ… NOUVEAU - Upload avec vÃ©rification Google Vision
  Future<void> _uploadDocumentWithVerification() async {
    try {
      // 1. SÃ©lectionner le fichier
      final XFile? result = await openFile(
        acceptedTypeGroups: [
          XTypeGroup(
            label: 'Images et PDF',
            extensions: ['jpg', 'jpeg', 'png', 'pdf'],
          )
        ],
      );

      if (result == null) return;

      // 2. VÃ©rifier avec Google Vision si configurÃ©
      bool isGoogleVisionEnabled = false;
      try {
        isGoogleVisionEnabled = await ApiConfig.isGoogleVisionConfigured;
      } catch (e) {
        print('âš ï¸ Google Vision non disponible: $e');
      }

      if (isGoogleVisionEnabled) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                  ),
                  SizedBox(width: 12),
                  Text('ðŸ” Analyse du document en cours...'),
                ],
              ),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 3),
            ),
          );
        }

        // Simulation d'analyse Google Vision (remplacez par l'appel rÃ©el)
        await Future.delayed(Duration(seconds: 2));
        
        // Ici vous pouvez ajouter l'appel rÃ©el Ã  GoogleVisionService
        // final analysis = await GoogleVisionService.analyzeDocument(result);
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('âœ… Document analysÃ© et approuvÃ© !'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );
        }
      }

      // 3. Enregistrer le fichier
      setState(() => pieceIdentite = result);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('âœ… Document "${result.name}" tÃ©lÃ©chargÃ© avec succÃ¨s'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
      }

    } catch (e) {
      print('âŒ Erreur upload document: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('âŒ Erreur lors du tÃ©lÃ©chargement: $e'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 3),
          ),
        );
      }
    }
  }

  // âœ… OPTIMISÃ‰: InputDecoration compact avec PermanentMarker
  InputDecoration _inputDecoration(String label) => InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(
          fontFamily: 'PermanentMarker', // âœ… PermanentMarker conservÃ©
          fontSize: 11, // âœ… Taille rÃ©duite mais lisible
          color: Colors.black87,
          height: 0.9, // âœ… Interligne serrÃ© pour Ã©conomiser l'espace
        ),
        floatingLabelStyle: const TextStyle(
          fontFamily: 'PermanentMarker', 
          fontSize: 12, // âœ… Taille contrÃ´lÃ©e quand il flotte
          color: Colors.black87,
          height: 0.9,
        ),
        filled: true,
        fillColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 14, 
          vertical: 18, // âœ… Juste assez d'espace pour le label flottant
        ),
        isDense: true, // âœ… CRUCIAL: RÃ©duit la hauteur globale du champ
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: KipikTheme.rouge, width: 1.5),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: KipikTheme.rouge, width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.red, width: 1.5),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.red, width: 2),
        ),
        errorStyle: const TextStyle(
          fontFamily: 'PermanentMarker',
          fontSize: 10, // âœ… Erreurs compactes
          color: Colors.red,
          height: 1.0,
        ),
        suffixIcon: label.toLowerCase().contains('mot de passe')
            ? IconButton(
                icon: Icon(
                  label == 'Mot de passe *'
                      ? (showPassword ? Icons.visibility_off : Icons.visibility)
                      : (showConfirmPassword ? Icons.visibility_off : Icons.visibility),
                  color: KipikTheme.rouge,
                ),
                onPressed: () {
                  setState(() {
                    if (label == 'Mot de passe *') {
                      showPassword = !showPassword;
                    } else {
                      showConfirmPassword = !showConfirmPassword;
                    }
                  });
                },
              )
            : null,
      );

  // âœ… NOUVEAU: Widget de certification de majoritÃ©
  Widget _buildMajoriteConfirmation() {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: majoriteConfirmee ? Colors.green.withOpacity(0.1) : Colors.orange.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: majoriteConfirmee ? Colors.green : Colors.orange,
          width: 2,
        ),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Checkbox(
                value: majoriteConfirmee,
                onChanged: dateNaissance != null && _isOver18(dateNaissance!) 
                    ? (value) => setState(() => majoriteConfirmee = value!) 
                    : null, // âœ… DÃ©sactivÃ© si pas majeur
                activeColor: KipikTheme.rouge,
              ),
              Expanded(
                child: Text(
                  "Je certifie avoir plus de 18 ans *",
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 14,
                    color: dateNaissance != null && _isOver18(dateNaissance!) 
                        ? Colors.white 
                        : Colors.grey,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              Icon(
                majoriteConfirmee ? Icons.check_circle : Icons.warning,
                color: majoriteConfirmee ? Colors.green : Colors.orange,
              ),
            ],
          ),
          if (ageError != null) // âœ… Affichage de l'erreur d'Ã¢ge
            Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Row(
                children: [
                  const Icon(Icons.error, color: Colors.red, size: 16),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      ageError!,
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 11,
                        color: Colors.red,
                      ),
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  // âœ… Widget titres de sections avec headers tattoo (sans emoji dans le texte)
  Widget _buildSectionTitleWithHeader(String title, IconData icon, {int headerIndex = 1}) {
    final headers = [
      'assets/images/header_tattoo_wallpaper.png',
      'assets/images/header_tattoo_wallpaper2.png', 
      'assets/images/header_tattoo_wallpaper3.png',
    ];
    
    final headerImage = headers[(headerIndex - 1) % headers.length];

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        image: DecorationImage(
          image: AssetImage(headerImage),
          fit: BoxFit.cover,
          colorFilter: ColorFilter.mode(
            Colors.white.withOpacity(0.6),
            BlendMode.lighten,
          ),
        ),
        border: Border.all(color: KipikTheme.rouge, width: 2),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            icon,
            color: KipikTheme.rouge,
            size: 20,
            shadows: [
              Shadow(
                color: Colors.white.withOpacity(0.8),
                blurRadius: 2,
                offset: const Offset(1, 1),
              ),
            ],
          ),
          const SizedBox(width: 8),
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
              fontWeight: FontWeight.bold,
              shadows: [
                Shadow(
                  color: Colors.white,
                  blurRadius: 3,
                  offset: Offset(1, 1),
                ),
              ],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    // âœ… Nettoyage des controllers
    nomController.dispose();
    prenomController.dispose();
    numeroController.dispose();
    rueController.dispose();
    codePostalController.dispose();
    villeController.dispose();
    telController.dispose();
    emailController.dispose();
    passwordController.dispose();
    confirmPasswordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[Random().nextInt(backgrounds.length)];

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Inscription Particulier',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(bg, fit: BoxFit.cover),
          SafeArea(
            top: true,
            bottom: true,
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    // âœ… Indicateur de sÃ©curitÃ© reCAPTCHA avec PermanentMarker
                    Container(
                      margin: const EdgeInsets.only(bottom: 16),
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.green.withOpacity(0.8),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.green),
                      ),
                      child: const Row(
                        children: [
                          Icon(Icons.security, color: Colors.white, size: 20),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'Inscription sÃ©curisÃ©e avec reCAPTCHA',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                                fontFamily: 'PermanentMarker', // âœ… PermanentMarker pour les titres
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),

                    // âœ… Section Informations personnelles
                    _buildSectionTitleWithHeader('Informations personnelles', Icons.person, headerIndex: 1),

                    // Nom / PrÃ©nom avec Roboto pour le contenu saisi
                    TextFormField(
                      controller: nomController,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      decoration: _inputDecoration('Nom *'),
                      validator: _requiredValidator,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: prenomController,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      decoration: _inputDecoration('PrÃ©nom *'),
                      validator: _requiredValidator,
                    ),
                    const SizedBox(height: 20),

                    // âœ… Section Adresse
                    _buildSectionTitleWithHeader('Adresse', Icons.home, headerIndex: 2),

                    // Adresse
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: numeroController,
                            style: const TextStyle(
                              color: Colors.black87,
                              fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                            ),
                            decoration: _inputDecoration('NÂ° *'),
                            validator: _requiredValidator,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          flex: 3,
                          child: TextFormField(
                            controller: rueController,
                            style: const TextStyle(
                              color: Colors.black87,
                              fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                            ),
                            decoration: _inputDecoration('Rue *'),
                            validator: _requiredValidator,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: codePostalController,
                            style: const TextStyle(
                              color: Colors.black87,
                              fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                            ),
                            keyboardType: TextInputType.number,
                            decoration: _inputDecoration('Code postal *'),
                            validator: _requiredValidator,
                            onChanged: (v) {
                              final liste = villesParCodePostal[v.trim()];
                              // âœ… CORRECTION: Ne pas Ã©craser automatiquement si plusieurs villes
                              if (liste != null && liste.length == 1) {
                                setState(() {
                                  villeController.text = liste.first;
                                });
                              } else if (liste != null && liste.length > 1) {
                                // Vider le champ pour permettre Ã  l'utilisateur de choisir
                                setState(() {
                                  villeController.text = '';
                                });
                              } else {
                                setState(() {
                                  villeController.text = '';
                                });
                              }
                            },
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: TextFormField(
                            controller: villeController,
                            style: const TextStyle(
                              color: Colors.black87,
                              fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                            ),
                            decoration: _inputDecoration('Ville *'),
                            validator: _requiredValidator,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 20),

                    // âœ… Section Contact
                    _buildSectionTitleWithHeader('Contact', Icons.phone, headerIndex: 3),

                    // TÃ©lÃ©phone
                    TextFormField(
                      controller: telController,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      keyboardType: TextInputType.phone,
                      decoration: _inputDecoration('TÃ©lÃ©phone *'),
                      validator: _requiredValidator,
                    ),
                    const SizedBox(height: 12),

                    // Email
                    TextFormField(
                      controller: emailController,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      keyboardType: TextInputType.emailAddress,
                      decoration: _inputDecoration('Email *'),
                      validator: _validateEmail,
                    ),
                    const SizedBox(height: 20),

                    // âœ… Section SÃ©curitÃ©
                    _buildSectionTitleWithHeader('SÃ©curitÃ©', Icons.lock, headerIndex: 1),

                    // Mot de passe
                    TextFormField(
                      controller: passwordController,
                      obscureText: !showPassword,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      decoration: _inputDecoration('Mot de passe *'),
                      validator: _validatePassword,
                    ),
                    const SizedBox(height: 12),

                    // Confirmer mot de passe
                    TextFormField(
                      controller: confirmPasswordController,
                      obscureText: !showConfirmPassword,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      decoration: _inputDecoration('Confirmer mot de passe *'),
                      validator: _validateConfirmPassword,
                    ),
                    const SizedBox(height: 20),

                    // âœ… Section Informations complÃ©mentaires
                    _buildSectionTitleWithHeader('Informations complÃ©mentaires', Icons.calendar_today, headerIndex: 2),

                    // âœ… MISE Ã€ JOUR: Date de naissance avec validation d'Ã¢ge
                    InkWell(
                      onTap: () async {
                        final now = DateTime.now();
                        final pick = await showDatePicker(
                          context: context,
                          initialDate: dateNaissance ?? DateTime(now.year - 18),
                          firstDate: DateTime(1900),
                          lastDate: now,
                          locale: const Locale('fr', 'FR'),
                          // âœ… CORRECTION: ThÃ¨me personnalisÃ© avec couleur Kipik
                          builder: (context, child) {
                            return Theme(
                              data: Theme.of(context).copyWith(
                                colorScheme: ColorScheme.light(
                                  primary: KipikTheme.rouge, // âœ… Rouge Kipik au lieu de violet
                                  onPrimary: Colors.white,
                                  surface: Colors.white,
                                  onSurface: Colors.black,
                                ),
                                textButtonTheme: TextButtonThemeData(
                                  style: TextButton.styleFrom(
                                    foregroundColor: KipikTheme.rouge, // âœ… Boutons en rouge Kipik
                                  ),
                                ),
                              ),
                              child: child!,
                            );
                          },
                        );
                        
                        if (pick != null) {
                          setState(() {
                            dateNaissance = pick;
                            
                            // âœ… VALIDATION AUTOMATIQUE D'Ã‚GE
                            if (!_isOver18(pick)) {
                              ageError = "Vous devez avoir au moins 18 ans pour vous inscrire";
                              majoriteConfirmee = false;
                            } else {
                              ageError = null;
                              // Ne pas cocher automatiquement, l'utilisateur doit le faire
                            }
                          });
                        }
                      },
                      child: InputDecorator(
                        decoration: _inputDecoration('Date de naissance *').copyWith(
                          // âœ… Bordure rouge si mineur
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(
                              color: dateNaissance != null && !_isOver18(dateNaissance!) 
                                  ? Colors.red 
                                  : KipikTheme.rouge, 
                              width: 1.5
                            ),
                          ),
                        ),
                        child: Row(
                          children: [
                            Expanded(
                              child: Text(
                                dateNaissance == null
                                    ? 'SÃ©lectionner votre date'
                                    : '${dateNaissance!.day}/${dateNaissance!.month}/${dateNaissance!.year}',
                                style: TextStyle(
                                  color: dateNaissance == null ? Colors.grey : Colors.black87,
                                  fontFamily: 'Roboto', // âœ… Roboto pour le contenu saisi
                                  fontWeight: FontWeight.w600,
                                  fontSize: 16,
                                ),
                              ),
                            ),
                            if (dateNaissance != null)
                              Icon(
                                _isOver18(dateNaissance!) ? Icons.check_circle : Icons.error,
                                color: _isOver18(dateNaissance!) ? Colors.green : Colors.red,
                              ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),

                    // âœ… NOUVEAU: Widget de certification de majoritÃ©
                    _buildMajoriteConfirmation(),

                    // âœ… NOUVEAU - PiÃ¨ce d'identitÃ© avec vÃ©rification Google Vision
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _uploadDocumentWithVerification,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: pieceIdentite != null 
                              ? Colors.green 
                              : KipikTheme.rouge,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 14),
                          textStyle: const TextStyle(
                            fontFamily: 'PermanentMarker', // âœ… PermanentMarker pour les boutons
                            fontSize: 16,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              pieceIdentite != null 
                                  ? Icons.check_circle 
                                  : Icons.upload_file,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                pieceIdentite == null
                                    ? "Joindre ma piÃ¨ce d'identitÃ© * (vÃ©rification auto)"
                                    : "âœ“ Fichier vÃ©rifiÃ© : ${pieceIdentite!.name}",
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // âœ… Section Conditions
                    _buildSectionTitleWithHeader('Conditions d\'utilisation', Icons.gavel, headerIndex: 3),

                    // CGU / CGV
                    CGUCGVValidationWidget(
                      cguAccepted: cguLu,
                      cgvAccepted: cgvLu,
                      onCGURead: () async {
                        final ok = await Navigator.pushNamed(context, '/cgu') as bool?;
                        if (mounted) setState(() => cguLu = ok == true);
                      },
                      onCGVRead: () async {
                        final ok = await Navigator.pushNamed(context, '/cgv') as bool?;
                        if (mounted) setState(() => cgvLu = ok == true);
                      },
                    ),
                    const SizedBox(height: 12),

                    // Newsletter
                    CheckboxListTile(
                      value: newsletterAccepted,
                      onChanged: (v) => setState(() => newsletterAccepted = v!),
                      title: const Text(
                        "Recevoir la newsletter Kipik",
                        style: TextStyle(
                          color: Colors.white,
                          fontFamily: 'PermanentMarker', // âœ… PermanentMarker pour les labels
                        ),
                      ),
                      activeColor: KipikTheme.rouge,
                    ),
                    const SizedBox(height: 24),

                    // Valider mon inscription
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _isLoading || !isFormValid ? null : _submitForm,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: isFormValid 
                              ? KipikTheme.rouge 
                              : Colors.grey,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 18),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          textStyle: const TextStyle(
                            fontFamily: 'PermanentMarker', // âœ… PermanentMarker pour les boutons
                            fontSize: 18,
                          ),
                        ),
                        child: _isLoading
                            ? const Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  SizedBox(
                                    height: 20,
                                    width: 20,
                                    child: CircularProgressIndicator(
                                      color: Colors.white,
                                      strokeWidth: 2,
                                    ),
                                  ),
                                  SizedBox(width: 12),
                                  Text('Inscription en cours...'),
                                ],
                              )
                            : const Text('Valider mon inscription'),
                      ),
                    ),
                    
                    // âœ… NOUVEAU - Bouton de test Google Vision API
                    const SizedBox(height: 16),
                    Container(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _testGoogleVisionAPI,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 14),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.api),
                            SizedBox(width: 8),
                            Text('ðŸ§ª Tester Google Vision API', style: TextStyle(fontFamily: 'Roboto')),
                          ],
                        ),
                      ),
                    ),
                    
                    // âœ… Aide visuelle pour les champs obligatoires
                    const SizedBox(height: 16),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.blue.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.blue.withOpacity(0.3)),
                      ),
                      child: const Row(
                        children: [
                          Icon(Icons.info, color: Colors.blue, size: 20),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'Les champs marquÃ©s d\'un * sont obligatoires',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                                fontFamily: 'Roboto', // âœ… Roboto pour les textes informatifs
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\messages_particulier_page.dart

// lib/pages/particulier/messages_particulier_page.dart
import 'package:flutter/material.dart';
import 'dart:math'; // Pour la sÃ©lection alÃ©atoire de fond
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../theme/kipik_theme.dart';
import 'conversation_page.dart'; // Ã€ crÃ©er

class MessagesParticulierPage extends StatefulWidget {
  const MessagesParticulierPage({Key? key}) : super(key: key);

  @override
  State<MessagesParticulierPage> createState() => _MessagesParticulierPageState();
}

class _MessagesParticulierPageState extends State<MessagesParticulierPage> {
  // Liste des images de fond disponibles
  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo1.png',
    'assets/background_tatoo2.png',
    'assets/background_tatoo3.png',
  ];
  
  // Variable pour stocker l'image de fond sÃ©lectionnÃ©e alÃ©atoirement
  late String _selectedBackground;
  
  // Conversations fictives pour la dÃ©mo
  final List<TattooerConversation> _conversations = [
    TattooerConversation(
      tattooerName: 'InkMaster',
      avatarUrl: 'https://i.pravatar.cc/150?img=32',
      lastMessage: 'Voici l\'esquisse pour ton tatouage, qu\'en penses-tu ?',
      lastMessageTime: DateTime.now().subtract(const Duration(minutes: 15)),
      unreadCount: 2,
      projectName: 'Manchette japonaise',
      isOnline: true,
    ),
    TattooerConversation(
      tattooerName: 'BlackNeedle',
      avatarUrl: 'https://i.pravatar.cc/150?img=51',
      lastMessage: 'On peut se voir demain Ã  14h pour discuter du design ?',
      lastMessageTime: DateTime.now().subtract(const Duration(hours: 2)),
      unreadCount: 0,
      projectName: 'Tatouage minimaliste',
      isOnline: false,
    ),
    TattooerConversation(
      tattooerName: 'ColorCanvas',
      avatarUrl: 'https://i.pravatar.cc/150?img=48',
      lastMessage: 'J\'ai modifiÃ© les couleurs comme demandÃ©',
      lastMessageTime: DateTime.now().subtract(const Duration(days: 1)),
      unreadCount: 0,
      projectName: 'Fleur aquarelle',
      isOnline: true,
    ),
    TattooerConversation(
      tattooerName: 'TattooLegend',
      avatarUrl: 'https://i.pravatar.cc/150?img=12',
      lastMessage: 'Tu peux m\'envoyer une photo de l\'emplacement ?',
      lastMessageTime: DateTime.now().subtract(const Duration(days: 2)),
      unreadCount: 1,
      projectName: 'Tribal Ã©paule',
      isOnline: false,
    ),
    TattooerConversation(
      tattooerName: 'SkinArtist',
      avatarUrl: 'https://i.pravatar.cc/150?img=22',
      lastMessage: 'La date est confirmÃ©e : 15 juin Ã  10h',
      lastMessageTime: DateTime.now().subtract(const Duration(days: 3)),
      unreadCount: 0,
      projectName: 'Portrait rÃ©aliste',
      isOnline: false,
    ),
  ];

  @override
  void initState() {
    super.initState();
    // SÃ©lection alÃ©atoire de l'image de fond
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Messages',
        showBackButton: true,
        redirectToHome: true,
        showNotificationIcon: true,
      ),
      body: SafeArea(
        // Ajout de SafeArea pour Ã©viter les problÃ¨mes avec les encoches et barre de navigation
        bottom: true, // Assure que le contenu est sÃ»r en bas de l'Ã©cran
        child: Stack(
          children: [
            // Fond alÃ©atoire
            Image.asset(
              _selectedBackground,
              fit: BoxFit.cover,
              width: double.infinity,
              height: double.infinity,
            ),
            
            // Contenu principal
            _conversations.isEmpty
                ? _buildEmptyState()
                : _buildConversationsList(),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(24),
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(24),
          border: Border.all(color: KipikTheme.rouge.withOpacity(0.5), width: 2),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.message,
              size: 64,
              color: KipikTheme.rouge.withOpacity(0.7),
            ),
            const SizedBox(height: 16),
            const Text(
              'Aucune conversation active',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              'Commencez par contacter un tatoueur pour Ã©changer sur votre projet',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 16,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(context, '/recherche_tatoueur');
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: const Text('Trouver un tatoueur'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConversationsList() {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      itemCount: _conversations.length,
      itemBuilder: (context, index) {
        final conversation = _conversations[index];
        return _buildConversationCard(conversation);
      },
    );
  }

  Widget _buildConversationCard(TattooerConversation conversation) {
    // Formatage de l'heure du dernier message
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final messageDate = DateTime(
      conversation.lastMessageTime.year,
      conversation.lastMessageTime.month,
      conversation.lastMessageTime.day,
    );
    
    String timeText;
    if (messageDate == today) {
      // Aujourd'hui : afficher l'heure
      timeText = '${conversation.lastMessageTime.hour.toString().padLeft(2, '0')}:${conversation.lastMessageTime.minute.toString().padLeft(2, '0')}';
    } else if (messageDate == today.subtract(const Duration(days: 1))) {
      // Hier
      timeText = 'Hier';
    } else if (now.difference(messageDate).inDays < 7) {
      // Cette semaine : afficher le jour
      final weekdays = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
      timeText = weekdays[conversation.lastMessageTime.weekday - 1];
    } else {
      // Plus ancien : afficher la date
      timeText = '${conversation.lastMessageTime.day}/${conversation.lastMessageTime.month}';
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      clipBehavior: Clip.antiAlias,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(14),
        side: BorderSide(
          color: conversation.unreadCount > 0 
              ? KipikTheme.rouge
              : Colors.transparent,
          width: 1.5,
        ),
      ),
      elevation: conversation.unreadCount > 0 ? 4 : 2,
      color: Colors.white.withOpacity(0.95),
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => ConversationPage(conversation: conversation),
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Avatar avec indicateur "en ligne"
              Stack(
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundImage: NetworkImage(conversation.avatarUrl),
                  ),
                  if (conversation.isOnline)
                    Positioned(
                      right: 0,
                      bottom: 0,
                      child: Container(
                        width: 14,
                        height: 14,
                        decoration: BoxDecoration(
                          color: Colors.green,
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 2),
                        ),
                      ),
                    ),
                ],
              ),
              
              const SizedBox(width: 12),
              
              // Informations sur la conversation
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Nom du tatoueur et heure
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          conversation.tattooerName,
                          style: TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 16,
                            fontWeight: conversation.unreadCount > 0
                                ? FontWeight.bold
                                : FontWeight.normal,
                          ),
                        ),
                        Text(
                          timeText,
                          style: TextStyle(
                            fontSize: 12,
                            color: conversation.unreadCount > 0
                                ? KipikTheme.rouge
                                : Colors.grey,
                          ),
                        ),
                      ],
                    ),
                    
                    // Nom du projet
                    const SizedBox(height: 2),
                    Text(
                      conversation.projectName,
                      style: TextStyle(
                        fontSize: 13,
                        color: KipikTheme.rouge,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                    
                    // Dernier message
                    const SizedBox(height: 6),
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            conversation.lastMessage,
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[800],
                              fontWeight: conversation.unreadCount > 0
                                  ? FontWeight.bold
                                  : FontWeight.normal,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        if (conversation.unreadCount > 0)
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: KipikTheme.rouge,
                              borderRadius: BorderRadius.circular(10),
                            ),
                            child: Text(
                              conversation.unreadCount.toString(),
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// ModÃ¨le pour les conversations
class TattooerConversation {
  final String tattooerName;
  final String avatarUrl;
  final String lastMessage;
  final DateTime lastMessageTime;
  final int unreadCount;
  final String projectName;
  final bool isOnline;

  TattooerConversation({
    required this.tattooerName,
    required this.avatarUrl,
    required this.lastMessage,
    required this.lastMessageTime,
    required this.unreadCount,
    required this.projectName,
    required this.isOnline,
  });
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\mes_devis_page.dart

// lib/pages/particulier/mes_devis_page.dart

import 'package:flutter/material.dart';
import '../../theme/kipik_theme.dart';
import 'detail_devis_page.dart';
import 'accueil_particulier_page.dart';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart'; // Ajout de l'import

enum StatutDevis { EnCours, Accepte, Refuse, Infos }

extension StatutDevisExtension on StatutDevis {
  String get label {
    switch (this) {
      case StatutDevis.EnCours:
        return 'En cours';
      case StatutDevis.Accepte:
        return 'AcceptÃ©';
      case StatutDevis.Refuse:
        return 'RefusÃ©';
      case StatutDevis.Infos:
        return 'Infos manquantes';
    }
  }

  Color get color {
    switch (this) {
      case StatutDevis.EnCours:
        return KipikTheme.rouge;
      case StatutDevis.Accepte:
        return Colors.green;
      case StatutDevis.Refuse:
        return Colors.grey;
      case StatutDevis.Infos:
        return Colors.orange;
    }
  }
}

class Devis {
  final String userLastName;
  final String userFirstName;
  final String tattooerName;
  final String id;
  final DateTime date;
  final double montant;
  final StatutDevis statut;

  Devis({
    required this.userLastName,
    required this.userFirstName,
    required this.tattooerName,
    required this.id,
    required this.date,
    required this.montant,
    required this.statut,
  });
}

class MesDevisPage extends StatefulWidget {
  const MesDevisPage({Key? key}) : super(key: key);

  @override
  State<MesDevisPage> createState() => _MesDevisPageState();
}

class _MesDevisPageState extends State<MesDevisPage> {
  final List<Devis> _devisList = [
    Devis(
      userLastName: 'Dupont',
      userFirstName: 'Marie',
      tattooerName: 'InkMaster',
      id: 'D-001',
      date: DateTime(2024, 5, 1),
      montant: 120.0,
      statut: StatutDevis.EnCours,
    ),
    Devis(
      userLastName: 'Martin',
      userFirstName: 'Paul',
      tattooerName: 'Vintage Ink',
      id: 'D-002',
      date: DateTime(2024, 4, 28),
      montant: 80.0,
      statut: StatutDevis.Accepte,
    ),
    Devis(
      userLastName: 'Durand',
      userFirstName: 'Lucie',
      tattooerName: 'Mini Ink',
      id: 'D-003',
      date: DateTime(2024, 4, 25),
      montant: 200.0,
      statut: StatutDevis.Refuse,
    ),
    Devis(
      userLastName: 'Leroy',
      userFirstName: 'Sophie',
      tattooerName: 'InkMaster',
      id: 'D-004',
      date: DateTime(2024, 5, 3),
      montant: 150.0,
      statut: StatutDevis.Infos,
    ),
  ];

  // Ajout d'une variable pour stocker le filtre actuel
  StatutDevis? _selectedFilter;

  Map<StatutDevis, int> get _stats {
    final Map<StatutDevis, int> m = {};
    for (var s in StatutDevis.values) {
      m[s] = _devisList.where((d) => d.statut == s).length;
    }
    return m;
  }

  // MÃ©thode pour obtenir la liste filtrÃ©e
  List<Devis> get _filteredDevisList {
    if (_selectedFilter == null) {
      return _devisList; // Retourner tous les devis si aucun filtre n'est sÃ©lectionnÃ©
    }
    return _devisList.where((d) => d.statut == _selectedFilter).toList();
  }

  @override
  Widget build(BuildContext context) {
    final stats = _stats;
    return Scaffold(
      backgroundColor: Colors.black,
      // Utilisation du CustomAppBarParticulier Ã  la place de AppBar standard
      appBar: CustomAppBarParticulier(
        title: 'Mes devis',
        showBackButton: true,
        redirectToHome: true,
        showNotificationIcon: true, // Si vous souhaitez afficher l'icÃ´ne de notification
      ),
      body: Column(
        children: [
          // Bandeau de rÃ©sumÃ©
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
            child: Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                // Chip pour "Total" - filtre par dÃ©faut
                _buildFilterChip('Total', _devisList.length, KipikTheme.rouge, null),
                // Chip pour chaque statut de devis
                for (var s in StatutDevis.values)
                  _buildFilterChip(s.label, stats[s]!, s.color, s),
              ],
            ),
          ),
          const Divider(color: Colors.white24, height: 1),
          // Liste des devis filtrÃ©e
          Expanded(
            child: _filteredDevisList.isEmpty
                ? Center(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.description_outlined,
                          size: 64,
                          color: Colors.white.withOpacity(0.5),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Aucun devis ${_selectedFilter != null ? _selectedFilter!.label.toLowerCase() : ''} Ã  afficher',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.7),
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                  )
                : ListView.separated(
                    padding: const EdgeInsets.all(16),
                    itemCount: _filteredDevisList.length,
                    separatorBuilder: (_, __) => const SizedBox(height: 12),
                    itemBuilder: (ctx, i) {
                      final d = _filteredDevisList[i];
                      return Card(
                        color: Colors.white12,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: d.statut.color, width: 2),
                        ),
                        child: ListTile(
                          contentPadding: const EdgeInsets.symmetric(
                              vertical: 12, horizontal: 16),
                          title: Text(
                            '${d.userLastName}_${d.userFirstName} â€“ ${d.tattooerName}',
                            style: const TextStyle(
                                color: Colors.white, fontFamily: 'PermanentMarker'),
                          ),
                          subtitle: Text(
                            'Le ${d.date.day}/${d.date.month}/${d.date.year} â€¢ ${d.montant.toStringAsFixed(2)} â‚¬',
                            style: const TextStyle(color: Colors.white70),
                          ),
                          trailing: Container(
                            padding: const EdgeInsets.symmetric(
                                vertical: 4, horizontal: 8),
                            decoration: BoxDecoration(
                              color: d.statut.color.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              d.statut.label,
                              style: TextStyle(
                                  color: d.statut.color,
                                  fontWeight: FontWeight.bold),
                            ),
                          ),
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (_) => DetailDevisPage(devis: d)),
                            );
                          },
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }

  // Widget pour crÃ©er une puce filtrable
  Widget _buildFilterChip(String label, int count, Color color, StatutDevis? statut) {
    final isSelected = (statut == _selectedFilter) || (statut == null && _selectedFilter == null);
    
    return FilterChip(
      selected: isSelected,
      showCheckmark: false,
      backgroundColor: color.withOpacity(0.2),
      selectedColor: color.withOpacity(0.4),
      label: Text(
        '$label : $count',
        style: TextStyle(
          color: color,
          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
        ),
      ),
      // Bordure visible uniquement pour le filtre sÃ©lectionnÃ©
      side: isSelected 
          ? BorderSide(color: color, width: 1.5) 
          : BorderSide(color: color.withOpacity(0.3), width: 1),
      onSelected: (selected) {
        setState(() {
          // Si on clique sur le filtre dÃ©jÃ  sÃ©lectionnÃ© ou sur "Total", on dÃ©sactive le filtre
          if ((statut == _selectedFilter) || statut == null) {
            _selectedFilter = null;
          } else {
            _selectedFilter = statut;
          }
        });
      },
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\mes_projets_particulier_page.dart

// lib/pages/particulier/mes_projets_particulier_page.dart
import 'package:flutter/material.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../widgets/common/drawers/custom_drawer_particulier.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import 'dart:math';
import 'accueil_particulier_page.dart';
import 'detail_projet_particulier_page.dart';

class MesProjetsParticulierPage extends StatefulWidget {
  const MesProjetsParticulierPage({Key? key}) : super(key: key);

  @override
  State<MesProjetsParticulierPage> createState() => _MesProjetsParticulierPageState();
}

class _MesProjetsParticulierPageState extends State<MesProjetsParticulierPage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  late final String _bg;
  
  // DonnÃ©es fictives des projets
  final List<Map<String, dynamic>> _projetsEnCours = [
    {
      'id': '1',
      'titre': 'Mandala sur l\'Ã©paule',
      'tatoueur': 'Marie Lefevre',
      'studio': 'Dark Ink',
      'avatar': 'assets/avatars/tatoueur2.jpg',
      'date_debut': '15/04/2025',
      'prochainRdv': '25/05/2025',
      'statusRdv': 'ConfirmÃ©',
      'nbSeances': 2,
      'seancesTerminees': 0,
      'montantDevis': '350â‚¬',
      'typePreRdv': 'En physique', // 'En physique', 'En distanciel', 'Aucun'
      'preRdvEffectue': true,
      'dernierMessage': 'Bonjour, j\'ai quelques questions sur le dessin...',
      'dateMessage': '10/05/2025',
      'nouvellePhoto': true,
      'nouveauMessage': true,
      'nouveauDocument': false,
      'status': 'Projet validÃ©', // 'En attente', 'Projet validÃ©', 'SÃ©ance en cours', 'En finition'
      'couverture': 'assets/background1.png',
    },
    {
      'id': '2',
      'titre': 'Tatouage gÃ©omÃ©trique avant-bras',
      'tatoueur': 'Alexandre Petit',
      'studio': 'Blackwork Studio',
      'avatar': 'assets/avatars/tatoueur5.jpg',
      'date_debut': '02/05/2025',
      'prochainRdv': '17/05/2025',
      'statusRdv': 'En attente',
      'nbSeances': 1,
      'seancesTerminees': 0,
      'montantDevis': '280â‚¬',
      'typePreRdv': 'En distanciel',
      'preRdvEffectue': false,
      'dernierMessage': 'Voici les modifications du design comme discutÃ©',
      'dateMessage': '08/05/2025',
      'nouvellePhoto': false,
      'nouveauMessage': true,
      'nouveauDocument': true,
      'status': 'En attente',
      'couverture': 'assets/background2.png',
    },
    {
      'id': '3',
      'titre': 'Fleur japonaise sur le mollet',
      'tatoueur': 'Sophie Bernard',
      'studio': 'Tattoo Factory',
      'avatar': 'assets/avatars/tatoueur4.jpg',
      'date_debut': '20/03/2025',
      'prochainRdv': '22/05/2025',
      'statusRdv': 'ConfirmÃ©',
      'nbSeances': 3,
      'seancesTerminees': 1,
      'montantDevis': '450â‚¬',
      'typePreRdv': 'Aucun',
      'preRdvEffectue': false,
      'dernierMessage': 'La premiÃ¨re sÃ©ance s\'est bien passÃ©e, rappel des soins...',
      'dateMessage': '12/05/2025',
      'nouvellePhoto': true,
      'nouveauMessage': false,
      'nouveauDocument': false,
      'status': 'SÃ©ance en cours',
      'couverture': 'assets/background3.png',
    },
  ];
  
  final List<Map<String, dynamic>> _projetsTermines = [
    {
      'id': '4',
      'titre': 'Petit oiseau poignet',
      'tatoueur': 'Jean Dupont',
      'studio': 'InkMaster',
      'avatar': 'assets/avatars/tatoueur1.jpg',
      'date_debut': '10/02/2025',
      'date_fin': '10/03/2025',
      'nbSeances': 1,
      'seancesTerminees': 1,
      'montantFinal': '150â‚¬',
      'typePreRdv': 'En physique',
      'preRdvEffectue': true,
      'noteTatoueur': 4.8,
      'commentaire': 'TrÃ¨s satisfait du rÃ©sultat, Jean a Ã©tÃ© trÃ¨s pro !',
      'photosFinales': 3,
      'facture': true,
      'status': 'TerminÃ©',
      'couverture': 'assets/background4.png',
    },
    {
      'id': '5',
      'titre': 'Bracelet tribal',
      'tatoueur': 'Camille Dubois',
      'studio': 'Studio GÃ©omÃ©trique',
      'avatar': 'assets/avatars/avatar1.jpg',
      'date_debut': '05/01/2025',
      'date_fin': '15/02/2025',
      'nbSeances': 2,
      'seancesTerminees': 2,
      'montantFinal': '220â‚¬',
      'typePreRdv': 'En distanciel',
      'preRdvEffectue': true,
      'noteTatoueur': 5.0,
      'commentaire': 'RÃ©sultat parfait, je recommande !',
      'photosFinales': 4,
      'facture': true,
      'status': 'TerminÃ©',
      'couverture': 'assets/background2.png',
    },
  ];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _bg = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ][Random().nextInt(4)];
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      endDrawer: const CustomDrawerParticulier(),
      appBar: const CustomAppBarParticulier(
        title: 'Mes projets',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: true,
        redirectToHome: true,
      ),
      floatingActionButton: const TattooAssistantButton(
        allowImageGeneration: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond d'Ã©cran
          Image.asset(_bg, fit: BoxFit.cover),
          
          // Contenu principal
          SafeArea(
            child: Column(
              children: [
                // TabBar personnalisÃ©
                Container(
                  margin: const EdgeInsets.fromLTRB(16, 8, 16, 0),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.7),
                    borderRadius: BorderRadius.circular(30),
                    border: Border.all(color: KipikTheme.rouge, width: 2),
                  ),
                  child: TabBar(
                    controller: _tabController,
                    indicator: BoxDecoration(
                      color: KipikTheme.rouge,
                      borderRadius: BorderRadius.circular(30),
                    ),
                    labelColor: Colors.white,
                    unselectedLabelColor: Colors.white70,
                    labelStyle: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                    ),
                    tabs: const [
                      Tab(text: 'En cours'),
                      Tab(text: 'TerminÃ©s'),
                    ],
                  ),
                ),
                
                // Contenu des onglets
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      // Onglet "En cours"
                      _projetsEnCours.isEmpty
                          ? _buildEmptyState('Aucun projet en cours', 'Consultez les tatoueurs disponibles pour commencer un nouveau projet.')
                          : _buildProjetsList(_projetsEnCours, true),
                      
                      // Onglet "TerminÃ©s"
                      _projetsTermines.isEmpty
                          ? _buildEmptyState('Aucun projet terminÃ©', 'Vos projets terminÃ©s apparaÃ®tront ici.')
                          : _buildProjetsList(_projetsTermines, false),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Ã‰tat vide (aucun projet)
  Widget _buildEmptyState(String title, String message) {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(24),
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.7),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              Icons.create_outlined,
              size: 64,
              color: Colors.white54,
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontFamily: 'PermanentMarker',
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              message,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(
                    builder: (context) => const AccueilParticulierPage(),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
              ),
              child: const Text(
                'Explorer les tatoueurs',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Liste des projets
  Widget _buildProjetsList(List<Map<String, dynamic>> projets, bool enCours) {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: projets.length,
      itemBuilder: (context, index) {
        final projet = projets[index];
        return _buildProjetCard(projet, enCours);
      },
    );
  }

  // Carte de projet
  Widget _buildProjetCard(Map<String, dynamic> projet, bool enCours) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => DetailProjetParticulierPage(
              projetId: projet['id'],
              enCours: enCours,
            ),
          ),
        );
      },
      child: Container(
        margin: const EdgeInsets.only(bottom: 16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.7),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: _getStatusColor(projet['status']),
            width: 2,
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Image de couverture avec titre superposÃ©
            Stack(
              children: [
                // Image du projet avec coins arrondis
                ClipRRect(
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(14),
                    topRight: Radius.circular(14),
                  ),
                  child: Image.asset(
                    projet['couverture'],
                    height: 120,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
                // Titre avec fond semi-transparent
                Positioned(
                  bottom: 0,
                  left: 0,
                  right: 0,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.bottomCenter,
                        end: Alignment.topCenter,
                        colors: [
                          Colors.black.withOpacity(0.8),
                          Colors.transparent,
                        ],
                      ),
                    ),
                    child: Text(
                      projet['titre'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontFamily: 'PermanentMarker',
                        shadows: [
                          Shadow(
                            offset: Offset(1, 1),
                            blurRadius: 3,
                            color: Colors.black,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                // Badge de status
                Positioned(
                  top: 8,
                  right: 8,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: _getStatusColor(projet['status']),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      projet['status'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ],
            ),
            
            // Informations principales
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Ligne du tatoueur
                  Row(
                    children: [
                      CircleAvatar(
                        radius: 24,
                        backgroundImage: AssetImage(projet['avatar']),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              projet['tatoueur'],
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Text(
                              projet['studio'],
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      ),
                      if (enCours && (projet['nouvellePhoto'] || projet['nouveauMessage'] || projet['nouveauDocument']))
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: KipikTheme.rouge,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.notifications_active,
                            color: Colors.white,
                            size: 20,
                          ),
                        ),
                      if (!enCours)
                        Row(
                          children: [
                            const Icon(Icons.star, color: Colors.amber, size: 20),
                            const SizedBox(width: 4),
                            Text(
                              '${projet['noteTatoueur']}',
                              style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Informations sur le projet
                  Row(
                    children: [
                      // Dates
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Date',
                              style: TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              enCours
                                ? 'DÃ©but: ${projet['date_debut']}'
                                : '${projet['date_debut']} - ${projet['date_fin']}',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      ),
                      
                      // SÃ©ances ou prix
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              enCours ? 'SÃ©ances' : 'Montant',
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              enCours
                                ? '${projet['seancesTerminees']}/${projet['nbSeances']}'
                                : projet['montantFinal'],
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 12),
                  
                  // Informations sur le RDV ou les photos finales
                  enCours
                    ? _buildProchainRdvInfo(projet)
                    : Row(
                        children: [
                          const Icon(Icons.photo_library, color: Colors.white70, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            '${projet['photosFinales']} photos finales',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                          const SizedBox(width: 16),
                          const Icon(Icons.receipt_long, color: Colors.white70, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            projet['facture'] ? 'Facture disponible' : 'Pas de facture',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                  
                  // Message pour les projets en cours
                  if (enCours && projet['dernierMessage'] != null)
                    Padding(
                      padding: const EdgeInsets.only(top: 12),
                      child: Row(
                        children: [
                          const Icon(Icons.message, color: Colors.white70, size: 16),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              projet['dernierMessage'],
                              style: TextStyle(
                                color: projet['nouveauMessage'] ? Colors.white : Colors.white70,
                                fontSize: 14,
                                fontStyle: FontStyle.italic,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Text(
                            projet['dateMessage'],
                            style: const TextStyle(
                              color: Colors.white54,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ),
                ],
              ),
            ),
            
            // Bouton pour voir les dÃ©tails
            Container(
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.5),
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(14),
                  bottomRight: Radius.circular(14),
                ),
              ),
              child: Material(
                color: Colors.transparent,
                child: InkWell(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => DetailProjetParticulierPage(
                          projetId: projet['id'],
                          enCours: enCours,
                        ),
                      ),
                    );
                  },
                  borderRadius: const BorderRadius.only(
                    bottomLeft: Radius.circular(14),
                    bottomRight: Radius.circular(14),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          enCours ? 'Voir le projet' : 'Voir les dÃ©tails',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(width: 8),
                        const Icon(
                          Icons.arrow_forward_ios,
                          color: Colors.white,
                          size: 14,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Informations sur le prochain RDV
  Widget _buildProchainRdvInfo(Map<String, dynamic> projet) {
    final Color statusColor = projet['statusRdv'] == 'ConfirmÃ©'
        ? Colors.green
        : projet['statusRdv'] == 'En attente'
            ? Colors.orange
            : Colors.red;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Icon(Icons.event, color: Colors.white70, size: 16),
            const SizedBox(width: 4),
            const Text(
              'Prochain RDV:',
              style: TextStyle(
                color: Colors.white70,
                fontSize: 14,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              projet['prochainRdv'],
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(width: 8),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: statusColor.withOpacity(0.3),
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: statusColor, width: 1),
              ),
              child: Text(
                projet['statusRdv'],
                style: TextStyle(
                  color: statusColor,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        if (projet['typePreRdv'] != 'Aucun')
          Padding(
            padding: const EdgeInsets.only(top: 8),
            child: Row(
              children: [
                Icon(
                  projet['typePreRdv'] == 'En physique'
                      ? Icons.person
                      : Icons.videocam,
                  color: Colors.white70,
                  size: 16,
                ),
                const SizedBox(width: 4),
                Text(
                  'PrÃ©-RDV ${projet['typePreRdv'].toLowerCase()}',
                  style: const TextStyle(
                    color: Colors.white70,
                    fontSize: 14,
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  projet['preRdvEffectue'] ? 'EffectuÃ©' : 'Non effectuÃ©',
                  style: TextStyle(
                    color: projet['preRdvEffectue'] ? Colors.green : Colors.orange,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
      ],
    );
  }

  // Couleur en fonction du statut du projet
  Color _getStatusColor(String status) {
    switch (status) {
      case 'En attente':
        return Colors.orange;
      case 'Projet validÃ©':
        return Colors.blue;
      case 'SÃ©ance en cours':
        return Colors.purple;
      case 'En finition':
        return Colors.teal;
      case 'TerminÃ©':
        return Colors.green;
      default:
        return KipikTheme.rouge;
    }
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\mes_rdv_flashs_page.dart

// lib/pages/particulier/mes_rdv_flashs_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import '../../theme/kipik_theme.dart';
import '../../models/flash/flash_booking.dart';
import '../../models/flash/flash_booking_status.dart';
import '../../models/flash/flash.dart';
import '../../services/flash/flash_service.dart';
import '../../services/auth/secure_auth_service.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../shared/booking/booking_chat_page.dart';

/// Page dashboard sophistiquÃ©e des RDV flashs pour les clients
class MesRdvFlashsPage extends StatefulWidget {
  const MesRdvFlashsPage({Key? key}) : super(key: key);

  @override
  State<MesRdvFlashsPage> createState() => _MesRdvFlashsPageState();
}

class _MesRdvFlashsPageState extends State<MesRdvFlashsPage> with TickerProviderStateMixin {
  late TabController _tabController;
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  
  bool _isLoading = true;
  bool _isRefreshing = false;
  Timer? _autoRefreshTimer;
  
  List<FlashBooking> _allBookings = [];
  List<FlashBooking> _pendingBookings = [];
  List<FlashBooking> _confirmedBookings = [];
  List<FlashBooking> _completedBookings = [];
  List<FlashBooking> _cancelledBookings = [];
  
  Map<String, Flash> _flashsCache = {};
  Map<String, String> _artistAvatarCache = {};

  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _loadBookings();
    _startAutoRefresh();
  }

  void _initializeControllers() {
    _tabController = TabController(length: 4, vsync: this);
    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    _pulseAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
  }

  void _startAutoRefresh() {
    _autoRefreshTimer = Timer.periodic(const Duration(minutes: 2), (_) {
      if (mounted) _refreshBookings();
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _pulseController.dispose();
    _autoRefreshTimer?.cancel();
    super.dispose();
  }

  Future<void> _loadBookings() async {
    if (!mounted) return;
    
    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) return;

      final bookings = await FlashService.instance.getBookingsByClient(currentUser['uid']);
      
      // Charger les dÃ©tails des flashs en parallÃ¨le
      await _loadFlashDetails(bookings);
      
      if (!mounted) return;
      
      setState(() {
        _allBookings = bookings;
        _categorizeBookings();
        _isLoading = false;
      });
    } catch (e) {
      if (mounted) {
        setState(() => _isLoading = false);
        _showErrorSnackBar('Erreur: ${e.toString()}');
      }
    }
  }

  Future<void> _loadFlashDetails(List<FlashBooking> bookings) async {
    final futures = bookings.map((booking) async {
      if (!_flashsCache.containsKey(booking.flashId)) {
        try {
          final flash = await FlashService.instance.getFlashById(booking.flashId);
          _flashsCache[booking.flashId] = flash;
          
          // GÃ©nÃ©rer avatar pour l'artiste
          if (!_artistAvatarCache.containsKey(flash.tattooArtistName)) {
            _artistAvatarCache[flash.tattooArtistName] = _generateAvatarUrl(flash.tattooArtistName);
          }
        } catch (e) {
          print('Erreur chargement flash ${booking.flashId}: $e');
        }
      }
    });
    
    await Future.wait(futures);
  }

  String _generateAvatarUrl(String name) {
    final colors = ['FF6B6B', '4ECDC4', '45B7D1', '96CEB4', 'FFEAA7', 'DDA0DD'];
    final colorIndex = name.hashCode % colors.length;
    final initials = name.split(' ').map((n) => n[0]).take(2).join();
    return 'https://ui-avatars.com/api/?name=$initials&background=${colors[colorIndex]}&color=fff&size=128';
  }

  void _categorizeBookings() {
    _pendingBookings = _allBookings.where((b) => 
        b.status == FlashBookingStatus.pending ||
        b.status == FlashBookingStatus.quoteSent ||
        b.status == FlashBookingStatus.depositPaid).toList() // âœ… Inclus nouveaux statuts
      ..sort((a, b) => a.createdAt.compareTo(b.createdAt));
    
    _confirmedBookings = _allBookings.where((b) => 
        b.status == FlashBookingStatus.confirmed).toList()
      ..sort((a, b) => a.requestedDate.compareTo(b.requestedDate));
    
    _completedBookings = _allBookings.where((b) => 
        b.status == FlashBookingStatus.completed).toList()
      ..sort((a, b) => b.requestedDate.compareTo(a.requestedDate));
    
    _cancelledBookings = _allBookings.where((b) => 
        b.status == FlashBookingStatus.cancelled || 
        b.status == FlashBookingStatus.rejected ||
        b.status == FlashBookingStatus.expired).toList() // âœ… Inclus expired
      ..sort((a, b) => b.updatedAt.compareTo(a.updatedAt));
  }

  Future<void> _refreshBookings() async {
    if (_isRefreshing) return;
    
    setState(() => _isRefreshing = true);
    HapticFeedback.lightImpact();
    
    await _loadBookings();
    
    if (mounted) {
      setState(() => _isRefreshing = false);
      _showSuccessSnackBar('Mis Ã  jour !');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Mes RDV Flash',
        subtitle: 'GÃ©rez vos rÃ©servations',
        showBackButton: true,
        showNotificationIcon: false,
        useProStyle: false, // Style particulier classique
        actions: [
          IconButton(
            onPressed: _refreshBookings,
            icon: AnimatedRotation(
              turns: _isRefreshing ? 1 : 0,
              duration: const Duration(milliseconds: 500),
              child: Icon(
                Icons.refresh,
                color: _isRefreshing ? KipikTheme.rouge : Colors.white,
              ),
            ),
          ),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert, color: Colors.white),
            color: const Color(0xFF1A1A1A),
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'filter',
                child: Row(
                  children: [
                    Icon(Icons.filter_list, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Filtrer', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'export',
                child: Row(
                  children: [
                    Icon(Icons.download, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Exporter', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
            ],
            onSelected: _handleMenuAction,
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'filter':
        _showFilterDialog();
        break;
      case 'export':
        _exportBookings();
        break;
    }
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement de vos RDV...',
            style: TextStyle(
              color: Colors.grey,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    if (_allBookings.isEmpty) {
      return _buildEmptyState();
    }

    return Column(
      children: [
        _buildEnhancedStats(),
        _buildSophisticatedTabBar(),
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: [
              _buildBookingsList(_pendingBookings, BookingListType.pending),
              _buildBookingsList(_confirmedBookings, BookingListType.confirmed),
              _buildBookingsList(_completedBookings, BookingListType.completed),
              _buildBookingsList(_cancelledBookings, BookingListType.cancelled),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [KipikTheme.rouge.withOpacity(0.2), Colors.transparent],
                ),
                shape: BoxShape.circle,
              ),
              child: Icon(
                Icons.flash_off,
                size: 60,
                color: KipikTheme.rouge.withOpacity(0.6),
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Aucun RDV flash',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              'DÃ©couvrez les flashs disponibles et rÃ©servez votre premier tatouage !',
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 16,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            _buildGradientButton(
              onPressed: () => Navigator.pushNamed(context, '/flash/swipe'),
              icon: Icons.flash_on,
              label: 'DÃ©couvrir les flashs',
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEnhancedStats() {
    return Container(
      margin: const EdgeInsets.all(16),
      child: Card(
        color: const Color(0xFF1A1A1A),
        elevation: 8,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                KipikTheme.rouge.withOpacity(0.1),
                Colors.transparent,
              ],
            ),
          ),
          child: Column(
            children: [
              Row(
                children: [
                  Icon(Icons.analytics, color: KipikTheme.rouge, size: 20),
                  const SizedBox(width: 8),
                  const Text(
                    'Tableau de bord',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(child: _buildStatCard('En attente', _pendingBookings.length, Icons.schedule, Colors.orange)),
                  const SizedBox(width: 12),
                  Expanded(child: _buildStatCard('ConfirmÃ©s', _confirmedBookings.length, Icons.check_circle, Colors.green)),
                  const SizedBox(width: 12),
                  Expanded(child: _buildStatCard('TerminÃ©s', _completedBookings.length, Icons.done_all, Colors.blue)),
                ],
              ),
              if (_allBookings.isNotEmpty) ...[
                const SizedBox(height: 16),
                _buildProgressIndicator(),
              ],
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatCard(String label, int value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value.toString(),
            style: TextStyle(
              color: color,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              color: Colors.grey.shade400,
              fontSize: 12,
            ),
            textAlign: TextAlign.center,
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }

  Widget _buildProgressIndicator() {
    final total = _allBookings.length;
    final completed = _completedBookings.length;
    final progress = total > 0 ? completed / total : 0.0;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Progression',
              style: TextStyle(color: Colors.white, fontSize: 14),
            ),
            Text(
              '${(progress * 100).toInt()}%',
              style: TextStyle(
                color: KipikTheme.rouge,
                fontSize: 14,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        ClipRRect(
          borderRadius: BorderRadius.circular(4),
          child: LinearProgressIndicator(
            value: progress,
            backgroundColor: const Color(0xFF2A2A2A),
            valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
            minHeight: 6,
          ),
        ),
      ],
    );
  }

  Widget _buildSophisticatedTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: TabBar(
        controller: _tabController,
        indicator: BoxDecoration(
          gradient: LinearGradient(
            colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        indicatorSize: TabBarIndicatorSize.tab,
        dividerColor: Colors.transparent,
        labelColor: Colors.white,
        unselectedLabelColor: Colors.grey.shade400,
        labelStyle: const TextStyle(
          fontSize: 11,
          fontWeight: FontWeight.bold,
        ),
        padding: const EdgeInsets.all(4),
        tabs: [
          _buildTab('En attente', _pendingBookings.length, Icons.schedule),
          _buildTab('ConfirmÃ©s', _confirmedBookings.length, Icons.check_circle),
          _buildTab('TerminÃ©s', _completedBookings.length, Icons.done_all),
          _buildTab('AnnulÃ©s', _cancelledBookings.length, Icons.cancel),
        ],
      ),
    );
  }

  Widget _buildTab(String label, int count, IconData icon) {
    return Tab(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16),
          const SizedBox(height: 2),
          Text('$label ($count)'),
        ],
      ),
    );
  }

  Widget _buildBookingsList(List<FlashBooking> bookings, BookingListType type) {
    if (bookings.isEmpty) {
      return _buildEmptyTabState(type);
    }

    return RefreshIndicator(
      onRefresh: _refreshBookings,
      color: KipikTheme.rouge,
      backgroundColor: const Color(0xFF1A1A1A),
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: bookings.length,
        itemBuilder: (context, index) {
          final booking = bookings[index];
          final flash = _flashsCache[booking.flashId];
          return _buildSophisticatedBookingCard(booking, flash, type);
        },
      ),
    );
  }

  Widget _buildEmptyTabState(BookingListType type) {
    String message;
    IconData icon;
    Color color;
    
    switch (type) {
      case BookingListType.pending:
        message = 'Aucune demande en attente';
        icon = Icons.schedule;
        color = Colors.orange;
        break;
      case BookingListType.confirmed:
        message = 'Aucun RDV confirmÃ©';
        icon = Icons.check_circle;
        color = Colors.green;
        break;
      case BookingListType.completed:
        message = 'Aucun RDV terminÃ©';
        icon = Icons.done_all;
        color = Colors.blue;
        break;
      case BookingListType.cancelled:
        message = 'Aucun RDV annulÃ©';
        icon = Icons.cancel;
        color = Colors.red;
        break;
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 80,
            height: 80,
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: Icon(icon, size: 40, color: color.withOpacity(0.6)),
          ),
          const SizedBox(height: 16),
          Text(
            message,
            style: TextStyle(
              color: Colors.grey.shade400,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSophisticatedBookingCard(FlashBooking booking, Flash? flash, BookingListType type) {
    final statusColor = _getStatusColor(booking.status);
    final artistAvatar = flash != null ? _artistAvatarCache[flash.tattooArtistName] : null;

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Card(
        color: const Color(0xFF1A1A1A),
        elevation: 8,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                statusColor.withOpacity(0.05),
                Colors.transparent,
              ],
            ),
          ),
          child: Column(
            children: [
              _buildCardHeader(booking, statusColor),
              _buildCardContent(booking, flash, artistAvatar),
              _buildCardActions(booking, flash, type),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCardHeader(FlashBooking booking, Color statusColor) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: statusColor.withOpacity(0.1),
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(16),
          topRight: Radius.circular(16),
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: statusColor.withOpacity(0.2),
              shape: BoxShape.circle,
            ),
            child: Icon(
              _getStatusIcon(booking.status),
              color: statusColor,
              size: 16,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  _getStatusText(booking.status),
                  style: TextStyle(
                    color: statusColor,
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                  ),
                ),
                Text(
                  'RDV #${booking.id.substring(0, 8)}',
                  style: TextStyle(
                    color: Colors.grey.shade400,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(
                _formatDate(booking.requestedDate),
                style: TextStyle(
                  color: Colors.grey.shade400,
                  fontSize: 12,
                ),
              ),
              Text(
                booking.timeSlot,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCardContent(FlashBooking booking, Flash? flash, String? artistAvatar) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          _buildFlashImage(flash),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  flash?.title ?? 'Flash supprimÃ©',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                const SizedBox(height: 4),
                Row(
                  children: [
                    CircleAvatar(
                      radius: 10,
                      backgroundImage: artistAvatar != null ? NetworkImage(artistAvatar) : null,
                      backgroundColor: KipikTheme.rouge,
                      child: artistAvatar == null 
                          ? const Icon(Icons.person, size: 12, color: Colors.white)
                          : null,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        flash?.tattooArtistName ?? 'Artiste inconnu',
                        style: TextStyle(
                          color: KipikTheme.rouge,
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                _buildBookingDetails(booking, flash),
              ],
            ),
          ),
          _buildPriceColumn(booking),
        ],
      ),
    );
  }

  Widget _buildFlashImage(Flash? flash) {
    return Container(
      width: 70,
      height: 70,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: flash?.imageUrl != null
            ? Image.network(
                flash!.imageUrl,
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) => _buildPlaceholderImage(),
              )
            : _buildPlaceholderImage(),
      ),
    );
  }

  Widget _buildPlaceholderImage() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            const Color(0xFF2A2A2A),
            const Color(0xFF1A1A1A),
          ],
        ),
      ),
      child: Icon(
        Icons.image,
        color: Colors.grey.shade600,
        size: 30,
      ),
    );
  }

  Widget _buildBookingDetails(FlashBooking booking, Flash? flash) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.straighten, size: 14, color: Colors.grey.shade400),
            const SizedBox(width: 4),
            Text(
              flash?.size ?? 'Taille inconnue',
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 12,
              ),
            ),
          ],
        ),
        if (booking.clientNotes.isNotEmpty) ...[
          const SizedBox(height: 4),
          Row(
            children: [
              Icon(Icons.note, size: 14, color: Colors.grey.shade400),
              const SizedBox(width: 4),
              Expanded(
                child: Text(
                  booking.clientNotes,
                  style: TextStyle(
                    color: Colors.grey.shade400,
                    fontSize: 12,
                    fontStyle: FontStyle.italic,
                  ),
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
        ],
      ],
    );
  }

  Widget _buildPriceColumn(FlashBooking booking) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.end,
      children: [
        Text(
          '${booking.totalPrice.toInt()}â‚¬',
          style: TextStyle(
            color: KipikTheme.rouge,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        if (booking.depositAmount > 0) ...[
          const SizedBox(height: 4),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              '${booking.depositAmount.toInt()}â‚¬ versÃ©',
              style: const TextStyle(
                color: Colors.green,
                fontSize: 10,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildCardActions(FlashBooking booking, Flash? flash, BookingListType type) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: _buildActionsForStatus(booking, flash, type),
    );
  }

  // âœ… MÃ‰THODE CORRIGÃ‰E avec tous les statuts
  Widget _buildActionsForStatus(FlashBooking booking, Flash? flash, BookingListType type) {
    switch (booking.status) {
      case FlashBookingStatus.pending:
        return _buildPendingActions(booking);
      case FlashBookingStatus.quoteSent: // âœ… AjoutÃ©
        return _buildQuoteSentActions(booking);
      case FlashBookingStatus.depositPaid: // âœ… AjoutÃ©
        return _buildDepositPaidActions(booking);
      case FlashBookingStatus.confirmed:
        return _buildConfirmedActions(booking, flash);
      case FlashBookingStatus.completed:
        return _buildCompletedActions(booking, flash);
      case FlashBookingStatus.cancelled:
      case FlashBookingStatus.rejected:
      case FlashBookingStatus.expired: // âœ… AjoutÃ©
        return _buildCancelledActions(booking);
    }
  }

  Widget _buildPendingActions(FlashBooking booking) {
    return Row(
      children: [
        Expanded(
          child: _buildActionButton(
            onPressed: () => _cancelBooking(booking),
            icon: Icons.cancel_outlined,
            label: 'Annuler',
            color: Colors.red,
            isOutlined: true,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildActionButton(
            onPressed: () => _openChat(booking),
            icon: Icons.chat_outlined,
            label: 'Contacter',
            color: KipikTheme.rouge,
          ),
        ),
      ],
    );
  }

  // âœ… NOUVELLES MÃ‰THODES pour les nouveaux statuts
  Widget _buildQuoteSentActions(FlashBooking booking) {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              child: _buildActionButton(
                onPressed: () => _payDeposit(booking),
                icon: Icons.payment,
                label: 'Payer acompte',
                color: Colors.green,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildActionButton(
                onPressed: () => _openChat(booking),
                icon: Icons.chat,
                label: 'NÃ©gocier',
                color: KipikTheme.rouge,
                isOutlined: true,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        _buildWarningCard('Devis reÃ§u - Paiement requis pour confirmer'),
      ],
    );
  }

  Widget _buildDepositPaidActions(FlashBooking booking) {
    return Column(
      children: [
        _buildActionButton(
          onPressed: () => _openChat(booking),
          icon: Icons.chat,
          label: 'Contacter le tatoueur',
          color: KipikTheme.rouge,
        ),
        const SizedBox(height: 12),
        _buildWarningCard('Acompte payÃ© - En attente de validation du tatoueur', color: Colors.green),
      ],
    );
  }

  Widget _buildConfirmedActions(FlashBooking booking, Flash? flash) {
    final isWithin48Hours = _isWithin48Hours(booking.requestedDate);
    
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              child: _buildActionButton(
                onPressed: () => _openChat(booking),
                icon: Icons.chat,
                label: 'Chat',
                color: KipikTheme.rouge,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildActionButton(
                onPressed: () => _viewDetails(booking, flash),
                icon: Icons.info_outline,
                label: 'DÃ©tails',
                color: Colors.blue,
                isOutlined: true,
              ),
            ),
          ],
        ),
        if (isWithin48Hours) ...[
          const SizedBox(height: 12),
          _buildWarningCard('RDV dans moins de 48h - Annulation impossible'),
        ] else ...[
          const SizedBox(height: 12),
          SizedBox(
            width: double.infinity,
            child: _buildActionButton(
              onPressed: () => _cancelBooking(booking),
              icon: Icons.cancel_outlined,
              label: 'Annuler le RDV',
              color: Colors.red,
              isOutlined: true,
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildCompletedActions(FlashBooking booking, Flash? flash) {
    return Row(
      children: [
        Expanded(
          child: _buildActionButton(
            onPressed: () => _rateExperience(booking),
            icon: Icons.star_outline,
            label: 'Noter',
            color: Colors.amber,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildActionButton(
            onPressed: () => _viewDetails(booking, flash),
            icon: Icons.receipt_outlined,
            label: 'ReÃ§u',
            color: Colors.blue,
            isOutlined: true,
          ),
        ),
      ],
    );
  }

  Widget _buildCancelledActions(FlashBooking booking) {
    String message;
    switch (booking.status) {
      case FlashBookingStatus.rejected:
        message = 'Demande refusÃ©e - Remboursement effectuÃ©';
        break;
      case FlashBookingStatus.expired:
        message = 'RÃ©servation expirÃ©e - Remboursement effectuÃ©';
        break;
      default:
        message = 'AnnulÃ© - Remboursement effectuÃ©';
    }
    
    return _buildWarningCard(message, color: Colors.red);
  }

  Widget _buildActionButton({
    required VoidCallback onPressed,
    required IconData icon,
    required String label,
    required Color color,
    bool isOutlined = false,
  }) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon, size: 16),
      label: Text(label),
      style: ElevatedButton.styleFrom(
        backgroundColor: isOutlined ? Colors.transparent : color,
        foregroundColor: isOutlined ? color : Colors.white,
        side: isOutlined ? BorderSide(color: color) : null,
        padding: const EdgeInsets.symmetric(vertical: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  Widget _buildWarningCard(String message, {Color color = Colors.orange}) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(Icons.info_outline, color: color, size: 16),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              message,
              style: TextStyle(
                color: color,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGradientButton({
    required VoidCallback onPressed,
    required IconData icon,
    required String label,
  }) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
        ),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: KipikTheme.rouge.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ElevatedButton.icon(
        onPressed: onPressed,
        icon: Icon(icon, color: Colors.white),
        label: Text(
          label,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
        ),
      ),
    );
  }

  Widget _buildFloatingActionButton() {
    return AnimatedBuilder(
      animation: _pulseAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _pulseAnimation.value,
          child: FloatingActionButton.extended(
            onPressed: () => Navigator.pushNamed(context, '/flash/swipe'),
            backgroundColor: KipikTheme.rouge,
            icon: const Icon(Icons.add, color: Colors.white),
            label: const Text(
              'Nouveau RDV',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        );
      },
    );
  }

  // âœ… HELPER METHODS CORRIGÃ‰S avec tous les statuts
  Color _getStatusColor(FlashBookingStatus status) {
    switch (status) {
      case FlashBookingStatus.pending:
        return Colors.orange;
      case FlashBookingStatus.quoteSent: // âœ… AjoutÃ©
        return Colors.blue;
      case FlashBookingStatus.depositPaid: // âœ… AjoutÃ©
        return Colors.purple;
      case FlashBookingStatus.confirmed:
        return Colors.green;
      case FlashBookingStatus.completed:
        return Colors.blue;
      case FlashBookingStatus.cancelled:
      case FlashBookingStatus.rejected:
        return Colors.red;
      case FlashBookingStatus.expired: // âœ… AjoutÃ©
        return Colors.grey;
    }
  }

  IconData _getStatusIcon(FlashBookingStatus status) {
    switch (status) {
      case FlashBookingStatus.pending:
        return Icons.schedule;
      case FlashBookingStatus.quoteSent: // âœ… AjoutÃ©
        return Icons.description;
      case FlashBookingStatus.depositPaid: // âœ… AjoutÃ©
        return Icons.payment;
      case FlashBookingStatus.confirmed:
        return Icons.check_circle;
      case FlashBookingStatus.completed:
        return Icons.done_all;
      case FlashBookingStatus.cancelled:
      case FlashBookingStatus.rejected:
        return Icons.cancel;
      case FlashBookingStatus.expired: // âœ… AjoutÃ©
        return Icons.timer_off;
    }
  }

  String _getStatusText(FlashBookingStatus status) {
    return status.displayText;
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  bool _isWithin48Hours(DateTime date) {
    return date.difference(DateTime.now()).inHours < 48;
  }

  // Action methods
  Future<void> _cancelBooking(FlashBooking booking) async {
    final confirmed = await _showConfirmationDialog(
      title: 'Annuler le RDV',
      message: 'ÃŠtes-vous sÃ»r de vouloir annuler ce rendez-vous ? Cette action est irrÃ©versible.',
      confirmText: 'Oui, annuler',
      isDestructive: true,
    );

    if (confirmed == true) {
      try {
        await FlashService.instance.cancelBooking(booking.id);
        await _refreshBookings();
        _showSuccessSnackBar('RDV annulÃ© avec succÃ¨s');
        HapticFeedback.lightImpact();
      } catch (e) {
        _showErrorSnackBar('Erreur: ${e.toString()}');
      }
    }
  }

  void _payDeposit(FlashBooking booking) {
    _showInfoSnackBar('Paiement acompte - BientÃ´t disponible');
    // TODO: ImplÃ©menter le paiement avec FlashBookingService
  }

  void _openChat(FlashBooking booking) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => BookingChatPage(booking: booking),
      ),
    );
  }

  void _viewDetails(FlashBooking booking, Flash? flash) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _buildDetailsBottomSheet(booking, flash),
    );
  }

  void _rateExperience(FlashBooking booking) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _buildRatingBottomSheet(booking),
    );
  }

  void _showFilterDialog() {
    _showInfoSnackBar('Filtres - BientÃ´t disponible');
  }

  void _exportBookings() {
    _showInfoSnackBar('Export - BientÃ´t disponible');
  }

  Widget _buildDetailsBottomSheet(FlashBooking booking, Flash? flash) {
    return DraggableScrollableSheet(
      initialChildSize: 0.8,
      maxChildSize: 0.95,
      minChildSize: 0.5,
      builder: (context, scrollController) {
        return Container(
          decoration: const BoxDecoration(
            color: Color(0xFF1A1A1A),
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              Container(
                margin: const EdgeInsets.symmetric(vertical: 12),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey.shade600,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(20),
                child: Row(
                  children: [
                    const Text(
                      'DÃ©tails du RDV',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: SingleChildScrollView(
                  controller: scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 20),
                  child: Column(
                    children: [
                      if (flash != null) _buildFlashDetailsCard(flash),
                      const SizedBox(height: 20),
                      _buildBookingDetailsCard(booking),
                      const SizedBox(height: 20),
                      _buildPaymentDetailsCard(booking),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildFlashDetailsCard(Flash flash) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Flash tatouÃ©',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  flash.imageUrl,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => _buildPlaceholderImage(),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      flash.title,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      flash.tattooArtistName,
                      style: TextStyle(
                        color: KipikTheme.rouge,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 8),
                    if (flash.description.isNotEmpty)
                      Text(
                        flash.description,
                        style: TextStyle(
                          color: Colors.grey.shade400,
                          fontSize: 12,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBookingDetailsCard(FlashBooking booking) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Informations du RDV',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          _buildDetailRow('Date', _formatDate(booking.requestedDate)),
          _buildDetailRow('Heure', booking.timeSlot),
          _buildDetailRow('Statut', _getStatusText(booking.status)),
          if (booking.clientNotes.isNotEmpty)
            _buildDetailRow('Notes', booking.clientNotes),
          if (booking.clientPhone.isNotEmpty)
            _buildDetailRow('TÃ©lÃ©phone', booking.clientPhone),
        ],
      ),
    );
  }

  Widget _buildPaymentDetailsCard(FlashBooking booking) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'DÃ©tails de paiement',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          _buildDetailRow('Prix total', '${booking.totalPrice.toInt()}â‚¬'),
          _buildDetailRow('Acompte versÃ©', '${booking.depositAmount.toInt()}â‚¬'),
          _buildDetailRow('Reste Ã  payer', '${(booking.totalPrice - booking.depositAmount).toInt()}â‚¬'),
          if (booking.paymentIntentId?.isNotEmpty == true)
            _buildDetailRow('ID transaction', booking.paymentIntentId!),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRatingBottomSheet(FlashBooking booking) {
    int rating = 5;
    String comment = '';

    return StatefulBuilder(
      builder: (context, setModalState) => Container(
        height: MediaQuery.of(context).size.height * 0.6,
        decoration: const BoxDecoration(
          color: Color(0xFF1A1A1A),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          children: [
            Container(
              margin: const EdgeInsets.symmetric(vertical: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.shade600,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  children: [
                    const Text(
                      'Noter votre expÃ©rience',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 32),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: List.generate(5, (index) {
                        return GestureDetector(
                          onTap: () => setModalState(() => rating = index + 1),
                          child: Container(
                            margin: const EdgeInsets.symmetric(horizontal: 4),
                            child: Icon(
                              index < rating ? Icons.star : Icons.star_border,
                              color: Colors.amber,
                              size: 40,
                            ),
                          ),
                        );
                      }),
                    ),
                    const SizedBox(height: 24),
                    TextField(
                      maxLines: 4,
                      style: const TextStyle(color: Colors.white),
                      decoration: InputDecoration(
                        hintText: 'Partagez votre expÃ©rience (optionnel)',
                        hintStyle: TextStyle(color: Colors.grey.shade600),
                        filled: true,
                        fillColor: const Color(0xFF0A0A0A),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: Color(0xFF2A2A2A)),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: Color(0xFF2A2A2A)),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: KipikTheme.rouge),
                        ),
                      ),
                      onChanged: (value) => comment = value,
                    ),
                    const Spacer(),
                    Row(
                      children: [
                        Expanded(
                          child: OutlinedButton(
                            onPressed: () => Navigator.pop(context),
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: Colors.grey.shade600),
                              padding: const EdgeInsets.symmetric(vertical: 16),
                            ),
                            child: const Text(
                              'Annuler',
                              style: TextStyle(color: Colors.white),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: ElevatedButton(
                            onPressed: () {
                              Navigator.pop(context);
                              _showSuccessSnackBar('Merci pour votre avis !');
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: KipikTheme.rouge,
                              padding: const EdgeInsets.symmetric(vertical: 16),
                            ),
                            child: const Text(
                              'Envoyer',
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<bool?> _showConfirmationDialog({
    required String title,
    required String message,
    required String confirmText,
    bool isDestructive = false,
  }) {
    return showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: Text(title, style: const TextStyle(color: Colors.white)),
        content: Text(message, style: const TextStyle(color: Colors.white)),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(
              foregroundColor: isDestructive ? Colors.red : KipikTheme.rouge,
            ),
            child: Text(confirmText),
          ),
        ],
      ),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}

enum BookingListType {
  pending,
  confirmed,
  completed,
  cancelled,
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\notifications_page.dart

import 'package:flutter/material.dart';
import 'dart:math';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../theme/kipik_theme.dart';
import '../../models/notification_item.dart';
import '../../services/notification/firebase_notification_service.dart';

class NotificationsPage extends StatefulWidget {
  const NotificationsPage({Key? key}) : super(key: key);

  @override
  State<NotificationsPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsPage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  late FirebaseNotificationService _notificationService;
  List<NotificationItem> _notifications = [];
  bool _isLoading = true;
  
  // Liste des images de fond disponibles
  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo1.png',
    'assets/background_tatoo2.png',
    'assets/background_tatoo3.png',
  ];
  
  // Variable pour stocker l'image de fond sÃ©lectionnÃ©e alÃ©atoirement
  late String _selectedBackground;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _notificationService = FirebaseNotificationService.instance;
    _loadNotifications();
    
    // SÃ©lection alÃ©atoire de l'image de fond
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadNotifications() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      // Charger les notifications depuis Firebase
      final notifications = await _notificationService.getAllNotifications();
      setState(() {
        _notifications = notifications;
        _isLoading = false;
      });
    } catch (e) {
      print('Erreur lors du chargement des notifications: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _markAllAsRead() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      await _notificationService.markAllAsRead();
      await _loadNotifications(); // Recharger les notifications
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Toutes les notifications ont Ã©tÃ© marquÃ©es comme lues'),
            backgroundColor: Colors.black87,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            action: SnackBarAction(
              label: 'OK',
              textColor: KipikTheme.rouge,
              onPressed: () {},
            ),
          ),
        );
      }
    } catch (e) {
      print('Erreur lors du marquage des notifications: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _deleteAllNotifications() async {
    // Afficher une boÃ®te de dialogue de confirmation
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Supprimer toutes les notifications',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir supprimer toutes les notifications ? Cette action est irrÃ©versible.',
          style: TextStyle(color: Colors.white),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text(
              'Annuler',
              style: TextStyle(color: Colors.grey[400]),
            ),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
            ),
            child: const Text('Supprimer'),
          ),
        ],
      ),
    );
    
    if (confirm == true) {
      setState(() {
        _isLoading = true;
      });
      
      try {
        await _notificationService.deleteAllNotifications();
        await _loadNotifications(); // Recharger les notifications
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text('Toutes les notifications ont Ã©tÃ© supprimÃ©es'),
              backgroundColor: Colors.black87,
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          );
        }
      } catch (e) {
        print('Erreur lors de la suppression: $e');
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _handleNotificationAction(NotificationItem notification) async {
    // Marquer comme lu
    if (!notification.read) {
      try {
        await _notificationService.markAsRead(notification.id);
        setState(() {
          // Mettre Ã  jour localement
          final index = _notifications.indexWhere((n) => n.id == notification.id);
          if (index != -1) {
            _notifications[index] = NotificationItem(
              id: notification.id,
              title: notification.title,
              message: notification.message,
              fullMessage: notification.fullMessage,
              date: notification.date,
              icon: notification.icon,
              color: notification.color,
              type: notification.type,
              read: true,
            );
          }
        });
      } catch (e) {
        print('Erreur lors du marquage comme lu: $e');
      }
    }
    
    // âœ… CORRIGÃ‰: Switch exhaustif avec toutes les valeurs possibles
    switch (notification.type) {
      case NotificationType.message:
        if (mounted) Navigator.pushNamed(context, '/messages');
        break;
      case NotificationType.devis:
        if (mounted) Navigator.pushNamed(context, '/suivi_devis');
        break;
      case NotificationType.projet:
        if (mounted) Navigator.pushNamed(context, '/mes_projets');
        break;
      case NotificationType.tatoueur:
        if (mounted) Navigator.pushNamed(context, '/recherche_tatoueur');
        break;
      case NotificationType.system:
        // Pour les notifications systÃ¨me, afficher plus de dÃ©tails
        _showNotificationDetails(notification);
        break;
      // âœ… AJOUTÃ‰: Cas par dÃ©faut pour rendre le switch exhaustif
      default:
        _showNotificationDetails(notification);
        break;
    }
  }

  void _showNotificationDetails(NotificationItem notification) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => SafeArea(
        child: Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.grey[900],
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: KipikTheme.rouge.withOpacity(0.5), width: 1.5),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.5),
                blurRadius: 15,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  CircleAvatar(
                    backgroundColor: notification.color.withOpacity(0.2),
                    radius: 25,
                    child: Icon(
                      notification.icon,
                      color: notification.color,
                      size: 25,
                    ),
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          notification.title,
                          style: const TextStyle(
                            fontFamily: 'PermanentMarker',
                            color: Colors.white,
                            fontSize: 18,
                          ),
                        ),
                        const SizedBox(height: 5),
                        Text(
                          notification.formattedDate,
                          style: TextStyle(
                            color: Colors.grey[400],
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              const Divider(color: Colors.white24),
              const SizedBox(height: 10),
              ConstrainedBox(
                constraints: BoxConstraints(
                  maxHeight: MediaQuery.of(context).size.height * 0.4,
                ),
                child: SingleChildScrollView(
                  child: Text(
                    notification.fullMessage ?? notification.message,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      height: 1.5,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 30),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: KipikTheme.rouge,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(30),
                    ),
                  ),
                  child: const Text('Fermer'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  List<NotificationItem> _getFilteredNotifications() {
    final currentTab = _tabController.index;
    
    if (currentTab == 0) {
      // Toutes les notifications
      return _notifications;
    } else if (currentTab == 1) {
      // Nouvelles
      return _notifications.where((notification) => !notification.read).toList();
    } else if (currentTab == 2) {
      // Lues
      return _notifications.where((notification) => notification.read).toList();
    } else {
      // Filtrer par type (Messages)
      return _notifications.where((notification) => notification.type == NotificationType.message).toList();
    }
  }

  @override
  Widget build(BuildContext context) {
    final filteredNotifications = _getFilteredNotifications();
    final unreadCount = _notifications.where((notification) => !notification.read).length;
    
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Notifications',
        showBackButton: true,
        redirectToHome: true,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond alÃ©atoire avec effet de parallaxe
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            alignment: Alignment.topCenter,
          ),
          
          // Overlay dÃ©gradÃ© pour meilleure lisibilitÃ©
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withOpacity(0.3),
                  Colors.black.withOpacity(0.7),
                ],
              ),
            ),
          ),
          
          Column(
            children: [
              // En-tÃªte avec statistiques
              Container(
                padding: const EdgeInsets.fromLTRB(20, 20, 20, 15),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.6),
                  border: Border(
                    bottom: BorderSide(color: Colors.white.withOpacity(0.1)),
                  ),
                ),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            Badge(
                              backgroundColor: unreadCount > 0 ? KipikTheme.rouge : Colors.transparent,
                              isLabelVisible: unreadCount > 0,
                              label: Text(unreadCount.toString()),
                              child: const Icon(
                                Icons.notifications,
                                color: Colors.white,
                                size: 28,
                              ),
                            ),
                            const SizedBox(width: 10),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Notifications (${_notifications.length})',
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                  ),
                                ),
                                if (unreadCount > 0)
                                  Text(
                                    '$unreadCount non lues',
                                    style: TextStyle(
                                      color: KipikTheme.rouge,
                                      fontSize: 12,
                                    ),
                                  ),
                              ],
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            if (unreadCount > 0)
                              IconButton(
                                onPressed: _markAllAsRead,
                                icon: const Icon(Icons.mark_email_read, color: Colors.white70, size: 20),
                                tooltip: 'Tout marquer comme lu',
                              ),
                            IconButton(
                              onPressed: _deleteAllNotifications,
                              icon: const Icon(Icons.delete_outline, color: Colors.white70, size: 20),
                              tooltip: 'Supprimer toutes les notifications',
                            ),
                          ],
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 15),
                    
                    // Onglets de filtrage avec PermanentMarker
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(25),
                      ),
                      child: TabBar(
                        controller: _tabController,
                        indicator: BoxDecoration(
                          color: KipikTheme.rouge,
                          borderRadius: BorderRadius.circular(25),
                        ),
                        labelColor: Colors.white,
                        unselectedLabelColor: Colors.white70,
                        labelStyle: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontWeight: FontWeight.bold, 
                          fontSize: 12
                        ),
                        unselectedLabelStyle: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 12
                        ),
                        tabs: const [
                          Tab(text: 'Toutes'),
                          Tab(text: 'Nouvelles'),
                          Tab(text: 'Lues'),
                          Tab(text: 'Messages'),
                        ],
                        onTap: (index) {
                          setState(() {});
                        },
                      ),
                    ),
                  ],
                ),
              ),
              
              // Liste des notifications
              Expanded(
                child: _isLoading 
                  ? Center(
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                      ),
                    )
                  : filteredNotifications.isEmpty
                    ? _buildEmptyState()
                    : _buildNotificationsList(filteredNotifications),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    final String message;
    final IconData icon;
    
    switch (_tabController.index) {
      case 1:
        message = 'Vous n\'avez pas de nouvelles notifications';
        icon = Icons.notifications_none;
        break;
      case 2:
        message = 'Vous n\'avez pas encore de notifications lues';
        icon = Icons.mark_email_read;
        break;
      case 3:
        message = 'Vous n\'avez pas de notifications de messages';
        icon = Icons.chat_bubble_outline;
        break;
      default:
        message = 'Vous n\'avez pas encore de notifications';
        icon = Icons.notifications_none;
    }
    
    return Center(
      child: Container(
        padding: const EdgeInsets.all(24),
        margin: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(24),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 64,
              color: Colors.grey[600],
            ),
            const SizedBox(height: 20),
            Text(
              message,
              style: const TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.black87,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 10),
            Text(
              'Toutes les notifications importantes apparaÃ®tront ici',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[700],
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNotificationsList(List<NotificationItem> notifications) {
    return RefreshIndicator(
      onRefresh: _loadNotifications,
      color: KipikTheme.rouge,
      backgroundColor: Colors.white,
      child: ListView.builder(
        padding: const EdgeInsets.all(12),
        itemCount: notifications.length,
        itemBuilder: (context, index) {
          final notification = notifications[index];
          return _buildNotificationCard(notification);
        },
      ),
    );
  }

  Widget _buildNotificationCard(NotificationItem notification) {
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      child: Dismissible(
        key: Key(notification.id),
        background: Container(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          decoration: BoxDecoration(
            color: KipikTheme.rouge,
            borderRadius: BorderRadius.circular(15),
          ),
          alignment: Alignment.centerRight,
          child: const Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              Icon(Icons.delete, color: Colors.white),
              SizedBox(width: 8),
              Text(
                'Supprimer',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ),
        direction: DismissDirection.endToStart,
        onDismissed: (direction) async {
          try {
            await _notificationService.deleteNotification(notification.id);
            setState(() {
              _notifications.removeWhere((n) => n.id == notification.id);
            });
            
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: const Text('Notification supprimÃ©e'),
                  backgroundColor: Colors.black87,
                  behavior: SnackBarBehavior.floating,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                  action: SnackBarAction(
                    label: 'Annuler',
                    textColor: KipikTheme.rouge,
                    onPressed: () {
                      _loadNotifications();
                    },
                  ),
                ),
              );
            }
          } catch (e) {
            print('Erreur lors de la suppression: $e');
            _loadNotifications(); // Recharger en cas d'erreur
          }
        },
        child: Card(
          elevation: notification.read ? 2 : 5,
          shadowColor: notification.read 
              ? Colors.black.withOpacity(0.2) 
              : KipikTheme.rouge.withOpacity(0.3),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
            side: BorderSide(
              color: notification.read
                  ? Colors.transparent
                  : KipikTheme.rouge.withOpacity(0.5),
              width: notification.read ? 0 : 1.5,
            ),
          ),
          child: InkWell(
            onTap: () => _handleNotificationAction(notification),
            borderRadius: BorderRadius.circular(15),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // IcÃ´ne
                  CircleAvatar(
                    backgroundColor: notification.color.withOpacity(0.2),
                    radius: 22,
                    child: Icon(
                      notification.icon,
                      color: notification.color,
                      size: 20,
                    ),
                  ),
                  
                  const SizedBox(width: 12),
                  
                  // Contenu
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // En-tÃªte (titre et date)
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Expanded(
                              child: Text(
                                notification.title,
                                style: TextStyle(
                                  fontWeight: notification.read ? FontWeight.normal : FontWeight.bold,
                                  fontSize: 16,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                            Text(
                              notification.formattedDate,
                              style: TextStyle(
                                color: Colors.grey[600],
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                        
                        const SizedBox(height: 5),
                        
                        // Message
                        Text(
                          notification.message,
                          style: TextStyle(
                            color: Colors.grey[700],
                            fontSize: 14,
                            height: 1.3,
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                        
                        const SizedBox(height: 10),
                        
                        // Action selon le type de notification
                        Row(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            _buildActionButton(notification),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  // âœ… CORRIGÃ‰: Switch exhaustif avec cas par dÃ©faut
  Widget _buildActionButton(NotificationItem notification) {
    switch (notification.type) {
      case NotificationType.message:
        return TextButton.icon(
          onPressed: () => _handleNotificationAction(notification),
          icon: const Icon(Icons.chat, size: 16),
          label: const Text('Voir le message'),
          style: TextButton.styleFrom(
            foregroundColor: KipikTheme.rouge,
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
            backgroundColor: KipikTheme.rouge.withOpacity(0.1),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
        );
      
      case NotificationType.devis:
        return TextButton.icon(
          onPressed: () => _handleNotificationAction(notification),
          icon: const Icon(Icons.receipt, size: 16),
          label: const Text('Voir le devis'),
          style: TextButton.styleFrom(
            foregroundColor: KipikTheme.rouge,
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
            backgroundColor: KipikTheme.rouge.withOpacity(0.1),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
        );
      
      case NotificationType.projet:
        return TextButton.icon(
          onPressed: () => _handleNotificationAction(notification),
          icon: const Icon(Icons.art_track, size: 16),
          label: const Text('Voir le projet'),
          style: TextButton.styleFrom(
            foregroundColor: KipikTheme.rouge,
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
            backgroundColor: KipikTheme.rouge.withOpacity(0.1),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
        );
      
      case NotificationType.tatoueur:
        return TextButton.icon(
          onPressed: () => _handleNotificationAction(notification),
          icon: const Icon(Icons.person, size: 16),
          label: const Text('Voir le tatoueur'),
          style: TextButton.styleFrom(
            foregroundColor: KipikTheme.rouge,
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
            backgroundColor: KipikTheme.rouge.withOpacity(0.1),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
        );
      
      case NotificationType.system:
        return TextButton.icon(
          onPressed: () => _handleNotificationAction(notification),
          icon: const Icon(Icons.info_outline, size: 16),
          label: const Text('En savoir plus'),
          style: TextButton.styleFrom(
            foregroundColor: KipikTheme.rouge,
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
            backgroundColor: KipikTheme.rouge.withOpacity(0.1),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
        );
      
      // âœ… AJOUTÃ‰: Cas par dÃ©faut pour rendre le switch exhaustif
      default:
        return TextButton.icon(
          onPressed: () => _handleNotificationAction(notification),
          icon: const Icon(Icons.visibility, size: 16),
          label: const Text('Voir'),
          style: TextButton.styleFrom(
            foregroundColor: KipikTheme.rouge,
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
            backgroundColor: KipikTheme.rouge.withOpacity(0.1),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
        );
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\offres_mois_page.dart

// lib/pages/particulier/offres_mois_page.dart
import 'package:flutter/material.dart';
class OffresMoisPage extends StatelessWidget {
  const OffresMoisPage({Key? key}) : super(key: key);
  @override Widget build(BuildContext c) => Scaffold(
    appBar: AppBar(title: const Text('Offres du mois')),
    body: const Center(child: Text('Vos offres spÃ©ciales')),
  );
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\parametres_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../services/notification/firebase_notification_service.dart';
import '../../services/auth/secure_auth_service.dart'; // âœ… MIGRATION
import '../../models/user_role.dart'; // âœ… MIGRATION
import 'accueil_particulier_page.dart';
import 'profil_particulier_page.dart';
import 'aide_support_page.dart';

class ParametresPage extends StatefulWidget {
  const ParametresPage({Key? key}) : super(key: key);

  @override
  State<ParametresPage> createState() => _ParametresPageState();
}

class _ParametresPageState extends State<ParametresPage> {
  bool _notificationsEnabled = true;
  bool _emailNotificationsEnabled = true;
  bool _darkModeEnabled = false;
  String _selectedLanguage = 'FranÃ§ais';
  final FirebaseNotificationService _notificationService = FirebaseNotificationService.instance; // âœ… MIGRATION

  // âœ… MIGRATION: Profil utilisateur depuis SecureAuthService
  String _userName = "Votre prÃ©nom ici";
  String _userLastName = "Votre nom ici";
  String _userEmail = "exemple@email.com";
  String? _userProfileImage;

  // âœ… MIGRATION: Getters sÃ©curisÃ©s
  SecureAuthService get _authService => SecureAuthService.instance;
  String? get _currentUserId => _authService.currentUserId;
  UserRole? get _currentUserRole => _authService.currentUserRole;
  dynamic get _currentUser => _authService.currentUser;

  // Fonds alÃ©atoires
  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo1.png',
    'assets/background_tatoo2.png',
    'assets/background_tatoo3.png',
  ];
  late String _selectedBackground;

  @override
  void initState() {
    super.initState();
    _loadUserSettings();
    _selectedBackground =
        _backgroundImages[Random().nextInt(_backgroundImages.length)];
    _loadUserProfile(); // âœ… NOUVEAU: Charger le profil utilisateur
  }

  // âœ… MIGRATION: Charger le profil utilisateur depuis SecureAuthService
  void _loadUserProfile() {
    if (_currentUser != null) {
      setState(() {
        final user = _currentUser as Map<String, dynamic>;
        _userName = user['displayName']?.toString().split(' ').first ?? 
                   user['name']?.toString().split(' ').first ?? 
                   _userName;
        _userLastName = user['displayName']?.toString().split(' ').skip(1).join(' ') ?? 
                       user['name']?.toString().split(' ').skip(1).join(' ') ?? 
                       _userLastName;
        _userEmail = user['email']?.toString() ?? _userEmail;
        _userProfileImage = user['profileImageUrl']?.toString();
      });
    }
  }

  Future<void> _loadUserSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        _notificationsEnabled =
            prefs.getBool('notifications_enabled') ?? true;
        _emailNotificationsEnabled =
            prefs.getBool('email_notifications_enabled') ?? true;
        _darkModeEnabled = prefs.getBool('dark_mode_enabled') ?? false;
        _selectedLanguage =
            prefs.getString('selected_language') ?? 'FranÃ§ais';
        
        // âœ… MIGRATION: Utiliser les donnÃ©es de SecureAuthService si disponibles
        if (_currentUser == null) {
          _userName = prefs.getString('user_first_name') ?? _userName;
          _userLastName = prefs.getString('user_last_name') ?? _userLastName;
          _userEmail = prefs.getString('user_email') ?? _userEmail;
          _userProfileImage = prefs.getString('user_profile_image');
        }
      });
    } catch (e) {
      print('âŒ Erreur chargement paramÃ¨tres: $e');
    }
  }

  Future<void> _saveNotificationSetting(bool v) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('notifications_enabled', v);
      setState(() => _notificationsEnabled = v);
      
      // âœ… NOUVEAU: Mettre Ã  jour les paramÃ¨tres Firebase si connectÃ©
      if (_currentUserId != null) {
        await _authService.updateUserProfile(
          additionalData: {'notificationsEnabled': v},
        );
      }
      
      print('âœ… ParamÃ¨tre notifications sauvegardÃ©: $v');
    } catch (e) {
      print('âŒ Erreur sauvegarde notifications: $e');
    }
  }

  Future<void> _saveEmailNotificationSetting(bool v) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('email_notifications_enabled', v);
      setState(() => _emailNotificationsEnabled = v);
      
      // âœ… NOUVEAU: Mettre Ã  jour les paramÃ¨tres Firebase si connectÃ©
      if (_currentUserId != null) {
        await _authService.updateUserProfile(
          additionalData: {'emailNotificationsEnabled': v},
        );
      }
      
      print('âœ… ParamÃ¨tre emails sauvegardÃ©: $v');
    } catch (e) {
      print('âŒ Erreur sauvegarde emails: $e');
    }
  }

  Future<void> _saveThemeSetting(bool v) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('dark_mode_enabled', v);
      setState(() => _darkModeEnabled = v);
      
      // âœ… NOUVEAU: Mettre Ã  jour les paramÃ¨tres Firebase si connectÃ©
      if (_currentUserId != null) {
        await _authService.updateUserProfile(
          additionalData: {'darkModeEnabled': v},
        );
      }
      
      print('âœ… ParamÃ¨tre thÃ¨me sauvegardÃ©: $v');
    } catch (e) {
      print('âŒ Erreur sauvegarde thÃ¨me: $e');
    }
  }

  Future<void> _saveLanguageSetting(String lang) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('selected_language', lang);
      setState(() => _selectedLanguage = lang);
      
      // âœ… NOUVEAU: Mettre Ã  jour les paramÃ¨tres Firebase si connectÃ©
      if (_currentUserId != null) {
        await _authService.updateUserProfile(
          additionalData: {'preferredLanguage': lang},
        );
      }
      
      print('âœ… Langue sauvegardÃ©e: $lang');
    } catch (e) {
      print('âŒ Erreur sauvegarde langue: $e');
    }
  }

  void _showClearCacheDialog() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Vider le cache',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: const Text(
          'Cette action effacera toutes les donnÃ©es temporaires stockÃ©es sur votre appareil. Continuer ?',
          style: TextStyle(color: Colors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: Text('Annuler',
                style: TextStyle(color: Colors.grey[400])),
          ),
          ElevatedButton(
            onPressed: () async {
              // âœ… NOUVEAU: Effacer rÃ©ellement le cache
              try {
                final prefs = await SharedPreferences.getInstance();
                await prefs.clear();
                await Future.delayed(const Duration(seconds: 1));
                
                if (mounted) {
                  Navigator.pop(ctx);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Row(
                        children: [
                          Icon(Icons.check_circle, color: Colors.green[300]),
                          const SizedBox(width: 12),
                          const Expanded(
                            child: Text('Cache vidÃ© avec succÃ¨s !',
                                style: TextStyle(color: Colors.white)),
                          ),
                        ],
                      ),
                      backgroundColor: Colors.grey[850],
                      behavior: SnackBarBehavior.floating,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10)),
                      action: SnackBarAction(
                        label: 'OK',
                        textColor: KipikTheme.rouge,
                        onPressed: () {},
                      ),
                    ),
                  );
                  
                  // Recharger les paramÃ¨tres
                  _loadUserSettings();
                }
              } catch (e) {
                print('âŒ Erreur vidage cache: $e');
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8)),
            ),
            child: const Text('Confirmer',
                style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _showQRCode() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: Colors.grey[900],
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16)),
        contentPadding: const EdgeInsets.all(24),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Mon QR Code',
              style: TextStyle(
                color: KipikTheme.blanc,
                fontFamily: KipikTheme.fontTitle,
                fontSize: 20,
              ),
            ),
            const SizedBox(height: 24),
            Container(
              width: 200,
              height: 200,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: KipikTheme.blanc,
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: KipikTheme.rouge.withOpacity(0.3),
                    blurRadius: 10,
                    offset: const Offset(0, 5),
                  ),
                ],
              ),
              child: Icon(Icons.qr_code,
                  size: 150, color: KipikTheme.noir),
            ),
            const SizedBox(height: 20),
            Text(
              'Scannez ce code pour partager votre profil',
              style:
                  TextStyle(color: KipikTheme.blanc.withOpacity(0.7)),
              textAlign: TextAlign.center,
            ),
            // âœ… NOUVEAU: Afficher l'ID utilisateur si connectÃ©
            if (_currentUserId != null) ...[
              const SizedBox(height: 12),
              Text(
                'ID: ${_currentUserId!.substring(0, 8)}...',
                style: TextStyle(
                  color: KipikTheme.blanc.withOpacity(0.5),
                  fontSize: 12,
                  fontFamily: 'monospace',
                ),
              ),
            ],
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => Navigator.pop(ctx),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                minimumSize: const Size(double.infinity, 45),
              ),
              child: const Text('Fermer',
                  style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );
  }

  void _showLanguagePicker() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.grey[900],
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (ctx) => Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              'Choisir une langue',
              style: TextStyle(
                color: KipikTheme.rouge,
                fontFamily: KipikTheme.fontTitle,
                fontSize: 18,
              ),
            ),
          ),
          Divider(color: KipikTheme.blanc.withOpacity(0.2)),
          _buildLanguageOption('FranÃ§ais'),
          _buildLanguageOption('English'),
          _buildLanguageOption('EspaÃ±ol'),
          SizedBox(height: MediaQuery.of(context).padding.bottom),
        ],
      ),
    );
  }

  Widget _buildLanguageOption(String lang) {
    final isSelected = _selectedLanguage == lang;
    return ListTile(
      title: Text(
        lang,
        style: TextStyle(
          color: isSelected ? KipikTheme.rouge : KipikTheme.blanc,
          fontWeight:
              isSelected ? FontWeight.bold : FontWeight.normal,
        ),
      ),
      trailing:
          isSelected ? Icon(Icons.check, color: KipikTheme.rouge) : null,
      onTap: () {
        _saveLanguageSetting(lang);
        Navigator.pop(context);
      },
    );
  }

  void _showPrivacyPolicy() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: Text(
          'Politique de confidentialitÃ©',
          style: TextStyle(
            color: KipikTheme.blanc,
            fontFamily: KipikTheme.fontTitle,
          ),
        ),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildPolicySection(
                'DonnÃ©es personnelles',
                'Nous collectons uniquement les donnÃ©es nÃ©cessaires '
                'au bon fonctionnement de l\'application.',
              ),
              const SizedBox(height: 10),
              _buildPolicySection(
                'Utilisation des cookies',
                'Nous utilisons des cookies pour amÃ©liorer votre expÃ©rience '
                'et analyser le trafic.',
              ),
              const SizedBox(height: 10),
              _buildPolicySection(
                'Partage des donnÃ©es',
                'Vos informations ne sont jamais vendues Ã  des tiers sans '
                'votre consentement explicite.',
              ),
              const SizedBox(height: 10),
              _buildPolicySection(
                'SÃ©curitÃ©',
                'Toutes vos donnÃ©es sont cryptÃ©es et stockÃ©es en toute sÃ©curitÃ©.',
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: Text('Fermer',
                style: TextStyle(color: KipikTheme.rouge)),
          ),
        ],
      ),
    );
  }

  Widget _buildPolicySection(String title, String content) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            color: KipikTheme.rouge,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          content,
          style: TextStyle(color: KipikTheme.blanc.withOpacity(0.8)),
        ),
      ],
    );
  }

  void _showAboutDialog() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: Text(
          'Ã€ propos de Kipik',
          style: TextStyle(
            color: KipikTheme.blanc,
            fontFamily: KipikTheme.fontTitle,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.3),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Icon(Icons.brush,
                      size: 40, color: KipikTheme.rouge),
                  const SizedBox(height: 8),
                  const Text(
                    'KIPIK',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 24,
                      color: Colors.white,
                    ),
                  ),
                  Text(
                    'Version 1.0.0',
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.6),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Kipik est une application qui vous permet de trouver '
              'facilement des tatoueurs et d\'explorer des '
              'inspirations crÃ©atives.',
              style:
                  TextStyle(color: KipikTheme.blanc.withOpacity(0.8)),
            ),
            const SizedBox(height: 16),
            Text(
              'Â© 2025 Kipik. Tous droits rÃ©servÃ©s.',
              style:
                  TextStyle(color: KipikTheme.blanc.withOpacity(0.6)),
            ),
            // âœ… NOUVEAU: Informations utilisateur connectÃ©
            if (_currentUser != null) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Informations de connexion',
                      style: TextStyle(
                        color: KipikTheme.rouge,
                        fontWeight: FontWeight.bold,
                        fontSize: 12,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'Utilisateur: $_userEmail',
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.7),
                        fontSize: 10,
                      ),
                    ),
                    Text(
                      'RÃ´le: ${_currentUserRole?.name ?? 'client'}',
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.7),
                        fontSize: 10,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: Text('Fermer',
                style: TextStyle(color: KipikTheme.rouge)),
          ),
        ],
      ),
    );
  }

  // âœ… MIGRATION: Suppression de compte avec SecureAuthService
  void _showDeleteAccountDialog() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Supprimer mon compte',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red.withOpacity(0.3)),
              ),
              child: Row(
                children: [
                  Icon(Icons.warning_amber_rounded,
                      color: Colors.amber[300]),
                  const SizedBox(width: 12),
                  const Expanded(
                    child: Text(
                      'Cette action est irrÃ©versible et toutes vos donnÃ©es '
                      'seront dÃ©finitivement supprimÃ©es.',
                      style: TextStyle(color: Colors.white70),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Veuillez confirmer que vous souhaitez supprimer votre '
              'compte en saisissant "SUPPRIMER" ci-dessous :',
              style: TextStyle(color: Colors.white70),
            ),
            const SizedBox(height: 16),
            TextField(
              style: const TextStyle(color: Colors.white),
              decoration: InputDecoration(
                hintText: 'SUPPRIMER',
                hintStyle: TextStyle(color: Colors.grey[600]),
                filled: true,
                fillColor: Colors.grey[800],
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide.none,
                ),
                contentPadding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
              ),
              onChanged: (value) {
                // TODO: Activer le bouton seulement si "SUPPRIMER" est saisi
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: Text('Annuler',
                style: TextStyle(color: Colors.grey[400])),
          ),
          ElevatedButton(
            onPressed: () async {
              // âœ… NOUVEAU: Logique de suppression rÃ©elle (Ã  implÃ©menter)
              try {
                // TODO: ImplÃ©menter la suppression de compte
                // await _authService.deleteAccount();
                Navigator.pop(ctx);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('FonctionnalitÃ© en dÃ©veloppement'),
                    backgroundColor: Colors.orange,
                  ),
                );
              } catch (e) {
                print('âŒ Erreur suppression compte: $e');
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8)),
            ),
            child: const Text('Supprimer',
                style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  // âœ… MIGRATION: DÃ©connexion avec SecureAuthService
  void _showLogoutDialog() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'DÃ©connexion',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: Text(
          _currentUser != null 
              ? 'ÃŠtes-vous sÃ»r de vouloir vous dÃ©connecter de $_userEmail ?'
              : 'ÃŠtes-vous sÃ»r de vouloir vous dÃ©connecter ?',
          style: const TextStyle(color: Colors.white),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: Text('Annuler',
                style: TextStyle(color: Colors.grey[400])),
          ),
          ElevatedButton(
            onPressed: () async {
              try {
                Navigator.pop(ctx);
                
                // âœ… MIGRATION: DÃ©connexion avec SecureAuthService
                await _authService.signOut();
                
                if (mounted) {
                  Navigator.of(context).pushReplacement(
                    MaterialPageRoute(
                        builder: (_) => const AccueilParticulierPage()),
                  );
                }
                
                print('âœ… DÃ©connexion rÃ©ussie');
              } catch (e) {
                print('âŒ Erreur dÃ©connexion: $e');
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Erreur lors de la dÃ©connexion: $e'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8)),
            ),
            child: const Text('DÃ©connexion',
                style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'ParamÃ¨tres',
        showBackButton: true,
        redirectToHome: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            alignment: Alignment.topCenter,
          ),
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withOpacity(0.3),
                  Colors.black.withOpacity(0.7),
                ],
              ),
            ),
          ),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 20),
                  _buildUserProfileCard(context),
                  const SizedBox(height: 30),
                  _buildAnimatedSectionHeader('GÃ©nÃ©ral', Icons.settings),
                  const SizedBox(height: 15),
                  _buildGeneralSettings(),
                  const SizedBox(height: 30),
                  _buildAnimatedSectionHeader('Apparence', Icons.palette),
                  const SizedBox(height: 15),
                  _buildAppearanceSettings(),
                  const SizedBox(height: 30),
                  _buildAnimatedSectionHeader(
                      'Notifications', Icons.notifications_none),
                  const SizedBox(height: 15),
                  _buildNotificationSettings(),
                  const SizedBox(height: 30),
                  _buildAnimatedSectionHeader(
                      'ConfidentialitÃ© & SÃ©curitÃ©', Icons.shield),
                  const SizedBox(height: 15),
                  _buildPrivacySettings(),
                  const SizedBox(height: 30),
                  Center(
                    child: Container(
                      width: 200,
                      height: 45,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(25),
                        border: Border.all(color: Colors.white30),
                        color: Colors.black38,
                      ),
                      child: TextButton.icon(
                        onPressed: _showLogoutDialog,
                        icon: const Icon(Icons.logout,
                            size: 18, color: Colors.white70),
                        label: Text(
                          _currentUser != null ? 'DÃ©connexion' : 'Non connectÃ©',
                          style: const TextStyle(color: Colors.white70),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Center(
                    child: Text(
                      'Version 1.0.0',
                      style: TextStyle(
                        color: KipikTheme.blanc.withOpacity(0.6),
                        fontSize: 12,
                      ),
                    ),
                  ),
                  const SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // âœ… MIGRATION: Carte profil utilisateur avec donnÃ©es SecureAuthService
  Widget _buildUserProfileCard(BuildContext context) {
    // âœ… NOUVEAU: Afficher diffÃ©rent contenu selon l'Ã©tat de connexion
    if (_currentUser == null) {
      return Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.7),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
              color: Colors.orange.withOpacity(0.5), width: 1),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 5,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              width: 70,
              height: 70,
              decoration: BoxDecoration(
                color: Colors.grey[800],
                shape: BoxShape.rectangle,
                borderRadius: BorderRadius.circular(15),
                border: Border.all(color: Colors.orange, width: 2),
              ),
              child: Icon(Icons.person_off,
                  size: 40, color: Colors.orange),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    "Non connectÃ©",
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.orange,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Connectez-vous pour synchroniser vos paramÃ¨tres',
                    style: TextStyle(
                        fontSize: 14,
                        color: Colors.white.withOpacity(0.8)),
                  ),
                  const SizedBox(height: 8),
                  OutlinedButton(
                    onPressed: () {
                      Navigator.pushNamed(context, '/login');
                    },
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.orange),
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20)),
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 8),
                      minimumSize: Size.zero,
                      tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    ),
                    child: const Text(
                      'Se connecter',
                      style: TextStyle(
                          color: Colors.orange, fontSize: 12),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      );
    }

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const ProfilParticulierPage(),
          ),
        );
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.7),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
              color: KipikTheme.rouge.withOpacity(0.5), width: 1),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 5,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              width: 70,
              height: 70,
              decoration: BoxDecoration(
                color: Colors.grey[800],
                shape: BoxShape.rectangle,
                borderRadius: BorderRadius.circular(15),
                border: Border.all(color: KipikTheme.rouge, width: 2),
                boxShadow: [
                  BoxShadow(
                    color: KipikTheme.rouge.withOpacity(0.2),
                    blurRadius: 15,
                    offset: const Offset(0, 5),
                  ),
                ],
                image: _userProfileImage != null
                    ? DecorationImage(
                        image: NetworkImage(_userProfileImage!),
                        fit: BoxFit.cover,
                      )
                    : null,
              ),
              child: _userProfileImage == null
                  ? Icon(Icons.person,
                      size: 40, color: KipikTheme.blanc)
                  : null,
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "$_userName $_userLastName",
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _userEmail,
                    style: TextStyle(
                        fontSize: 14,
                        color: KipikTheme.blanc.withOpacity(0.8)),
                  ),
                  // âœ… NOUVEAU: Afficher le rÃ´le utilisateur
                  if (_currentUserRole != null) ...[
                    const SizedBox(height: 4),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                      decoration: BoxDecoration(
                        color: KipikTheme.rouge.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Text(
                        _currentUserRole!.name.toUpperCase(),
                        style: TextStyle(
                          fontSize: 10,
                          color: KipikTheme.rouge,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                  const SizedBox(height: 8),
                  OutlinedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) =>
                              const ProfilParticulierPage(),
                        ),
                      );
                    },
                    style: OutlinedButton.styleFrom(
                      side: BorderSide(color: KipikTheme.rouge),
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20)),
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 8),
                      minimumSize: Size.zero,
                      tapTargetSize:
                          MaterialTapTargetSize.shrinkWrap,
                    ),
                    child: Text(
                      'Ã‰diter mon profil',
                      style: TextStyle(
                          color: KipikTheme.rouge, fontSize: 12),
                    ),
                  ),
                ],
              ),
            ),
            IconButton(
              icon: Icon(Icons.qr_code, color: KipikTheme.blanc),
              onPressed: _showQRCode,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnimatedSectionHeader(String title, IconData icon) {
    return Container(
      width: double.infinity,
      padding:
          const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            KipikTheme.rouge.withOpacity(0.3),
            KipikTheme.rouge.withOpacity(0.1),
          ],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: KipikTheme.rouge.withOpacity(0.5),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Icon(icon, color: KipikTheme.rouge, size: 24),
          const SizedBox(width: 10),
          Text(
            title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontFamily: 'PermanentMarker',
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGeneralSettings() {
    return Column(
      children: [
        _buildSelectTile(
          title: 'Langue',
          value: _selectedLanguage,
          icon: Icons.language,
          onTap: _showLanguagePicker,
        ),
        const SizedBox(height: 10),
        _buildNavigationTile(
          title: 'Ã€ propos',
          subtitle: 'Informations lÃ©gales et licences',
          icon: Icons.info_outline,
          onTap: _showAboutDialog,
        ),
        const SizedBox(height: 10),
        _buildNavigationTile(
          title: 'Aide et support',
          subtitle: 'FAQ et contact',
          icon: Icons.help_outline,
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const AideSupportPage(),
              ),
            );
          },
        ),
        const SizedBox(height: 10),
        _buildActionTile(
          title: 'Vider le cache',
          subtitle: 'DonnÃ©es temporaires',
          icon: Icons.cleaning_services_outlined,
          onTap: _showClearCacheDialog,
        ),
      ],
    );
  }

  Widget _buildAppearanceSettings() {
    return _buildEnhancedSwitchTile(
      'Mode sombre',
      'Ã‰conomisez votre batterie',
      Icons.dark_mode_outlined,
      _darkModeEnabled,
      _saveThemeSetting,
    );
  }

  Widget _buildNotificationSettings() {
    return Column(
      children: [
        _buildEnhancedSwitchTile(
          'Notifications push',
          'Pour nouveaux messages & mises Ã  jour',
          Icons.notifications,
          _notificationsEnabled,
          _saveNotificationSetting,
        ),
        const SizedBox(height: 10),
        _buildEnhancedSwitchTile(
          'Notifications email',
          'Promotions et nouveautÃ©s',
          Icons.email,
          _emailNotificationsEnabled,
          _saveEmailNotificationSetting,
        ),
      ],
    );
  }

  Widget _buildPrivacySettings() {
    return Column(
      children: [
        _buildNavigationTile(
          title: 'Politique de confidentialitÃ©',
          subtitle: 'Comment nous traitons vos donnÃ©es',
          icon: Icons.privacy_tip_outlined,
          onTap: _showPrivacyPolicy,
        ),
        const SizedBox(height: 10),
        if (_currentUser != null) // âœ… Seulement si connectÃ©
          _buildActionTile(
            title: 'Supprimer mon compte',
            subtitle: 'Effacer dÃ©finitivement toutes les donnÃ©es',
            icon: Icons.delete_outline,
            onTap: _showDeleteAccountDialog,
            textColor: KipikTheme.rouge,
          ),
      ],
    );
  }

  Widget _buildSelectTile({
    required String title,
    required String value,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.black45,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white10),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(12),
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding:
                const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
            child: Row(
              children: [
                Icon(icon,
                    color: KipikTheme.blanc.withOpacity(0.8)),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                        color: KipikTheme.blanc, fontSize: 16),
                  ),
                ),
                Text(value,
                    style: TextStyle(
                        color:
                            KipikTheme.blanc.withOpacity(0.6))),
                const SizedBox(width: 8),
                const Icon(Icons.chevron_right,
                    color: Colors.white70),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNavigationTile({
    required String title,
    required String subtitle,
    required IconData icon,
    required VoidCallback onTap,
    Color? textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.black45,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white10),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(12),
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding:
                const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
            child: Row(
              children: [
                Icon(icon,
                    color: textColor ??
                        KipikTheme.blanc.withOpacity(0.8)),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment:
                        CrossAxisAlignment.start,
                    children: [
                      Text(title,
                          style: TextStyle(
                              color: textColor ??
                                  KipikTheme.blanc,
                              fontSize: 16)),
                      const SizedBox(height: 2),
                      Text(subtitle,
                          style: TextStyle(
                              color: KipikTheme.blanc
                                  .withOpacity(0.6),
                              fontSize: 14)),
                    ],
                  ),
                ),
                const Icon(Icons.chevron_right,
                    color: Colors.white70),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildActionTile({
    required String title,
    required String subtitle,
    required IconData icon,
    required VoidCallback onTap,
    Color? textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.black45,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white10),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(12),
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding:
                const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
            child: Row(
              children: [
                Icon(icon,
                    color: textColor ??
                        KipikTheme.blanc.withOpacity(0.8)),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment:
                        CrossAxisAlignment.start,
                    children: [
                      Text(title,
                          style: TextStyle(
                              color: textColor ??
                                  KipikTheme.blanc,
                              fontSize: 16)),
                      const SizedBox(height: 2),
                      Text(subtitle,
                          style: TextStyle(
                              color: KipikTheme.blanc
                                  .withOpacity(0.6),
                              fontSize: 14)),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildEnhancedSwitchTile(
    String title,
    String subtitle,
    IconData icon,
    bool value,
    ValueChanged<bool> onChanged,
  ) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.black45,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: value
              ? KipikTheme.rouge.withOpacity(0.5)
              : Colors.white10,
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(12),
        child: InkWell(
          onTap: () => onChanged(!value),
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding:
                const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
            child: Row(
              children: [
                Icon(icon, color: value
                    ? KipikTheme.rouge
                    : Colors.white70),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment:
                        CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: TextStyle(
                          color: value
                              ? Colors.white
                              : Colors.white.withOpacity(0.9),
                          fontSize: 16,
                          fontWeight: value
                              ? FontWeight.bold
                              : FontWeight.normal,
                        ),
                      ),
                      const SizedBox(height: 2),
                      Text(
                        subtitle,
                        style: TextStyle(
                          color:
                              Colors.white.withOpacity(0.7),
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
                Switch(
                  value: value,
                  onChanged: onChanged,
                  activeColor: KipikTheme.rouge,
                  activeTrackColor:
                      KipikTheme.rouge.withOpacity(0.3),
                  inactiveThumbColor:
                      Colors.white.withOpacity(0.7),
                  inactiveTrackColor:
                      Colors.white.withOpacity(0.1),
                ),  
              ],
            ),
          ),
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\profil_particulier_page.dart

// lib/pages/particulier/profil_particulier_page.dart

import 'dart:io';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_particulier.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart'; // âœ… AJOUTÃ‰
import 'package:kipik_v5/core/database_manager.dart'; // âœ… AJOUTÃ‰
import 'package:kipik_v5/models/user.dart'; // âœ… AJOUTÃ‰
import 'package:kipik_v5/models/user_role.dart'; // âœ… AJOUTÃ‰

class ProfilParticulierPage extends StatefulWidget {
  const ProfilParticulierPage({super.key});

  @override
  State<ProfilParticulierPage> createState() => _ProfilParticulierPageState();
}

class _ProfilParticulierPageState extends State<ProfilParticulierPage> {
  // âœ… Controllers avec valeurs par dÃ©faut vides
  final TextEditingController nomController = TextEditingController();
  final TextEditingController prenomController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController telephoneController = TextEditingController();
  final TextEditingController adresseController = TextEditingController();
  final TextEditingController anniversaireController = TextEditingController();
  final TextEditingController urgenceController = TextEditingController();
  
  String _selectedSexe = 'Non prÃ©cisÃ©';
  File? _avatarImage;
  bool _isLoading = true; // âœ… AJOUTÃ‰
  bool _isSaving = false;
  bool _notificationsEnabled = true;
  bool _emailNotificationsEnabled = true;
  bool _hasAllergies = false;
  bool _takesMedication = false;
  
  // âœ… DonnÃ©es utilisateur
  User? _currentUser;
  Map<String, dynamic>? _userProfile;
  
  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo2.png',
    'assets/background1.png',
    'assets/background2.png',
  ];
  
  late String _selectedBackground;
  
  @override
  void initState() {
    super.initState();
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
    _loadUserProfile();
  }

  @override
  void dispose() {
    nomController.dispose();
    prenomController.dispose();
    emailController.dispose();
    telephoneController.dispose();
    adresseController.dispose();
    anniversaireController.dispose();
    urgenceController.dispose();
    super.dispose();
  }

  /// âœ… CHARGER LE PROFIL UTILISATEUR
  Future<void> _loadUserProfile() async {
    setState(() => _isLoading = true);
    
    try {
      _currentUser = SecureAuthService.instance.currentUser;
      
      if (_currentUser != null) {
        await _fetchUserProfileData();
        _populateFields();
      } else {
        _setDemoData();
      }
      
    } catch (e) {
      print('âŒ Erreur chargement profil: $e');
      _setDemoData();
    } finally {
      setState(() => _isLoading = false);
    }
  }

  /// âœ… RÃ‰CUPÃ‰RER LES DONNÃ‰ES DEPUIS LA BASE
  Future<void> _fetchUserProfileData() async {
    try {
      final firestore = DatabaseManager.instance.firestore;
      final doc = await firestore.collection('users').doc(_currentUser!.uid).get();
      
      if (doc.exists) {
        _userProfile = doc.data()!;
        print('âœ… Profil chargÃ© depuis ${DatabaseManager.instance.activeDatabaseConfig.name}');
      } else {
        // CrÃ©er un profil vide
        _userProfile = _createEmptyProfile();
        await _saveProfileToDatabase();
      }
    } catch (e) {
      print('âŒ Erreur rÃ©cupÃ©ration profil: $e');
      _userProfile = _createEmptyProfile();
    }
  }

  /// âœ… CRÃ‰ER UN PROFIL VIDE
  Map<String, dynamic> _createEmptyProfile() {
    return {
      'personalInfo': {
        'firstName': '',
        'lastName': '',
        'email': _currentUser?.email ?? '',
        'phone': '',
        'address': '',
        'birthDate': '',
        'gender': 'Non prÃ©cisÃ©',
        'emergencyContact': '',
      },
      'medicalInfo': {
        'hasAllergies': false,
        'allergiesDetails': '',
        'takesMedication': false,
        'medicationDetails': '',
      },
      'preferences': {
        'pushNotifications': true,
        'emailNotifications': true,
      },
      'profileImageUrl': '',
      'createdAt': DateTime.now().toIso8601String(),
      'updatedAt': DateTime.now().toIso8601String(),
    };
  }

  /// âœ… REMPLIR LES CHAMPS AVEC LES DONNÃ‰ES
  void _populateFields() {
    if (_userProfile == null) return;
    
    final personalInfo = _userProfile!['personalInfo'] as Map<String, dynamic>? ?? {};
    final medicalInfo = _userProfile!['medicalInfo'] as Map<String, dynamic>? ?? {};
    final preferences = _userProfile!['preferences'] as Map<String, dynamic>? ?? {};
    
    // Informations personnelles
    nomController.text = personalInfo['lastName'] ?? '';
    prenomController.text = personalInfo['firstName'] ?? '';
    emailController.text = personalInfo['email'] ?? _currentUser?.email ?? '';
    telephoneController.text = personalInfo['phone'] ?? '';
    adresseController.text = personalInfo['address'] ?? '';
    anniversaireController.text = personalInfo['birthDate'] ?? '';
    urgenceController.text = personalInfo['emergencyContact'] ?? '';
    _selectedSexe = personalInfo['gender'] ?? 'Non prÃ©cisÃ©';
    
    // Informations mÃ©dicales
    _hasAllergies = medicalInfo['hasAllergies'] ?? false;
    _takesMedication = medicalInfo['takesMedication'] ?? false;
    
    // PrÃ©fÃ©rences
    _notificationsEnabled = preferences['pushNotifications'] ?? true;
    _emailNotificationsEnabled = preferences['emailNotifications'] ?? true;
  }

  /// âœ… DONNÃ‰ES DE DÃ‰MONSTRATION
  void _setDemoData() {
    if (DatabaseManager.instance.isDemoMode) {
      final demoProfiles = [
        {
          'firstName': 'Alex',
          'lastName': 'Martin',
          'email': 'alex.martin@demo.kipik.ink',
          'phone': '+33 6 12 34 56 78',
          'address': '15 Rue de la RÃ©publique, 54000 Nancy',
          'birthDate': '15/03/1995',
          'gender': 'Non prÃ©cisÃ©',
        },
        {
          'firstName': 'Sophie',
          'lastName': 'Dubois',
          'email': 'sophie.dubois@demo.kipik.ink',
          'phone': '+33 6 87 65 43 21',
          'address': '8 Avenue des Vosges, 54000 Nancy',
          'birthDate': '22/11/1988',
          'gender': 'FÃ©minin',
        },
        {
          'firstName': 'Thomas',
          'lastName': 'Leroy',
          'email': 'thomas.leroy@demo.kipik.ink',
          'phone': '+33 6 45 67 89 01',
          'address': '32 Rue Stanislas, 54000 Nancy',
          'birthDate': '08/07/1992',
          'gender': 'Masculin',
        },
      ];
      
      final randomProfile = demoProfiles[Random().nextInt(demoProfiles.length)];
      
      nomController.text = randomProfile['lastName']!;
      prenomController.text = randomProfile['firstName']!;
      emailController.text = randomProfile['email']!;
      telephoneController.text = randomProfile['phone']!;
      adresseController.text = randomProfile['address']!;
      anniversaireController.text = randomProfile['birthDate']!;
      urgenceController.text = '+33 6 00 00 00 00';
      _selectedSexe = randomProfile['gender']!;
      
      print('ðŸŽ­ DonnÃ©es dÃ©mo gÃ©nÃ©rÃ©es pour ${randomProfile['firstName']} ${randomProfile['lastName']}');
    } else {
      // DonnÃ©es par dÃ©faut vides pour production
      nomController.text = 'Votre nom';
      prenomController.text = 'Votre prÃ©nom';
      emailController.text = _currentUser?.email ?? 'exemple@email.com';
      telephoneController.text = '+33 6 12 34 56 78';
      adresseController.text = 'Votre adresse complÃ¨te';
      anniversaireController.text = '01/01/1990';
      urgenceController.text = '+33 6 00 00 00 00';
    }
  }

  Future<void> _pickAvatar() async {
    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? picked = await openFile(acceptedTypeGroups: [typeGroup]);
    if (picked != null) {
      setState(() {
        _avatarImage = File(picked.path);
      });

      // TODO : Upload vers Firebase Storage plus tard
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.green[300]),
                const SizedBox(width: 12),
                const Expanded(
                  child: Text(
                    'Photo de profil mise Ã  jour !',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.grey[850],
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            duration: const Duration(seconds: 2),
          ),
        );
      }
    }
  }

  /// âœ… SAUVEGARDER LE PROFIL
  Future<void> _saveProfile() async {
    setState(() => _isSaving = true);
    
    try {
      if (_currentUser != null) {
        await _saveProfileToDatabase();
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.green[300]),
                  const SizedBox(width: 12),
                  const Expanded(
                    child: Text(
                      'Profil mis Ã  jour avec succÃ¨s !',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ],
              ),
              backgroundColor: Colors.grey[850],
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              duration: const Duration(seconds: 3),
              action: SnackBarAction(
                label: 'OK',
                textColor: KipikTheme.rouge,
                onPressed: () {},
              ),
            ),
          );
        }
      } else {
        // Mode dÃ©mo
        await Future.delayed(const Duration(seconds: 1));
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text('ðŸŽ­ Profil dÃ©mo mis Ã  jour (simulation)'),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            ),
          );
        }
      }
      
    } catch (e) {
      print('âŒ Erreur sauvegarde: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de la sauvegarde: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    } finally {
      setState(() => _isSaving = false);
    }
  }

  /// âœ… SAUVEGARDER DANS LA BASE DE DONNÃ‰ES
  Future<void> _saveProfileToDatabase() async {
    final profileData = {
      'personalInfo': {
        'firstName': prenomController.text,
        'lastName': nomController.text,
        'email': emailController.text,
        'phone': telephoneController.text,
        'address': adresseController.text,
        'birthDate': anniversaireController.text,
        'gender': _selectedSexe,
        'emergencyContact': urgenceController.text,
      },
      'medicalInfo': {
        'hasAllergies': _hasAllergies,
        'takesMedication': _takesMedication,
      },
      'preferences': {
        'pushNotifications': _notificationsEnabled,
        'emailNotifications': _emailNotificationsEnabled,
      },
      'updatedAt': DateTime.now().toIso8601String(),
      'updatedBy': _currentUser!.uid,
    };

    final firestore = DatabaseManager.instance.firestore;
    await firestore.collection('users').doc(_currentUser!.uid).update(profileData);
    
    print('âœ… Profil sauvegardÃ© dans ${DatabaseManager.instance.activeDatabaseConfig.name}');
  }

  void _showDatePicker() async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime(1990, 1, 1),
      firstDate: DateTime(1920),
      lastDate: DateTime.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.dark(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.grey[900]!,
              onSurface: Colors.white,
            ),
            dialogBackgroundColor: Colors.grey[800],
          ),
          child: child!,
        );
      },
    );
    
    if (pickedDate != null) {
      setState(() {
        anniversaireController.text = '${pickedDate.day.toString().padLeft(2, '0')}/${pickedDate.month.toString().padLeft(2, '0')}/${pickedDate.year}';
      });
    }
  }
  
  void _showAllergiesDialog() {
    final TextEditingController allergiesController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Mes allergies',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: allergiesController,
              decoration: InputDecoration(
                hintText: 'DÃ©crivez vos allergies...',
                hintStyle: TextStyle(color: Colors.grey[400]),
                filled: true,
                fillColor: Colors.grey[800],
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide.none,
                ),
              ),
              style: const TextStyle(color: Colors.white),
              maxLines: 4,
            ),
            const SizedBox(height: 16),
            Text(
              'Informez toujours votre tatoueur de vos allergies avant une sÃ©ance',
              style: TextStyle(
                fontSize: 12,
                color: Colors.amber[200],
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Annuler',
              style: TextStyle(color: Colors.grey[400]),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                _hasAllergies = true;
              });
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text(
              'Enregistrer',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }
  
  void _showMedicationDialog() {
    final TextEditingController medicationController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Mes mÃ©dicaments',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: medicationController,
              decoration: InputDecoration(
                hintText: 'Listez vos mÃ©dicaments...',
                hintStyle: TextStyle(color: Colors.grey[400]),
                filled: true,
                fillColor: Colors.grey[800],
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide.none,
                ),
              ),
              style: const TextStyle(color: Colors.white),
              maxLines: 4,
            ),
            const SizedBox(height: 16),
            Text(
              'Certains mÃ©dicaments peuvent affecter le processus de tatouage et la cicatrisation',
              style: TextStyle(
                fontSize: 12,
                color: Colors.amber[200],
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Annuler',
              style: TextStyle(color: Colors.grey[400]),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                _takesMedication = true;
              });
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text(
              'Enregistrer',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  /// âœ… DÃ‰CONNEXION AVEC SECUREAU AuthService
  void _logout() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'DÃ©connexion',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir vous dÃ©connecter ?',
          style: TextStyle(color: Colors.white),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Annuler',
              style: TextStyle(color: Colors.grey[400]),
            ),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              
              try {
                await SecureAuthService.instance.signOut();
                
                if (mounted) {
                  Navigator.of(context).pushNamedAndRemoveUntil(
                    '/connexion',
                    (route) => false,
                  );
                }
              } catch (e) {
                print('âŒ Erreur dÃ©connexion: $e');
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Erreur lors de la dÃ©connexion: $e'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text(
              'DÃ©connexion',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        backgroundColor: const Color(0xFF0A0A0A),
        appBar: CustomAppBarParticulier(
          title: DatabaseManager.instance.isDemoMode 
              ? 'Mon Profil ðŸŽ­'
              : 'Mon Profil',
          showBackButton: true,
          redirectToHome: true,
          showNotificationIcon: true,
        ),
        body: const Center(
          child: CircularProgressIndicator(color: KipikTheme.rouge),
        ),
      );
    }

    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: DatabaseManager.instance.isDemoMode 
            ? 'Mon Profil ðŸŽ­'
            : 'Mon Profil',
        showBackButton: true,
        redirectToHome: true,
        showNotificationIcon: true,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond alÃ©atoire avec effet de parallaxe
          Image.asset(
            _selectedBackground, 
            fit: BoxFit.cover,
            alignment: Alignment.topCenter,
          ),
          
          // Overlay dÃ©gradÃ© pour meilleure lisibilitÃ©
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withOpacity(0.3),
                  Colors.black.withOpacity(0.7),
                ],
              ),
            ),
          ),
          
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const SizedBox(height: 20),
                  
                  // âœ… Indicateur mode dÃ©mo
                  if (DatabaseManager.instance.isDemoMode) ...[
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Colors.orange.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(color: Colors.orange.withOpacity(0.5)),
                      ),
                      child: Text(
                        'ðŸŽ­ Mode ${DatabaseManager.instance.activeDatabaseConfig.name}',
                        style: const TextStyle(
                          color: Colors.orange,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                  ],
                  
                  // Conteneur d'avatar amÃ©liorÃ© avec animation
                  GestureDetector(
                    onTap: _pickAvatar,
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        Container(
                          width: 130,
                          height: 130,
                          decoration: BoxDecoration(
                            color: Colors.grey[800],
                            borderRadius: BorderRadius.circular(15),
                            border: Border.all(
                              color: DatabaseManager.instance.isDemoMode 
                                  ? Colors.orange 
                                  : KipikTheme.rouge, 
                              width: 2
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: (DatabaseManager.instance.isDemoMode 
                                    ? Colors.orange 
                                    : KipikTheme.rouge).withOpacity(0.2),
                                blurRadius: 15,
                                offset: const Offset(0, 5),
                              ),
                              BoxShadow(
                                color: Colors.black.withOpacity(0.6),
                                blurRadius: 10,
                                offset: const Offset(0, 8),
                              ),
                            ],
                            image: _avatarImage == null
                                ? const DecorationImage(
                                    image: AssetImage('assets/avatars/avatar_user_neutre.png'),
                                    fit: BoxFit.cover,
                                  )
                                : DecorationImage(
                                    image: FileImage(_avatarImage!),
                                    fit: BoxFit.cover,
                                  ),
                          ),
                        ),
                        
                        Container(
                          width: 130,
                          height: 130,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(15),
                            color: Colors.black.withOpacity(0.3),
                          ),
                          child: const Icon(
                            Icons.camera_alt,
                            color: Colors.white70,
                            size: 40,
                          ),
                        ),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 10),
                  
                  Text(
                    "${prenomController.text} ${nomController.text}",
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 22,
                      color: Colors.white,
                    ),
                  ),
                  
                  const SizedBox(height: 5),
                  
                  Text(
                    emailController.text,
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                  
                  const SizedBox(height: 30),
                  
                  // Section Informations personnelles avec animation
                  _buildAnimatedSectionHeader('Informations personnelles', Icons.person),
                  
                  const SizedBox(height: 15),
                  
                  Row(
                    children: [
                      Expanded(
                        child: _buildEditableField('Nom', nomController),
                      ),
                      const SizedBox(width: 10),
                      Expanded(
                        child: _buildEditableField('PrÃ©nom', prenomController),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 15),
                  
                  _buildEditableField('Adresse Email', emailController, 
                    prefixIcon: Icons.email),
                  
                  const SizedBox(height: 15),
                  
                  _buildEditableField('TÃ©lÃ©phone', telephoneController, 
                    prefixIcon: Icons.phone),
                  
                  const SizedBox(height: 15),
                  
                  _buildEditableField('Adresse', adresseController, 
                    prefixIcon: Icons.home),
                  
                  const SizedBox(height: 15),
                  
                  // Champ de date de naissance avec sÃ©lecteur
                  InkWell(
                    onTap: _showDatePicker,
                    child: IgnorePointer(
                      child: _buildEditableField('Date de naissance', anniversaireController, 
                        prefixIcon: Icons.cake, 
                        suffixIcon: Icons.calendar_today),
                    ),
                  ),
                  
                  const SizedBox(height: 15),
                  
                  // Menu dÃ©roulant pour le sexe
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Sexe',
                        style: TextStyle(
                          color: Colors.white70,
                          fontSize: 16,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        decoration: BoxDecoration(
                          color: Colors.black45,
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.white10),
                        ),
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<String>(
                            value: _selectedSexe,
                            isExpanded: true,
                            dropdownColor: Colors.grey[900],
                            style: const TextStyle(color: Colors.white),
                            items: ['Masculin', 'FÃ©minin', 'Non prÃ©cisÃ©'].map((String value) {
                              return DropdownMenuItem<String>(
                                value: value,
                                child: Text(value),
                              );
                            }).toList(),
                            onChanged: (newValue) {
                              setState(() {
                                _selectedSexe = newValue!;
                              });
                            },
                          ),
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 25),
                  
                  // Section Informations mÃ©dicales
                  _buildAnimatedSectionHeader('Informations mÃ©dicales', Icons.medical_services),
                  
                  const SizedBox(height: 15),
                  
                  _buildInfoCard(
                    'Ces informations sont importantes en cas de rÃ©action allergique pendant une sÃ©ance de tatouage',
                    icon: Icons.info_outline,
                  ),
                  
                  const SizedBox(height: 15),
                  
                  _buildEditableField('Contact d\'urgence', urgenceController, 
                    prefixIcon: Icons.emergency),
                  
                  const SizedBox(height: 15),
                  
                  // Allergies avec action corrigÃ©e
                  _buildEnhancedSwitchTile(
                    'J\'ai des allergies',
                    'Additifs, certaines encres, latex...',
                    Icons.healing,
                    _hasAllergies,
                    (value) {
                      setState(() {
                        _hasAllergies = value;
                      });
                      
                      if (value) {
                        _showAllergiesDialog();
                      }
                    },
                  ),
                  
                  const SizedBox(height: 10),
                  
                  // MÃ©dicaments avec action corrigÃ©e
                  _buildEnhancedSwitchTile(
                    'Je prends des mÃ©dicaments',
                    'Anticoagulants, immunosuppresseurs...',
                    Icons.medication,
                    _takesMedication,
                    (value) {
                      setState(() {
                        _takesMedication = value;
                      });
                      
                      if (value) {
                        _showMedicationDialog();
                      }
                    },
                  ),
                  
                  const SizedBox(height: 25),
                  
                  // Section PrÃ©fÃ©rences
                  _buildAnimatedSectionHeader('PrÃ©fÃ©rences', Icons.settings),
                  
                  const SizedBox(height: 15),
                  
                  _buildEnhancedSwitchTile(
                    'Notifications push',
                    'Pour les nouveaux messages et mises Ã  jour',
                    Icons.notifications,
                    _notificationsEnabled,
                    (value) {
                      setState(() {
                        _notificationsEnabled = value;
                      });
                    },
                  ),
                  
                  const SizedBox(height: 10),
                  
                  _buildEnhancedSwitchTile(
                    'Notifications email',
                    'Promotions et nouveautÃ©s',
                    Icons.email,
                    _emailNotificationsEnabled,
                    (value) {
                      setState(() {
                        _emailNotificationsEnabled = value;
                      });
                    },
                  ),
                  
                  const SizedBox(height: 30),
                  
                  // Bouton d'enregistrement amÃ©liorÃ©
                  _isSaving
                      ? Container(
                          padding: const EdgeInsets.all(15),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(30),
                          ),
                          child: CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation<Color>(
                              DatabaseManager.instance.isDemoMode 
                                  ? Colors.orange 
                                  : KipikTheme.rouge
                            ),
                          ),
                        )
                      : Container(
                          height: 55,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(30),
                            gradient: LinearGradient(
                              colors: DatabaseManager.instance.isDemoMode 
                                  ? [
                                      Colors.orange.withOpacity(0.8),
                                      Colors.orange,
                                    ]
                                  : [
                                      KipikTheme.rouge.withOpacity(0.8),
                                      KipikTheme.rouge,
                                    ],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: (DatabaseManager.instance.isDemoMode 
                                    ? Colors.orange 
                                    : KipikTheme.rouge).withOpacity(0.3),
                                blurRadius: 15,
                                offset: const Offset(0, 5),
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: _saveProfile,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              shadowColor: Colors.transparent,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(30),
                              ),
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                const Icon(Icons.save, color: Colors.white),
                                const SizedBox(width: 10),
                                const Text(
                                  'Enregistrer les modifications',
                                  style: TextStyle(
                                    fontSize: 16,
                                    fontFamily: 'PermanentMarker',
                                    color: Colors.white,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                  
                  const SizedBox(height: 25),
                  
                  // Bouton de dÃ©connexion amÃ©liorÃ©
                  Container(
                    width: 200,
                    height: 45,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(25),
                      border: Border.all(color: Colors.white30),
                      color: Colors.black38,
                    ),
                    child: TextButton.icon(
                      onPressed: _logout,
                      icon: const Icon(Icons.logout, size: 18, color: Colors.white70),
                      label: const Text(
                        'DÃ©connexion', 
                        style: TextStyle(color: Colors.white70),
                      ),
                    ),
                  ),
                  
                  const SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAnimatedSectionHeader(String title, IconData icon) {
    final isDemo = DatabaseManager.instance.isDemoMode;
    
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: isDemo 
              ? [
                  Colors.orange.withOpacity(0.3),
                  Colors.orange.withOpacity(0.1),
                ]
              : [
                  KipikTheme.rouge.withOpacity(0.3),
                  KipikTheme.rouge.withOpacity(0.1),
                ],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isDemo 
              ? Colors.orange.withOpacity(0.5)
              : KipikTheme.rouge.withOpacity(0.5),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Icon(
            icon,
            color: isDemo ? Colors.orange : KipikTheme.rouge,
            size: 24,
          ),
          const SizedBox(width: 10),
          Text(
            title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontFamily: 'PermanentMarker',
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEditableField(
    String label, 
    TextEditingController controller, {
    IconData? prefixIcon,
    IconData? suffixIcon,
  }) {
    final isDemo = DatabaseManager.instance.isDemoMode;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Colors.white70,
            fontSize: 16,
          ),
        ),
        const SizedBox(height: 6),
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                blurRadius: 5,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: TextField(
            controller: controller,
            style: const TextStyle(color: Colors.white),
            decoration: InputDecoration(
              filled: true,
              fillColor: Colors.black45,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide.none,
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: Colors.white10, width: 1),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(
                  color: isDemo ? Colors.orange : KipikTheme.rouge, 
                  width: 1
                ),
              ),
              prefixIcon: prefixIcon != null 
                  ? Icon(prefixIcon, color: Colors.white70, size: 20)
                  : null,
              suffixIcon: suffixIcon != null 
                  ? Icon(suffixIcon, color: Colors.white70, size: 20)
                  : null,
              contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildInfoCard(String text, {required IconData icon}) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.amber.withOpacity(0.15),
            Colors.amber.withOpacity(0.05),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.amber.withOpacity(0.3)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Icon(icon, color: Colors.amber[300], size: 24),
          const SizedBox(width: 12),
          Flexible(
            child: Text(
              text,
              style: TextStyle(
                color: Colors.amber[100],
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEnhancedSwitchTile(
    String title,
    String subtitle,
    IconData icon,
    bool value,
    Function(bool) onChanged,
  ) {
    final isDemo = DatabaseManager.instance.isDemoMode;
    
    return Container(
      decoration: BoxDecoration(
        color: Colors.black45,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: value 
              ? (isDemo ? Colors.orange.withOpacity(0.5) : KipikTheme.rouge.withOpacity(0.5))
              : Colors.white10,
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(12),
        child: InkWell(
          onTap: () => onChanged(!value),
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            child: Row(
              children: [
                Icon(
                  icon, 
                  color: value 
                      ? (isDemo ? Colors.orange : KipikTheme.rouge)
                      : Colors.white70
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: TextStyle(
                          color: value ? Colors.white : Colors.white.withOpacity(0.9),
                          fontSize: 16,
                          fontWeight: value ? FontWeight.bold : FontWeight.normal,
                        ),
                      ),
                      const SizedBox(height: 2),
                      Text(
                        subtitle,
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.7),
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
                Switch(
                  value: value,
                  onChanged: onChanged,
                  activeColor: isDemo ? Colors.orange : KipikTheme.rouge,
                  activeTrackColor: (isDemo ? Colors.orange : KipikTheme.rouge).withOpacity(0.3),
                  inactiveThumbColor: Colors.white.withOpacity(0.7),
                  inactiveTrackColor: Colors.white.withOpacity(0.1),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\rdv_jour_page.dart

import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';

class RdvJourPage extends StatefulWidget {
  const RdvJourPage({Key? key}) : super(key: key);

  @override
  State<RdvJourPage> createState() => _RdvJourPageState();
}

class _RdvJourPageState extends State<RdvJourPage> {
  final List<Appointment> _appointments = [
    Appointment(
      id: '1',
      dateTime: DateTime.now().add(const Duration(hours: 4)),
      tattooerName: 'Jean Dupont',
      studio: 'InkMaster Studio',
      address: '15 Rue Saint-Dizier, 54000 Nancy',
      avatar: 'assets/avatars/tatoueur1.jpg',
    ),
    // ... autres rendez-vous ...
  ];

  @override
  void initState() {
    super.initState();
    _appointments.sort((a, b) => a.dateTime.compareTo(b.dateTime));
  }

  Future<void> _openMaps(String address) async {
    final uri = Uri.parse(
      'https://www.google.com/maps/dir/?api=1&destination=${Uri.encodeComponent(address)}',
    );
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Impossible dâ€™ouvrir le plan'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  String _formatDate(DateTime dt) =>
      '${dt.day.toString().padLeft(2, '0')}/${dt.month.toString().padLeft(2, '0')}/${dt.year}';

  String _formatTime(DateTime dt) =>
      '${dt.hour.toString().padLeft(2, '0')}h${dt.minute.toString().padLeft(2, '0')}';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Mes rendez-vous',
        showBackButton: true,
        redirectToHome: true,
      ),
      body: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: _appointments.length,
        separatorBuilder: (_, __) => const SizedBox(height: 12),
        itemBuilder: (ctx, i) {
          final appt = _appointments[i];
          return Container(
            decoration: BoxDecoration(
              color: Colors.black54,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: KipikTheme.rouge, width: 2),
            ),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Artiste + avatar
                  Row(
                    children: [
                      CircleAvatar(
                        radius: 28,
                        backgroundImage: AssetImage(appt.avatar),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          appt.tattooerName,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontFamily: 'PermanentMarker',
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    appt.studio,
                    style: const TextStyle(color: Colors.white70),
                  ),
                  const SizedBox(height: 12),
                  // Date & heure
                  Row(
                    children: [
                      const Icon(
                        Icons.calendar_today,
                        size: 16,
                        color: Colors.white54,
                      ),
                      const SizedBox(width: 6),
                      Text(
                        _formatDate(appt.dateTime),
                        style: const TextStyle(color: Colors.white54),
                      ),
                      const SizedBox(width: 16),
                      const Icon(
                        Icons.access_time,
                        size: 16,
                        color: Colors.white54,
                      ),
                      const SizedBox(width: 6),
                      Text(
                        _formatTime(appt.dateTime),
                        style: const TextStyle(color: Colors.white54),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  // Bouton ItinÃ©raire
                  Center(
                    child: ElevatedButton.icon(
                      onPressed: () => _openMaps(appt.address),
                      icon: const Icon(Icons.directions, color: Colors.white),
                      label: const Text(
                        'Plan',
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          color: Colors.white,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: KipikTheme.rouge,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 30,
                          vertical: 12,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(24),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

class Appointment {
  final String id;
  final DateTime dateTime;
  final String tattooerName;
  final String studio;
  final String address;
  final String avatar;

  Appointment({
    required this.id,
    required this.dateTime,
    required this.tattooerName,
    required this.studio,
    required this.address,
    required this.avatar,
  });
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\particulier\recherche_tatoueur_page.dart

// lib/pages/particulier/recherche_tatoueur_page.dart

import 'dart:convert';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;
import '../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../widgets/common/drawers/custom_drawer_particulier.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../core/database_manager.dart'; // âœ… AJOUTÃ‰ pour mode dÃ©mo
import '../../models/tatoueur_summary.dart'; // âœ… AJOUTÃ‰ pour utiliser le modÃ¨le
import '../../models/user_role.dart'; // âœ… AJOUTÃ‰ : Import manquant pour UserRole
import '../pro/profil_tatoueur.dart';
import 'accueil_particulier_page.dart';

class RechercheTatoueurPage extends StatefulWidget {
  const RechercheTatoueurPage({Key? key}) : super(key: key);

  @override
  State<RechercheTatoueurPage> createState() => _RechercheTatoueurPageState();
}

class _RechercheTatoueurPageState extends State<RechercheTatoueurPage> {
  // gÃ©olocalisation vs ville
  bool _asked = false,
       _geoGranted = false,
       _loadingPos = false,
       _villeMode = false;
  Position? _pos;
  final _villeController = TextEditingController();
  
  // suggestions de villes pendant la saisie
  List<Map<String, dynamic>> _villeSuggestions = [];
  bool _loadingSuggestions = false;
  
  // recherche par nom
  final _searchC = TextEditingController();
  
  // vue carte / liste
  String _view = 'map';
  
  // filtres
  String? _dist, _avail;
  List<String> _styles = [];
  final distances = ['5km', '10km', '20km', '50km', '100km'];
  final disponibilites = [
    "Aujourd'hui",
    '3 jours',
    '2 semaines',
    '1 mois',
    'Plus d\'1 mois',
    'Plus de 6 mois'
  ];
  
  final stylesList = [
    'Abstrait',
    'Anime',
    'Aquarelle',
    'BiomÃ©canique',
    'Blackwork',
    'Celtiques',
    'Chicano',
    'Couleur',
    'Esquisse',
    'GÃ©omÃ©trique',
    'Horreur',
    'Illustratif',
    'Japonais (Irezumi)',
    'Lettering',
    'Line fin',
    'Maori',
    'Micro-rÃ©alisme',
    'Minimaliste',
    'NÃ©o-traditionnel',
    'Noir et gris',
    'Ornemental',
    'Pointillisme',
    'PolynÃ©sien',
    'Portrait',
    'RÃ©aliste',
    'Sticker Sleeve',
    'SurrÃ©alisme',
    'Traditionnel',
    'Trash Polka',
    'Tribal',
  ];
  
  // âœ… MIGRATION : Utilisation des modÃ¨les TatoueurSummary
  List<TatoueurSummary> _all = [], _filtered = [];
  
  // fond alÃ©atoire
  late final String _bg;
  
  // âœ… SÃ‰CURISÃ‰ : ClÃ© API Google Maps (remplacez par votre vraie clÃ©)
  static const _geocodeApiKey = 'AIzaSyAXHDIXeZZXVPnABpT3O8GmBzUNeyFoSp8';

  @override
  void initState() {
    super.initState();
    _bg = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ][Random().nextInt(4)];
    _loadTatoueurs();
  }

  @override
  void dispose() {
    _villeController.dispose();
    _searchC.dispose();
    super.dispose();
  }

  Future<void> _loadTatoueurs() async {
    try {
      // âœ… MIGRATION : Utilisation des donnÃ©es selon le mode
      if (DatabaseManager.instance.isDemoMode) {
        // DonnÃ©es de dÃ©monstration avec le modÃ¨le TatoueurSummary
        _all = TatoueurSummaryDemo.generateDemoList(count: 12);
      } else {
        // En production, charger depuis la base de donnÃ©es
        // TODO: ImplÃ©menter le service de rÃ©cupÃ©ration des tatoueurs
        _all = TatoueurSummaryDemo.generateDemoList(count: 8);
      }
      
      _filtered = List.from(_all);
      setState(() {});
    } catch (e) {
      print("Erreur lors du chargement des tatoueurs: $e");
      // Fallback vers les donnÃ©es de dÃ©mo
      _all = TatoueurSummaryDemo.generateDemoList(count: 8);
      _filtered = List.from(_all);
      setState(() {});
    }
  }

  void _maybeAskLoc() {
    if (!_asked) {
      _asked = true;
      _askPermission();
    }
  }

  Future<void> _askPermission() async {
    final res = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        backgroundColor: Colors.black,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        title: const Text(
          'Partager ma localisation ?',
          style: TextStyle(color: Colors.white, fontFamily: 'PermanentMarker'),
        ),
        content: const Text(
          'Autorisez la gÃ©olocalisation ou saisissez votre ville.',
          style: TextStyle(color: Colors.white70),
        ),
        actions: [
          TextButton(
            style: TextButton.styleFrom(foregroundColor: Colors.white)
                .copyWith(overlayColor: WidgetStateProperty.all(KipikTheme.rouge)),
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Oui'),
          ),
          TextButton(
            style: TextButton.styleFrom(foregroundColor: Colors.white)
                .copyWith(overlayColor: WidgetStateProperty.all(KipikTheme.rouge)),
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Non'),
          ),
        ],
      ),
    );
    if (res == true) {
      setState(() => _villeMode = false);
      _initGeo();
    } else {
      setState(() => _villeMode = true);
    }
  }

  Future<void> _initGeo() async {
    setState(() => _loadingPos = true);
    
    try {
      // VÃ©rifier si les services de localisation sont activÃ©s
      final service = await Geolocator.isLocationServiceEnabled();
      if (!service) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Services de localisation dÃ©sactivÃ©s. Veuillez les activer.'),
              backgroundColor: Colors.red,
            )
          );
        }
        setState(() {
          _loadingPos = false;
          _villeMode = true;
        });
        return;
      }
      
      // VÃ©rifier les permissions
      var perm = await Geolocator.checkPermission();
      if (perm == LocationPermission.denied || perm == LocationPermission.deniedForever) {
        perm = await Geolocator.requestPermission();
        
        if (perm == LocationPermission.denied || perm == LocationPermission.deniedForever) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Permissions de localisation refusÃ©es'),
                backgroundColor: Colors.red,
              )
            );
          }
          setState(() {
            _loadingPos = false;
            _villeMode = true;
          });
          return;
        }
      }
      
      // RÃ©cupÃ©rer la position actuelle
      _pos = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: const Duration(seconds: 15),
      );
      
      print("Position obtenue: ${_pos!.latitude}, ${_pos!.longitude}");
      
      setState(() {
        _geoGranted = true;
        _loadingPos = false;
      });
      
      _updateDistances();
      _applyFilters();
    } catch (e) {
      print("Erreur de gÃ©olocalisation: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur de gÃ©olocalisation: $e'),
            backgroundColor: Colors.orange,
          )
        );
      }
      setState(() {
        _loadingPos = false;
        _villeMode = true;
      });
    }
  }
  
  // âœ… CORRIGÃ‰ : Mettre Ã  jour les distances avec le modÃ¨le TatoueurSummary
  void _updateDistances() {
    if (_pos == null) return;
    
    for (var tatoueur in _all) {
      final distance = Geolocator.distanceBetween(
        _pos!.latitude, 
        _pos!.longitude, 
        tatoueur.latitude, 
        tatoueur.longitude
      );
      
      // âœ… Mise Ã  jour de la distance dans le modÃ¨le
      final index = _all.indexOf(tatoueur);
      _all[index] = tatoueur.copyWith(distanceKm: distance / 1000);
    }
  }

  // Recherche par nom d'artiste
  Future<void> _searchByName() async {
    _searchC.clear();
    final query = await showDialog<String>(
      context: context,
      builder: (ctx) => Theme(
        data: Theme.of(ctx).copyWith(
          splashColor: KipikTheme.rouge,
          highlightColor: KipikTheme.rouge,
          textSelectionTheme: TextSelectionThemeData(
            selectionColor: KipikTheme.rouge.withOpacity(0.3),
          ),
        ),
        child: AlertDialog(
          backgroundColor: Colors.black,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          title: const Text('Rechercher par nom',
              style: TextStyle(color: Colors.white, fontFamily: 'PermanentMarker')),
          content: TextField(
            controller: _searchC,
            style: const TextStyle(color: Colors.white),
            decoration: const InputDecoration(
              hintText: 'Nom de l\'artiste ou du studio',
              hintStyle: TextStyle(color: Colors.white54),
              enabledBorder: UnderlineInputBorder(
                  borderSide: BorderSide(color: Colors.white54)),
              focusedBorder: UnderlineInputBorder(
                  borderSide: BorderSide(color: KipikTheme.rouge, width: 2)),
            ),
            cursorColor: KipikTheme.rouge,
          ),
          actions: [
            TextButton(
              style: TextButton.styleFrom(foregroundColor: Colors.white)
                  .copyWith(overlayColor: WidgetStateProperty.all(KipikTheme.rouge)),
              onPressed: () => Navigator.pop(ctx),
              child: const Text('Annuler'),
            ),
            TextButton(
              style: TextButton.styleFrom(foregroundColor: Colors.white)
                  .copyWith(overlayColor: WidgetStateProperty.all(KipikTheme.rouge)),
              onPressed: () => Navigator.pop(ctx, _searchC.text.trim()),
              child: const Text('OK'),
            ),
          ],
        ),
      ),
    );
    
    if (query != null && query.isNotEmpty) {
      setState(() {
        _filtered = _all.where((t) => t.matchesSearch(query)).toList();
      });
    }
  }

  // âœ… OPTIMISÃ‰ : Suggestions de villes avec gestion d'erreur amÃ©liorÃ©e
  Future<void> _getSuggestions(String input) async {
    print("Recherche de suggestions pour: $input");
    
    if (input.length < 2) {
      setState(() => _villeSuggestions = []);
      return;
    }
    
    setState(() => _loadingSuggestions = true);
    
    try {
      // Mode dÃ©veloppement avec suggestions mockÃ©es
      if (_geocodeApiKey == 'AIzaSyAXHDIXeZZXVPnABpT3O8GmBzUNeyFoSp8' || 
          DatabaseManager.instance.isDemoMode) {
        await Future.delayed(const Duration(milliseconds: 300));
        
        final mockSuggestions = [
          {'description': 'Nancy, France', 'place_id': 'mock_nancy'},
          {'description': 'Paris, France', 'place_id': 'mock_paris'},
          {'description': 'Lyon, France', 'place_id': 'mock_lyon'},
          {'description': 'Marseille, France', 'place_id': 'mock_marseille'},
          {'description': 'Toulouse, France', 'place_id': 'mock_toulouse'},
          {'description': 'Nice, France', 'place_id': 'mock_nice'},
          {'description': 'Strasbourg, France', 'place_id': 'mock_strasbourg'},
          {'description': 'Metz, France', 'place_id': 'mock_metz'},
        ].where((city) => 
          city['description'].toString().toLowerCase().contains(input.toLowerCase())
        ).toList();
        
        setState(() {
          _villeSuggestions = mockSuggestions;
          _loadingSuggestions = false;
        });
        return;
      }
      
      // API Google Places pour production
      final uri = Uri.https('maps.googleapis.com', '/maps/api/place/autocomplete/json', {
        'input': input,
        'types': '(cities)',
        'language': 'fr',
        'components': 'country:fr',
        'key': _geocodeApiKey,
      });
      
      final response = await http.get(uri);
      final data = json.decode(response.body);
      
      if (data['status'] == 'OK') {
        final predictions = data['predictions'] as List;
        setState(() {
          _villeSuggestions = predictions.map((prediction) {
            return {
              'description': prediction['description'],
              'place_id': prediction['place_id'],
            };
          }).toList();
          _loadingSuggestions = false;
        });
      } else {
        setState(() {
          _villeSuggestions = [];
          _loadingSuggestions = false;
        });
      }
    } catch (e) {
      print("Exception lors de la rÃ©cupÃ©ration des suggestions: $e");
      setState(() {
        _villeSuggestions = [];
        _loadingSuggestions = false;
      });
    }
  }
  
  // âœ… OPTIMISÃ‰ : SÃ©lection de ville avec coordonnÃ©es mockÃ©es amÃ©liorÃ©es
  Future<void> _selectVille(Map<String, dynamic> ville) async {
    print("SÃ©lection de ville: ${ville['description']}");
    setState(() => _loadingPos = true);
    
    try {
      // CoordonnÃ©es mockÃ©es pour le dÃ©veloppement
      if (ville['place_id'].toString().startsWith('mock_')) {
        final mockLocations = {
          'mock_nancy': {'lat': 48.6921, 'lng': 6.1844},
          'mock_paris': {'lat': 48.8566, 'lng': 2.3522},
          'mock_lyon': {'lat': 45.7640, 'lng': 4.8357},
          'mock_marseille': {'lat': 43.2965, 'lng': 5.3698},
          'mock_toulouse': {'lat': 43.6043, 'lng': 1.4437},
          'mock_nice': {'lat': 43.7102, 'lng': 7.2620},
          'mock_strasbourg': {'lat': 48.5734, 'lng': 7.7521},
          'mock_metz': {'lat': 49.1193, 'lng': 6.1757},
        };
        
        final mockLocation = mockLocations[ville['place_id']] ?? 
                            {'lat': 48.6921, 'lng': 6.1844}; // Nancy par dÃ©faut
        
        _pos = Position(
          latitude: mockLocation['lat']!,
          longitude: mockLocation['lng']!,
          timestamp: DateTime.now(),
          accuracy: 1,
          altitude: 0,
          heading: 0,
          speed: 0,
          speedAccuracy: 0,
          headingAccuracy: 0,
          altitudeAccuracy: 0,
        );
        
        _villeController.text = ville['description'];
        
        setState(() {
          _geoGranted = true;
          _villeMode = false;
          _villeSuggestions = [];
          _loadingPos = false;
        });
        
        _updateDistances();
        _applyFilters();
        return;
      }
      
      // API Google Places Details pour production
      final uri = Uri.https('maps.googleapis.com', '/maps/api/place/details/json', {
        'place_id': ville['place_id'],
        'fields': 'geometry',
        'key': _geocodeApiKey,
      });
      
      final response = await http.get(uri);
      final data = json.decode(response.body);
      
      if (data['status'] == 'OK') {
        final location = data['result']['geometry']['location'];
        
        _pos = Position(
          latitude: location['lat'],
          longitude: location['lng'],
          timestamp: DateTime.now(),
          accuracy: 1,
          altitude: 0,
          heading: 0,
          speed: 0,
          speedAccuracy: 0,
          headingAccuracy: 0,
          altitudeAccuracy: 0,
        );
        
        _villeController.text = ville['description'];
        
        setState(() {
          _geoGranted = true;
          _villeMode = false;
          _villeSuggestions = [];
          _loadingPos = false;
        });
        
        _updateDistances();
        _applyFilters();
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Impossible de localiser cette ville'),
              backgroundColor: Colors.orange,
            )
          );
        }
      }
    } catch (e) {
      print("Erreur lors de la sÃ©lection de ville: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
          )
        );
      }
    }
    
    setState(() => _loadingPos = false);
  }

  // âœ… MIGRATION : Filtres utilisant le modÃ¨le TatoueurSummary
  void _applyFilters() {
    if (_pos == null) return;
    
    setState(() {
      _filtered = _all.where((tatoueur) {
        var ok = true;
        
        // Filtre de distance
        if (_dist != null) {
          final maxDistanceKm = double.parse(_dist!.replaceAll('km', ''));
          ok &= (tatoueur.distanceKm ?? 0.0) <= maxDistanceKm;
        }
        
        // Filtre de disponibilitÃ©
        if (_avail != null) {
          ok &= _matchesAvailability(tatoueur.availability, _avail!);
        }
        
        // Filtre de style
        if (_styles.isNotEmpty) {
          ok &= tatoueur.hasAnySpecialty(_styles);
        }
        
        return ok;
      }).toList();
      
      // Trier par distance
      _filtered.sort((a, b) => (a.distanceKm ?? 0.0).compareTo(b.distanceKm ?? 0.0));
    });
  }

  // âœ… AJOUTÃ‰ : MÃ©thode pour vÃ©rifier la disponibilitÃ©
  bool _matchesAvailability(String tatoueurAvail, String filterAvail) {
    final dispValues = {
      "Aujourd'hui": 0,
      '3 jours': 3,
      '2 semaines': 14,
      '1 mois': 30,
      'Plus d\'1 mois': 31,
      'Plus de 6 mois': 180
    };
    
    final tatoueurValue = dispValues[tatoueurAvail] ?? 999;
    final filterValue = dispValues[filterAvail] ?? 0;
    
    return tatoueurValue <= filterValue;
  }

  // âœ… MIGRATION : Fiche dÃ©taillÃ©e utilisant TatoueurSummary
  void _showPreview(TatoueurSummary tatoueur) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.black,
      shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(top: Radius.circular(20))),
      builder: (ctx) => SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(mainAxisSize: MainAxisSize.min, children: [
            // Avatar
            CircleAvatar(
              radius: 50,
              backgroundColor: KipikTheme.rouge.withOpacity(0.3),
              backgroundImage: tatoueur.avatarUrl.isNotEmpty 
                  ? NetworkImage(tatoueur.avatarUrl)
                  : null,
              child: tatoueur.avatarUrl.isEmpty 
                  ? Text(
                      tatoueur.name.isNotEmpty ? tatoueur.name[0].toUpperCase() : '?',
                      style: const TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    )
                  : null,
            ),
            const SizedBox(height: 16),
            
            // Nom
            Text(
              tatoueur.name,
              style: const TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                  fontFamily: 'PermanentMarker'),
            ),
            const SizedBox(height: 8),
            
            // Studio
            Text(
              tatoueur.studioName ?? 'Studio indÃ©pendant',
              style: const TextStyle(color: Colors.white, fontSize: 18),
            ),
            const SizedBox(height: 12),
            
            // Style et note
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                  decoration: BoxDecoration(
                    color: KipikTheme.rouge.withOpacity(0.7),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Text(
                    tatoueur.specialtiesText,
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Row(
                  children: [
                    const Icon(Icons.star, color: Colors.amber, size: 20),
                    const SizedBox(width: 4),
                    Text(
                      tatoueur.ratingText,
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // Localisation et distance
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.location_on, color: Colors.white70, size: 16),
                const SizedBox(width: 4),
                Flexible(
                  child: Text(
                    tatoueur.location,
                    style: const TextStyle(color: Colors.white70),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 4),
            Text(
              'Distance : ${tatoueur.distanceText}',
              style: const TextStyle(color: Colors.white54),
            ),
            const SizedBox(height: 8),
            Text(
              'DisponibilitÃ© : ${tatoueur.availability}',
              style: const TextStyle(color: Colors.white54),
            ),
            
            // âœ… Indicateur mode dÃ©mo
            if (DatabaseManager.instance.isDemoMode) ...[
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  'ðŸŽ­ Profil de dÃ©monstration',
                  style: TextStyle(
                    color: Colors.orange,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
            
            const SizedBox(height: 20),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.pop(ctx);
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => ProfilTatoueur(
                      tatoueurId: tatoueur.id,
                      forceMode: UserRole.client, // âœ… CORRIGÃ‰ : forceMode au lieu de userRole
                      name: tatoueur.name,
                      studio: tatoueur.studioName ?? 'Studio indÃ©pendant',
                      style: tatoueur.specialtiesText,
                      location: tatoueur.location,
                      availability: tatoueur.availability,
                      note: tatoueur.rating ?? 4.5,
                      instagram: tatoueur.instagram ?? '@tatoueur',
                      distance: tatoueur.distanceText,
                      address: 'Adresse du studio', // Vous pouvez ajouter cette propriÃ©tÃ© au modÃ¨le
                    ),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 12),
              ),
              icon: const Icon(Icons.person, color: Colors.white),
              label: const Text('Voir Profil', style: TextStyle(color: Colors.white)),
            ),
          ]),
        ),
      ),
    );
  }

  void _retourAccueil() {
    print("MÃ©thode _retourAccueil appelÃ©e");
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (context) => const AccueilParticulierPage(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) => _maybeAskLoc());
    
    return Scaffold(
      extendBodyBehindAppBar: true,
      endDrawer: const CustomDrawerParticulier(),
      appBar: CustomAppBarParticulier(
        title: DatabaseManager.instance.isDemoMode 
            ? 'Trouve ton tatoueur ðŸŽ­'
            : 'Trouve ton tatoueur',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: true,
        redirectToHome: true,
      ),
      floatingActionButton: const TattooAssistantButton(
        allowImageGeneration: false,
      ),
      body: Stack(fit: StackFit.expand, children: [
        Image.asset(_bg, fit: BoxFit.cover),
        SafeArea(
          bottom: true,
          child: _loadingPos
              ? _buildLoadingState()
              : (_villeMode
                  ? _buildVilleSelector()
                  : (_geoGranted && _pos != null ? _buildMain() : const SizedBox())),
        ),
      ]),
    );
  }

  // âœ… AJOUTÃ‰ : Ã‰tat de chargement amÃ©liorÃ©
  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          CircularProgressIndicator(
            color: DatabaseManager.instance.isDemoMode 
                ? Colors.orange 
                : Colors.redAccent,
          ),
          const SizedBox(height: 16),
          Text(
            DatabaseManager.instance.isDemoMode
                ? 'Chargement des tatoueurs de dÃ©monstration...'
                : 'Localisation en cours...',
            style: const TextStyle(color: Colors.white, fontSize: 16),
            textAlign: TextAlign.center,
          ),
          if (DatabaseManager.instance.isDemoMode) ...[
            const SizedBox(height: 8),
            const Text(
              'ðŸŽ­ Mode dÃ©monstration',
              style: TextStyle(color: Colors.orange, fontSize: 14),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildVilleSelector() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Text(
            DatabaseManager.instance.isDemoMode
                ? 'ðŸŽ­ Mode dÃ©mo - Entrez une ville pour simuler la recherche'
                : 'Entrez votre ville pour trouver les tatoueurs Ã  proximitÃ©',
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontFamily: 'PermanentMarker',
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          TextField(
            controller: _villeController,
            onChanged: _getSuggestions,
            decoration: InputDecoration(
              filled: true,
              fillColor: Colors.white,
              hintText: 'Entrez votre ville',
              hintStyle: const TextStyle(fontFamily: 'Roboto'),
              prefixIcon: const Icon(Icons.location_city),
              suffixIcon: DatabaseManager.instance.isDemoMode 
                  ? const Icon(Icons.science, color: Colors.orange)
                  : null,
              enabledBorder: const OutlineInputBorder(
                  borderSide: BorderSide(color: Colors.redAccent)),
              focusedBorder: const OutlineInputBorder(
                  borderSide: BorderSide(color: Colors.redAccent, width: 2)),
            ),
            style: const TextStyle(fontFamily: 'Roboto', color: Colors.black87),
            cursorColor: KipikTheme.rouge,
          ),
          
          const SizedBox(height: 4),
          
          if (_loadingSuggestions)
            const Center(
              child: Padding(
                padding: EdgeInsets.all(8.0),
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              ),
            ),
            
          if (_villeSuggestions.isEmpty && _villeController.text.length >= 2 && !_loadingSuggestions)
            Container(
              padding: const EdgeInsets.all(16),
              alignment: Alignment.center,
              child: const Text(
                'Aucune ville trouvÃ©e',
                style: TextStyle(color: Colors.white70),
              ),
            ),
            
          Expanded(
            child: ListView.builder(
              itemCount: _villeSuggestions.length,
              itemBuilder: (context, index) {
                final suggestion = _villeSuggestions[index];
                return Card(
                  color: Colors.black.withOpacity(0.7),
                  margin: const EdgeInsets.symmetric(vertical: 4),
                  child: ListTile(
                    title: Text(
                      suggestion['description'] as String,
                      style: const TextStyle(color: Colors.white),
                    ),
                    leading: Icon(
                      Icons.location_on, 
                      color: DatabaseManager.instance.isDemoMode 
                          ? Colors.orange 
                          : Colors.white70,
                    ),
                    trailing: DatabaseManager.instance.isDemoMode 
                        ? const Icon(Icons.science, color: Colors.orange, size: 16)
                        : null,
                    onTap: () => _selectVille(suggestion),
                  ),
                );
              },
            ),
          ),
          
          const SizedBox(height: 12),
          
          // Bouton pour revenir Ã  la gÃ©olocalisation
          ElevatedButton.icon(
            onPressed: () {
              setState(() {
                _villeMode = false;
                _geoGranted = false;
              });
              _initGeo();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              padding: const EdgeInsets.symmetric(vertical: 12),
            ),
            icon: const Icon(Icons.my_location, color: Colors.white),
            label: const Text(
              'Utiliser ma position actuelle', 
              style: TextStyle(color: Colors.white)
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMain() {
    return Column(children: [
      // âœ… Indicateur mode dÃ©mo dans les filtres
      if (DatabaseManager.instance.isDemoMode) ...[
        Container(
          width: double.infinity,
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          color: Colors.orange.withOpacity(0.1),
          child: const Text(
            'ðŸŽ­ Mode dÃ©monstration - DonnÃ©es fictives',
            style: TextStyle(color: Colors.orange, fontSize: 12),
            textAlign: TextAlign.center,
          ),
        ),
      ],
      
      SizedBox(
        height: 60,
        child: SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          child: Row(children: [
            _drop('Distance', distances, _dist, (v) {
              setState(() => _dist = v);
              _applyFilters();
            }),
            const SizedBox(width: 8),
            _drop('DisponibilitÃ©', disponibilites, _avail, (v) {
              setState(() => _avail = v);
              _applyFilters();
            }),
            const SizedBox(width: 8),
            _styleSelector(),
          ]),
        ),
      ),
      Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
        child: Row(children: [
          Expanded(child: _actionCard(label: 'Rechercher', onTap: _searchByName)),
          const SizedBox(width: 8),
          Expanded(
              child: _actionCard(
                  label: '${_filtered.length}\ntrouvÃ©(s)',
                  onTap: () =>
                      setState(() => _view = (_view == 'map' ? 'list' : 'map')))),
        ]),
      ),
      Expanded(
        child: _view == 'map'
            ? _buildMapView()
            : _buildListView(),
      ),
    ]);
  }

  // âœ… MIGRATION : Vue carte utilisant TatoueurSummary
  Widget _buildMapView() {
    return GoogleMap(
      initialCameraPosition: CameraPosition(
          target: LatLng(_pos!.latitude, _pos!.longitude), zoom: 13),
      myLocationEnabled: true,
      markers: _filtered
          .map((tatoueur) => Marker(
                markerId: MarkerId(tatoueur.id),
                position: LatLng(tatoueur.latitude, tatoueur.longitude),
                infoWindow: InfoWindow(
                  title: tatoueur.name,
                  snippet: tatoueur.specialtiesText,
                  onTap: () => _showPreview(tatoueur),
                ),
                icon: BitmapDescriptor.defaultMarkerWithHue(
                  DatabaseManager.instance.isDemoMode 
                      ? BitmapDescriptor.hueOrange
                      : BitmapDescriptor.hueRed
                ),
              ))
          .toSet(),
    );
  }

  // âœ… MIGRATION : Vue liste utilisant TatoueurSummary
  Widget _buildListView() {
    return ListView.builder(
      padding: const EdgeInsets.all(8),
      itemCount: _filtered.length,
      itemBuilder: (_, i) {
        final tatoueur = _filtered[i];
        return Card(
          color: Colors.black.withOpacity(0.7),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: InkWell(
            onTap: () => _showPreview(tatoueur),
            borderRadius: BorderRadius.circular(12),
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: Row(
                children: [
                  // Avatar du tatoueur
                  CircleAvatar(
                    radius: 40,
                    backgroundColor: DatabaseManager.instance.isDemoMode 
                        ? Colors.orange.withOpacity(0.3)
                        : KipikTheme.rouge.withOpacity(0.3),
                    backgroundImage: tatoueur.avatarUrl.isNotEmpty 
                        ? NetworkImage(tatoueur.avatarUrl)
                        : null,
                    child: tatoueur.avatarUrl.isEmpty 
                        ? Text(
                            tatoueur.name.isNotEmpty ? tatoueur.name[0].toUpperCase() : '?',
                            style: const TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          )
                        : null,
                  ),
                  const SizedBox(width: 16),
                  
                  // Informations du tatoueur
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                tatoueur.name,
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 18,
                                  fontFamily: 'PermanentMarker',
                                ),
                              ),
                            ),
                            if (DatabaseManager.instance.isDemoMode) ...[
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                                decoration: BoxDecoration(
                                  color: Colors.orange.withOpacity(0.2),
                                  borderRadius: BorderRadius.circular(6),
                                ),
                                child: const Text(
                                  'DÃ‰MO',
                                  style: TextStyle(
                                    color: Colors.orange,
                                    fontSize: 8,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ],
                          ],
                        ),
                        Text(
                          tatoueur.studioName ?? 'Studio indÃ©pendant',
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            const Icon(Icons.location_on, color: Colors.white54, size: 12),
                            const SizedBox(width: 4),
                            Text(
                              tatoueur.location,
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            const Icon(Icons.event_available, color: Colors.white54, size: 12),
                            const SizedBox(width: 4),
                            Text(
                              tatoueur.availability,
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                              decoration: BoxDecoration(
                                color: DatabaseManager.instance.isDemoMode 
                                    ? Colors.orange.withOpacity(0.7)
                                    : KipikTheme.rouge.withOpacity(0.7),
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Text(
                                tatoueur.specialtiesText,
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 12,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                            const Icon(Icons.star, color: Colors.amber, size: 16),
                            const SizedBox(width: 4),
                            Text(
                              tatoueur.ratingText,
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                              ),
                            ),
                            const Spacer(),
                            Row(
                              children: [
                                const Icon(Icons.social_distance, color: Colors.white54, size: 14),
                                const SizedBox(width: 2),
                                Text(
                                  tatoueur.distanceText,
                                  style: const TextStyle(
                                    color: Colors.white70,
                                    fontSize: 12,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _drop(String hint, List<String> items, String? val,
          ValueChanged<String?> onCh) =>
      Container(
        padding: const EdgeInsets.symmetric(horizontal: 12),
        decoration: BoxDecoration(
          color: Colors.white,
          border: Border.all(
            color: DatabaseManager.instance.isDemoMode 
                ? Colors.orange 
                : KipikTheme.rouge, 
            width: 2
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: DropdownButton<String>(
          hint: Text(hint,
              style: const TextStyle(
                  fontFamily: 'PermanentMarker', color: Colors.black87)),
          value: val,
          underline: const SizedBox(),
          items: items
              .map((e) => DropdownMenuItem(
                    value: e,
                    child: Text(e,
                        style: const TextStyle(
                            fontFamily: 'PermanentMarker', color: Colors.black87)),
                  ))
              .toList(),
          onChanged: onCh,
        ),
      );

  Widget _styleSelector() {
    return InkWell(
      onTap: () async {
        final temp = List<String>.from(_styles);
        await showModalBottomSheet(
          context: context,
          isScrollControlled: true,
          backgroundColor: Colors.black87,
          shape: const RoundedRectangleBorder(
              borderRadius: BorderRadius.vertical(top: Radius.circular(16))),
          builder: (ctx) => SafeArea(
            child: Padding(
              padding: EdgeInsets.only(
                left: 16,
                right: 16,
                top: 16,
                bottom: MediaQuery.of(ctx).viewInsets.bottom + 16,
              ),
              child: SizedBox(
                height: MediaQuery.of(ctx).size.height * 0.6,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Row(
                      children: [
                        const Text('Style',
                            style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'PermanentMarker',
                                fontSize: 18)),
                        const Spacer(),
                        if (DatabaseManager.instance.isDemoMode) ...[
                          const Icon(Icons.science, color: Colors.orange, size: 16),
                          const SizedBox(width: 4),
                          const Text(
                            'DÃ‰MO',
                            style: TextStyle(color: Colors.orange, fontSize: 12),
                          ),
                        ],
                      ],
                    ),
                    const SizedBox(height: 12),
                    Expanded(
                      child: StatefulBuilder(
                        builder: (ctx2, sbSet) => ListView(
                          children: stylesList.map((s) {
                            return CheckboxListTile(
                              activeColor: DatabaseManager.instance.isDemoMode 
                                  ? Colors.orange 
                                  : KipikTheme.rouge,
                              title: Text(s, style: const TextStyle(color: Colors.white)),
                              value: temp.contains(s),
                              onChanged: (b) {
                                sbSet(() {
                                  if (b == true) {
                                    temp.add(s);
                                  } else {
                                    temp.remove(s);
                                  }
                                });
                              },
                            );
                          }).toList(),
                        ),
                      ),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        setState(() => _styles = temp);
                        _applyFilters();
                        Navigator.pop(ctx);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: DatabaseManager.instance.isDemoMode 
                            ? Colors.orange 
                            : KipikTheme.rouge,
                      ),
                      child: const Text('OK', style: TextStyle(color: Colors.white)),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
        decoration: BoxDecoration(
          color: Colors.white,
          border: Border.all(
            color: DatabaseManager.instance.isDemoMode 
                ? Colors.orange 
                : KipikTheme.rouge, 
            width: 2
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Text(
          _styles.isEmpty ? 'Style' : '${_styles.length} sÃ©lectionnÃ©(s)',
          style: const TextStyle(fontFamily: 'PermanentMarker', color: Colors.black87),
        ),
      ),
    );
  }

  Widget _actionCard({required String label, required VoidCallback onTap}) =>
      GestureDetector(
        onTap: onTap,
        child: Container(
          height: 48,
          decoration: BoxDecoration(
            color: Colors.white,
            border: Border.all(
              color: DatabaseManager.instance.isDemoMode 
                  ? Colors.orange 
                  : KipikTheme.rouge, 
              width: 2
            ),
            borderRadius: BorderRadius.circular(12),
          ),
          alignment: Alignment.center,
          child: Text(label,
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.black87, fontFamily: 'PermanentMarker')),
        ),
      );
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\aide_pro_page.dart

import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:share_plus/share_plus.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';

// âœ… MIGRATION: Import des services Firebase
import 'package:kipik_v5/services/auth/secure_auth_service.dart'; // âœ… MIGRATION
import 'package:kipik_v5/services/help_center_service.dart';
import 'package:kipik_v5/models/faq_item.dart';
import 'package:kipik_v5/models/tutorial.dart';
import 'package:kipik_v5/models/user_role.dart'; // âœ… MIGRATION

// Import de vos widgets personnalisÃ©s existants
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';
// âœ… SUPPRIMÃ‰: import inutilisÃ© 'package:kipik_v5/utils/constants.dart';
import 'package:kipik_v5/utils/styles.dart';

class AideProPage extends StatefulWidget {
  static const String routeName = '/aide-pro';

  const AideProPage({Key? key}) : super(key: key);

  @override
  _AideProPageState createState() => _AideProPageState();
}

class _AideProPageState extends State<AideProPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();
  bool _isLoading = true;
  List<FAQItem> _faqItems = [];
  List<FAQItem> _filteredFaqItems = [];
  List<Tutorial> _tutorials = [];
  List<Tutorial> _filteredTutorials = [];
  Map<String, dynamic>? _currentUser; // âœ… MIGRATION: Type gÃ©nÃ©rique
  final ScrollController _scrollController = ScrollController();

  // Liste des catÃ©gories d'aide
  final List<String> _categories = [
    'Tous',
    'Abonnement',
    'Facturation',
    'FonctionnalitÃ©s',
    'SÃ©curitÃ©',
    'Profil',
    'Technique',
    'LÃ©gal',
  ];

  String _selectedCategory = 'Tous';
  bool _showContactForm = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _sujetController = TextEditingController();
  final TextEditingController _messageController = TextEditingController();

  // âœ… MIGRATION: Getters sÃ©curisÃ©s
  SecureAuthService get _authService => SecureAuthService.instance;
  String? get _currentUserId => _authService.currentUserId;
  UserRole? get _currentUserRole => _authService.currentUserRole;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _tabController.addListener(_handleTabChange);
    _loadData();
  }

  @override
  void dispose() {
    _tabController.removeListener(_handleTabChange);
    _tabController.dispose();
    _searchController.dispose();
    _sujetController.dispose();
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _handleTabChange() {
    // RÃ©initialiser la recherche et le dÃ©filement lors du changement d'onglet
    if (_tabController.indexIsChanging) {
      _searchController.clear();
      _scrollController.jumpTo(0);
      _applyFilters('');
    }
  }

  // âœ… MIGRATION: MÃ©thode de chargement avec SecureAuthService
  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // âœ… SÃ‰CURITÃ‰: VÃ©rifier l'authentification
      if (_currentUserId == null) {
        throw Exception('Utilisateur non connectÃ©');
      }

      final helpCenterService = Provider.of<HelpCenterService>(
        context,
        listen: false,
      );

      // Charger les donnÃ©es de la FAQ et des tutoriels
      final faqItems = await helpCenterService.getFAQItems(userType: 'pro');
      final tutorials = await helpCenterService.getTutorials(userType: 'pro');
      
      // âœ… MIGRATION: Utiliser SecureAuthService pour l'utilisateur actuel
      final currentUser = _authService.currentUser;

      setState(() {
        _faqItems = faqItems;
        _filteredFaqItems = faqItems;
        _tutorials = tutorials;
        _filteredTutorials = tutorials;
        _currentUser = currentUser;
        _isLoading = false;
      });

      print('âœ… DonnÃ©es d\'aide chargÃ©es: ${faqItems.length} FAQ, ${tutorials.length} tutoriels');
    } catch (e) {
      print('âŒ Erreur chargement donnÃ©es d\'aide: $e');
      setState(() {
        _isLoading = false;
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Erreur lors du chargement des donnÃ©es. Veuillez rÃ©essayer.',
            ),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _applyFilters(String searchTerm) {
    setState(() {
      // Filtrer la FAQ
      _filteredFaqItems = _faqItems.where((item) {
        final matchesSearch =
            searchTerm.isEmpty ||
            item.question.toLowerCase().contains(
                  searchTerm.toLowerCase(),
                ) ||
            item.answer.toLowerCase().contains(searchTerm.toLowerCase());

        final matchesCategory =
            _selectedCategory == 'Tous' || item.category == _selectedCategory;

        return matchesSearch && matchesCategory;
      }).toList();

      // Filtrer les tutoriels
      _filteredTutorials = _tutorials.where((tutorial) {
        final matchesSearch =
            searchTerm.isEmpty ||
            tutorial.title.toLowerCase().contains(
                  searchTerm.toLowerCase(),
                ) ||
            tutorial.description.toLowerCase().contains(
                  searchTerm.toLowerCase(),
                );

        final matchesCategory =
            _selectedCategory == 'Tous' || tutorial.category == _selectedCategory;

        return matchesSearch && matchesCategory;
      }).toList();
    });
  }

  void _showTutorialDetails(Tutorial tutorial) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.9,
        minChildSize: 0.5,
        maxChildSize: 0.95,
        expand: false,
        builder: (_, scrollController) => Column(
          children: [
            Container(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Expanded(
                        child: Text(
                          tutorial.title,
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      IconButton(
                        icon: Icon(Icons.close),
                        onPressed: () => Navigator.pop(context),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  Text(
                    'CatÃ©gorie: ${tutorial.category}',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    tutorial.description,
                    style: TextStyle(fontSize: 16),
                  ),
                ],
              ),
            ),
            Divider(),
            Expanded(
              child: tutorial.videoUrl != null
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.play_circle_outline,
                            size: 80,
                            color: Theme.of(context).primaryColor,
                          ),
                          SizedBox(height: 16),
                          Text('Cliquez pour lancer la vidÃ©o'),
                          SizedBox(height: 24),
                          ElevatedButton.icon(
                            onPressed: () => _launchUrl(tutorial.videoUrl!),
                            icon: Icon(Icons.play_arrow),
                            label: Text('Regarder le tutoriel'),
                            style: ElevatedButton.styleFrom(
                              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(25),
                              ),
                            ),
                          ),
                        ],
                      ),
                    )
                  : SingleChildScrollView(
                      controller: scrollController,
                      padding: EdgeInsets.all(16),
                      child: Text(
                        tutorial.content ?? 'Contenu non disponible.',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
            ),
            Divider(),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  IconButton(
                    icon: Icon(Icons.share),
                    onPressed: () => _shareTutorial(tutorial),
                    tooltip: 'Partager',
                  ),
                  IconButton(
                    icon: Icon(Icons.bookmark_border),
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Tutoriel sauvegardÃ©')),
                      );
                    },
                    tooltip: 'Sauvegarder',
                  ),
                  IconButton(
                    icon: Icon(Icons.print),
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('Impression du tutoriel...'),
                        ),
                      );
                    },
                    tooltip: 'Imprimer',
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _launchUrl(String url) async {
    try {
      final Uri uri = Uri.parse(url);
      if (!await launchUrl(uri)) {
        throw Exception('Impossible d\'ouvrir l\'URL');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Impossible d\'ouvrir: $url'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _shareTutorial(Tutorial tutorial) {
    Share.share(
      'DÃ©couvrez ce tutoriel Kipik Pro: "${tutorial.title}"\n\n${tutorial.description}\n\nVoir plus sur notre application Kipik Pro.',
      subject: 'Tutoriel Kipik Pro: ${tutorial.title}',
    );
  }

  // âœ… MIGRATION: MÃ©thode de soumission avec SecureAuthService
  Future<void> _submitContactForm() async {
    if (_formKey.currentState!.validate()) {
      // âœ… SÃ‰CURITÃ‰: VÃ©rifier l'authentification avant soumission
      if (_currentUserId == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Vous devez Ãªtre connectÃ© pour contacter le support'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }

      setState(() {
        _isLoading = true;
      });

      try {
        final helpCenterService = Provider.of<HelpCenterService>(
          context,
          listen: false,
        );

        // âœ… MIGRATION: Utiliser les donnÃ©es de SecureAuthService
        await helpCenterService.submitSupportRequest(
          userId: _currentUserId!,
          userEmail: _currentUser?['email'] ?? '',
          subject: _sujetController.text,
          message: _messageController.text,
          userType: 'pro',
        );

        setState(() {
          _isLoading = false;
          _showContactForm = false;
        });

        _sujetController.clear();
        _messageController.clear();

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Votre demande a Ã©tÃ© envoyÃ©e avec succÃ¨s. Notre Ã©quipe vous rÃ©pondra sous 24h.',
              ),
              backgroundColor: Colors.green,
            ),
          );
        }

        print('âœ… Demande de support envoyÃ©e pour ${_currentUser?['email']}');
      } catch (e) {
        print('âŒ Erreur envoi formulaire support: $e');
        setState(() {
          _isLoading = false;
        });

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Erreur lors de l\'envoi du formulaire. Veuillez rÃ©essayer.',
              ),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // âœ… SÃ‰CURITÃ‰: VÃ©rifier l'authentification au niveau du build
    if (_currentUserId == null) {
      return Scaffold(
        appBar: CustomAppBarKipik(
          title: 'Centre d\'Aide Pro',
          showBackButton: true,
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.lock, size: 64, color: Colors.grey),
              SizedBox(height: 16),
              Text(
                'AccÃ¨s restreint',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 8),
              Text(
                'Vous devez Ãªtre connectÃ© pour accÃ©der au centre d\'aide.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey[600]),
              ),
              SizedBox(height: 24),
              ElevatedButton(
                onPressed: () => Navigator.pushReplacementNamed(context, '/login'),
                child: Text('Se connecter'),
              ),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      appBar: CustomAppBarKipik(
        title: 'Centre d\'Aide Pro',
        showBackButton: true,
        actions: [
          IconButton(
            icon: Icon(Icons.support_agent),
            onPressed: () {
              setState(() {
                _showContactForm = !_showContactForm;
              });
            },
            tooltip: 'Contacter le support',
          ),
          // âœ… NOUVEAU: Indicateur de rÃ´le utilisateur
          if (_currentUserRole != null)
            Padding(
              padding: const EdgeInsets.only(right: 8.0),
              child: Chip(
                label: Text(
                  _currentUserRole!.name.toUpperCase(),
                  style: TextStyle(fontSize: 10, color: Colors.white),
                ),
                backgroundColor: Theme.of(context).primaryColor,
              ),
            ),
        ],
      ),
      drawer: CustomDrawerKipik(),
      body: _isLoading
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text('Chargement des donnÃ©es d\'aide...'),
                ],
              ),
            )
          : Column(
              children: [
                // Barre de recherche
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: _buildSearchBar(),
                ),

                // Filtres par catÃ©gorie
                Container(
                  height: 50,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    padding: EdgeInsets.symmetric(horizontal: 8),
                    itemCount: _categories.length,
                    itemBuilder: (context, index) {
                      final category = _categories[index];
                      final isSelected = category == _selectedCategory;

                      return Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 4.0),
                        child: ChoiceChip(
                          label: Text(category),
                          selected: isSelected,
                          onSelected: (selected) {
                            if (selected) {
                              setState(() {
                                _selectedCategory = category;
                              });
                              _applyFilters(_searchController.text);
                            }
                          },
                          backgroundColor: Colors.grey[200],
                          selectedColor: Theme.of(
                            context,
                          ).primaryColor.withOpacity(0.2),
                          labelStyle: TextStyle(
                            color: isSelected
                                ? Theme.of(context).primaryColor
                                : Colors.black,
                            fontWeight:
                                isSelected ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                      );
                    },
                  ),
                ),

                // Onglets
                TabBar(
                  controller: _tabController,
                  tabs: [
                    Tab(text: 'FAQ'),
                    Tab(text: 'Tutoriels'),
                    Tab(text: 'Contact'),
                  ],
                  labelColor: Theme.of(context).primaryColor,
                  unselectedLabelColor: Colors.grey,
                  indicatorColor: Theme.of(context).primaryColor,
                ),

                // Corps des onglets
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      // Onglet FAQ
                      _buildFAQTab(),

                      // Onglet Tutoriels
                      _buildTutorialsTab(),

                      // Onglet Contact
                      _buildContactTab(),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  // âœ… AMÃ‰LIORÃ‰: Barre de recherche avec valeur par dÃ©faut corrigÃ©e
  Widget _buildSearchBar() {
    return Container(
      height: 50,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12), // âœ… Utilise une valeur fixe
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: _searchController,
        onChanged: (value) {
          _applyFilters(value);
        },
        decoration: InputDecoration(
          hintText: 'Rechercher dans l\'aide...',
          prefixIcon: Icon(Icons.search, color: Colors.grey),
          suffixIcon: _searchController.text.isNotEmpty
              ? IconButton(
                  icon: Icon(Icons.clear, color: Colors.grey),
                  onPressed: () {
                    _searchController.clear();
                    _applyFilters('');
                  },
                )
              : null,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12), // âœ… Utilise une valeur fixe
            borderSide: BorderSide.none,
          ),
          contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          filled: true,
          fillColor: Colors.white,
        ),
      ),
    );
  }

  Widget _buildFAQTab() {
    if (_filteredFaqItems.isEmpty) {
      return _buildEmptyState(
        'Aucun rÃ©sultat trouvÃ©',
        'Essayez de modifier vos critÃ¨res de recherche',
        Icons.search_off,
      );
    }

    return ListView.builder(
      controller: _scrollController,
      padding: EdgeInsets.all(16),
      itemCount: _filteredFaqItems.length,
      itemBuilder: (context, index) {
        final item = _filteredFaqItems[index];
        return Card(
          margin: EdgeInsets.only(bottom: 16),
          elevation: 2,
          child: ExpansionTile(
            title: Text(
              item.question,
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
            ),
            subtitle: Text(
              'CatÃ©gorie: ${item.category}',
              style: TextStyle(fontSize: 12, color: Colors.grey[600]),
            ),
            leading: Icon(
              Icons.question_answer,
              color: Theme.of(context).primaryColor,
            ),
            childrenPadding: EdgeInsets.all(16),
            children: [
              Text(item.answer, style: TextStyle(fontSize: 16)),
              SizedBox(height: 16),
              if (item.relatedLinks.isNotEmpty) ...[
                Divider(),
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Liens utiles:',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                      ),
                      SizedBox(height: 8),
                      ...item.relatedLinks
                          .map(
                            (link) => Padding(
                              padding: const EdgeInsets.only(bottom: 4.0),
                              child: InkWell(
                                onTap: () => _launchUrl(link.url),
                                child: Text(
                                  link.label,
                                  style: TextStyle(
                                    color: Theme.of(context).primaryColor,
                                    decoration: TextDecoration.underline,
                                  ),
                                ),
                              ),
                            ),
                          )
                          .toList(),
                    ],
                  ),
                ),
              ],
              Divider(),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton.icon(
                    icon: Icon(Icons.thumb_up_alt_outlined),
                    label: Text('Utile'),
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Merci pour votre retour!')),
                      );
                    },
                  ),
                  TextButton.icon(
                    icon: Icon(Icons.thumb_down_alt_outlined),
                    label: Text('Pas utile'),
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            'DÃ©solÃ© que cette rÃ©ponse ne vous ait pas aidÃ©',
                          ),
                        ),
                      );
                    },
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildTutorialsTab() {
    if (_filteredTutorials.isEmpty) {
      return _buildEmptyState(
        'Aucun tutoriel trouvÃ©',
        'Essayez de modifier vos critÃ¨res de recherche',
        Icons.video_library,
      );
    }

    return GridView.builder(
      controller: _scrollController,
      padding: EdgeInsets.all(16),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 0.8,
        crossAxisSpacing: 10,
        mainAxisSpacing: 10,
      ),
      itemCount: _filteredTutorials.length,
      itemBuilder: (context, index) {
        final tutorial = _filteredTutorials[index];
        return InkWell(
          onTap: () => _showTutorialDetails(tutorial),
          child: Card(
            elevation: 3,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Thumbnail
                ClipRRect(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(10)),
                  child: Container(
                    height: 100,
                    width: double.infinity,
                    color: Colors.grey[300],
                    child: tutorial.thumbnailUrl != null
                        ? Image.network(
                            tutorial.thumbnailUrl!,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) => Center(
                              child: Icon(
                                Icons.image_not_supported,
                                size: 40,
                                color: Colors.grey[500],
                              ),
                            ),
                          )
                        : Center(
                            child: Icon(
                              tutorial.videoUrl != null
                                  ? Icons.play_circle_filled
                                  : Icons.article,
                              size: 40,
                              color: Theme.of(context).primaryColor,
                            ),
                          ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Titre
                      Text(
                        tutorial.title,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      SizedBox(height: 4),
                      // CatÃ©gorie
                      Text(
                        tutorial.category,
                        style: TextStyle(color: Colors.grey[600], fontSize: 12),
                      ),
                      SizedBox(height: 4),
                      // Description
                      Text(
                        tutorial.description,
                        style: TextStyle(fontSize: 12),
                        maxLines: 3,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ),
                Spacer(),
                // Badge de type
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      Container(
                        padding: EdgeInsets.symmetric(
                          horizontal: 8,
                          vertical: 4,
                        ),
                        decoration: BoxDecoration(
                          color: tutorial.videoUrl != null
                              ? Colors.red.withOpacity(0.2)
                              : Colors.blue.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(
                              tutorial.videoUrl != null
                                  ? Icons.videocam
                                  : Icons.article,
                              size: 12,
                              color: tutorial.videoUrl != null
                                  ? Colors.red
                                  : Colors.blue,
                            ),
                            SizedBox(width: 4),
                            Text(
                              tutorial.videoUrl != null ? 'VidÃ©o' : 'Article',
                              style: TextStyle(
                                fontSize: 10,
                                color: tutorial.videoUrl != null
                                    ? Colors.red
                                    : Colors.blue,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // âœ… MIGRATION: Onglet contact avec donnÃ©es SecureAuthService
  Widget _buildContactTab() {
    if (_showContactForm) {
      return SingleChildScrollView(
        controller: _scrollController,
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Contactez notre Ã©quipe de support',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 8),
              Text(
                'ComplÃ©tez le formulaire ci-dessous et notre Ã©quipe vous rÃ©pondra sous 24h.',
                style: TextStyle(color: Colors.grey[600]),
              ),
              SizedBox(height: 24),

              // âœ… MIGRATION: Informations de contact avec SecureAuthService
              Card(
                elevation: 2,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Informations de contact',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      SizedBox(height: 16),
                      ListTile(
                        leading: Icon(Icons.person),
                        title: Text('Utilisateur'),
                        subtitle: Text(
                          _currentUser?['displayName'] ?? _currentUser?['name'] ?? 'Non disponible',
                        ),
                        dense: true,
                        contentPadding: EdgeInsets.zero,
                      ),
                      ListTile(
                        leading: Icon(Icons.email),
                        title: Text('Adresse e-mail'),
                        subtitle: Text(_currentUser?['email'] ?? 'Non disponible'),
                        dense: true,
                        contentPadding: EdgeInsets.zero,
                      ),
                      ListTile(
                        leading: Icon(Icons.account_circle),
                        title: Text('RÃ´le'),
                        subtitle: Text(_currentUserRole?.name ?? 'Utilisateur'),
                        dense: true,
                        contentPadding: EdgeInsets.zero,
                      ),
                      ListTile(
                        leading: Icon(Icons.access_time),
                        title: Text('Membre depuis'),
                        subtitle: Text(
                          _currentUser?['createdAt'] != null 
                              ? 'RÃ©cent' 
                              : 'Non disponible',
                        ),
                        dense: true,
                        contentPadding: EdgeInsets.zero,
                      ),
                    ],
                  ),
                ),
              ),
              SizedBox(height: 24),

              // Formulaire de contact
              TextFormField(
                controller: _sujetController,
                decoration: InputDecoration(
                  labelText: 'Sujet *',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.subject),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Veuillez saisir un sujet';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _messageController,
                decoration: InputDecoration(
                  labelText: 'Message *',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.message),
                  alignLabelWithHint: true,
                ),
                maxLines: 6,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Veuillez saisir votre message';
                  }
                  if (value.length < 10) {
                    return 'Le message doit contenir au moins 10 caractÃ¨res';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              CheckboxListTile(
                title: Text(
                  'Joindre les informations de diagnostic (recommandÃ©)',
                ),
                subtitle: Text(
                  'Nos Ã©quipes pourront mieux vous aider avec ces informations.',
                ),
                value: true,
                onChanged: (value) {},
                controlAffinity: ListTileControlAffinity.leading,
                contentPadding: EdgeInsets.zero,
              ),
              SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submitContactForm,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Theme.of(context).primaryColor,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(25),
                    ),
                  ),
                  child: _isLoading
                      ? SizedBox(
                          width: 24,
                          height: 24,
                          child: CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            strokeWidth: 2.0,
                          ),
                        )
                      : Text(
                          'Envoyer ma demande',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                ),
              ),
              SizedBox(height: 32),

              // Autres moyens de contact
              Text(
                'Autres moyens de nous contacter',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 16),
              Card(
                elevation: 2,
                child: Column(
                  children: [
                    ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.blue[50],
                        child: Icon(Icons.phone, color: Colors.blue),
                      ),
                      title: Text('TÃ©lÃ©phone'),
                      subtitle: Text('+33 1 23 45 67 89'),
                      trailing: IconButton(
                        icon: Icon(Icons.call),
                        onPressed: () => _launchUrl('tel:+33123456789'),
                      ),
                    ),
                    Divider(),
                    ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.green[50],
                        child: Icon(Icons.message, color: Colors.green),
                      ),
                      title: Text('WhatsApp'),
                      subtitle: Text('Chat avec notre Ã©quipe'),
                      trailing: IconButton(
                        icon: Icon(Icons.launch),
                        onPressed: () => _launchUrl('https://wa.me/33123456789'),
                      ),
                    ),
                    Divider(),
                    ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.purple[50],
                        child: Icon(Icons.forum, color: Colors.purple),
                      ),
                      title: Text('CommunautÃ© Kipik'),
                      subtitle: Text('Discutez avec d\'autres utilisateurs'),
                      trailing: IconButton(
                        icon: Icon(Icons.launch),
                        onPressed: () => _launchUrl('https://communaute.kipik.fr'),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      );
    } else {
      return _buildContactWelcome();
    }
  }

  // âœ… NOUVEAU: Widget d'accueil contact sÃ©parÃ©
  Widget _buildContactWelcome() {
    return Center(
      child: SingleChildScrollView(
        padding: EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.support_agent,
              size: 80,
              color: Theme.of(context).primaryColor,
            ),
            SizedBox(height: 24),
            Text(
              'Comment pouvons-nous vous aider?',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Text(
              'Notre Ã©quipe de support est disponible pour rÃ©pondre Ã  vos questions',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey[600]),
            ),
            SizedBox(height: 32),
            ElevatedButton.icon(
              onPressed: () {
                setState(() {
                  _showContactForm = true;
                });
              },
              icon: Icon(Icons.support_agent),
              label: Text('Contacter le support'),
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(25),
                ),
              ),
            ),
            SizedBox(height: 16),
            OutlinedButton.icon(
              icon: Icon(Icons.schedule),
              label: Text('Programmer un appel'),
              onPressed: () {
                Navigator.of(context).pushNamed('/schedule-call');
              },
              style: OutlinedButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                side: BorderSide(color: Theme.of(context).primaryColor),
              ),
            ),
            SizedBox(height: 24),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                _buildSupportOption(
                  icon: Icons.public,
                  label: 'Site Web',
                  onTap: () => _launchUrl('https://www.kipik.fr'),
                ),
                _buildSupportOption(
                  icon: Icons.email,
                  label: 'Email',
                  onTap: () => _launchUrl('mailto:support@kipik.fr'),
                ),
                _buildSupportOption(
                  icon: Icons.forum,
                  label: 'Forum',
                  onTap: () => _launchUrl('https://forum.kipik.fr'),
                ),
                _buildSupportOption(
                  icon: Icons.chat,
                  label: 'Chat',
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Ouverture du chat en direct...')),
                    );
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // âœ… NOUVEAU: Widget d'Ã©tat vide rÃ©utilisable
  Widget _buildEmptyState(String title, String subtitle, IconData icon) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            icon,
            size: 64,
            color: Colors.grey[400],
          ),
          SizedBox(height: 16),
          Text(
            title,
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 8),
          Text(
            subtitle,
            style: TextStyle(color: Colors.grey[600]),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildSupportOption({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: EdgeInsets.all(12),
          child: Column(
            children: [
              Icon(icon, color: Theme.of(context).primaryColor, size: 24),
              SizedBox(height: 4),
              Text(label, style: TextStyle(fontSize: 12)),
            ],
          ),
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\ajout_photos_shop_page.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:kipik_v5/services/photo/firebase_photo_service.dart';
import 'package:kipik_v5/core/database_manager.dart'; // âœ… AJOUTÃ‰ pour mode dÃ©mo
import 'package:kipik_v5/theme/kipik_theme.dart';

class AjoutPhotosShopPage extends StatefulWidget {
  AjoutPhotosShopPage({
    Key? key,
    FirebasePhotoService? photoService,
  })  : photoService = photoService ?? FirebasePhotoService.instance,
        super(key: key);

  final FirebasePhotoService photoService;

  @override
  State<AjoutPhotosShopPage> createState() => _AjoutPhotosShopPageState();
}

class _AjoutPhotosShopPageState extends State<AjoutPhotosShopPage> {
  final List<String> _photosUrls = [];
  static const int maxPhotos = 8;
  bool _isUploading = false;
  double _uploadProgress = 0.0;

  @override
  void initState() {
    super.initState();
    _loadExistingPhotos();
  }

  /// âœ… NOUVEAU : Charger les photos existantes selon le mode
  Future<void> _loadExistingPhotos() async {
    if (DatabaseManager.instance.isDemoMode) {
      // En mode dÃ©mo, ajouter quelques photos d'exemple
      setState(() {
        _photosUrls.addAll([
          'https://picsum.photos/seed/shop1/400/400',
          'https://picsum.photos/seed/shop2/400/400',
          'https://picsum.photos/seed/shop3/400/400',
        ]);
      });
      print('ðŸŽ­ Photos dÃ©mo chargÃ©es: ${_photosUrls.length}');
    } else {
      // TODO: Charger les vraies photos depuis Firebase
      print('ðŸ­ Mode production: chargement photos rÃ©elles');
    }
  }

  /// âœ… AMÃ‰LIORÃ‰ : Upload avec gestion mode dÃ©mo/production
  Future<void> _pickImage() async {
    if (_photosUrls.length >= maxPhotos) {
      _showSnackBar(
        'Vous avez atteint la limite de $maxPhotos photos.',
        Colors.orange,
      );
      return;
    }

    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );
    final XFile? pickedFile = await openFile(acceptedTypeGroups: [typeGroup]);
    if (pickedFile == null) return;

    final file = File(pickedFile.path);

    setState(() {
      _isUploading = true;
      _uploadProgress = 0.0;
    });

    try {
      String uploadedUrl;
      
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… Mode dÃ©mo : simuler l'upload
        uploadedUrl = await _simulateUpload(file);
      } else {
        // âœ… Mode production : upload rÃ©el
        uploadedUrl = await _uploadToFirebase(file);
      }

      setState(() => _uploadProgress = 1.0);

      if (uploadedUrl.isNotEmpty) {
        setState(() => _photosUrls.add(uploadedUrl));
        _showSnackBar(
          DatabaseManager.instance.isDemoMode 
              ? 'Photo dÃ©mo ajoutÃ©e avec succÃ¨s !'
              : 'Photo validÃ©e et ajoutÃ©e avec succÃ¨s !',
          Colors.green,
        );
      }
    } catch (e) {
      _showSnackBar(
        'Erreur lors de l\'upload: $e',
        Colors.red,
      );
    } finally {
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
    }
  }

  /// âœ… NOUVEAU : Simuler upload en mode dÃ©mo
  Future<String> _simulateUpload(File file) async {
    // Simuler les Ã©tapes d'upload avec progrÃ¨s
    for (double progress = 0.1; progress <= 1.0; progress += 0.2) {
      setState(() => _uploadProgress = progress);
      await Future.delayed(const Duration(milliseconds: 300));
    }
    
    // Retourner une URL d'image alÃ©atoire
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    return 'https://picsum.photos/seed/upload$timestamp/400/400';
  }

  /// âœ… NOUVEAU : Upload rÃ©el vers Firebase
  Future<String> _uploadToFirebase(File file) async {
    try {
      // VÃ©rification de sÃ©curitÃ©
      setState(() => _uploadProgress = 0.2);
      final isSafe = await widget.photoService.checkImageSafety(file);
      if (!isSafe) {
        throw Exception('Contenu inappropriÃ© ou format invalide');
      }

      setState(() => _uploadProgress = 0.5);

      // Upload vers Firebase Storage
      final uploadedUrl = await widget.photoService.uploadImage(
        file,
        'shops_photos',
      );

      setState(() => _uploadProgress = 0.9);
      
      return uploadedUrl;
    } catch (e) {
      print('âŒ Erreur upload Firebase: $e');
      rethrow;
    }
  }

  /// âœ… AMÃ‰LIORÃ‰ : Upload multiple avec gestion des modes
  Future<void> _pickMultipleImages() async {
    final remainingSlots = maxPhotos - _photosUrls.length;
    if (remainingSlots <= 0) {
      _showSnackBar(
        'Vous avez atteint la limite de $maxPhotos photos.',
        Colors.orange,
      );
      return;
    }

    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );
    final List<XFile> pickedFiles = await openFiles(acceptedTypeGroups: [typeGroup]);
    if (pickedFiles.isEmpty) return;

    final filesToUpload = pickedFiles.take(remainingSlots).toList();
    final files = filesToUpload.map((xfile) => File(xfile.path)).toList();

    setState(() {
      _isUploading = true;
      _uploadProgress = 0.0;
    });

    try {
      List<String> urls;
      
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… Mode dÃ©mo : simuler upload multiple
        urls = await _simulateMultipleUpload(files);
      } else {
        // âœ… Mode production : upload multiple rÃ©el
        urls = await _uploadMultipleToFirebase(files);
      }

      setState(() {
        _photosUrls.addAll(urls);
      });

      _showSnackBar(
        '${urls.length} photo(s) ajoutÃ©e(s) avec succÃ¨s !',
        Colors.green,
      );
    } catch (e) {
      _showSnackBar(
        'Erreur lors de l\'upload multiple: $e',
        Colors.red,
      );
    } finally {
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
    }
  }

  /// âœ… NOUVEAU : Simuler upload multiple dÃ©mo
  Future<List<String>> _simulateMultipleUpload(List<File> files) async {
    final urls = <String>[];
    
    for (int i = 0; i < files.length; i++) {
      setState(() => _uploadProgress = (i + 1) / files.length);
      await Future.delayed(const Duration(milliseconds: 400));
      
      final timestamp = DateTime.now().millisecondsSinceEpoch + i;
      urls.add('https://picsum.photos/seed/multi$timestamp/400/400');
    }
    
    return urls;
  }

  /// âœ… NOUVEAU : Upload multiple rÃ©el
  Future<List<String>> _uploadMultipleToFirebase(List<File> files) async {
    try {
      final urls = await widget.photoService.uploadMultipleImages(
        files,
        'shops_photos',
        onProgress: (current, total) {
          setState(() {
            _uploadProgress = current / total;
          });
        },
      );
      return urls;
    } catch (e) {
      print('âŒ Erreur upload multiple Firebase: $e');
      rethrow;
    }
  }

  /// âœ… AMÃ‰LIORÃ‰ : Suppression avec gestion des modes
  Future<void> _removePhoto(int index) async {
    final url = _photosUrls[index];
    
    // Confirmation
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text('Confirmer', style: TextStyle(color: Colors.white)),
        content: Text(
          DatabaseManager.instance.isDemoMode 
              ? 'Supprimer cette photo de dÃ©monstration ?'
              : 'Supprimer dÃ©finitivement cette photo ?',
          style: const TextStyle(color: Colors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Supprimer'),
          ),
        ],
      ),
    );

    if (confirm != true) return;

    try {
      if (DatabaseManager.instance.isDemoMode) {
        // âœ… Mode dÃ©mo : suppression locale uniquement
        setState(() => _photosUrls.removeAt(index));
        print('ðŸŽ­ Photo dÃ©mo supprimÃ©e localement');
      } else {
        // âœ… Mode production : supprimer de Firebase
        await widget.photoService.deleteImage(url);
        setState(() => _photosUrls.removeAt(index));
        print('ðŸ­ Photo supprimÃ©e de Firebase Storage');
      }
      
      _showSnackBar(
        'Photo supprimÃ©e avec succÃ¨s',
        Colors.green,
      );
    } catch (e) {
      _showSnackBar(
        'Erreur lors de la suppression: $e',
        Colors.red,
      );
    }
  }

  /// âœ… AMÃ‰LIORÃ‰ : Optimisation avec gestion des modes
  Future<void> _createThumbnails() async {
    if (_photosUrls.isEmpty) {
      _showSnackBar('Aucune photo Ã  optimiser', Colors.orange);
      return;
    }

    setState(() => _isUploading = true);

    try {
      for (int i = 0; i < _photosUrls.length; i++) {
        setState(() => _uploadProgress = i / _photosUrls.length);
        
        if (DatabaseManager.instance.isDemoMode) {
          // âœ… Mode dÃ©mo : simuler l'optimisation
          await Future.delayed(const Duration(milliseconds: 300));
        } else {
          // âœ… Mode production : optimisation rÃ©elle
          // TODO: ImplÃ©menter l'optimisation Firebase
          await Future.delayed(const Duration(milliseconds: 500));
        }
      }

      _showSnackBar(
        DatabaseManager.instance.isDemoMode 
            ? 'Optimisation dÃ©mo terminÃ©e !'
            : 'Optimisation terminÃ©e !',
        Colors.green,
      );
    } catch (e) {
      _showSnackBar(
        'Erreur lors de l\'optimisation: $e',
        Colors.red,
      );
    } finally {
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
    }
  }

  void _showSnackBar(String message, Color color) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              child: ElevatedButton.icon(
                onPressed: _isUploading ? null : _pickImage,
                icon: const Icon(Icons.add_a_photo),
                label: const Text('Ajouter 1 Photo'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: _isUploading ? null : _pickMultipleImages,
                icon: const Icon(Icons.add_photo_alternate),
                label: const Text('Ajouter Plusieurs'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        if (_photosUrls.isNotEmpty) ...[
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _isUploading ? null : _createThumbnails,
              icon: const Icon(Icons.tune),
              label: Text(
                DatabaseManager.instance.isDemoMode 
                    ? 'Optimiser (DÃ©mo)'
                    : 'Optimiser les Photos'
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildProgressIndicator() {
    if (!_isUploading) return const SizedBox.shrink();

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[900],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.1)),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(
                DatabaseManager.instance.isDemoMode 
                    ? Icons.science 
                    : Icons.cloud_upload, 
                color: Colors.blue
              ),
              const SizedBox(width: 8),
              Text(
                DatabaseManager.instance.isDemoMode 
                    ? 'Simulation upload...'
                    : 'Upload en cours...',
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              Text(
                '${(_uploadProgress * 100).toInt()}%',
                style: const TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 8),
          LinearProgressIndicator(
            value: _uploadProgress,
            backgroundColor: Colors.grey[700],
            valueColor: const AlwaysStoppedAnimation<Color>(Colors.blue),
            borderRadius: BorderRadius.circular(4),
          ),
        ],
      ),
    );
  }

  Widget _buildStats() {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[900],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.1)),
      ),
      child: Column(
        children: [
          // âœ… Indicateur de mode en haut
          if (DatabaseManager.instance.isDemoMode) ...[
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.2),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(color: Colors.orange),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.science, color: Colors.orange, size: 16),
                  const SizedBox(width: 6),
                  Text(
                    'ðŸŽ­ Mode ${DatabaseManager.instance.activeDatabaseConfig.name}',
                    style: const TextStyle(
                      color: Colors.orange,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 12),
          ],
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _StatItem(
                icon: Icons.photo_library,
                label: 'Photos',
                value: '${_photosUrls.length}/$maxPhotos',
                color: _photosUrls.length >= maxPhotos ? Colors.red : Colors.blue,
              ),
              _StatItem(
                icon: Icons.storage,
                label: 'Espace',
                value: '${(_photosUrls.length / maxPhotos * 100).toInt()}%',
                color: _photosUrls.length >= maxPhotos ? Colors.red : Colors.green,
              ),
              _StatItem(
                icon: _isUploading ? Icons.sync : Icons.cloud_done,
                label: 'Statut',
                value: _isUploading ? 'Envoi...' : 'PrÃªt',
                color: _isUploading ? Colors.orange : Colors.green,
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Photos de mon Shop',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
                color: Colors.white,
              ),
            ),
            if (DatabaseManager.instance.isDemoMode) ...[
              const SizedBox(width: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(6),
                ),
                child: const Text(
                  'DÃ‰MO',
                  style: TextStyle(
                    color: Colors.orange,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ],
        ),
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          IconButton(
            onPressed: () {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  backgroundColor: Colors.grey[900],
                  title: const Text(
                    'Conseils Photos',
                    style: TextStyle(color: Colors.white, fontFamily: 'PermanentMarker'),
                  ),
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      if (DatabaseManager.instance.isDemoMode) ...[
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Colors.orange.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: const Text(
                            'ðŸŽ­ Mode dÃ©mo actif - Les photos sont simulÃ©es',
                            style: TextStyle(color: Colors.orange, fontSize: 12),
                          ),
                        ),
                        const SizedBox(height: 12),
                      ],
                      const Text(
                        'â€¢ Utilisez un bon Ã©clairage\n'
                        'â€¢ Ã‰vitez le flou de bougÃ©\n'
                        'â€¢ Montrez votre espace de travail\n'
                        'â€¢ Mettez en valeur vos rÃ©alisations\n'
                        'â€¢ Maximum 8 photos par shop\n'
                        'â€¢ Formats acceptÃ©s: JPG, PNG, WEBP',
                        style: TextStyle(color: Colors.white70),
                      ),
                    ],
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Compris'),
                    ),
                  ],
                ),
              );
            },
            icon: const Icon(Icons.info_outline, color: Colors.white),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            _buildStats(),
            _buildActionButtons(),
            _buildProgressIndicator(),
            const SizedBox(height: 20),
            Expanded(
              child: _photosUrls.isEmpty
                  ? _buildEmptyState()
                  : _buildPhotoGrid(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.add_a_photo_outlined,
            size: 64,
            color: Colors.grey[600],
          ),
          const SizedBox(height: 16),
          Text(
            'Aucune photo ajoutÃ©e',
            style: TextStyle(
              color: Colors.grey[400],
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'PermanentMarker',
            ),
          ),
          const SizedBox(height: 8),
          Text(
            DatabaseManager.instance.isDemoMode 
                ? 'Ajoutez des photos de dÃ©monstration\npour tester les fonctionnalitÃ©s'
                : 'Ajoutez des photos de votre shop\npour attirer plus de clients',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPhotoGrid() {
    return GridView.builder(
      itemCount: _photosUrls.length,
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        mainAxisSpacing: 12,
        crossAxisSpacing: 12,
        childAspectRatio: 1.0,
      ),
      itemBuilder: (context, i) => _buildPhotoCard(i),
    );
  }

  Widget _buildPhotoCard(int index) {
    return GestureDetector(
      onTap: () => _showPhotoDialog(index),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Stack(
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                _photosUrls[index],
                fit: BoxFit.cover,
                width: double.infinity,
                height: double.infinity,
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) return child;
                  return Container(
                    color: Colors.grey[800],
                    child: const Center(
                      child: CircularProgressIndicator(color: Colors.blue),
                    ),
                  );
                },
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    color: Colors.grey[800],
                    child: const Icon(
                      Icons.error,
                      color: Colors.red,
                      size: 32,
                    ),
                  );
                },
              ),
            ),
            Positioned(
              top: 8,
              right: 8,
              child: GestureDetector(
                onTap: () => _removePhoto(index),
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.red.withOpacity(0.8),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.close,
                    color: Colors.white,
                    size: 20,
                  ),
                ),
              ),
            ),
            Positioned(
              bottom: 8,
              left: 8,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.7),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  '${index + 1}',
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
            // âœ… Badge dÃ©mo si applicable
            if (DatabaseManager.instance.isDemoMode)
              Positioned(
                top: 8,
                left: 8,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.8),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Text(
                    'DÃ‰MO',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  void _showPhotoDialog(int index) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: Colors.transparent,
        child: Stack(
          children: [
            InteractiveViewer(
              child: Image.network(
                _photosUrls[index],
                fit: BoxFit.contain,
              ),
            ),
            Positioned(
              top: 40,
              right: 20,
              child: GestureDetector(
                onTap: () => Navigator.pop(context),
                child: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.7),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.close,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _StatItem extends StatelessWidget {
  final IconData icon;
  final String label;
  final String value;
  final Color color;

  const _StatItem({
    required this.icon,
    required this.label,
    required this.value,
    this.color = Colors.blue,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Icon(icon, color: color, size: 24),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            color: Colors.grey[400],
            fontSize: 12,
          ),
        ),
        Text(
          value,
          style: TextStyle(
            color: color,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\attente_devis_page.dart

// lib/pages/pro/attente_devis_page.dart

import 'package:flutter/material.dart';
import '../../models/quote_request.dart';
import '../../services/quote/enhanced_quote_service.dart'; // âœ… MIGRATION
import '../../theme/kipik_theme.dart';
import '../../core/database_manager.dart'; // âœ… AJOUTÃ‰ pour indicateur mode
import '../common/quote_detail_page.dart';

class AttenteDevisPage extends StatefulWidget {
  const AttenteDevisPage({Key? key}) : super(key: key);

  @override
  State<AttenteDevisPage> createState() => _AttenteDevisPageState();
}

class _AttenteDevisPageState extends State<AttenteDevisPage> {
  final _service = EnhancedQuoteService.instance; // âœ… MIGRATION
  late Future<List<QuoteRequest>> _future;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadQuotes();
  }

  /// âœ… CHARGEMENT DES DEVIS AVEC GESTION D'ERREUR
  void _loadQuotes() {
    setState(() {
      _future = _service.fetchRequestsForPro();
    });
  }

  /// âœ… RAFRAÃŽCHISSEMENT MANUEL
  Future<void> _refreshQuotes() async {
    setState(() => _isLoading = true);
    
    try {
      await Future.delayed(const Duration(milliseconds: 500)); // UX
      _loadQuotes();
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  /// âœ… FORMATER LE TEMPS RESTANT
  String _formatTimeRemaining(DateTime deadline) {
    final now = DateTime.now();
    final difference = deadline.difference(now);
    
    if (difference.isNegative) {
      return 'ExpirÃ©';
    } else if (difference.inDays > 0) {
      return '${difference.inDays}j restants';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h restantes';
    } else {
      return '${difference.inMinutes}min restantes';
    }
  }

  /// âœ… COULEUR SELON L'URGENCE
  Color _getUrgencyColor(DateTime deadline) {
    final now = DateTime.now();
    final hoursRemaining = deadline.difference(now).inHours;
    
    if (hoursRemaining < 0) return Colors.red; // ExpirÃ©
    if (hoursRemaining < 24) return Colors.orange; // Urgent
    if (hoursRemaining < 72) return Colors.amber; // Attention
    return Colors.green; // OK
  }

  /// âœ… ICÃ”NE SELON LE STATUT
  IconData _getStatusIcon(QuoteStatus status) {
    switch (status) {
      case QuoteStatus.Pending:
        return Icons.schedule;
      case QuoteStatus.Quoted:
        return Icons.request_quote;
      case QuoteStatus.Accepted:
        return Icons.check_circle;
      case QuoteStatus.Refused:
        return Icons.cancel;
      case QuoteStatus.Expired:
        return Icons.timer_off;
    }
  }

  /// âœ… COULEUR SELON LE STATUT
  Color _getStatusColor(QuoteStatus status) {
    switch (status) {
      case QuoteStatus.Pending:
        return Colors.blue;
      case QuoteStatus.Quoted:
        return Colors.orange;
      case QuoteStatus.Accepted:
        return Colors.green;
      case QuoteStatus.Refused:
        return Colors.red;
      case QuoteStatus.Expired:
        return Colors.grey;
    }
  }

  /// âœ… LABEL DU STATUT EN FRANÃ‡AIS
  String _getStatusLabel(QuoteStatus status) {
    switch (status) {
      case QuoteStatus.Pending:
        return 'En attente';
      case QuoteStatus.Quoted:
        return 'Devis envoyÃ©';
      case QuoteStatus.Accepted:
        return 'AcceptÃ©';
      case QuoteStatus.Refused:
        return 'RefusÃ©';
      case QuoteStatus.Expired:
        return 'ExpirÃ©';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Demandes de devis',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                color: Colors.white,
                fontSize: 20,
              ),
            ),
            // âœ… Indicateur mode dÃ©mo
            if (DatabaseManager.instance.isDemoMode) ...[
              const SizedBox(width: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange),
                ),
                child: Text(
                  'ðŸŽ­ ${DatabaseManager.instance.activeDatabaseConfig.name.split(' ').first}',
                  style: const TextStyle(
                    color: Colors.orange,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ],
        ),
        centerTitle: true,
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          IconButton(
            icon: _isLoading 
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : const Icon(Icons.refresh),
            onPressed: _isLoading ? null : _refreshQuotes,
            tooltip: 'Actualiser',
          ),
        ],
      ),
      body: SafeArea(
        child: FutureBuilder<List<QuoteRequest>>(
          future: _future,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return _buildLoadingState();
            }
            
            if (snapshot.hasError) {
              return _buildErrorState(snapshot.error.toString());
            }
            
            if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return _buildEmptyState();
            }
            
            final quotes = snapshot.data!;
            
            // âœ… Trier par prioritÃ© (en attente d'abord, puis par deadline)
            quotes.sort((a, b) {
              if (a.status == QuoteStatus.Pending && b.status != QuoteStatus.Pending) {
                return -1;
              }
              if (b.status == QuoteStatus.Pending && a.status != QuoteStatus.Pending) {
                return 1;
              }
              if (a.proRespondBy != null && b.proRespondBy != null) {
                return a.proRespondBy!.compareTo(b.proRespondBy!);
              }
              return b.createdAt.compareTo(a.createdAt);
            });

            return RefreshIndicator(
              onRefresh: _refreshQuotes,
              color: KipikTheme.rouge,
              child: _buildQuotesList(quotes),
            );
          },
        ),
      ),
    );
  }

  /// âœ… Ã‰TAT DE CHARGEMENT
  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const CircularProgressIndicator(color: Colors.white),
          const SizedBox(height: 16),
          Text(
            DatabaseManager.instance.isDemoMode 
                ? 'Chargement des devis de dÃ©monstration...'
                : 'Chargement de vos demandes de devis...',
            style: TextStyle(
              color: Colors.white.withOpacity(0.7),
              fontFamily: 'Roboto',
            ),
          ),
        ],
      ),
    );
  }

  /// âœ… Ã‰TAT D'ERREUR
  Widget _buildErrorState(String error) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Icon(
                Icons.error_outline,
                color: Colors.red,
                size: 48,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Erreur de chargement',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              DatabaseManager.instance.isDemoMode 
                  ? 'Impossible de charger les devis de dÃ©monstration'
                  : 'Impossible de charger vos demandes de devis',
              style: TextStyle(
                color: Colors.white.withOpacity(0.7),
                fontFamily: 'Roboto',
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _refreshQuotes,
              icon: const Icon(Icons.refresh),
              label: const Text('RÃ©essayer'),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// âœ… Ã‰TAT VIDE
  Widget _buildEmptyState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Icon(
                Icons.request_quote_outlined,
                color: Colors.white,
                size: 64,
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Aucune demande de devis',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              DatabaseManager.instance.isDemoMode 
                  ? 'Aucune demande de devis en dÃ©monstration pour le moment.'
                  : 'Vous n\'avez reÃ§u aucune demande de devis pour le moment.',
              style: TextStyle(
                color: Colors.white.withOpacity(0.7),
                fontFamily: 'Roboto',
                fontSize: 16,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _refreshQuotes,
              icon: const Icon(Icons.refresh),
              label: const Text('Actualiser'),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// âœ… LISTE DES DEVIS
  Widget _buildQuotesList(List<QuoteRequest> quotes) {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: quotes.length,
      itemBuilder: (context, index) {
        final quote = quotes[index];
        return _buildQuoteCard(quote);
      },
    );
  }

  /// âœ… CARTE DEVIS MODERNE
  Widget _buildQuoteCard(QuoteRequest quote) {
    final statusColor = _getStatusColor(quote.status);
    final statusLabel = _getStatusLabel(quote.status);
    final statusIcon = _getStatusIcon(quote.status);
    
    final timeRemaining = quote.proRespondBy != null 
        ? _formatTimeRemaining(quote.proRespondBy!)
        : '';
    final urgencyColor = quote.proRespondBy != null 
        ? _getUrgencyColor(quote.proRespondBy!)
        : Colors.grey;

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: InkWell(
        onTap: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => QuoteDetailPage(
              requestId: quote.id,
              isPro: true,
            ),
          ),
        ),
        borderRadius: BorderRadius.circular(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // âœ… En-tÃªte avec client et statut
            Row(
              children: [
                // Avatar client
                CircleAvatar(
                  backgroundColor: KipikTheme.rouge.withOpacity(0.1),
                  child: Text(
                    quote.clientName.isNotEmpty 
                        ? quote.clientName[0].toUpperCase()
                        : 'C',
                    style: TextStyle(
                      color: KipikTheme.rouge,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                
                // Nom et email client
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        quote.clientName,
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Color(0xFF111827),
                        ),
                      ),
                      if (quote.clientEmail.isNotEmpty) ...[
                        const SizedBox(height: 2),
                        Text(
                          quote.clientEmail,
                          style: const TextStyle(
                            fontSize: 12,
                            color: Color(0xFF6B7280),
                            fontFamily: 'Roboto',
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
                
                // Badge statut
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: statusColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(color: statusColor.withOpacity(0.3)),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(statusIcon, color: statusColor, size: 14),
                      const SizedBox(width: 4),
                      Text(
                        statusLabel,
                        style: TextStyle(
                          color: statusColor,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // âœ… Titre du projet
            Text(
              quote.projectTitle,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF111827),
                fontFamily: 'Roboto',
              ),
            ),
            
            const SizedBox(height: 8),
            
            // âœ… Style et localisation
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    quote.style,
                    style: const TextStyle(
                      color: Colors.blue,
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    quote.location,
                    style: const TextStyle(
                      color: Colors.purple,
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // âœ… Description (tronquÃ©e)
            Text(
              quote.description,
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF6B7280),
                fontFamily: 'Roboto',
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
            
            const SizedBox(height: 16),
            
            // âœ… Pied avec budget et deadline
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // Budget
                if (quote.budget != null) ...[
                  Row(
                    children: [
                      Icon(
                        Icons.euro,
                        color: Colors.green,
                        size: 16,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        'Budget: ${quote.budget!.toStringAsFixed(0)}â‚¬',
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: Colors.green,
                        ),
                      ),
                    ],
                  ),
                ],
                
                // Temps restant (seulement si en attente)
                if (quote.status == QuoteStatus.Pending && quote.proRespondBy != null) ...[
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: urgencyColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: urgencyColor.withOpacity(0.3)),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.timer,
                          color: urgencyColor,
                          size: 14,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          timeRemaining,
                          style: TextStyle(
                            color: urgencyColor,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
                
                // Prix total (si devis envoyÃ©)
                if (quote.totalPrice != null) ...[
                  Row(
                    children: [
                      Icon(
                        Icons.monetization_on,
                        color: KipikTheme.rouge,
                        size: 16,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        'Devis: ${quote.totalPrice!.toStringAsFixed(0)}â‚¬',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: KipikTheme.rouge,
                        ),
                      ),
                    ],
                  ),
                ],
              ],
            ),
            
            // âœ… Indicateur mode dÃ©mo sur la carte
            if (DatabaseManager.instance.isDemoMode) ...[
              const SizedBox(height: 12),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(6),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: Text(
                  'ðŸŽ­ DonnÃ©es de dÃ©monstration',
                  style: const TextStyle(
                    color: Colors.orange,
                    fontSize: 10,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\confirmation_inscription_pro_page.dart

// lib/pages/pro/confirmation_inscription_pro_page.dart

import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';

class ConfirmationInscriptionProPage extends StatefulWidget {
  const ConfirmationInscriptionProPage({Key? key}) : super(key: key);

  @override
  State<ConfirmationInscriptionProPage> createState() =>
      _ConfirmationInscriptionProPageState();
}

class _ConfirmationInscriptionProPageState
    extends State<ConfirmationInscriptionProPage> {
  late final String _bgAsset;

  @override
  void initState() {
    super.initState();
    // Choix alÃ©atoire du fond
    const backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    _bgAsset = backgrounds[Random().nextInt(backgrounds.length)];

    // AprÃ¨s 3s, redirection automatique
    Future.delayed(const Duration(seconds: 3), () {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => const HomePagePro()),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: '', // AppBar Ã©purÃ©
        showBackButton: false,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond alÃ©atoire
          Image.asset(_bgAsset, fit: BoxFit.cover),
          SafeArea(
            child: Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Logo
                  Image.asset('assets/logo_kipik.png', width: 150),
                  const SizedBox(height: 24),
                  // Message
                  const Text(
                    'Bienvenue dans la team KIPIKâ€¯!',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 24,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 24),
                  // Loader
                  const CircularProgressIndicator(
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\dashboard_page.dart

// lib/pages/pro/dashboard_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

// Imports pour la navigation
import 'package:kipik_v5/pages/pro/home_page_pro.dart';
import 'package:kipik_v5/pages/pro/agenda/pro_agenda_home_page.dart';
import 'package:kipik_v5/pages/pro/attente_devis_page.dart';
import 'package:kipik_v5/pages/chat_projet_page.dart';

// Import pour le dashboard abonnement
import 'package:kipik_v5/screens/subscription/subscription_dashboard.dart';

// ModÃ¨les pour les notifications
enum NotificationType { newMessage, newQuote, appointment, payment, review, urgent }

class DashboardNotification {
  final String id;
  final NotificationType type;
  final String title;
  final String description;
  final DateTime timestamp;
  final bool isUrgent;
  final int? count;

  DashboardNotification({
    required this.id,
    required this.type,
    required this.title,
    required this.description,
    required this.timestamp,
    this.isUrgent = false,
    this.count,
  });
}

class DashboardPage extends StatefulWidget {
  const DashboardPage({Key? key}) : super(key: key);

  @override
  State<DashboardPage> createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> with TickerProviderStateMixin {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  
  // DonnÃ©es de performance
  final double _chiffreAffaires = 12345.67;
  final double _caObjectif = 15000.00;
  final int _nouveauxClients = 7;
  
  // DonnÃ©es d'activitÃ© rÃ©cente
  final int _devisEnAttente = 4;
  final int _messagesNonLus = 7;
  final int _rdvAConfirmer = 2;
  final int _paiementsEnAttente = 1;
  final int _rdvAujourdhui = 3;
  final int _notificationsUrgentes = 5;

  // Notifications rÃ©centes
  late final List<DashboardNotification> _notifications;

  @override
  void initState() {
    super.initState();
    _initializeNotifications();
    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _pulseController.dispose();
    super.dispose();
  }

  void _initializeNotifications() {
    final now = DateTime.now();
    _notifications = [
      DashboardNotification(
        id: '1',
        type: NotificationType.urgent,
        title: 'Urgent',
        description: 'PrioritÃ©',
        timestamp: now,
        isUrgent: true,
        count: _notificationsUrgentes,
      ),
      DashboardNotification(
        id: '2',
        type: NotificationType.newQuote,
        title: 'Devis',
        description: 'En attente',
        timestamp: now.subtract(const Duration(hours: 2)),
        isUrgent: _devisEnAttente > 0,
        count: _devisEnAttente,
      ),
      DashboardNotification(
        id: '3',
        type: NotificationType.appointment,
        title: 'RDV',
        description: 'Aujourd\'hui',
        timestamp: now.subtract(const Duration(minutes: 30)),
        isUrgent: false,
        count: _rdvAujourdhui,
      ),
      DashboardNotification(
        id: '4',
        type: NotificationType.newMessage,
        title: 'Messages',
        description: 'Non lus',
        timestamp: now.subtract(const Duration(minutes: 15)),
        isUrgent: _messagesNonLus > 5,
        count: _messagesNonLus,
      ),
      DashboardNotification(
        id: '5',
        type: NotificationType.appointment,
        title: 'Confirmer',
        description: 'En attente',
        timestamp: now.subtract(const Duration(hours: 4)),
        isUrgent: true,
        count: _rdvAConfirmer,
      ),
      DashboardNotification(
        id: '6',
        type: NotificationType.payment,
        title: 'Paiements',
        description: 'Attente',
        timestamp: now.subtract(const Duration(hours: 6)),
        isUrgent: _paiementsEnAttente > 0,
        count: _paiementsEnAttente,
      ),
    ];
  }

  double get _progressCA => _chiffreAffaires / _caObjectif;

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => const HomePagePro()),
        );
        return false;
      },
      child: Scaffold(
        key: _scaffoldKey,
        backgroundColor: const Color(0xFF0A0A0A),
        extendBodyBehindAppBar: true,
        endDrawer: const CustomDrawerKipik(),
        appBar: CustomAppBarKipik(
          title: 'Tableau de bord',
          showBackButton: true,
          showNotificationIcon: true,
          notificationCount: _notificationsUrgentes,
          useProStyle: true,
          onBackPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (_) => const HomePagePro()),
            );
          },
          onNotificationPressed: () {
            _showNotificationsModal();
          },
        ),
        body: SafeArea(
          bottom: true,
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 16),
                
                // 1. Bulle de salutation en premier
                _buildWelcomeSection(),
                
                const SizedBox(height: 24),
                
                // 2. Mini-cartes de notifications
                _buildNotificationCards(),
                
                const SizedBox(height: 32),
                
                // 3. Carte de performance
                _buildPerformanceCard(),
                
                const SizedBox(height: 32),
                
                // 4. Section rendez-vous du jour
                _buildTodayAppointments(),
                
                const SizedBox(height: 32),
                
                // 5. Actions rapides
                _buildQuickActions(),
                
                const SizedBox(height: 32),
                
                // 6. ActivitÃ© rÃ©cente
                _buildRecentActivity(),
                
                const SizedBox(height: 24),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title, IconData icon) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
      decoration: BoxDecoration(
        color: KipikTheme.rouge,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: KipikTheme.rouge.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              color: Colors.white,
              size: 18,
            ),
          ),
          const SizedBox(width: 12),
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.white,
              fontWeight: FontWeight.w400,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWelcomeSection() {
    final hour = DateTime.now().hour;
    String greeting;
    
    if (hour < 12) {
      greeting = 'Bonjour';
    } else if (hour < 18) {
      greeting = 'Bon aprÃ¨s-midi';
    } else {
      greeting = 'Bonsoir';
    }

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: KipikTheme.rouge.withOpacity(0.2),
          width: 2,
        ),
        boxShadow: [
          BoxShadow(
            color: KipikTheme.rouge.withOpacity(0.1),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            width: 64,
            height: 64,
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: KipikTheme.rouge.withOpacity(0.3),
                width: 2,
              ),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: Container(
                color: KipikTheme.rouge.withOpacity(0.1),
                child: Icon(
                  Icons.person,
                  color: KipikTheme.rouge,
                  size: 32,
                ),
              ),
            ),
          ),
          const SizedBox(width: 20),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '$greeting !',
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 24,
                    color: KipikTheme.rouge,
                    fontWeight: FontWeight.w400,
                  ),
                ),
                const SizedBox(height: 4),
                const Text(
                  'Bienvenue dans votre espace professionnel',
                  style: TextStyle(
                    fontSize: 14,
                    color: Color(0xFF374151),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 2),
                const Text(
                  'GÃ©rez votre activitÃ© en un coup d\'Å“il',
                  style: TextStyle(
                    fontSize: 12,
                    color: Color(0xFF6B7280),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w400,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationCards() {
    final priorityNotifications = _notifications.where((n) => 
      n.count != null && n.count! >= 0
    ).take(6).toList();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Notifications prioritaires', Icons.priority_high),
        const SizedBox(height: 20),
        
        SizedBox(
          height: 200,
          child: GridView.builder(
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 3,
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 1.2,
            ),
            itemCount: priorityNotifications.length,
            itemBuilder: (context, index) {
              return _buildNotificationCard(priorityNotifications[index]);
            },
          ),
        ),
      ],
    );
  }

  Widget _buildNotificationCard(DashboardNotification notification) {
    final color = _getNotificationColor(notification.type);
    final isUrgent = notification.isUrgent;
    final count = notification.count ?? 0;
    
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: () => _handleNotificationTap(notification),
        borderRadius: BorderRadius.circular(12),
        child: Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: isUrgent ? KipikTheme.rouge : color.withOpacity(0.2),
              width: isUrgent ? 2 : 1,
            ),
            boxShadow: [
              BoxShadow(
                color: isUrgent 
                    ? KipikTheme.rouge.withOpacity(0.15)
                    : Colors.black.withOpacity(0.05),
                blurRadius: isUrgent ? 8 : 4,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(8),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              children: [
                SizedBox(
                  height: 32,
                  child: Stack(
                    alignment: Alignment.center,
                    clipBehavior: Clip.none,
                    children: [
                      Container(
                        padding: const EdgeInsets.all(6),
                        decoration: BoxDecoration(
                          color: (isUrgent ? KipikTheme.rouge : color).withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Icon(
                          _getNotificationIcon(notification.type),
                          color: isUrgent ? KipikTheme.rouge : color,
                          size: 16,
                        ),
                      ),
                      if (count > 0)
                        Positioned(
                          right: -2,
                          top: -2,
                          child: Container(
                            padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 1),
                            decoration: BoxDecoration(
                              color: isUrgent ? KipikTheme.rouge : color,
                              borderRadius: BorderRadius.circular(6),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.white,
                                  blurRadius: 1,
                                  spreadRadius: 0.5,
                                ),
                              ],
                            ),
                            constraints: const BoxConstraints(
                              minWidth: 14,
                              minHeight: 14,
                            ),
                            child: Text(
                              count > 9 ? '9+' : '$count',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 8,
                                fontWeight: FontWeight.bold,
                                fontFamily: 'Roboto',
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
                const SizedBox(height: 6),
                Flexible(
                  child: Text(
                    notification.title,
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                      fontSize: 11,
                      fontWeight: FontWeight.w700,
                      color: isUrgent ? KipikTheme.rouge : const Color(0xFF0A0A0A),
                      fontFamily: 'Roboto',
                    ),
                  ),
                ),
                const SizedBox(height: 2),
                Flexible(
                  child: Text(
                    notification.description,
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                      fontSize: 9,
                      color: isUrgent ? KipikTheme.rouge.withOpacity(0.8) : const Color(0xFF6B7280),
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPerformanceCard() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Performance du mois', Icons.trending_up),
        const SizedBox(height: 20),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: const Color(0xFFE5E7EB),
              width: 1,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 16,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            children: [
              Row(
                children: [
                  Expanded(
                    flex: 2,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '${_chiffreAffaires.toStringAsFixed(0)}â‚¬',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 32,
                            color: KipikTheme.rouge,
                            fontWeight: FontWeight.w900,
                          ),
                        ),
                        const SizedBox(height: 4),
                        const Text(
                          'Chiffre d\'affaires',
                          style: TextStyle(
                            fontSize: 14,
                            color: Color(0xFF374151),
                            fontFamily: 'Roboto',
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: const Color(0xFF0A0A0A).withOpacity(0.05),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: const Color(0xFFE5E7EB),
                        width: 1,
                      ),
                    ),
                    child: Column(
                      children: [
                        Text(
                          '$_nouveauxClients',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 24,
                            color: Color(0xFF0A0A0A),
                            fontWeight: FontWeight.w900,
                          ),
                        ),
                        const SizedBox(height: 4),
                        const Text(
                          'Nouveaux\nclients',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 11,
                            color: Color(0xFF6B7280),
                            fontFamily: 'Roboto',
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 24),
              
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Objectif mensuel',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontWeight: FontWeight.w700,
                          color: Color(0xFF374151),
                          fontSize: 14,
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: _progressCA >= 1.0 
                              ? KipikTheme.rouge.withOpacity(0.1)
                              : const Color(0xFF0A0A0A).withOpacity(0.05),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          '${(_progressCA * 100).toStringAsFixed(1)}%',
                          style: TextStyle(
                            fontSize: 12,
                            color: _progressCA >= 1.0 
                                ? KipikTheme.rouge
                                : const Color(0xFF374151),
                            fontFamily: 'Roboto',
                            fontWeight: FontWeight.w900,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Container(
                    height: 8,
                    decoration: BoxDecoration(
                      color: const Color(0xFFF3F4F6),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: FractionallySizedBox(
                      alignment: Alignment.centerLeft,
                      widthFactor: _progressCA > 1.0 ? 1.0 : _progressCA,
                      child: Container(
                        decoration: BoxDecoration(
                          color: _progressCA >= 1.0 
                              ? KipikTheme.rouge
                              : const Color(0xFF374151),
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Objectif: ${_caObjectif.toStringAsFixed(0)}â‚¬',
                    style: const TextStyle(
                      fontSize: 12,
                      color: Color(0xFF6B7280),
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTodayAppointments() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Rendez-vous d\'aujourd\'hui', Icons.calendar_today),
        const SizedBox(height: 20),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: const Color(0xFFE5E7EB),
              width: 1,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 16,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFF0A0A0A).withOpacity(0.05),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: const Color(0xFFE5E7EB),
                    width: 1,
                  ),
                ),
                child: const Icon(
                  Icons.event,
                  color: Color(0xFF0A0A0A),
                  size: 28,
                ),
              ),
              const SizedBox(width: 20),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(
                          '$_rdvAujourdhui',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 24,
                            color: KipikTheme.rouge,
                            fontWeight: FontWeight.w900,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: GestureDetector(
                            onTap: () => Navigator.push(
                              context,
                              MaterialPageRoute(builder: (_) => const ProAgendaHomePage()),
                            ),
                            child: const Text(
                              'rendez-vous',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 16,
                                color: Color(0xFF374151),
                                fontWeight: FontWeight.w600,
                                decoration: TextDecoration.underline,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    const Text(
                      'Prochain RDV dans 2h30',
                      style: TextStyle(
                        fontSize: 12,
                        color: Color(0xFF6B7280),
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
              Material(
                color: Colors.transparent,
                child: InkWell(
                  onTap: () => Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => const ProAgendaHomePage()),
                  ),
                  borderRadius: BorderRadius.circular(12),
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: KipikTheme.rouge.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(
                      Icons.arrow_forward_ios,
                      color: KipikTheme.rouge,
                      size: 18,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildQuickActions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Actions rapides', Icons.flash_on),
        const SizedBox(height: 20),
        
        // PremiÃ¨re rangÃ©e - Actions classiques
        Row(
          children: [
            Expanded(
              child: _buildQuickActionButton(
                'Devis',
                Icons.request_quote_outlined,
                () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: const Text(
                        'Nouveau devis : BientÃ´t disponible !',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      backgroundColor: KipikTheme.rouge,
                      behavior: SnackBarBehavior.floating,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: _buildQuickActionButton(
                'RDV',
                Icons.event_outlined,
                () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const ProAgendaHomePage()),
                ),
              ),
            ),
          ],
        ),
        
        const SizedBox(height: 20),
        
        // DeuxiÃ¨me rangÃ©e - Bouton abonnement premium
        _buildPremiumSubscriptionButton(),
      ],
    );
  }

  Widget _buildPremiumSubscriptionButton() {
    return AnimatedBuilder(
      animation: _pulseAnimation,
      builder: (context, child) {
        return Container(
          width: double.infinity,
          height: 80,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(20),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                const Color(0xFF0A0A0A),
                KipikTheme.rouge,
                const Color(0xFF0A0A0A),
              ],
            ),
            boxShadow: [
              BoxShadow(
                color: KipikTheme.rouge.withOpacity(0.3),
                blurRadius: 16,
                offset: const Offset(0, 6),
              ),
            ],
          ),
          child: Material(
            color: Colors.transparent,
            child: InkWell(
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const SubscriptionDashboard(),
                  ),
                );
              },
              borderRadius: BorderRadius.circular(20),
              child: Container(
                padding: const EdgeInsets.all(24),
                child: Row(
                  children: [
                    // IcÃ´ne tatouage avec animation
                    Transform.scale(
                      scale: _pulseAnimation.value,
                      child: Container(
                        padding: const EdgeInsets.all(14),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.15),
                          borderRadius: BorderRadius.circular(16),
                          border: Border.all(
                            color: Colors.white.withOpacity(0.3),
                            width: 2,
                          ),
                        ),
                        child: const Icon(
                          Icons.auto_awesome,
                          color: Colors.white,
                          size: 24,
                        ),
                      ),
                    ),
                    
                    const SizedBox(width: 20),
                    
                    // Texte
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Text(
                            'Mon Abonnement Pro',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 18,
                              fontFamily: 'PermanentMarker',
                              fontWeight: FontWeight.w400,
                              shadows: [
                                Shadow(
                                  color: Colors.black38,
                                  offset: Offset(1, 1),
                                  blurRadius: 3,
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 4),
                          const Text(
                            'GÃ©rez votre plan et vos commissions',
                            style: TextStyle(
                              color: Colors.white70,
                              fontSize: 13,
                              fontFamily: 'Roboto',
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                    
                    // Badge avec machine Ã  tatouer
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.15),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: const Icon(
                        Icons.arrow_forward_ios,
                        color: Colors.white,
                        size: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildQuickActionButton(
    String title,
    IconData icon,
    VoidCallback onTap,
  ) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(16),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: KipikTheme.rouge.withOpacity(0.2),
              width: 1,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(icon, color: KipikTheme.rouge, size: 24),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 16,
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w700,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildRecentActivity() {
    final recentNotifications = _notifications.where((n) => !n.isUrgent).take(3).toList();
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('ActivitÃ© rÃ©cente', Icons.history),
        const SizedBox(height: 20),
        Container(
          width: double.infinity,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: const Color(0xFFE5E7EB),
              width: 1,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 16,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            children: recentNotifications.asMap().entries.map((entry) {
              final index = entry.key;
              final notification = entry.value;
              final isLast = index == recentNotifications.length - 1;
              
              return _buildActivityItem(notification, isLast);
            }).toList(),
          ),
        ),
      ],
    );
  }

  Widget _buildActivityItem(DashboardNotification notification, bool isLast) {
    final color = _getNotificationColor(notification.type);
    final timeAgo = _getTimeAgo(notification.timestamp);
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        border: isLast ? null : const Border(
          bottom: BorderSide(
            color: Color(0xFFF3F4F6),
            width: 1,
          ),
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Icon(
              _getNotificationIcon(notification.type),
              color: color,
              size: 18,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  notification.title,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w700,
                    fontSize: 14,
                    color: Color(0xFF0A0A0A),
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  notification.description,
                  style: const TextStyle(
                    fontSize: 12,
                    color: Color(0xFF6B7280),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 6),
                Text(
                  timeAgo,
                  style: TextStyle(
                    fontSize: 11,
                    color: color,
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _handleNotificationTap(DashboardNotification notification) {
    switch (notification.type) {
      case NotificationType.newQuote:
        Navigator.push(
          context,
          MaterialPageRoute(builder: (_) => const AttenteDevisPage()),
        );
        break;
      case NotificationType.newMessage:
        Navigator.push(
          context,
          MaterialPageRoute(builder: (_) => const ChatProjetPage()),
        );
        break;
      case NotificationType.appointment:
        Navigator.push(
          context,
          MaterialPageRoute(builder: (_) => const ProAgendaHomePage()),
        );
        break;
      case NotificationType.payment:
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text(
              'Paiements : BientÃ´t disponible !',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontWeight: FontWeight.w500,
              ),
            ),
            backgroundColor: KipikTheme.rouge,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        );
        break;
      case NotificationType.urgent:
        _showNotificationsModal();
        break;
      default:
        break;
    }
  }

  IconData _getNotificationIcon(NotificationType type) {
    switch (type) {
      case NotificationType.newMessage:
        return Icons.chat_bubble_outline;
      case NotificationType.newQuote:
        return Icons.request_quote_outlined;
      case NotificationType.appointment:
        return Icons.event_outlined;
      case NotificationType.payment:
        return Icons.payment_outlined;
      case NotificationType.review:
        return Icons.star_outline;
      case NotificationType.urgent:
        return Icons.priority_high;
    }
  }

  Color _getNotificationColor(NotificationType type) {
    switch (type) {
      case NotificationType.newMessage:
        return const Color(0xFF0A0A0A);
      case NotificationType.newQuote:
        return const Color(0xFF0A0A0A);
      case NotificationType.appointment:
        return const Color(0xFF0A0A0A);
      case NotificationType.payment:
        return const Color(0xFF0A0A0A);
      case NotificationType.review:
        return const Color(0xFF0A0A0A);
      case NotificationType.urgent:
        return KipikTheme.rouge;
    }
  }

  String _getTimeAgo(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    
    if (difference.inMinutes < 60) {
      return 'Il y a ${difference.inMinutes}min';
    } else if (difference.inHours < 24) {
      return 'Il y a ${difference.inHours}h';
    } else {
      return 'Il y a ${difference.inDays}j';
    }
  }

  void _showNotificationsModal() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.7,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: KipikTheme.rouge,
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
              ),
              child: Row(
                children: [
                  const Icon(
                    Icons.notifications,
                    color: Colors.white,
                    size: 24,
                  ),
                  const SizedBox(width: 12),
                  const Text(
                    'Notifications',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.white,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                    onPressed: () => Navigator.pop(context),
                    icon: const Icon(
                      Icons.close,
                      color: Colors.white,
                      size: 24,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.all(16),
                itemCount: _notifications.length,
                itemBuilder: (context, index) {
                  final notification = _notifications[index];
                  return _buildNotificationItem(notification, index == _notifications.length - 1);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNotificationItem(DashboardNotification notification, bool isLast) {
    final color = _getNotificationColor(notification.type);
    final timeAgo = _getTimeAgo(notification.timestamp);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: notification.isUrgent ? KipikTheme.rouge.withOpacity(0.3) : const Color(0xFFE5E7EB),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              _getNotificationIcon(notification.type),
              color: color,
              size: 20,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  notification.title,
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w700,
                    fontSize: 14,
                    color: notification.isUrgent ? KipikTheme.rouge : const Color(0xFF0A0A0A),
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  notification.description,
                  style: const TextStyle(
                    fontSize: 12,
                    color: Color(0xFF6B7280),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 6),
                Text(
                  timeAgo,
                  style: TextStyle(
                    fontSize: 11,
                    color: color,
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
          if (notification.count != null && notification.count! > 0)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: notification.isUrgent ? KipikTheme.rouge : color,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                '${notification.count}',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto',
                ),
              ),
            ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\detail_projet_page.dart

// lib/pages/pro/detail_projet_page.dart

import 'package:flutter/material.dart';
import '../../models/project_model.dart';
import '../../services/project/firebase_project_service.dart'; // âœ… MIGRATION

class DetailProjetPage extends StatefulWidget {
  final String projectId;
  final FirebaseProjectService? projectService; // âœ… MIGRATION: Optionnel car on utilise l'instance

  const DetailProjetPage({
    Key? key,
    required this.projectId,
    this.projectService, // âœ… MIGRATION: Maintenant optionnel
  }) : super(key: key);

  @override
  State<DetailProjetPage> createState() => _DetailProjetPageState();
}

class _DetailProjetPageState extends State<DetailProjetPage> {
  late Future<ProjectModel?> _futureProject;
  ProjectModel? _currentProject;
  bool _isLoading = false;

  // âœ… MIGRATION: Utiliser l'instance singleton
  FirebaseProjectService get _projectService => 
      widget.projectService ?? FirebaseProjectService.instance;

  @override
  void initState() {
    super.initState();
    _loadProject();
  }

  // âœ… MIGRATION: MÃ©thode de chargement avec gestion d'erreurs amÃ©liorÃ©e
  Future<void> _loadProject() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final project = await _projectService.fetchProjectById(widget.projectId);
      if (mounted) {
        setState(() {
          _currentProject = project;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // âœ… NOUVEAU: MÃ©thode pour mettre Ã  jour le statut
  Future<void> _updateStatus(ProjectStatus newStatus) async {
    try {
      await _projectService.updateProjectStatus(widget.projectId, newStatus);
      await _loadProject(); // Recharger le projet
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Statut mis Ã  jour'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // âœ… NOUVEAU: Widget pour afficher le statut avec couleur
  Widget _buildStatusChip(ProjectStatus status) {
    Color color;
    String label;
    
    switch (status) {
      case ProjectStatus.pending:
        color = Colors.orange;
        label = 'En attente';
        break;
      case ProjectStatus.accepted:
        color = Colors.blue;
        label = 'AcceptÃ©';
        break;
      case ProjectStatus.inProgress:
        color = Colors.purple;
        label = 'En cours';
        break;
      case ProjectStatus.completed:
        color = Colors.green;
        label = 'TerminÃ©';
        break;
      case ProjectStatus.cancelled:
        color = Colors.red;
        label = 'AnnulÃ©';
        break;
      case ProjectStatus.onHold:
        color = Colors.grey;
        label = 'En pause';
        break;
    }

    return Chip(
      label: Text(
        label,
        style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
      ),
      backgroundColor: color,
    );
  }

  // âœ… NOUVEAU: Bouton d'action selon le statut
  Widget? _buildActionButton() {
    if (_currentProject == null) return null;

    switch (_currentProject!.status) {
      case ProjectStatus.pending:
        return ElevatedButton(
          onPressed: () => _updateStatus(ProjectStatus.accepted),
          style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
          child: const Text('Accepter le projet'),
        );
      case ProjectStatus.accepted:
        return ElevatedButton(
          onPressed: () => _updateStatus(ProjectStatus.inProgress),
          style: ElevatedButton.styleFrom(backgroundColor: Colors.purple),
          child: const Text('Commencer le projet'),
        );
      case ProjectStatus.inProgress:
        return ElevatedButton(
          onPressed: () => _updateStatus(ProjectStatus.completed),
          style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
          child: const Text('Marquer comme terminÃ©'),
        );
      default:
        return null;
    }
  }

  // âœ… NOUVEAU: Widget pour les images
  Widget _buildImageSection(String title, List<String> images) {
    if (images.isEmpty) return const SizedBox.shrink();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        SizedBox(
          height: 120,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: images.length,
            itemBuilder: (context, index) {
              return Container(
                width: 120,
                margin: const EdgeInsets.only(right: 8),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  image: DecorationImage(
                    image: NetworkImage(images[index]),
                    fit: BoxFit.cover,
                  ),
                ),
              );
            },
          ),
        ),
        const SizedBox(height: 16),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text(
          _currentProject?.title ?? 'DÃ©tail du projet',
          style: const TextStyle(color: Colors.white),
        ),
        backgroundColor: Colors.black,
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          // âœ… NOUVEAU: Menu d'actions
          if (_currentProject != null)
            PopupMenuButton<String>(
              icon: const Icon(Icons.more_vert, color: Colors.white),
              onSelected: (value) async {
                switch (value) {
                  case 'edit':
                    // TODO: Navigation vers page d'Ã©dition
                    break;
                  case 'delete':
                    // Confirmation avant suppression
                    final confirm = await showDialog<bool>(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Confirmer'),
                        content: const Text('Supprimer dÃ©finitivement ce projet ?'),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.pop(context, false),
                            child: const Text('Annuler'),
                          ),
                          TextButton(
                            onPressed: () => Navigator.pop(context, true),
                            child: const Text('Supprimer'),
                          ),
                        ],
                      ),
                    );
                    if (confirm == true) {
                      try {
                        await _projectService.deleteProject(widget.projectId);
                        if (mounted) {
                          Navigator.pop(context);
                        }
                      } catch (e) {
                        if (mounted) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('Erreur: $e')),
                          );
                        }
                      }
                    }
                    break;
                }
              },
              itemBuilder: (context) => [
                const PopupMenuItem(
                  value: 'edit',
                  child: ListTile(
                    leading: Icon(Icons.edit),
                    title: Text('Modifier'),
                  ),
                ),
                const PopupMenuItem(
                  value: 'delete',
                  child: ListTile(
                    leading: Icon(Icons.delete, color: Colors.red),
                    title: Text('Supprimer', style: TextStyle(color: Colors.red)),
                  ),
                ),
              ],
            ),
        ],
      ),
      body: _isLoading
          ? const Center(
              child: CircularProgressIndicator(color: Colors.white),
            )
          : _currentProject == null
              ? const Center(
                  child: Text(
                    'Projet introuvable ou accÃ¨s refusÃ©',
                    style: TextStyle(color: Colors.white),
                  ),
                )
              : RefreshIndicator(
                  onRefresh: _loadProject,
                  child: SingleChildScrollView(
                    physics: const AlwaysScrollableScrollPhysics(),
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // âœ… En-tÃªte du projet
                        Card(
                          color: Colors.grey[900],
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Expanded(
                                      child: Text(
                                        _currentProject!.title,
                                        style: const TextStyle(
                                          fontSize: 24,
                                          color: Colors.white,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                    _buildStatusChip(_currentProject!.status),
                                  ],
                                ),
                                const SizedBox(height: 8),
                                if (_currentProject!.description.isNotEmpty) ...[
                                  Text(
                                    _currentProject!.description,
                                    style: const TextStyle(
                                      color: Colors.white70,
                                      fontSize: 16,
                                    ),
                                  ),
                                  const SizedBox(height: 16),
                                ],
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 16),

                        // âœ… Informations client
                        Card(
                          color: Colors.grey[900],
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text(
                                  'Client',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                _InfoRow('Nom', _currentProject!.clientName),
                                _InfoRow('Email', _currentProject!.clientEmail),
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 16),

                        // âœ… DÃ©tails du tatouage
                        Card(
                          color: Colors.grey[900],
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text(
                                  'DÃ©tails du tatouage',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                if (_currentProject!.category.isNotEmpty)
                                  _InfoRow('CatÃ©gorie', _currentProject!.category),
                                if (_currentProject!.style.isNotEmpty)
                                  _InfoRow('Style', _currentProject!.style),
                                if (_currentProject!.bodyPart.isNotEmpty)
                                  _InfoRow('Partie du corps', _currentProject!.bodyPart),
                                if (_currentProject!.size.isNotEmpty)
                                  _InfoRow('Taille', _currentProject!.size),
                                if (_currentProject!.colors.isNotEmpty)
                                  _InfoRow('Couleurs', _currentProject!.colors.join(', ')),
                                if (_currentProject!.difficulty.isNotEmpty)
                                  _InfoRow('DifficultÃ©', _currentProject!.difficulty),
                                if (_currentProject!.duration != null)
                                  _InfoRow('DurÃ©e estimÃ©e', '${_currentProject!.duration}h'),
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 16),

                        // âœ… Informations financiÃ¨res
                        if (_currentProject!.budget != null ||
                            _currentProject!.estimatedPrice != null ||
                            _currentProject!.finalPrice != null) ...[
                          Card(
                            color: Colors.grey[900],
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const Text(
                                    'Informations financiÃ¨res',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 18,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  if (_currentProject!.budget != null)
                                    _InfoRow('Budget client', '${_currentProject!.budget!.toStringAsFixed(0)}â‚¬'),
                                  if (_currentProject!.estimatedPrice != null)
                                    _InfoRow('Devis estimÃ©', '${_currentProject!.estimatedPrice!.toStringAsFixed(0)}â‚¬'),
                                  if (_currentProject!.finalPrice != null)
                                    _InfoRow('Prix final', '${_currentProject!.finalPrice!.toStringAsFixed(0)}â‚¬'),
                                  if (_currentProject!.deposit != null) ...[
                                    _InfoRow('Acompte', '${_currentProject!.deposit!.toStringAsFixed(0)}â‚¬'),
                                    _InfoRow('Acompte payÃ©', _currentProject!.depositPaid ? 'Oui' : 'Non'),
                                  ],
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(height: 16),
                        ],

                        // âœ… Images de rÃ©fÃ©rence
                        if (_currentProject!.referenceImages.isNotEmpty) ...[
                          Card(
                            color: Colors.grey[900],
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: _buildImageSection(
                                'Images de rÃ©fÃ©rence',
                                _currentProject!.referenceImages,
                              ),
                            ),
                          ),
                        ],

                        // âœ… Esquisses
                        if (_currentProject!.sketchImages.isNotEmpty) ...[
                          Card(
                            color: Colors.grey[900],
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: _buildImageSection(
                                'Esquisses',
                                _currentProject!.sketchImages,
                              ),
                            ),
                          ),
                        ],

                        // âœ… Images finales
                        if (_currentProject!.finalImages.isNotEmpty) ...[
                          Card(
                            color: Colors.grey[900],
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: _buildImageSection(
                                'RÃ©sultat final',
                                _currentProject!.finalImages,
                              ),
                            ),
                          ),
                        ],

                        // âœ… Dates importantes
                        Card(
                          color: Colors.grey[900],
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text(
                                  'Dates importantes',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                _InfoRow('CrÃ©Ã© le', _formatDate(_currentProject!.createdAt)),
                                _InfoRow('Mis Ã  jour le', _formatDate(_currentProject!.updatedAt)),
                                if (_currentProject!.appointmentDate != null)
                                  _InfoRow('Rendez-vous', _formatDate(_currentProject!.appointmentDate!)),
                                if (_currentProject!.completionDate != null)
                                  _InfoRow('TerminÃ© le', _formatDate(_currentProject!.completionDate!)),
                              ],
                            ),
                          ),
                        ),

                        // âœ… Notes
                        if (_currentProject!.notes.isNotEmpty) ...[
                          const SizedBox(height: 16),
                          Card(
                            color: Colors.grey[900],
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const Text(
                                    'Notes',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 18,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  Text(
                                    _currentProject!.notes,
                                    style: const TextStyle(color: Colors.white70),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],

                        // âœ… Bouton d'action
                        const SizedBox(height: 24),
                        if (_buildActionButton() != null) ...[
                          SizedBox(
                            width: double.infinity,
                            child: _buildActionButton()!,
                          ),
                          const SizedBox(height: 16),
                        ],
                      ],
                    ),
                  ),
                ),
    );
  }

  // âœ… Utilitaire: Formatage des dates
  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}

// âœ… Widget utilitaire pour afficher les informations
class _InfoRow extends StatelessWidget {
  final String label;
  final String value;

  const _InfoRow(this.label, this.value);

  @override
  Widget build(BuildContext context) {
    if (value.isEmpty) return const SizedBox.shrink();
    
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: const TextStyle(
                color: Colors.white70,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\home_page_pro.dart

import 'dart:math';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart'; // âœ… MIGRATION
import 'package:kipik_v5/models/user.dart';
import 'package:kipik_v5/core/database_manager.dart'; // âœ… AJOUTÃ‰ pour mode dÃ©mo

// Imports pour la navigation
import 'package:kipik_v5/pages/pro/agenda/pro_agenda_home_page.dart';
import 'package:kipik_v5/pages/pro/agenda/pro_agenda_notifications_page.dart';
import 'dashboard_page.dart';

// ModÃ¨les pour les rendez-vous
enum AppointmentType { consultation, session, retouche, suivi }

class TodayAppointment {
  final String id;
  final DateTime time;
  final String clientName;
  final String? projectName;
  final AppointmentType type;
  final Duration estimatedDuration;
  final String? notes;

  TodayAppointment({
    required this.id,
    required this.time,
    required this.clientName,
    this.projectName,
    required this.type,
    required this.estimatedDuration,
    this.notes,
  });
}

class HomePagePro extends StatefulWidget {
  const HomePagePro({Key? key}) : super(key: key);

  @override
  State<HomePagePro> createState() => _HomePageProState();
}

class _HomePageProState extends State<HomePagePro> {
  User? _user;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  bool _isLoading = true;

  // DonnÃ©es du profil/stats (adaptÃ©es selon le mode)
  double _monthlyRevenue = 3850.00;
  int _monthlyAppointments = 15;
  int _newClientsThisMonth = 7;
  int _notifications = 3;

  // Rendez-vous du jour
  late List<TodayAppointment> _todayAppointments;

  @override
  void initState() {
    super.initState();
    _initializeUser();
  }

  // âœ… MIGRATION: Utilise SecureAuthService
  Future<void> _initializeUser() async {
    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) {
        // Rediriger vers la page de connexion si pas d'utilisateur
        if (mounted) {
          Navigator.of(context).pushReplacementNamed('/login');
        }
        return;
      }

      setState(() {
        _user = currentUser;
      });

      // âœ… NOUVEAU : Adapter les donnÃ©es selon le mode (dÃ©mo/prod)
      await _loadUserData();
      _initializeTodayAppointments();

    } catch (e) {
      print('âŒ Erreur initialisation utilisateur: $e');
      if (mounted) {
        Navigator.of(context).pushReplacementNamed('/login');
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  // âœ… NOUVEAU : Charger les donnÃ©es utilisateur selon le mode
  Future<void> _loadUserData() async {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    if (isDemoMode) {
      // âœ… DonnÃ©es de dÃ©monstration plus variÃ©es
      final demoProfiles = [
        {
          'monthlyRevenue': 4250.00,
          'monthlyAppointments': 18,
          'newClientsThisMonth': 9,
          'notifications': 5,
        },
        {
          'monthlyRevenue': 3850.00,
          'monthlyAppointments': 15,
          'newClientsThisMonth': 7,
          'notifications': 3,
        },
        {
          'monthlyRevenue': 5100.00,
          'monthlyAppointments': 22,
          'newClientsThisMonth': 12,
          'notifications': 8,
        },
      ];

      final randomData = demoProfiles[Random().nextInt(demoProfiles.length)];
      
      setState(() {
        _monthlyRevenue = randomData['monthlyRevenue'] as double;
        _monthlyAppointments = randomData['monthlyAppointments'] as int;
        _newClientsThisMonth = randomData['newClientsThisMonth'] as int;
        _notifications = randomData['notifications'] as int;
      });

      print('ðŸŽ­ DonnÃ©es dÃ©mo chargÃ©es: ${_monthlyRevenue}â‚¬, ${_monthlyAppointments} RDV');
    } else {
      // TODO: Charger les vraies donnÃ©es depuis Firebase
      // Pour l'instant, garder les valeurs par dÃ©faut
      print('ðŸ­ Mode production: donnÃ©es par dÃ©faut utilisÃ©es');
    }
  }

  void _initializeTodayAppointments() {
    final now = DateTime.now();
    final isDemoMode = DatabaseManager.instance.isDemoMode;

    if (isDemoMode) {
      // âœ… DonnÃ©es de dÃ©monstration variÃ©es avec typage explicite
      final List<List<TodayAppointment>> demoAppointments = [
        [
          TodayAppointment(
            id: '1',
            time: DateTime(now.year, now.month, now.day, 9, 30),
            clientName: 'Emma Dubois',
            projectName: 'Rose minimaliste',
            type: AppointmentType.consultation,
            estimatedDuration: const Duration(hours: 1),
            notes: 'PremiÃ¨re consultation',
          ),
          TodayAppointment(
            id: '2',
            time: DateTime(now.year, now.month, now.day, 14, 0),
            clientName: 'Lucas Martin',
            projectName: 'Dragon japonais',
            type: AppointmentType.session,
            estimatedDuration: const Duration(hours: 4),
            notes: 'Session complÃ¨te',
          ),
          TodayAppointment(
            id: '3',
            time: DateTime(now.year, now.month, now.day, 19, 0),
            clientName: 'Sophie Petit',
            type: AppointmentType.suivi,
            estimatedDuration: const Duration(minutes: 30),
            notes: 'ContrÃ´le cicatrisation',
          ),
        ],
        [
          TodayAppointment(
            id: '1',
            time: DateTime(now.year, now.month, now.day, 10, 0),
            clientName: 'Marie Dubois',
            projectName: 'Rose gÃ©omÃ©trique',
            type: AppointmentType.consultation,
            estimatedDuration: const Duration(hours: 1),
            notes: 'PremiÃ¨re consultation',
          ),
          TodayAppointment(
            id: '2',
            time: DateTime(now.year, now.month, now.day, 14, 30),
            clientName: 'Jean Martin',
            projectName: 'Tribal bras',
            type: AppointmentType.session,
            estimatedDuration: const Duration(hours: 3),
            notes: 'Session 2/3',
          ),
        ],
        <TodayAppointment>[], // JournÃ©e libre pour varier (avec typage explicite)
      ];

      _todayAppointments = demoAppointments[Random().nextInt(demoAppointments.length)];
    } else {
      // TODO: Charger les vrais rendez-vous depuis Firebase
      _todayAppointments = [
        TodayAppointment(
          id: '1',
          time: DateTime(now.year, now.month, now.day, 10, 0),
          clientName: 'Marie Dubois',
          projectName: 'Rose gÃ©omÃ©trique',
          type: AppointmentType.consultation,
          estimatedDuration: const Duration(hours: 1),
          notes: 'PremiÃ¨re consultation',
        ),
      ];
    }
  }

  String _getGreeting() {
    final hour = DateTime.now().hour;
    if (hour < 12) return "Bonjour";
    if (hour < 18) return "Bon aprÃ¨s-midi";
    return "Bonsoir";
  }

  void _openDrawer() {
    _scaffoldKey.currentState?.openEndDrawer();
  }

  void _handleNotifications() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => const ProAgendaNotificationsPage(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Protection si l'utilisateur n'est pas initialisÃ©
    if (_isLoading || _user == null) {
      return Scaffold(
        backgroundColor: const Color(0xFF0A0A0A),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const CircularProgressIndicator(
                color: Colors.white,
              ),
              const SizedBox(height: 16),
              Text(
                'Chargement de votre espace...',
                style: TextStyle(
                  color: Colors.white.withOpacity(0.7),
                  fontFamily: 'Roboto',
                ),
              ),
              // âœ… Indicateur du mode si en cours de chargement
              if (DatabaseManager.instance.isDemoMode) ...[
                const SizedBox(height: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.orange),
                  ),
                  child: Text(
                    'ðŸŽ­ ${DatabaseManager.instance.activeDatabaseConfig.name}',
                    style: const TextStyle(
                      color: Colors.orange,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ],
          ),
        ),
      );
    }

    return WillPopScope(
      onWillPop: () async => false,
      child: Scaffold(
        key: _scaffoldKey,
        backgroundColor: const Color(0xFF0A0A0A),
        extendBodyBehindAppBar: true,
        endDrawer: const CustomDrawerKipik(),
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          automaticallyImplyLeading: false,
          title: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text(
                'Espace Pro',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.w400,
                ),
              ),
              // âœ… Indicateur mode dÃ©mo dans l'AppBar
              if (DatabaseManager.instance.isDemoMode) ...[
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.orange),
                  ),
                  child: Text(
                    'ðŸŽ­ ${DatabaseManager.instance.activeDatabaseConfig.name.split(' ').first}',
                    style: const TextStyle(
                      color: Colors.orange,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ],
          ),
          centerTitle: true,
          actions: [
            Container(
              margin: const EdgeInsets.only(right: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Stack(
                children: [
                  IconButton(
                    icon: const Icon(
                      Icons.notifications_outlined,
                      color: Colors.white,
                      size: 24,
                    ),
                    onPressed: _handleNotifications,
                  ),
                  if (_notifications > 0)
                    Positioned(
                      right: 8,
                      top: 8,
                      child: Container(
                        padding: const EdgeInsets.all(4),
                        decoration: BoxDecoration(
                          color: KipikTheme.rouge,
                          borderRadius: BorderRadius.circular(10),
                        ),
                        constraints: const BoxConstraints(
                          minWidth: 18,
                          minHeight: 18,
                        ),
                        child: Text(
                          '$_notifications',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Roboto',
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                ],
              ),
            ),
            Container(
              margin: const EdgeInsets.only(right: 16),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: IconButton(
                icon: const Icon(
                  Icons.menu,
                  color: Colors.white,
                  size: 24,
                ),
                onPressed: _openDrawer,
              ),
            ),
          ],
        ),
        floatingActionButton: const TattooAssistantButton(
          allowImageGeneration: false,
        ),
        body: SafeArea(
          bottom: true,
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 24),

                // Carte de profil avec stats intÃ©grÃ©es
                _buildProfileCard(),
                
                const SizedBox(height: 32),
                
                // Titre planning du jour
                _buildSectionHeader(
                  'Planning d\'aujourd\'hui',
                  Icons.calendar_today,
                  _todayAppointments.length,
                ),
                
                const SizedBox(height: 16),
                
                // Planning du jour
                _buildTodaySchedule(),
                
                const SizedBox(height: 32),
                
                // Bouton dashboard complet
                _buildDashboardButton(),
                
                const SizedBox(height: 32),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildProfileCard() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 24,
            offset: const Offset(0, 8),
          ),
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 6,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte profil
          Row(
            children: [
              GestureDetector(
                onTap: _pickProfileImage,
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: KipikTheme.rouge.withOpacity(0.2),
                        blurRadius: 8,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(16),
                    child: Container(
                      width: 80,
                      height: 80,
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: KipikTheme.rouge.withOpacity(0.3),
                          width: 2,
                        ),
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: _user!.profileImageUrl?.isNotEmpty == true
                          ? Image.network(
                              _user!.profileImageUrl!,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) =>
                                  Image.asset(
                                'assets/avatars/avatar_neutre.png',
                                fit: BoxFit.cover,
                              ),
                            )
                          : Image.asset(
                              'assets/avatars/avatar_neutre.png',
                              fit: BoxFit.cover,
                            ),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 20),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _getGreeting(),
                      style: const TextStyle(
                        fontSize: 16,
                        color: Color(0xFF6B7280),
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _user!.displayName, // âœ… MIGRATION: Utilise displayName
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 24,
                        color: Color(0xFF111827),
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: const Color(0xFF0A0A0A),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Text(
                        _user!.role.name, // âœ… MIGRATION: Utilise le rÃ´le du modÃ¨le User
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontFamily: 'Roboto',
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),

          const SizedBox(height: 28),
          
          // Titre des rÃ©capitulatifs mensuels
          Row(
            children: [
              Icon(
                Icons.calendar_month_outlined,
                color: KipikTheme.rouge,
                size: 18,
              ),
              const SizedBox(width: 8),
              const Text(
                'RÃ©capitulatifs du mois',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Color(0xFF6B7280),
                  fontWeight: FontWeight.w600,
                ),
              ),
              // âœ… Indicateur si donnÃ©es de dÃ©mo
              if (DatabaseManager.instance.isDemoMode) ...[
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: const Text(
                    'DÃ©mo',
                    style: TextStyle(
                      color: Colors.orange,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Stats du mois en mini-cartes
          Row(
            children: [
              Expanded(
                child: _buildStatMiniCard(
                  'Chiffre d\'affaires',
                  '${_monthlyRevenue.toStringAsFixed(0)}â‚¬',
                  Icons.trending_up,
                  const Color(0xFF10B981),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatMiniCard(
                  'Rendez-vous',
                  '$_monthlyAppointments',
                  Icons.event,
                  const Color(0xFF3B82F6),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatMiniCard(
                  'Nouveaux clients',
                  '$_newClientsThisMonth',
                  Icons.person_add,
                  const Color(0xFF8B5CF6),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatMiniCard(String label, String value, IconData icon, Color color) {
    return Container(
      height: 120,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.06),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: color.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(icon, color: color, size: 18),
          ),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 15,
              color: color,
              fontWeight: FontWeight.w400,
            ),
            textAlign: TextAlign.center,
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
          Text(
            label,
            textAlign: TextAlign.center,
            style: const TextStyle(
              fontSize: 10,
              color: Color(0xFF6B7280),
              fontFamily: 'Roboto',
              fontWeight: FontWeight.w500,
            ),
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }

  Widget _buildSectionHeader(String title, IconData icon, int count) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: KipikTheme.rouge.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Icon(
            icon,
            color: KipikTheme.rouge,
            size: 20,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.white,
              fontWeight: FontWeight.w400,
            ),
          ),
        ),
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Text(
            '$count',
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.white,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTodaySchedule() {
    if (_todayAppointments.isEmpty) {
      return Container(
        width: double.infinity,
        padding: const EdgeInsets.all(32),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.04),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFFF3F4F6),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Icon(
                Icons.free_breakfast,
                size: 32,
                color: const Color(0xFF6B7280),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Aucun rendez-vous',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Color(0xFF111827),
                fontWeight: FontWeight.w400,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              DatabaseManager.instance.isDemoMode 
                  ? 'JournÃ©e libre en mode dÃ©mo !'
                  : 'Profitez de cette journÃ©e libre pour vous reposer !',
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF6B7280),
                fontFamily: 'Roboto',
                fontWeight: FontWeight.w400,
              ),
            ),
          ],
        ),
      );
    }

    return Column(
      children: _todayAppointments.map((appointment) => 
        _buildAppointmentCard(appointment)
      ).toList(),
    );
  }

  Widget _buildAppointmentCard(TodayAppointment appointment) {
    final typeColor = _getAppointmentTypeColor(appointment.type);
    final typeLabel = _getAppointmentTypeLabel(appointment.type);

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          // Heure et durÃ©e
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: typeColor.withOpacity(0.1),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              children: [
                Text(
                  '${appointment.time.hour.toString().padLeft(2, '0')}:${appointment.time.minute.toString().padLeft(2, '0')}',
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: typeColor,
                    fontWeight: FontWeight.w400,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  '${appointment.estimatedDuration.inMinutes}min',
                  style: TextStyle(
                    fontSize: 10,
                    color: typeColor.withOpacity(0.7),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(width: 16),
          
          // Informations du RDV
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  appointment.clientName,
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Color(0xFF111827),
                    fontWeight: FontWeight.w400,
                  ),
                ),
                if (appointment.projectName != null) ...[
                  const SizedBox(height: 4),
                  Text(
                    appointment.projectName!,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Color(0xFF6B7280),
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ],
                const SizedBox(height: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: typeColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    typeLabel,
                    style: TextStyle(
                      fontSize: 11,
                      color: typeColor,
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Bouton action
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: typeColor.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              Icons.arrow_forward_ios,
              color: typeColor,
              size: 16,
            ),
          ),
        ],
      ),
    );
  }

  Color _getAppointmentTypeColor(AppointmentType type) {
    switch (type) {
      case AppointmentType.consultation:
        return const Color(0xFF3B82F6);
      case AppointmentType.session:
        return KipikTheme.rouge;
      case AppointmentType.retouche:
        return const Color(0xFFF59E0B);
      case AppointmentType.suivi:
        return const Color(0xFF10B981);
    }
  }

  String _getAppointmentTypeLabel(AppointmentType type) {
    switch (type) {
      case AppointmentType.consultation:
        return 'Consultation';
      case AppointmentType.session:
        return 'SÃ©ance tatouage';
      case AppointmentType.retouche:
        return 'Retouche';
      case AppointmentType.suivi:
        return 'Suivi';
    }
  }

  Widget _buildDashboardButton() {
    return Container(
      width: double.infinity,
      height: 60,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            KipikTheme.rouge,
            KipikTheme.rouge.withOpacity(0.8),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: KipikTheme.rouge.withOpacity(0.3),
            blurRadius: 16,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(20),
          onTap: () => Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => const DashboardPage(),
            ),
          ),
          child: const Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.dashboard_outlined,
                color: Colors.white,
                size: 24,
              ),
              SizedBox(width: 12),
              Text(
                'Tableau de bord complet',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // âœ… MIGRATION: Mise Ã  jour vers SecureAuthService
  Future<void> _pickProfileImage() async {
    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? image = await openFile(acceptedTypeGroups: [typeGroup]);

    if (image != null) {
      try {
        // TODO: Upload vers Firebase Storage et mettre Ã  jour le profil utilisateur
        // await SecureAuthService.instance.updateUserProfile(
        //   profileImageUrl: uploadedImageUrl,
        // );
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text(
                'Photo de profil mise Ã  jour !',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontWeight: FontWeight.w500,
                ),
              ),
              backgroundColor: const Color(0xFF10B981),
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Erreur lors de la mise Ã  jour: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\inscription_pro_page.dart

// lib/pages/pro/inscription_pro_page.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/utils/cgu_cgv_validation_widget.dart';
import 'confirmation_inscription_pro_page.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/services/promo/firebase_promo_code_service.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class InscriptionProPage extends StatefulWidget {
  InscriptionProPage({
    Key? key, 
    SecureAuthService? authService
  }) : authService = authService ?? SecureAuthService.instance,
       super(key: key);

  final SecureAuthService authService;

  @override
  State<InscriptionProPage> createState() => _InscriptionProPageState();
}

class _InscriptionProPageState extends State<InscriptionProPage> {
  final _formKey = GlobalKey<FormState>();

  // â”€â”€â”€ Shop & tatoueur info â”€â”€â”€
  final _shopName       = TextEditingController();
  final _shopAddress    = TextEditingController();
  final _tatoueurPrenom = TextEditingController();
  final _tatoueurNom    = TextEditingController();
  DateTime? _birthDate;
  String? _societeForme;
  final _siren          = TextEditingController();

  // â”€â”€â”€ CoordonnÃ©es pro â”€â”€â”€
  final _phonePro       = TextEditingController();
  final _emailPro       = TextEditingController();

  // â”€â”€â”€ Authentification â”€â”€â”€
  final _email          = TextEditingController();
  final _password       = TextEditingController();
  final _confirm        = TextEditingController();

  // â”€â”€â”€ Code promo â”€â”€â”€
  final _promoCode      = TextEditingController();
  Map<String, dynamic>? _validatedPromoCode;
  bool _isValidatingPromo = false;

  // â”€â”€â”€ PiÃ¨ces Ã  transmettre â”€â”€â”€
  XFile? _idDocument;
  XFile? _hygieneCert;
  XFile? _kbis;
  XFile? _rib;

  // â”€â”€â”€ Newsletter & CGU/CGV â”€â”€â”€
  bool _newsletter     = false;
  bool _cguAccepted    = false;
  bool _cgvAccepted    = false;
  bool _showPassword   = false;
  bool _showConfirm    = false;

  // âœ… NOUVEAU: Variables pour la vÃ©rification d'Ã¢ge
  bool majoriteConfirmee = false; // âœ… Certification majoritÃ©
  String? ageError; // âœ… Erreur d'Ã¢ge

  // Nombre d'inscrits actuel
  final int _currentSignupCount = 45;
  static const int _promoLimit = 100;

  @override
  void dispose() {
    _shopName.dispose();
    _shopAddress.dispose();
    _tatoueurPrenom.dispose();
    _tatoueurNom.dispose();
    _siren.dispose();
    _phonePro.dispose();
    _emailPro.dispose();
    _email.dispose();
    _password.dispose();
    _confirm.dispose();
    _promoCode.dispose();
    super.dispose();
  }

  // âœ… NOUVEAU: MÃ©thode de vÃ©rification d'Ã¢ge
  bool _isOver18(DateTime birthDate) {
    final today = DateTime.now();
    final age = today.year - birthDate.year;
    
    // VÃ©rification prÃ©cise avec mois et jour
    if (today.month < birthDate.month || 
        (today.month == birthDate.month && today.day < birthDate.day)) {
      return age - 1 >= 18;
    }
    return age >= 18;
  }

  // âœ… MISE Ã€ JOUR: Validation avec vÃ©rification d'Ã¢ge
  bool get _canSubmit =>
      _formKey.currentState?.validate() == true &&
      _shopName.text.isNotEmpty &&
      _shopAddress.text.isNotEmpty &&
      _tatoueurPrenom.text.isNotEmpty &&
      _tatoueurNom.text.isNotEmpty &&
      _birthDate     != null &&
      majoriteConfirmee && // âœ… Certification obligatoire
      (_birthDate != null ? _isOver18(_birthDate!) : false) && // âœ… VÃ©rification Ã¢ge
      _societeForme  != null &&
      _siren.text.isNotEmpty &&
      _phonePro.text.isNotEmpty &&
      _emailPro.text.isNotEmpty &&
      _email.text.isNotEmpty &&
      _password.text.isNotEmpty &&
      _confirm.text.isNotEmpty &&
      _idDocument    != null &&
      _hygieneCert   != null &&
      _kbis          != null &&
      _rib           != null &&
      _cguAccepted   &&
      _cgvAccepted;

  Future<void> _validatePromoCode() async {
    final code = _promoCode.text.trim();
    if (code.isEmpty) return;

    setState(() => _isValidatingPromo = true);

    try {
      final promoData = await FirebasePromoCodeService.instance.validatePromoCode(code);
      
      if (!mounted) return;
      
      setState(() {
        _validatedPromoCode = promoData;
        _isValidatingPromo = false;
      });

      if (promoData != null) {
        String message = 'Code promo valide ! âœ…';
        final type = promoData['type'] as String?;
        final value = promoData['value'] as num?;
        
        if (type == 'referral') {
          message += '\nCode de parrainage validÃ© ! RÃ©duction appliquÃ©e sur votre futur abonnement.';
        } else if (type == 'percentage' && value != null) {
          message += '\n${value.toInt()}% de rÃ©duction appliquÃ©e sur votre futur abonnement !';
        } else if (type == 'fixed' && value != null) {
          message += '\n${value.toInt()}â‚¬ de rÃ©duction appliquÃ©e sur votre futur abonnement !';
        }
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(message),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Code promo invalide ou expirÃ© âŒ'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (!mounted) return;
      
      setState(() => _isValidatingPromo = false);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Erreur lors de la validation du code'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // âœ… CORRECTION : MÃ©thode sans recordReferral
  Future<void> _submitForm() async {
    try {
      // CrÃ©er l'utilisateur avec Firebase Auth
      final user = await widget.authService.createUserWithEmailAndPassword(
        email: _email.text.trim(),
        password: _password.text.trim(),
        displayName: '${_tatoueurPrenom.text.trim()} ${_tatoueurNom.text.trim()}',
        userRole: 'tatoueur',
      );

      if (user == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Erreur lors de la crÃ©ation du compte')),
        );
        return;
      }

      // Calcul des dates d'essai
      final now = DateTime.now();
      final trialEndDate = now.add(const Duration(days: 30));

      // Mettre Ã  jour le profil avec essai 30 jours
      await widget.authService.updateUserProfile(
        additionalData: {
          'shopName': _shopName.text.trim(),
          'shopAddress': _shopAddress.text.trim(),
          'birthDate': _birthDate?.toIso8601String(),
          'societeForme': _societeForme,
          'siren': _siren.text.trim(),
          'phonePro': _phonePro.text.trim(),
          'emailPro': _emailPro.text.trim(),
          'newsletter': _newsletter,
          'role': 'tatoueur',
          'majoriteConfirmee': majoriteConfirmee, // âœ… Enregistrement de la certification
          
          // DonnÃ©es d'essai 30 jours
          'subscriptionType': 'trial',
          'trialStartDate': now.toIso8601String(),
          'trialEndDate': trialEndDate.toIso8601String(),
          'trialDaysRemaining': 30,
          'subscriptionStatus': 'trial_active',
          'mustChooseSubscription': false,
          
          // Documents uploadÃ©s
          'documents': {
            'idDocument': _idDocument?.name,
            'hygieneCert': _hygieneCert?.name,
            'kbis': _kbis?.name,
            'rib': _rib?.name,
          },
        },
      );

      // âœ… CORRECTION : Gestion simplifiÃ©e du code promo
      if (_validatedPromoCode != null) {
        final code = _validatedPromoCode!['code'] as String;
        
        try {
          // Marquer le code comme utilisÃ©
          await FirebasePromoCodeService.instance.usePromoCode(code);
          
          // Sauvegarder le code promo pour application future
          await widget.authService.updateUserProfile(
            additionalData: {
              'pendingPromoCode': {
                'code': code,
                'type': _validatedPromoCode!['type'],
                'value': _validatedPromoCode!['value'],
                'description': _validatedPromoCode!['description'],
                'appliedAt': DateTime.now().toIso8601String(),
                'createdBy': _validatedPromoCode!['createdBy'], // Pour les parrainages
              }
            },
          );
          
          print('âœ… Code promo sauvegardÃ© pour application future');
        } catch (e) {
          print('âš ï¸ Erreur lors de la sauvegarde du code promo: $e');
          // Ne pas bloquer l'inscription pour une erreur de code promo
        }
      }

      // Redirection vers la page de confirmation
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (_) => const ConfirmationInscriptionProPage(),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Erreur: $e')),
        );
      }
    }
  }

  String? _required(String? v) =>
      (v == null || v.trim().isEmpty) ? 'Champ obligatoire' : null;

  String? _validateEmail(String? v) {
    if (v == null || v.isEmpty) return 'Email requis';
    final reg = RegExp(r'^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$');
    if (!reg.hasMatch(v.trim())) return 'Email invalide';
    return null;
  }

  String? _validatePassword(String? v) {
    if (v == null || v.isEmpty) return 'Mot de passe requis';
    if (v.length < 6) return '6 caractÃ¨res minimum';
    return null;
  }

  String? _validateConfirm(String? v) {
    if (v != _password.text) return 'Les mots de passe ne correspondent pas';
    return null;
  }

  // âœ… OPTIMISÃ‰: InputDecoration compact avec PermanentMarker
  InputDecoration _decoration(String label, {Widget? suffixIcon}) => InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(
          fontFamily: 'PermanentMarker', // âœ… PermanentMarker conservÃ©
          fontSize: 11, // âœ… Taille rÃ©duite mais lisible
          color: Colors.black87,
          height: 0.9, // âœ… Interligne serrÃ© pour Ã©conomiser l'espace
        ),
        floatingLabelStyle: const TextStyle(
          fontFamily: 'PermanentMarker', 
          fontSize: 12, // âœ… Taille contrÃ´lÃ©e quand il flotte
          color: Colors.black87,
          height: 0.9,
        ),
        filled: true,
        fillColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 14, 
          vertical: 18, // âœ… Juste assez d'espace pour le label flottant
        ),
        isDense: true, // âœ… CRUCIAL: RÃ©duit la hauteur globale du champ
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: KipikTheme.rouge, width: 1.5),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: KipikTheme.rouge, width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.red, width: 1.5),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.red, width: 2),
        ),
        errorStyle: const TextStyle(
          fontFamily: 'PermanentMarker',
          fontSize: 10, // âœ… Erreurs compactes
          color: Colors.red,
          height: 1.0,
        ),
        suffixIcon: suffixIcon ?? (label == 'Mot de passe' || label == 'Confirmer mot de passe'
            ? IconButton(
                icon: Icon(
                  label == 'Mot de passe'
                      ? (_showPassword ? Icons.visibility_off : Icons.visibility)
                      : (_showConfirm ? Icons.visibility_off : Icons.visibility),
                  color: KipikTheme.rouge,
                ),
                onPressed: () {
                  setState(() {
                    if (label == 'Mot de passe') _showPassword = !_showPassword;
                    else _showConfirm = !_showConfirm;
                  });
                },
              )
            : null),
      );

  // âœ… NOUVEAU: Widget de certification de majoritÃ©
  Widget _buildMajoriteConfirmation() {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: majoriteConfirmee ? Colors.green.withOpacity(0.1) : Colors.orange.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: majoriteConfirmee ? Colors.green : Colors.orange,
          width: 2,
        ),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Checkbox(
                value: majoriteConfirmee,
                onChanged: _birthDate != null && _isOver18(_birthDate!) 
                    ? (value) => setState(() => majoriteConfirmee = value!) 
                    : null, // âœ… DÃ©sactivÃ© si pas majeur
                activeColor: KipikTheme.rouge,
              ),
              Expanded(
                child: Text(
                  "Je certifie avoir plus de 18 ans *",
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 14,
                    color: _birthDate != null && _isOver18(_birthDate!) 
                        ? Colors.white 
                        : Colors.grey,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              Icon(
                majoriteConfirmee ? Icons.check_circle : Icons.warning,
                color: majoriteConfirmee ? Colors.green : Colors.orange,
              ),
            ],
          ),
          if (ageError != null) // âœ… Affichage de l'erreur d'Ã¢ge
            Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Row(
                children: [
                  const Icon(Icons.error, color: Colors.red, size: 16),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      ageError!,
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 11,
                        color: Colors.red,
                      ),
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  // âœ… Widget titres de sections avec headers tattoo (sans emoji dans le texte)
  Widget _buildSectionTitleWithHeader(String title, IconData icon, {int headerIndex = 1}) {
    final headers = [
      'assets/images/header_tattoo_wallpaper.png',
      'assets/images/header_tattoo_wallpaper2.png', 
      'assets/images/header_tattoo_wallpaper3.png',
    ];
    
    final headerImage = headers[(headerIndex - 1) % headers.length];

    return Container(
      padding: const EdgeInsets.all(16),
      margin: const EdgeInsets.only(bottom: 20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        image: DecorationImage(
          image: AssetImage(headerImage),
          fit: BoxFit.cover,
          colorFilter: ColorFilter.mode(
            Colors.white.withOpacity(0.6),
            BlendMode.lighten,
          ),
        ),
        border: Border.all(color: KipikTheme.rouge, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            icon,
            color: KipikTheme.rouge,
            size: 20,
            shadows: [
              Shadow(
                color: Colors.white.withOpacity(0.8),
                blurRadius: 2,
                offset: const Offset(1, 1),
              ),
            ],
          ),
          const SizedBox(width: 8),
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
              fontWeight: FontWeight.bold,
              shadows: [
                Shadow(
                  color: Colors.white,
                  blurRadius: 3,
                  offset: Offset(1, 1),
                ),
              ],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  bool get _isReferralCode {
    return _validatedPromoCode?['type'] == 'referral';
  }

  String? get _referrerEmail {
    if (!_isReferralCode) return null;
    final createdBy = _validatedPromoCode?['createdBy'] as String?;
    return _validatedPromoCode?['description']?.toString().split(' pour ').last ?? 'Utilisateur';
  }

  @override
  Widget build(BuildContext context) {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    final bg = backgrounds[Random().nextInt(backgrounds.length)];

    final remaining = max(0, _promoLimit - _currentSignupCount);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Inscription Professionnel',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(bg, fit: BoxFit.cover),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.fromLTRB(24, 16, 24, 24),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Bandeau essai gratuit 30 jours
                    Container(
                      padding: const EdgeInsets.all(16),
                      margin: const EdgeInsets.only(bottom: 20),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [Colors.green.shade400, Colors.green.shade600],
                        ),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.green, width: 2),
                      ),
                      child: const Column(
                        children: [
                          Icon(
                            Icons.celebration,
                            color: Colors.white,
                            size: 32,
                          ),
                          SizedBox(height: 8),
                          Text(
                            'ESSAI GRATUIT 30 JOURS',
                            style: TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 18,
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          SizedBox(height: 4),
                          Text(
                            'Profitez de toutes les fonctionnalitÃ©s pendant 30 jours.\nVous choisirez votre abonnement Ã  la fin de la pÃ©riode.',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              color: Colors.white,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),

                    // âœ… Section Code promo avec header tattoo
                    _buildSectionTitleWithHeader('Code promo', Icons.card_giftcard, headerIndex: 1),
                    
                    Container(
                      padding: const EdgeInsets.all(16),
                      margin: const EdgeInsets.only(bottom: 20),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.9),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: KipikTheme.rouge, width: 2),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const Text(
                            'BÃ©nÃ©ficiez d\'une rÃ©duction sur votre futur abonnement',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                              fontStyle: FontStyle.italic,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 12),
                          Row(
                            children: [
                              Expanded(
                                child: TextFormField(
                                  controller: _promoCode,
                                  decoration: _decoration('Code promo (optionnel)'),
                                  style: const TextStyle(
                                    fontFamily: 'Roboto',
                                    color: Colors.black87,
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                  ),
                                  textCapitalization: TextCapitalization.characters,
                                ),
                              ),
                              const SizedBox(width: 8),
                              ElevatedButton(
                                onPressed: _isValidatingPromo ? null : _validatePromoCode,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: KipikTheme.rouge,
                                  foregroundColor: Colors.white,
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 16,
                                    vertical: 16,
                                  ),
                                ),
                                child: _isValidatingPromo
                                    ? const SizedBox(
                                        width: 20,
                                        height: 20,
                                        child: CircularProgressIndicator(
                                          color: Colors.white,
                                          strokeWidth: 2,
                                        ),
                                      )
                                    : const Text('Valider'),
                              ),
                            ],
                          ),
                          if (_validatedPromoCode != null) ...[
                            const SizedBox(height: 8),
                            Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: Colors.green.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(color: Colors.green),
                              ),
                              child: Column(
                                children: [
                                  Text(
                                    _isReferralCode
                                        ? 'âœ… Code de parrainage validÃ© !'
                                        : _validatedPromoCode!['type'] == 'percentage'
                                        ? 'âœ… ${(_validatedPromoCode!['value'] as num).toInt()}% de rÃ©duction sur votre futur abonnement !'
                                        : 'âœ… ${(_validatedPromoCode!['value'] as num).toInt()}â‚¬ de rÃ©duction sur votre futur abonnement !',
                                    style: const TextStyle(
                                      color: Colors.green,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    textAlign: TextAlign.center,
                                  ),
                                  if (_isReferralCode) ...[
                                    const SizedBox(height: 4),
                                    Text(
                                      'ParrainÃ© par: ${_referrerEmail ?? 'Utilisateur'}',
                                      style: const TextStyle(
                                        color: Colors.green,
                                        fontSize: 12,
                                      ),
                                      textAlign: TextAlign.center,
                                    ),
                                  ],
                                ],
                              ),
                            ),
                          ],
                        ],
                      ),
                    ),

                    // âœ… Section Shop avec header tattoo
                    _buildSectionTitleWithHeader('Informations du shop', Icons.store, headerIndex: 2),

                    TextFormField(
                      controller: _shopName,
                      decoration: _decoration('Nom du shop'),
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _required,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _shopAddress,
                      decoration: _decoration('Adresse du shop'),
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _required,
                    ),

                    const SizedBox(height: 20),
                    
                    // âœ… Section Tatoueur avec header tattoo
                    _buildSectionTitleWithHeader('Informations personnelles', Icons.person, headerIndex: 3),
                    
                    TextFormField(
                      controller: _tatoueurPrenom,
                      decoration: _decoration('PrÃ©nom'),
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _required,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _tatoueurNom,
                      decoration: _decoration('Nom'),
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _required,
                    ),

                    const SizedBox(height: 12),
                    
                    // âœ… MISE Ã€ JOUR: Date de naissance avec validation d'Ã¢ge
                    InkWell(
                      onTap: () async {
                        final now = DateTime.now();
                        final pick = await showDatePicker(
                          context: context,
                          initialDate: _birthDate ?? DateTime(now.year - 25),
                          firstDate: DateTime(1900),
                          lastDate: now,
                          locale: const Locale('fr'),
                          builder: (ctx, child) => Theme(
                            data: Theme.of(context).copyWith(
                              colorScheme: ColorScheme.light(
                                primary: KipikTheme.rouge,
                                onPrimary: Colors.white,
                                surface: Colors.white,
                                onSurface: Colors.black,
                              ),
                              textButtonTheme: TextButtonThemeData(
                                style: TextButton.styleFrom(
                                  foregroundColor: KipikTheme.rouge,
                                ),
                              ),
                            ),
                            child: child!,
                          ),
                        );
                        
                        if (pick != null) {
                          setState(() {
                            _birthDate = pick;
                            
                            // âœ… VALIDATION AUTOMATIQUE D'Ã‚GE
                            if (!_isOver18(pick)) {
                              ageError = "Vous devez avoir au moins 18 ans pour vous inscrire";
                              majoriteConfirmee = false;
                            } else {
                              ageError = null;
                              // Ne pas cocher automatiquement, l'utilisateur doit le faire
                            }
                          });
                        }
                      },
                      child: InputDecorator(
                        decoration: _decoration('Date de naissance').copyWith(
                          // âœ… Bordure rouge si mineur
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(
                              color: _birthDate != null && !_isOver18(_birthDate!) 
                                  ? Colors.red 
                                  : KipikTheme.rouge, 
                              width: 1.5
                            ),
                          ),
                        ),
                        child: Row(
                          children: [
                            Expanded(
                              child: Text(
                                _birthDate == null
                                    ? 'SÃ©lectionner la date'
                                    : '${_birthDate!.day}/${_birthDate!.month}/${_birthDate!.year}',
                                style: TextStyle(
                                  fontFamily: 'Roboto', 
                                  color: _birthDate == null ? Colors.grey : Colors.black87,
                                  fontSize: 16,
                                ),
                              ),
                            ),
                            if (_birthDate != null)
                              Icon(
                                _isOver18(_birthDate!) ? Icons.check_circle : Icons.error,
                                color: _isOver18(_birthDate!) ? Colors.green : Colors.red,
                              ),
                          ],
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 12),
                    
                    // âœ… NOUVEAU: Widget de certification de majoritÃ©
                    _buildMajoriteConfirmation(),

                    // Forme juridique
                    DropdownButtonFormField<String>(
                      value: _societeForme,
                      decoration: _decoration('Forme juridique'),
                      items: const [
                        DropdownMenuItem(
                            value: 'Autoâ€‘entreprise',
                            child: Text('Autoâ€‘entreprise')),
                        DropdownMenuItem(
                            value: 'SociÃ©tÃ©', child: Text('SociÃ©tÃ©')),
                      ],
                      onChanged: (v) => setState(() => _societeForme = v),
                      validator: (v) => v == null ? 'Champ obligatoire' : null,
                      dropdownColor: Colors.white,
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                    ),

                    const SizedBox(height: 12),
                    // SIREN
                    TextFormField(
                      controller: _siren,
                      decoration: _decoration('SIREN'),
                      keyboardType: TextInputType.number,
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _required,
                    ),

                    const SizedBox(height: 20),
                    
                    // âœ… Section CoordonnÃ©es avec header tattoo
                    _buildSectionTitleWithHeader('CoordonnÃ©es professionnelles', Icons.business, headerIndex: 1),
                    
                    TextFormField(
                      controller: _phonePro,
                      decoration: _decoration('TÃ©lÃ©phone pro'),
                      keyboardType: TextInputType.phone,
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _required,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _emailPro,
                      decoration: _decoration('Email pro'),
                      keyboardType: TextInputType.emailAddress,
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _validateEmail,
                    ),

                    const SizedBox(height: 20),
                    
                    // âœ… Section Documents avec header tattoo
                    _buildSectionTitleWithHeader('Documents obligatoires', Icons.folder, headerIndex: 2),
                    
                    for (var btn in [
                      ['Joindre piÃ¨ce d\'identitÃ©', () async {
                        final fg = XTypeGroup(
                            label: 'docs', extensions: ['jpg', 'png', 'pdf']);
                        final f = await openFile(acceptedTypeGroups: [fg]);
                        if (f != null) setState(() => _idDocument = f);
                      }, _idDocument != null],
                      ['Joindre certif. d\'hygiÃ¨ne', () async {
                        final fg = XTypeGroup(
                            label: 'docs', extensions: ['jpg', 'png', 'pdf']);
                        final f = await openFile(acceptedTypeGroups: [fg]);
                        if (f != null) setState(() => _hygieneCert = f);
                      }, _hygieneCert != null],
                      ['Joindre KBIS < 3 mois', () async {
                        final fg = XTypeGroup(
                            label: 'docs', extensions: ['jpg', 'png', 'pdf']);
                        final f = await openFile(acceptedTypeGroups: [fg]);
                        if (f != null) setState(() => _kbis = f);
                      }, _kbis != null],
                      ['Joindre RIB (prÃ©lÃ¨vements SEPA)', () async {
                        final fg = XTypeGroup(
                            label: 'docs', extensions: ['jpg', 'png', 'pdf']);
                        final f = await openFile(acceptedTypeGroups: [fg]);
                        if (f != null) setState(() => _rib = f);
                      }, _rib != null],
                    ]) ...[
                      ElevatedButton(
                        onPressed: btn[1] as VoidCallback,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: (btn[2] as bool) 
                              ? Colors.green 
                              : KipikTheme.rouge,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12)),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              btn[0] as String,
                              style: const TextStyle(
                                  fontFamily: 'PermanentMarker', fontSize: 16),
                            ),
                            if (btn[2] as bool) ...[
                              const SizedBox(width: 8),
                              const Icon(Icons.check_circle, color: Colors.white),
                            ],
                          ],
                        ),
                      ),
                      const SizedBox(height: 12),
                    ],

                    // Info RIB
                    Container(
                      padding: const EdgeInsets.all(12),
                      margin: const EdgeInsets.only(bottom: 16),
                      decoration: BoxDecoration(
                        color: Colors.blue.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.blue),
                      ),
                      child: const Text(
                        'ðŸ’¡ Le RIB est nÃ©cessaire pour mettre en place les prÃ©lÃ¨vements automatiques SEPA aprÃ¨s votre pÃ©riode d\'essai, afin de rÃ©duire les frais de transaction.',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          color: Colors.blue,
                          fontSize: 12,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),

                    const SizedBox(height: 20),
                    
                    // âœ… Section Identifiants avec header tattoo
                    _buildSectionTitleWithHeader('Identifiants de connexion', Icons.lock, headerIndex: 3),
                    
                    TextFormField(
                      controller: _email,
                      decoration: _decoration('Email'),
                      keyboardType: TextInputType.emailAddress,
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _validateEmail,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _password,
                      obscureText: !_showPassword,
                      decoration: _decoration('Mot de passe'),
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _validatePassword,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _confirm,
                      obscureText: !_showConfirm,
                      decoration: _decoration('Confirmer mot de passe'),
                      style: const TextStyle(
                          fontFamily: 'Roboto', color: Colors.black87, fontSize: 16),
                      validator: _validateConfirm,
                    ),

                    const SizedBox(height: 20),
                    
                    // âœ… Section Conditions avec header tattoo
                    _buildSectionTitleWithHeader('Conditions d\'utilisation', Icons.gavel, headerIndex: 1),
                    
                    // CGU / CGV
                    CGUCGVValidationWidget(
                      cguAccepted: _cguAccepted,
                      cgvAccepted: _cgvAccepted,
                      onCGURead: () async {
                        final ok = await Navigator.pushNamed(context, '/cgu')
                            as bool?;
                        if (mounted) setState(() => _cguAccepted = ok == true);
                      },
                      onCGVRead: () async {
                        final ok = await Navigator.pushNamed(context, '/cgv')
                            as bool?;
                        if (mounted) setState(() => _cgvAccepted = ok == true);
                      },
                    ),

                    const SizedBox(height: 12),
                    // Newsletter
                    CheckboxListTile(
                      value: _newsletter,
                      onChanged: (v) => setState(() => _newsletter = v!),
                      title: const Text(
                        "Recevoir la newsletter Kipik",
                        style: TextStyle(
                            fontFamily: 'PermanentMarker', color: Colors.white),
                      ),
                      activeColor: KipikTheme.rouge,
                    ),

                    const SizedBox(height: 24),
                    // Validation finale
                    if (_canSubmit)
                      ElevatedButton(
                        onPressed: _submitForm,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: KipikTheme.rouge,
                          padding: const EdgeInsets.symmetric(vertical: 18),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: const Text(
                          'Commencer mon essai gratuit',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontFamily: 'PermanentMarker',
                          ),
                        ),
                      )
                    else
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.orange.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.orange),
                        ),
                        child: const Column(
                          children: [
                            Icon(Icons.info, color: Colors.orange),
                            SizedBox(height: 8),
                            Text(
                              'Veuillez complÃ©ter tous les champs obligatoires pour commencer votre essai gratuit',
                              style: TextStyle(
                                color: Colors.orange,
                                fontWeight: FontWeight.bold,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\mes_projets_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import 'package:kipik_v5/pages/detail_projet_page.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';

class MesProjetsPage extends StatelessWidget {
  const MesProjetsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: 'Mes Projets',
        showBackButton: true,
        useProStyle: true,
        onBackPressed: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => const HomePagePro()),
          );
        },
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset('assets/background_charbon.png', fit: BoxFit.cover),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: _buildProjectList(context),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProjectList(BuildContext context) {
    final projets = [
      {
        'titre': 'PhÃ©nix Bras Droit',
        'tatoueur': 'InkMaster',
        'dateDevis': '12/05/2025',
        'statut': 'En attente',
        'montant': 250,
      },
      {
        'titre': 'Dragon Dos Complet',
        'tatoueur': 'DragonInk',
        'dateDevis': '02/06/2025',
        'statut': 'En cours',
        'montant': 1200,
      },
      {
        'titre': 'Lettrage minimaliste',
        'tatoueur': 'LetterArt',
        'dateDevis': '01/04/2025',
        'statut': 'ClÃ´turÃ©',
        'montant': 100,
        'dateCloture': '10/05/2025',
      },
    ];

    return ListView.separated(
      itemCount: projets.length,
      separatorBuilder: (context, index) => const SizedBox(height: 12),
      itemBuilder: (context, index) {
        final Map<String, dynamic> projet = projets[index];
        final statut = projet['statut'] as String;
        final color = _getStatusColor(statut);
        final icon = _getStatusIcon(statut);

        return Card(
          color: Colors.white.withOpacity(0.9),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: color,
              child: Icon(icon, color: Colors.white),
            ),
            title: Text(
              projet['titre'],
              style: const TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
              ),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Tatoueur : ${projet['tatoueur']}'),
                Text('Date demande : ${projet['dateDevis']}'),
                Text('Montant : ${projet['montant']} â‚¬'),
                const SizedBox(height: 4),
                if (statut == 'ClÃ´turÃ©' && projet.containsKey('dateCloture'))
                  Text(
                    'ClÃ´turÃ© le ${projet['dateCloture']} (archive jusqu\'au ${_getDateArchivage(projet['dateCloture'])})',
                    style: const TextStyle(color: Colors.redAccent, fontSize: 13),
                  ),
              ],
            ),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => DetailProjetPage(projetData: projet),
                ),
              );
            },
          ),
        );
      },
    );
  }

  Color _getStatusColor(String statut) {
    switch (statut) {
      case 'En attente':
        return Colors.orangeAccent;
      case 'En cours':
        return Colors.blueAccent;
      case 'ClÃ´turÃ©':
        return Colors.redAccent;
      case 'AcceptÃ©':
        return Colors.green;
      case 'RefusÃ©':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  IconData _getStatusIcon(String statut) {
    switch (statut) {
      case 'En attente':
        return Icons.hourglass_empty;
      case 'En cours':
        return Icons.work;
      case 'ClÃ´turÃ©':
        return Icons.lock;
      case 'AcceptÃ©':
        return Icons.check_circle;
      case 'RefusÃ©':
        return Icons.cancel;
      default:
        return Icons.help_outline;
    }
  }

  String _getDateArchivage(String dateCloture) {
    final parts = dateCloture.split('/');
    if (parts.length == 3) {
      final day = parts[0];
      final month = parts[1];
      final year = int.parse(parts[2]) + 3;
      return '$day/$month/$year';
    }
    return dateCloture;
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\mes_realisations_page.dart

import 'dart:io';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import '../../theme/kipik_theme.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../widgets/common/drawers/custom_drawer_particulier.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';

class MesRealisationsPage extends StatefulWidget {
  const MesRealisationsPage({super.key});

  @override
  State<MesRealisationsPage> createState() => _MesRealisationsPageState();
}

class _MesRealisationsPageState extends State<MesRealisationsPage> {
  // Fond alÃ©atoire
  late final String _backgroundImage;
  
  // Exemple de donnÃ©es structurÃ©es pour les rÃ©alisations
  final List<RealisationItem> _realisations = [
    // Ces donnÃ©es seraient normalement stockÃ©es dans Firestore et les images dans Firebase Storage
    RealisationItem(
      id: '1',
      imageUrl: 'assets/pro/shop_gen.jpg', // Utilisation d'un asset pour dÃ©monstration
      description: 'Manchette japonaise traditionnelle avec carpe koÃ¯ et fleurs de cerisier',
      date: DateTime.now().subtract(const Duration(days: 7)),
      hashtags: ['#japonais', '#manchette', '#koÃ¯', '#traditionnel'],
      likes: 24,
      isFromClient: false,
      artistName: 'InkMaster',
      artistId: 'artist001',
    ),
    RealisationItem(
      id: '2',
      imageUrl: 'assets/pro/shop_profil_gen.jpg', // Utilisation d'un asset pour dÃ©monstration
      description: 'Micro-rÃ©alisme floral en noir et gris',
      date: DateTime.now().subtract(const Duration(days: 15)),
      hashtags: ['#microrÃ©alisme', '#floral', '#noir&gris'],
      likes: 36,
      isFromClient: true,
      artistName: 'TattooMaster',
      artistId: 'artist002',
    ),
  ];

  // Liste de tous les hashtags disponibles pour le filtrage
  final List<String> _allHashtags = [
    '#japonais', '#manchette', '#koÃ¯', '#traditionnel', 
    '#microrÃ©alisme', '#floral', '#noir&gris',
    '#old-school', '#minimaliste', '#blackwork', '#dotwork'
  ];

  // Filtres actifs
  List<String> _activeFilters = [];
  
  // Mode d'affichage (grille ou liste)
  bool _gridMode = true;

  // ContrÃ´leur pour l'ajout de description/hashtags
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _hashtagsController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // SÃ©lectionner un fond alÃ©atoire
    _backgroundImage = _getRandomBackground();
  }

  String _getRandomBackground() {
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    return backgrounds[Random().nextInt(backgrounds.length)];
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    _hashtagsController.dispose();
    super.dispose();
  }

  // MÃ©thode pour ajouter une nouvelle rÃ©alisation
  Future<void> _addRealisation() async {
    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );
    
    final XFile? picked = await openFile(acceptedTypeGroups: [typeGroup]);
    if (picked != null) {
      // Ouvrir une boÃ®te de dialogue pour ajouter des dÃ©tails
      _showAddDetailsDialog(File(picked.path));
      
      // TODO: Uploader sur Firebase Storage + ajouter l'URL Ã  Firestore
    }
  }

  // Dialogue pour ajouter des dÃ©tails
  Future<void> _showAddDetailsDialog(File imageFile) async {
    _descriptionController.clear();
    _hashtagsController.clear();
    
    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'DÃ©tails de la rÃ©alisation',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'PermanentMarker',
          ),
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: Image.file(
                  imageFile,
                  height: 200,
                  width: double.infinity,
                  fit: BoxFit.cover,
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _descriptionController,
                style: const TextStyle(color: Colors.white),
                maxLines: 3,
                decoration: const InputDecoration(
                  labelText: 'Description',
                  labelStyle: TextStyle(color: Colors.white70),
                  hintText: 'Ex: Tatouage rÃ©aliste d\'un lion...',
                  hintStyle: TextStyle(color: Colors.white30),
                  enabledBorder: UnderlineInputBorder(
                    borderSide: BorderSide(color: Colors.white30),
                  ),
                  focusedBorder: UnderlineInputBorder(
                    borderSide: BorderSide(color: KipikTheme.rouge),
                  ),
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _hashtagsController,
                style: const TextStyle(color: Colors.white),
                decoration: const InputDecoration(
                  labelText: 'Hashtags (sÃ©parÃ©s par des espaces)',
                  labelStyle: TextStyle(color: Colors.white70),
                  hintText: 'Ex: #rÃ©aliste #lion #animal',
                  hintStyle: TextStyle(color: Colors.white30),
                  enabledBorder: UnderlineInputBorder(
                    borderSide: BorderSide(color: Colors.white30),
                  ),
                  focusedBorder: UnderlineInputBorder(
                    borderSide: BorderSide(color: KipikTheme.rouge),
                  ),
                ),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.info_outline, size: 16, color: Colors.amber[300]),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Les hashtags aident les clients Ã  trouver vos rÃ©alisations',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.amber[300],
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              CheckboxListTile(
                title: const Text(
                  'RÃ©alisation sur un client',
                  style: TextStyle(color: Colors.white),
                ),
                subtitle: const Text(
                  'Visible dans le portfolio du client',
                  style: TextStyle(color: Colors.white54, fontSize: 12),
                ),
                value: false,
                activeColor: KipikTheme.rouge,
                checkColor: Colors.white,
                onChanged: (value) {
                  // GÃ©rer la logique
                },
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            style: TextButton.styleFrom(foregroundColor: Colors.white70),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              // Ajouter la nouvelle rÃ©alisation Ã  la liste
              setState(() {
                List<String> hashtags = _hashtagsController.text
                    .split(' ')
                    .where((tag) => tag.isNotEmpty)
                    .map((tag) => tag.startsWith('#') ? tag : '#$tag')
                    .toList();
                
                _realisations.add(
                  RealisationItem(
                    id: DateTime.now().toString(),
                    imageFile: imageFile,
                    description: _descriptionController.text,
                    date: DateTime.now(),
                    hashtags: hashtags,
                    likes: 0,
                    isFromClient: false,
                    artistName: 'Mon Tatoueur', // Ã€ personnaliser
                    artistId: 'currentArtist',
                  ),
                );

                // Ajouter les nouveaux hashtags Ã  la liste globale
                for (var tag in hashtags) {
                  if (!_allHashtags.contains(tag)) {
                    _allHashtags.add(tag);
                  }
                }
              });
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
            ),
            child: const Text('Publier'),
          ),
        ],
      ),
    );
  }

  // Ouvrir la vue dÃ©taillÃ©e d'une rÃ©alisation
  void _openRealisationDetail(RealisationItem realisation) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => RealisationDetailPage(realisation: realisation),
      ),
    );
  }

  // Afficher les filtres de hashtags
  void _showHashtagsFilter() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.black,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (ctx) => StatefulBuilder(
        builder: (context, setStateModal) {
          return SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Filtrer par style',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'SÃ©lectionnez les hashtags pour filtrer vos rÃ©alisations',
                    style: TextStyle(
                      color: Colors.white70,
                      fontSize: 14,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Expanded(
                    child: SingleChildScrollView(
                      child: Wrap(
                        spacing: 8,
                        runSpacing: 8,
                        children: _allHashtags.map((tag) {
                          final isSelected = _activeFilters.contains(tag);
                          return FilterChip(
                            label: Text(tag),
                            selected: isSelected,
                            onSelected: (selected) {
                              setStateModal(() {
                                if (selected) {
                                  _activeFilters.add(tag);
                                } else {
                                  _activeFilters.remove(tag);
                                }
                              });
                              
                              // Ã‰galement mettre Ã  jour l'Ã©tat de la page principale
                              setState(() {});
                            },
                            selectedColor: KipikTheme.rouge,
                            checkmarkColor: Colors.white,
                            backgroundColor: Colors.black45, // Fond sombre pour meilleur contraste
                            labelStyle: TextStyle(
                              color: isSelected ? Colors.white : Colors.white, // Texte toujours blanc pour meilleure lisibilitÃ©
                              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal, // Gras quand sÃ©lectionnÃ©
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(20),
                              side: BorderSide(
                                color: isSelected ? KipikTheme.rouge : Colors.white30, // Bordure visible
                                width: 1,
                              ),
                            ),
                            padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 4),
                          );
                        }).toList(),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      TextButton.icon(
                        onPressed: () {
                          setStateModal(() {
                            _activeFilters.clear();
                          });
                          setState(() {});
                        },
                        icon: const Icon(Icons.clear_all),
                        label: const Text('Effacer tous les filtres'),
                        style: TextButton.styleFrom(foregroundColor: Colors.white70),
                      ),
                      ElevatedButton(
                        onPressed: () => Navigator.pop(context),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: KipikTheme.rouge,
                          foregroundColor: Colors.white,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        child: const Text('Appliquer'),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  // Filtrer les rÃ©alisations en fonction des hashtags sÃ©lectionnÃ©s
  List<RealisationItem> get _filteredRealisations {
    if (_activeFilters.isEmpty) {
      return _realisations;
    }
    
    return _realisations.where((item) {
      for (var filter in _activeFilters) {
        if (item.hashtags.contains(filter)) {
          return true;
        }
      }
      return false;
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: const CustomAppBarKipik(
        title: 'Mes RÃ©alisations',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: true,
      ),
      endDrawer: const CustomDrawerParticulier(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Fond alÃ©atoire
          Image.asset(_backgroundImage, fit: BoxFit.cover),
          
          // Contenu principal
          SafeArea(
            child: Column(
              children: [
                // Barre d'outils de filtrage et d'affichage
                Container(
                  height: 60,
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.5),
                    border: const Border(
                      bottom: BorderSide(color: Colors.white10, width: 1),
                    ),
                  ),
                  child: Row(
                    children: [
                      // Bouton filtrage
                      Expanded(
                        child: GestureDetector(
                          onTap: _showHashtagsFilter,
                          child: Container(
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                            decoration: BoxDecoration(
                              color: Colors.white10,
                              borderRadius: BorderRadius.circular(20),
                              border: Border.all(color: Colors.white30),
                            ),
                            child: Row(
                              children: [
                                const Icon(Icons.filter_list, color: Colors.white, size: 18),
                                const SizedBox(width: 8),
                                const Text(
                                  'Filtrer par style',
                                  style: TextStyle(color: Colors.white),
                                ),
                                if (_activeFilters.isNotEmpty) ...[
                                  const SizedBox(width: 8),
                                  Container(
                                    padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                    decoration: BoxDecoration(
                                      color: KipikTheme.rouge,
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                    child: Text(
                                      '${_activeFilters.length}',
                                      style: const TextStyle(
                                        color: Colors.white, 
                                        fontSize: 12, 
                                        fontWeight: FontWeight.bold
                                      ),
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ),
                      ),
                      
                      const SizedBox(width: 8),
                      
                      // Bouton de mode d'affichage
                      IconButton(
                        icon: Icon(
                          _gridMode ? Icons.view_list : Icons.grid_view,
                          color: Colors.white,
                        ),
                        onPressed: () => setState(() => _gridMode = !_gridMode),
                        tooltip: _gridMode ? 'Vue liste' : 'Vue grille',
                      ),
                      
                      // Bouton d'ajout
                      IconButton(
                        icon: const Icon(Icons.add_a_photo, color: Colors.white),
                        onPressed: _addRealisation,
                        tooltip: 'Ajouter une rÃ©alisation',
                      ),
                    ],
                  ),
                ),
                
                // Contenu scrollable (liste ou grille)
                Expanded(
                  child: _filteredRealisations.isEmpty
                      ? _buildEmptyState()
                      : _gridMode 
                          ? _buildGridView() 
                          : _buildListView(),
                ),
              ],
            ),
          ),
        ],
      ),
      // Bouton d'ajout de rÃ©alisation et bouton assistant Kipik
      floatingActionButton: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Bouton d'ajout de rÃ©alisation
          FloatingActionButton(
            heroTag: 'add',
            onPressed: _addRealisation,
            backgroundColor: KipikTheme.rouge,
            child: const Icon(Icons.add, color: Colors.white),
          ),
          const SizedBox(height: 16),
          // Bouton pour l'assistant Kipik - ModifiÃ© pour dÃ©sactiver la gÃ©nÃ©ration d'images
          const TattooAssistantButton(
            allowImageGeneration: false,
          ),
        ],
      ),
    );
  }

  // Ã‰tat vide
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.photo_album_outlined,
            size: 80,
            color: Colors.white.withOpacity(0.3),
          ),
          const SizedBox(height: 16),
          Text(
            _activeFilters.isEmpty
                ? 'Aucune rÃ©alisation pour l\'instant'
                : 'Aucune rÃ©alisation ne correspond aux filtres sÃ©lectionnÃ©s',
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _addRealisation,
            icon: const Icon(Icons.add_a_photo),
            label: const Text('Ajouter une rÃ©alisation'),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              textStyle: const TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 16,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Vue en grille
  Widget _buildGridView() {
    return GridView.builder(
      padding: const EdgeInsets.all(12),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
        childAspectRatio: 0.75, // Format portrait pour mettre en valeur les tattoos
      ),
      itemCount: _filteredRealisations.length,
      itemBuilder: (context, index) {
        final item = _filteredRealisations[index];
        return GestureDetector(
          onTap: () => _openRealisationDetail(item),
          child: Stack(
            fit: StackFit.expand,
            children: [
              // Image
              ClipRRect(
                borderRadius: BorderRadius.circular(16),
                child: item.imageFile != null 
                  ? Image.file(item.imageFile!, fit: BoxFit.cover)
                  : Image.asset(item.imageUrl!, fit: BoxFit.cover),
              ),
              
              // DÃ©gradÃ© noir en bas pour la lisibilitÃ© du texte
              Positioned(
                left: 0,
                right: 0,
                bottom: 0,
                child: Container(
                  height: 80,
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.only(
                      bottomLeft: Radius.circular(16),
                      bottomRight: Radius.circular(16),
                    ),
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [
                        Colors.transparent,
                        Colors.black.withOpacity(0.8),
                      ],
                    ),
                  ),
                ),
              ),
              
              // Badges
              Positioned(
                top: 8,
                right: 8,
                child: Row(
                  children: [
                    if (item.isFromClient)
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Colors.blue.withOpacity(0.7),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Text(
                          'Mon Tattoo',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                  ],
                ),
              ),
              
              // Description et hashtags
              Positioned(
                left: 8,
                right: 8,
                bottom: 8,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Texte tronquÃ© pour la vue grille
                    Text(
                      item.description,
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        // Likes
                        Row(
                          children: [
                            Icon(Icons.favorite, color: KipikTheme.rouge, size: 14),
                            const SizedBox(width: 4),
                            Text(
                              '${item.likes}',
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                        // Artiste
                        Text(
                          'Par ${item.artistName}',
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 10,
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  // Vue en liste
  Widget _buildListView() {
    return ListView.builder(
      padding: const EdgeInsets.all(12),
      itemCount: _filteredRealisations.length,
      itemBuilder: (context, index) {
        final item = _filteredRealisations[index];
        return Card(
          margin: const EdgeInsets.only(bottom: 16),
          color: Colors.black.withOpacity(0.6),
          elevation: 4,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: InkWell(
            onTap: () => _openRealisationDetail(item),
            borderRadius: BorderRadius.circular(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Image principale
                ClipRRect(
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(16),
                    topRight: Radius.circular(16),
                  ),
                  child: SizedBox(
                    height: 200,
                    width: double.infinity,
                    child: item.imageFile != null 
                      ? Image.file(item.imageFile!, fit: BoxFit.cover)
                      : Image.asset(item.imageUrl!, fit: BoxFit.cover),
                  ),
                ),
                
                // Infos
                Padding(
                  padding: const EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Ligne artiste et badges
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          // Artiste
                          Text(
                            'Par ${item.artistName}',
                            style: const TextStyle(
                              color: Colors.white70,
                              fontSize: 12,
                              fontStyle: FontStyle.italic,
                            ),
                          ),
                          // Badges
                          if (item.isFromClient)
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                              decoration: BoxDecoration(
                                color: Colors.blue,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: const Text(
                                'Mon Tatouage',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      
                      // Description
                      Text(
                        item.description,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      
                      // Hashtags
                      Wrap(
                        spacing: 4,
                        children: item.hashtags.map((tag) {
                          return Chip(
                            label: Text(
                              tag,
                              style: const TextStyle(
                                fontSize: 12,
                                color: Colors.white,
                              ),
                            ),
                            backgroundColor: KipikTheme.rouge.withOpacity(0.7),
                            padding: EdgeInsets.zero,
                            materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                          );
                        }).toList(),
                      ),
                      
                      const SizedBox(height: 8),
                      
                      // Likes et date
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Row(
                            children: [
                              Icon(Icons.favorite, color: KipikTheme.rouge, size: 16),
                              const SizedBox(width: 4),
                              Text(
                                '${item.likes}',
                                style: const TextStyle(
                                  color: Colors.white70,
                                  fontSize: 14,
                                ),
                              ),
                            ],
                          ),
                          Text(
                            _formatDate(item.date),
                            style: const TextStyle(
                              color: Colors.white54,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // Formater la date
  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays < 1) {
      return "Aujourd'hui";
    } else if (difference.inDays < 2) {
      return 'Hier';
    } else if (difference.inDays < 7) {
      return 'Il y a ${difference.inDays} jours';
    } else {
      return '${date.day}/${date.month}/${date.year}';
    }
  }
}

// Classe pour reprÃ©senter une rÃ©alisation
class RealisationItem {
  final String id;
  final String? imageUrl; // URL Firebase Storage
  final File? imageFile; // Fichier local (avant upload)
  final String description;
  final DateTime date;
  final List<String> hashtags;
  int likes;
  final bool isFromClient;
  final String artistName; // Nom du tatoueur
  final String artistId; // ID du tatoueur dans la base de donnÃ©es

  RealisationItem({
    required this.id,
    this.imageUrl,
    this.imageFile,
    required this.description,
    required this.date,
    required this.hashtags,
    required this.likes,
    required this.isFromClient,
    required this.artistName,
    required this.artistId,
  }) : assert(imageUrl != null || imageFile != null);
}

// Page de dÃ©tail d'une rÃ©alisation
class RealisationDetailPage extends StatefulWidget {
  final RealisationItem realisation;

  const RealisationDetailPage({super.key, required this.realisation});

  @override
  State<RealisationDetailPage> createState() => _RealisationDetailPageState();
}

class _RealisationDetailPageState extends State<RealisationDetailPage> {
  bool _isLiked = false;
  bool _isSaved = false;

  void _contactArtist() {
    // Afficher une boÃ®te de dialogue pour contacter l'artiste
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          'Contacter l\'artiste',
          style: TextStyle(color: Colors.white, fontFamily: 'PermanentMarker'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Vous allez contacter ${widget.realisation.artistName}',
              style: const TextStyle(color: Colors.white70),
            ),
            const SizedBox(height: 16),
            const Text(
              'Ce style vous plaÃ®t? Demandez un devis pour votre propre tatouage!',
              style: TextStyle(color: Colors.white),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            style: TextButton.styleFrom(foregroundColor: Colors.white70),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              // Navigation vers la page de demande de devis
              Navigator.pop(context);
              // TODO: Naviguer vers la page de demande de devis
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Redirection vers la demande de devis...')),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
            ),
            child: const Text('Contacter'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: const Text(
          'DÃ©tail de la rÃ©alisation',
          style: TextStyle(fontFamily: 'PermanentMarker'),
        ),
        centerTitle: true,
        actions: [
          // Bouton partager
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: () {
              // Logique de partage
            },
            tooltip: 'Partager',
          ),
          // Bouton sauvegarder
          IconButton(
            icon: Icon(_isSaved ? Icons.bookmark : Icons.bookmark_border),
            onPressed: () {
              setState(() {
                _isSaved = !_isSaved;
              });
            },
            tooltip: 'Sauvegarder',
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Image principale plein Ã©cran
            SizedBox(
              height: MediaQuery.of(context).size.height * 0.6,
              width: double.infinity,
              child: widget.realisation.imageFile != null
                ? Image.file(
                    widget.realisation.imageFile!,
                    fit: BoxFit.contain,
                  )
                : Image.asset(
                    widget.realisation.imageUrl!,
                    fit: BoxFit.contain,
                  ),
            ),
            
            // Informations
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Artiste et Date
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // Artiste avec bouton de profil
                      GestureDetector(
                        onTap: () {
                          // Navigation vers le profil de l'artiste
                        },
                        child: Text(
                          'Par ${widget.realisation.artistName}',
                          style: TextStyle(
                            color: KipikTheme.rouge,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      // Date
                      Text(
                        _formatDate(widget.realisation.date),
                        style: const TextStyle(
                          color: Colors.white54,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  
                  // Description
                  Text(
                    widget.realisation.description,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  // Hashtags
                  Wrap(
                    spacing: 8,
                    runSpacing: 8,
                    children: widget.realisation.hashtags.map((tag) {
                      return Chip(
                        label: Text(
                          tag,
                          style: const TextStyle(
                            color: Colors.white,
                          ),
                        ),
                        backgroundColor: KipikTheme.rouge,
                      );
                    }).toList(),
                  ),
                  const SizedBox(height: 16),
                  
                  // Badges
                  if (widget.realisation.isFromClient)
                    Container(
                      margin: const EdgeInsets.only(bottom: 16),
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Colors.blue,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: const Text(
                        'Mon Tatouage',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  
                  // Likes et actions
                  Row(
                    children: [
                      // Like button
                      IconButton(
                        icon: Icon(
                          _isLiked ? Icons.favorite : Icons.favorite_border,
                          color: KipikTheme.rouge,
                          size: 28,
                        ),
                        onPressed: () {
                          setState(() {
                            if (_isLiked) {
                              widget.realisation.likes--;
                            } else {
                              widget.realisation.likes++;
                            }
                            _isLiked = !_isLiked;
                          });
                        },
                      ),
                      Text(
                        '${widget.realisation.likes}',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                        ),
                      ),
                      const Spacer(),
                      // Bouton Contacter l'artiste
                      ElevatedButton.icon(
                        onPressed: _contactArtist,
                        icon: const Icon(Icons.person),
                        label: const Text('Contacter l\'artiste'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: KipikTheme.rouge,
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Suggestion de designs similaires
                  const Text(
                    'Designs similaires',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                  const SizedBox(height: 8),
                  SizedBox(
                    height: 120,
                    child: ListView.builder(
                      scrollDirection: Axis.horizontal,
                      itemCount: 5, // Exemple: 5 designs similaires
                      itemBuilder: (context, index) {
                        return Container(
                          width: 100,
                          margin: const EdgeInsets.only(right: 8),
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(8),
                            color: Colors.white10,
                          ),
                          child: Center(
                            child: Icon(
                              Icons.image,
                              color: Colors.white.withOpacity(0.5),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      // Bouton Assistant Kipik
      floatingActionButton: const TattooAssistantButton(
        allowImageGeneration: false,
      ),
    );
  }

  // Formater la date
  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays < 1) {
      return "Aujourd'hui";
    } else if (difference.inDays < 2) {
      return 'Hier';
    } else if (difference.inDays < 7) {
      return 'Il y a ${difference.inDays} jours';
    } else {
      return '${date.day}/${date.month}/${date.year}';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\mon_shop_page.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import '../../theme/kipik_theme.dart';

enum UserMode { 
  particulier, // Mode lecture seule pour les particuliers
  tatoueur     // Mode Ã©dition pour les tatoueurs
}

class MonShopPage extends StatefulWidget {
  final UserMode mode;
  
  const MonShopPage({
    Key? key,
    this.mode = UserMode.tatoueur, // Par dÃ©faut tatoueur car c'est "MonShop"
  }) : super(key: key);

  @override
  State<MonShopPage> createState() => _MonShopPageState();
}

class _MonShopPageState extends State<MonShopPage> {
  bool _isEditMode = false;
  
  // ContrÃ´leurs pour les champs Ã©ditables
  late TextEditingController _nameController;
  late TextEditingController _addressController;
  late TextEditingController _phoneController;
  late TextEditingController _emailController;
  late TextEditingController _peopleCountController;
  
  // ContrÃ´leurs pour les horaires
  late Map<String, TextEditingController> _hoursControllers;
  
  // Images de la galerie (gestion locale)
  List<File?> _galleryFiles = List.filled(8, null);
  File? _logoFile;
  
  // DonnÃ©es du shop
  late Map<String, dynamic> shopData;

  @override
  void initState() {
    super.initState();
    _initializeShopData();
    _initializeControllers();
  }

  void _initializeShopData() {
    shopData = {
      'name': 'Ink Legends Studio',
      'address': '25 rue du Tatouage, 75000 Paris',
      'phone': '06 12 34 56 78',
      'email': 'contact@inklegends.com',
      'logo': 'assets/pro/shop_profil_gen.jpg',
      'isPublic': true,
      'peopleCount': 4,
      'openingHours': {
        'Lun-Ven': '10:00 - 19:00',
        'Sam': '11:00 - 17:00',
        'Dim': 'FermÃ©'
      },
      'galleryImages': [
        'assets/pro/shop_gen.jpg',
        'assets/pro/shop_profil_gen.jpg',
        null, null, null, null, null, null,
      ]
    };
  }

  void _initializeControllers() {
    _nameController = TextEditingController(text: shopData['name']);
    _addressController = TextEditingController(text: shopData['address']);
    _phoneController = TextEditingController(text: shopData['phone']);
    _emailController = TextEditingController(text: shopData['email']);
    _peopleCountController = TextEditingController(text: shopData['peopleCount'].toString());
    
    _hoursControllers = {};
    (shopData['openingHours'] as Map<String, String>).forEach((day, hours) {
      _hoursControllers[day] = TextEditingController(text: hours);
    });
  }

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    _peopleCountController.dispose();
    _hoursControllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }

  bool get _canEdit => widget.mode == UserMode.tatoueur;
  
  int _currentPhotoIndex = 0;

  List<String> get _validGalleryImages {
    List<String> validImages = [];
    
    // Ajouter les fichiers locaux d'abord
    for (int i = 0; i < _galleryFiles.length; i++) {
      if (_galleryFiles[i] != null) {
        validImages.add(_galleryFiles[i]!.path);
      }
    }
    
    // Puis ajouter les assets qui ne sont pas remplacÃ©s
    List<String?> originalImages = List<String?>.from(shopData['galleryImages']);
    for (int i = 0; i < originalImages.length; i++) {
      if (originalImages[i] != null && _galleryFiles.length > i && _galleryFiles[i] == null) {
        validImages.add(originalImages[i]!);
      }
    }
    
    return validImages;
  }

  void _toggleEditMode() {
    if (!_canEdit) return;
    
    setState(() {
      _isEditMode = !_isEditMode;
    });
  }

  void _saveChanges() {
    if (!_canEdit) return;
    
    // TODO: Sauvegarder les modifications sur le serveur
    setState(() {
      shopData['name'] = _nameController.text;
      shopData['address'] = _addressController.text;
      shopData['phone'] = _phoneController.text;
      shopData['email'] = _emailController.text;
      shopData['peopleCount'] = int.tryParse(_peopleCountController.text) ?? 4;
      
      _hoursControllers.forEach((day, controller) {
        (shopData['openingHours'] as Map<String, String>)[day] = controller.text;
      });
      
      _isEditMode = false;
    });
    
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text(
            'Modifications sauvegardÃ©es !',
            style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w500),
          ),
          backgroundColor: const Color(0xFF10B981),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        ),
      );
    }
  }

  Future<void> _pickGalleryImage(int index) async {
    if (!_canEdit) return;
    
    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? image = await openFile(acceptedTypeGroups: [typeGroup]);
    
    if (image != null) {
      setState(() {
        if (_galleryFiles.length <= index) {
          _galleryFiles = List.filled(index + 1, null);
        }
        _galleryFiles[index] = File(image.path);
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Image ajoutÃ©e Ã  la galerie !'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  Future<void> _pickLogoImage() async {
    if (!_canEdit) return;
    
    final XTypeGroup typeGroup = XTypeGroup(
      label: 'images',
      extensions: ['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? image = await openFile(acceptedTypeGroups: [typeGroup]);
    
    if (image != null) {
      setState(() {
        _logoFile = File(image.path);
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Logo mis Ã  jour !'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final validImages = _validGalleryImages;

    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      extendBodyBehindAppBar: true,
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: _canEdit ? 'Mon Shop' : shopData['name'] as String,
        showBackButton: true,
        useProStyle: true,
        onBackPressed: () {
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(builder: (_) => const HomePagePro()),
            (route) => false,
          );
        },
        actions: [
          if (_canEdit) ...[
            IconButton(
              icon: Icon(
                _isEditMode ? Icons.save : Icons.edit,
                color: Colors.white,
                size: 24,
              ),
              onPressed: _isEditMode ? _saveChanges : _toggleEditMode,
            ),
          ],
          Builder(
            builder: (context) => IconButton(
              icon: const Icon(Icons.menu, color: Colors.white, size: 24),
              onPressed: () => Scaffold.of(context).openEndDrawer(),
            ),
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(
        allowImageGeneration: false,
      ),
      body: SafeArea(
        bottom: true,
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 24),
              
              // Photo principale avec galerie
              if (validImages.isNotEmpty) ...[
                _buildGallerySection(validImages),
              ] else if (_canEdit && _isEditMode) ...[
                _buildEmptyGallery(),
              ],

              // Informations du shop
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Section logo et nom
                    _buildHeaderSection(),
                    
                    const SizedBox(height: 24),
                    
                    // Section Horaires
                    _buildHoursSection(),

                    const SizedBox(height: 16),
                    
                    // Section Adresse
                    _buildAddressSection(),

                    const SizedBox(height: 16),
                    
                    // Section Contact
                    _buildContactSection(),

                    const SizedBox(height: 24),
                    
                    // Boutons d'action (seulement pour les particuliers)
                    if (widget.mode == UserMode.particulier)
                      _buildActionButtons(),
                  ],
                ),
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildGallerySection(List<String> validImages) {
    return Stack(
      children: [
        // Image actuelle
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(20),
            child: SizedBox(
              height: 250,
              width: double.infinity,
              child: PageView.builder(
                itemCount: validImages.length,
                onPageChanged: (index) {
                  setState(() {
                    _currentPhotoIndex = index;
                  });
                },
                itemBuilder: (context, index) {
                  final imagePath = validImages[index];
                  return GestureDetector(
                    onTap: _canEdit && _isEditMode ? () => _pickGalleryImage(index) : null,
                    child: Stack(
                      fit: StackFit.expand,
                      children: [
                        imagePath.startsWith('assets/')
                            ? Image.asset(imagePath, fit: BoxFit.cover)
                            : Image.file(File(imagePath), fit: BoxFit.cover),
                        if (_canEdit && _isEditMode)
                          Positioned(
                            top: 12,
                            right: 12,
                            child: Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: Colors.black.withOpacity(0.6),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: const Icon(
                                Icons.camera_alt,
                                color: Colors.white,
                                size: 20,
                              ),
                            ),
                          ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
        ),
        
        // Indicateur de nombre de photos
        if (validImages.length > 1)
          Positioned(
            top: 16,
            right: 32,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(20),
              ),
              child: Text(
                '${_currentPhotoIndex + 1}/${validImages.length}',
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        
        // Statut du shop
        Positioned(
          top: 16,
          left: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.8),
              borderRadius: BorderRadius.circular(20),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  (shopData['isPublic'] as bool) ? Icons.public : Icons.lock,
                  color: Colors.white,
                  size: 16,
                ),
                const SizedBox(width: 4),
                Text(
                  (shopData['isPublic'] as bool) ? 'Shop Public' : 'Shop PrivÃ©',
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEmptyGallery() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      height: 250,
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: Colors.white.withOpacity(0.3), width: 2),
      ),
      child: InkWell(
        onTap: () => _pickGalleryImage(0),
        borderRadius: BorderRadius.circular(20),
        child: const Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.add_photo_alternate, color: Colors.white, size: 50),
            SizedBox(height: 12),
            Text(
              'Ajouter des photos de votre shop',
              style: TextStyle(color: Colors.white, fontSize: 16),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeaderSection() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 24,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Row(
        children: [
          // Logo
          GestureDetector(
            onTap: _canEdit && _isEditMode ? _pickLogoImage : null,
            child: Stack(
              children: [
                CircleAvatar(
                  radius: 40,
                  backgroundColor: Colors.white,
                  backgroundImage: _logoFile != null
                      ? FileImage(_logoFile!)
                      : AssetImage(shopData['logo'] as String) as ImageProvider,
                ),
                if (_canEdit && _isEditMode)
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: Container(
                      padding: const EdgeInsets.all(4),
                      decoration: BoxDecoration(
                        color: KipikTheme.rouge,
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.camera_alt,
                        color: Colors.white,
                        size: 16,
                      ),
                    ),
                  ),
              ],
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildEditableField(
                  controller: _nameController,
                  style: const TextStyle(
                    fontSize: 24,
                    fontFamily: 'PermanentMarker',
                    color: Color(0xFF111827),
                  ),
                  hintText: 'Nom du shop',
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    const Icon(
                      Icons.people,
                      color: Color(0xFF6B7280),
                      size: 18,
                    ),
                    const SizedBox(width: 4),
                    Expanded(
                      child: _buildEditableField(
                        controller: _peopleCountController,
                        style: const TextStyle(
                          fontSize: 14,
                          color: Color(0xFF6B7280),
                        ),
                        hintText: '4',
                        suffix: ' tatoueurs prÃ©sents',
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildHoursSection() {
    return _buildInfoContainer(
      title: 'Horaires d\'ouverture',
      icon: Icons.access_time,
      child: Column(
        children: _hoursControllers.entries.map((entry) {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 4),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  entry.key,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Color(0xFF111827),
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Expanded(
                  child: _buildEditableField(
                    controller: entry.value,
                    style: const TextStyle(
                      fontSize: 16,
                      color: Color(0xFF111827),
                      fontWeight: FontWeight.bold,
                    ),
                    hintText: 'Horaires',
                    textAlign: TextAlign.end,
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildAddressSection() {
    return _buildInfoContainer(
      title: 'Adresse',
      icon: Icons.location_on,
      child: Row(
        children: [
          Expanded(
            child: _buildEditableField(
              controller: _addressController,
              style: const TextStyle(
                fontSize: 16,
                color: Color(0xFF111827),
              ),
              hintText: 'Adresse du shop',
              maxLines: 2,
            ),
          ),
          if (widget.mode == UserMode.particulier)
            IconButton(
              icon: const Icon(
                Icons.map,
                color: Color(0xFF6B7280),
              ),
              onPressed: () {
                // Ouvrir dans Maps
              },
            ),
        ],
      ),
    );
  }

  Widget _buildContactSection() {
    return _buildInfoContainer(
      title: 'Contact',
      icon: Icons.contact_phone,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // TÃ©lÃ©phone
          Row(
            children: [
              const Icon(Icons.phone, color: Color(0xFF6B7280), size: 18),
              const SizedBox(width: 8),
              Expanded(
                child: _buildEditableField(
                  controller: _phoneController,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Color(0xFF111827),
                  ),
                  hintText: 'NumÃ©ro de tÃ©lÃ©phone',
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          // Email
          Row(
            children: [
              const Icon(Icons.email, color: Color(0xFF6B7280), size: 18),
              const SizedBox(width: 8),
              Expanded(
                child: _buildEditableField(
                  controller: _emailController,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Color(0xFF111827),
                  ),
                  hintText: 'Adresse email',
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Row(
      children: [
        Expanded(
          child: Container(
            height: 60,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  KipikTheme.rouge,
                  KipikTheme.rouge.withOpacity(0.8),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: KipikTheme.rouge.withOpacity(0.3),
                  blurRadius: 16,
                  offset: const Offset(0, 8),
                ),
              ],
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(20),
                onTap: () {
                  // Appeler le shop
                },
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.phone, color: Colors.white, size: 24),
                    SizedBox(width: 12),
                    Text(
                      'Appeler',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Container(
            height: 60,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.08),
                  blurRadius: 12,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(20),
                onTap: () {
                  // Partager le shop
                },
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.share, color: KipikTheme.rouge, size: 24),
                    const SizedBox(width: 12),
                    Text(
                      'Partager',
                      style: TextStyle(
                        color: KipikTheme.rouge,
                        fontSize: 16,
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEditableField({
    required TextEditingController controller,
    required TextStyle style,
    required String hintText,
    int maxLines = 1,
    TextAlign textAlign = TextAlign.start,
    String suffix = '',
  }) {
    if (!_canEdit || !_isEditMode) {
      return Text(
        controller.text.isEmpty ? hintText : '${controller.text}$suffix',
        style: controller.text.isEmpty ? style.copyWith(color: Colors.grey) : style,
        maxLines: maxLines,
        textAlign: textAlign,
        overflow: maxLines == 1 ? TextOverflow.ellipsis : null,
      );
    }

    return TextField(
      controller: controller,
      style: style,
      maxLines: maxLines,
      textAlign: textAlign,
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: style.copyWith(color: Colors.grey),
        border: UnderlineInputBorder(
          borderSide: BorderSide(color: KipikTheme.rouge.withOpacity(0.3)),
        ),
        focusedBorder: UnderlineInputBorder(
          borderSide: BorderSide(color: KipikTheme.rouge),
        ),
        contentPadding: const EdgeInsets.symmetric(vertical: 4),
      ),
    );
  }

  Widget _buildInfoContainer({
    required String title,
    required IconData icon,
    required Widget child,
  }) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 24,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(icon, color: KipikTheme.rouge, size: 18),
              ),
              const SizedBox(width: 12),
              Text(
                title,
                style: const TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Color(0xFF111827),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          child,
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\notifications_pro_page.dart

import 'package:flutter/material.dart';

import 'package:kipik_v5/widgets/common/app_bars/gpt_app_bar.dart';


class NotificationsProPage extends StatefulWidget {
  const NotificationsProPage({super.key});

  @override
  State<NotificationsProPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsProPage> {
  List<String> notifications = [
    'Votre rendez-vous a Ã©tÃ© confirmÃ© !',
    'Un nouveau message de votre tatoueur.',
    'Votre projet a Ã©tÃ© mis Ã  jour.',
    'Nouveaux flashs disponibles prÃ¨s de chez vous.',
  ];

  late final String selectedBackground;

  @override
  void initState() {
    super.initState();
    final backgrounds = [
      'assets/background1.png',
      'assets/background2.png',
      'assets/background3.png',
      'assets/background4.png',
    ];
    backgrounds.shuffle();
    selectedBackground = backgrounds.first;
  }

  void _clearNotifications() {
    setState(() {
      notifications.clear();
    });
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Toutes les notifications ont Ã©tÃ© supprimÃ©es.')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const GptAppBar(title: 'Notifications'),
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(
            selectedBackground,
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          if (notifications.isEmpty)
            const Center(
              child: Text(
                'Aucune notification pour le moment.',
                style: TextStyle(color: Colors.white70, fontSize: 18),
              ),
            )
          else
            ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: notifications.length,
              itemBuilder: (context, index) {
                return Card(
                  color: Colors.white12,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  child: ListTile(
                    leading: const Icon(Icons.notifications, color: Colors.redAccent),
                    title: Text(
                      notifications[index],
                      style: const TextStyle(color: Colors.white),
                    ),
                  ),
                );
              },
            ),
        ],
      ),
      floatingActionButton: notifications.isNotEmpty
          ? FloatingActionButton.extended(
              onPressed: _clearNotifications,
              backgroundColor: Colors.redAccent,
              icon: const Icon(Icons.delete),
              label: const Text('Tout supprimer'),
            )
          : null,
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\parametres_pro_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:easy_localization/easy_localization.dart';

// Import des modÃ¨les et services adaptÃ©s
import 'package:kipik_v5/models/user.dart';
import 'package:kipik_v5/models/user_role.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import 'package:kipik_v5/utils/constants.dart';

class ParametresProPage extends StatefulWidget {
  static const String routeName = '/parametres-pro';

  const ParametresProPage({Key? key}) : super(key: key);

  @override
  _ParametresProPageState createState() => _ParametresProPageState();
}

class _ParametresProPageState extends State<ParametresProPage> {
  bool _isDarkMode = false;
  bool _notificationsEnabled = true;
  bool _locationEnabled = true;
  String _selectedLanguage = 'FranÃ§ais';
  final List<String> _availableLanguages = ['FranÃ§ais', 'English', 'EspaÃ±ol', 'Deutsch'];
  
  // ContrÃ´leurs pour les champs de formulaire
  final TextEditingController _nomEntrepriseController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _telephoneController = TextEditingController();
  final TextEditingController _adresseController = TextEditingController();
  
  bool _isLoading = true;
  User? _currentUser;
  String? _abonnementType = 'Standard';
  
  @override
  void initState() {
    super.initState();
    _loadUserPreferences();
  }
  
  @override
  void dispose() {
    _nomEntrepriseController.dispose();
    _emailController.dispose();
    _telephoneController.dispose();
    _adresseController.dispose();
    super.dispose();
  }
  
  Future<void> _loadUserPreferences() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final secureAuth = context.read<SecureAuthService>();
      
      // VÃ©rifier si l'utilisateur est connectÃ©
      if (!secureAuth.isAuthenticated) {
        Navigator.of(context).pushReplacementNamed(Constants.routeLogin);
        return;
      }

      final prefs = await SharedPreferences.getInstance();
      
      // Utilisation du modÃ¨le User
      final currentUserData = secureAuth.currentUser;
      if (currentUserData != null) {
        _currentUser = UserFromDynamic.fromDynamic(currentUserData);
      }
      
      setState(() {
        // Charger les prÃ©fÃ©rences avec CONSTANTS
        _isDarkMode = prefs.getBool(Constants.prefsDarkMode) ?? false;
        _notificationsEnabled = prefs.getBool(kPrefNotificationsEnabled) ?? true;
        _locationEnabled = prefs.getBool(kPrefLocationEnabled) ?? true;
        
        _selectedLanguage = context.locale.languageCode == 'fr' ? 'FranÃ§ais' 
                          : context.locale.languageCode == 'en' ? 'English'
                          : context.locale.languageCode == 'es' ? 'EspaÃ±ol'
                          : context.locale.languageCode == 'de' ? 'Deutsch'
                          : 'FranÃ§ais';
        
        // Utilisation du modÃ¨le User
        if (_currentUser != null) {
          _nomEntrepriseController.text = _currentUser!.name;
          _emailController.text = _currentUser!.email ?? '';
          
          // RÃ©cupÃ©rer tÃ©lÃ©phone et adresse depuis les prÃ©fÃ©rences 
          _telephoneController.text = prefs.getString('user_telephone') ?? _currentUser!.phone ?? '';
          _adresseController.text = prefs.getString('user_adresse') ?? '';
          
          // RÃ©cupÃ©rer le type d'abonnement
          _abonnementType = prefs.getString('abonnement_type') ?? kSubscriptionTypes[0];
        }
        
        _isLoading = false;
      });
      
      print('âœ… PrÃ©fÃ©rences chargÃ©es pour: ${_currentUser?.displayName ?? 'Utilisateur'}');
      
    } catch (e) {
      print('âŒ Erreur lors du chargement des prÃ©fÃ©rences: $e');
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(Constants.errorMessageGeneric),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  Future<void> _saveUserPreferences() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final prefs = await SharedPreferences.getInstance();
      final secureAuth = context.read<SecureAuthService>();
      
      // Sauvegarder les prÃ©fÃ©rences avec CONSTANTS
      await prefs.setBool(Constants.prefsDarkMode, _isDarkMode);
      await prefs.setBool(kPrefNotificationsEnabled, _notificationsEnabled);
      await prefs.setBool(kPrefLocationEnabled, _locationEnabled);
      
      // Sauvegarder la langue
      if (_selectedLanguage == 'FranÃ§ais') {
        await context.setLocale(const Locale('fr'));
        await prefs.setString(Constants.prefsLanguage, 'fr');
      } else if (_selectedLanguage == 'English') {
        await context.setLocale(const Locale('en'));
        await prefs.setString(Constants.prefsLanguage, 'en');
      } else if (_selectedLanguage == 'EspaÃ±ol') {
        await context.setLocale(const Locale('es'));
        await prefs.setString(Constants.prefsLanguage, 'es');
      } else if (_selectedLanguage == 'Deutsch') {
        await context.setLocale(const Locale('de'));
        await prefs.setString(Constants.prefsLanguage, 'de');
      }
      
      // Stocker tÃ©lÃ©phone et adresse dans les prÃ©fÃ©rences
      await prefs.setString('user_telephone', _telephoneController.text);
      await prefs.setString('user_adresse', _adresseController.text);
      await prefs.setString('abonnement_type', _abonnementType ?? kSubscriptionTypes[0]);
      
      // Mettre Ã  jour les informations du profil utilisateur
      if (_currentUser != null) {
        try {
          await secureAuth.updateUserProfile(
            displayName: _nomEntrepriseController.text,
            additionalData: {
              'phone': _telephoneController.text,
              'address': _adresseController.text,
              'subscriptionType': _abonnementType,
            },
          );
          
          // Mettre Ã  jour l'objet User local
          _currentUser = _currentUser!.copyWith(
            name: _nomEntrepriseController.text,
            phone: _telephoneController.text,
          );
          
          print('âœ… Profil utilisateur mis Ã  jour avec succÃ¨s');
          
        } catch (updateError) {
          print('âš ï¸ Erreur mise Ã  jour profil: $updateError');
        }
      }
      
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.check, color: Colors.white),
                const SizedBox(width: 8),
                Text(kSaveSuccessMessage),
              ],
            ),
            backgroundColor: Colors.green,
          ),
        );
      }
      
    } catch (e) {
      print('âŒ Erreur lors de la sauvegarde des prÃ©fÃ©rences: $e');
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${kNetworkErrorMessage}: $e'),
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: 'RÃ©essayer',
              textColor: Colors.white,
              onPressed: _saveUserPreferences,
            ),
          ),
        );
      }
    }
  }
  
  Future<void> _confirmLogout() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('DÃ©connexion'),
        content: const Text('ÃŠtes-vous sÃ»r de vouloir vous dÃ©connecter?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(
              foregroundColor: Colors.red,
            ),
            child: const Text('DÃ©connecter'),
          ),
        ],
      ),
    );
    
    if (confirmed == true) {
      try {
        await context.read<SecureAuthService>().signOut();
        
        if (mounted) {
          Navigator.of(context).pushNamedAndRemoveUntil(
            Constants.routeLogin,
            (route) => false,
          );
        }
      } catch (e) {
        print('âŒ Erreur lors de la dÃ©connexion: $e');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('${kAuthErrorMessage}: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }
  
  Future<void> _confirmDeleteAccount() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Supprimer le compte'),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir supprimer votre compte? '
          'Cette action est irrÃ©versible et toutes vos donnÃ©es seront perdues.'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(
              foregroundColor: Colors.red,
            ),
            child: const Text('Supprimer'),
          ),
        ],
      ),
    );
    
    if (confirmed == true) {
      setState(() {
        _isLoading = true;
      });
      
      try {
        await context.read<SecureAuthService>().signOut();
        
        if (mounted) {
          Navigator.of(context).pushNamedAndRemoveUntil(
            Constants.routeHome,
            (route) => false,
          );
          
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('DÃ©connexion effectuÃ©e. Contactez le support pour supprimer dÃ©finitivement votre compte.'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 5),
            ),
          );
        }
        
      } catch (e) {
        print('âŒ Erreur lors de la suppression du compte: $e');
        setState(() {
          _isLoading = false;
        });
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('${kUnknownErrorMessage}: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }
  
  void _openSupportWebsite() async {
    final Uri url = Uri.parse(Constants.urlSupport);
    if (!await launchUrl(url)) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Impossible d\'ouvrir la page de support'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  void _contactSupport() async {
    final userName = _currentUser?.displayName ?? 'Utilisateur';
    
    final Uri emailLaunchUri = Uri(
      scheme: 'mailto',
      path: 'support@kipik.fr',
      queryParameters: {
        'subject': 'Support ${Constants.appName} Pro - $userName',
        'body': 'Bonjour,\n\nJ\'ai besoin d\'aide concernant mon compte ${Constants.appName} Pro.\n\nCordialement,\n$userName'
      }
    );
    
    if (!await launchUrl(emailLaunchUri)) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Impossible d\'ouvrir l\'application de messagerie'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'ParamÃ¨tres Professionnels',
        showBackButton: true,
        showBurger: true,
        showNotificationIcon: false,
      ),
      drawer: DrawerFactory.of(context),
      body: _isLoading
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(color: KipikTheme.rouge),
                  const SizedBox(height: 16),
                  Text(Constants.loadingMessage),
                ],
              ),
            )
          : Consumer<SecureAuthService>(
              builder: (context, authService, child) {
                return SingleChildScrollView(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Section d'informations utilisateur
                      if (_currentUser != null) ...[
                        Card(
                          elevation: Constants.cardElevation,
                          margin: const EdgeInsets.only(bottom: 16),
                          child: Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Row(
                              children: [
                                CircleAvatar(
                                  radius: 30,
                                  backgroundColor: KipikTheme.rouge,
                                  backgroundImage: _currentUser!.profileImageUrl != null
                                      ? NetworkImage(_currentUser!.profileImageUrl!)
                                      : null,
                                  child: _currentUser!.profileImageUrl == null
                                      ? Text(
                                          _currentUser!.initials,
                                          style: const TextStyle(
                                            color: Colors.white,
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        )
                                      : null,
                                ),
                                const SizedBox(width: 16),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        _currentUser!.displayName,
                                        style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        _currentUser!.email ?? '',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[600],
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Container(
                                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                        decoration: BoxDecoration(
                                          color: KipikTheme.rouge.withOpacity(0.1),
                                          borderRadius: BorderRadius.circular(Constants.borderRadius),
                                        ),
                                        child: Text(
                                          _currentUser!.role.name,
                                          style: TextStyle(
                                            fontSize: 12,
                                            color: KipikTheme.rouge,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                // Badge super admin si applicable
                                if (_currentUser!.isSuperAdmin) ...[
                                  Container(
                                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                    decoration: BoxDecoration(
                                      color: Colors.purple.withOpacity(0.1),
                                      borderRadius: BorderRadius.circular(Constants.borderRadius),
                                      border: Border.all(color: Colors.purple),
                                    ),
                                    child: const Text(
                                      'ðŸ‘‘ SUPER',
                                      style: TextStyle(
                                        fontSize: 10,
                                        color: Colors.purple,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ),
                      ],
                      
                      // Section Profil Professionnel
                      _buildSectionTitle('Profil Professionnel'),
                      Card(
                        elevation: Constants.cardElevation,
                        margin: const EdgeInsets.only(bottom: 16),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              TextFormField(
                                controller: _nomEntrepriseController,
                                decoration: const InputDecoration(
                                  labelText: 'Nom de l\'entreprise',
                                  prefixIcon: Icon(Icons.business),
                                  border: OutlineInputBorder(),
                                ),
                              ),
                              const SizedBox(height: 16),
                              TextFormField(
                                controller: _emailController,
                                decoration: const InputDecoration(
                                  labelText: 'Email professionnel',
                                  prefixIcon: Icon(Icons.email),
                                  border: OutlineInputBorder(),
                                ),
                                keyboardType: TextInputType.emailAddress,
                                enabled: false, // Email non modifiable
                              ),
                              const SizedBox(height: 16),
                              TextFormField(
                                controller: _telephoneController,
                                decoration: const InputDecoration(
                                  labelText: 'TÃ©lÃ©phone',
                                  prefixIcon: Icon(Icons.phone),
                                  border: OutlineInputBorder(),
                                ),
                                keyboardType: TextInputType.phone,
                                inputFormatters: [
                                  FilteringTextInputFormatter.digitsOnly,
                                ],
                              ),
                              const SizedBox(height: 16),
                              TextFormField(
                                controller: _adresseController,
                                decoration: const InputDecoration(
                                  labelText: 'Adresse',
                                  prefixIcon: Icon(Icons.location_on),
                                  border: OutlineInputBorder(),
                                ),
                                maxLines: 3,
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      // Section Abonnement
                      _buildSectionTitle('Abonnement'),
                      Card(
                        elevation: Constants.cardElevation,
                        margin: const EdgeInsets.only(bottom: 16),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ListTile(
                                title: const Text(
                                  'Type d\'abonnement',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                subtitle: Text(_abonnementType ?? kSubscriptionTypes[0]),
                                trailing: OutlinedButton(
                                  onPressed: () {
                                    Navigator.of(context).pushNamed('/abonnements');
                                  },
                                  child: const Text('Modifier'),
                                ),
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text(
                                  'Facturation',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                subtitle: const Text('GÃ©rer vos informations de paiement'),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/facturation');
                                },
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text(
                                  'Historique des factures',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                subtitle: const Text('AccÃ©der Ã  vos factures prÃ©cÃ©dentes'),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/historique-factures');
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      // Section PrÃ©fÃ©rences
                      _buildSectionTitle('PrÃ©fÃ©rences'),
                      Card(
                        elevation: Constants.cardElevation,
                        margin: const EdgeInsets.only(bottom: 16),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ListTile(
                                title: const Text('Mode sombre'),
                                leading: const Icon(Icons.dark_mode),
                                trailing: Switch(
                                  value: _isDarkMode,
                                  onChanged: (value) {
                                    setState(() {
                                      _isDarkMode = value;
                                    });
                                  },
                                  activeColor: KipikTheme.rouge,
                                ),
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('Notifications'),
                                leading: const Icon(Icons.notifications),
                                trailing: Switch(
                                  value: _notificationsEnabled,
                                  onChanged: (value) {
                                    setState(() {
                                      _notificationsEnabled = value;
                                    });
                                  },
                                  activeColor: KipikTheme.rouge,
                                ),
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('GÃ©olocalisation'),
                                leading: const Icon(Icons.location_on),
                                trailing: Switch(
                                  value: _locationEnabled,
                                  onChanged: (value) {
                                    setState(() {
                                      _locationEnabled = value;
                                    });
                                  },
                                  activeColor: KipikTheme.rouge,
                                ),
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('Langue'),
                                leading: const Icon(Icons.language),
                                trailing: DropdownButton<String>(
                                  value: _selectedLanguage,
                                  onChanged: (newValue) {
                                    if (newValue != null) {
                                      setState(() {
                                        _selectedLanguage = newValue;
                                      });
                                    }
                                  },
                                  items: _availableLanguages.map((language) {
                                    return DropdownMenuItem<String>(
                                      value: language,
                                      child: Text(language),
                                    );
                                  }).toList(),
                                  underline: Container(),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      // Section Admin (seulement pour les admins)
                      if (_currentUser?.isAdmin() == true) ...[
                        _buildSectionTitle('Administration'),
                        Card(
                          elevation: Constants.cardElevation,
                          margin: const EdgeInsets.only(bottom: 16),
                          child: Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                ListTile(
                                  title: const Text('Panel Administrateur'),
                                  leading: const Icon(Icons.admin_panel_settings),
                                  trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                  onTap: () {
                                    Navigator.of(context).pushNamed('/admin/dashboard');
                                  },
                                ),
                                if (_currentUser?.isSuperAdmin == true) ...[
                                  const Divider(),
                                  ListTile(
                                    title: const Text('Gestion des Admins'),
                                    leading: const Icon(Icons.supervised_user_circle),
                                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                    onTap: () {
                                      Navigator.of(context).pushNamed('/admin/manage-admins');
                                    },
                                  ),
                                  const Divider(),
                                  ListTile(
                                    title: const Text('Logs de SÃ©curitÃ©'),
                                    leading: const Icon(Icons.security),
                                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                    onTap: () {
                                      Navigator.of(context).pushNamed('/admin/security-logs');
                                    },
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ),
                      ],
                      
                      // Section Support
                      _buildSectionTitle('Support et Aide'),
                      Card(
                        elevation: Constants.cardElevation,
                        margin: const EdgeInsets.only(bottom: 16),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ListTile(
                                title: const Text('Centre d\'aide'),
                                leading: const Icon(Icons.help),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: _openSupportWebsite,
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('Contacter le support'),
                                leading: const Icon(Icons.support_agent),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: _contactSupport,
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('FAQ'),
                                leading: const Icon(Icons.question_answer),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/faq');
                                },
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('Tutoriels'),
                                leading: const Icon(Icons.play_circle_outline),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/tutoriels');
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      // Section SÃ©curitÃ©
                      _buildSectionTitle('SÃ©curitÃ© et ConfidentialitÃ©'),
                      Card(
                        elevation: Constants.cardElevation,
                        margin: const EdgeInsets.only(bottom: 16),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ListTile(
                                title: const Text('Changer le mot de passe'),
                                leading: const Icon(Icons.lock_outline),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/change-password');
                                },
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('ParamÃ¨tres de confidentialitÃ©'),
                                leading: const Icon(Icons.privacy_tip_outlined),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/privacy-settings');
                                },
                              ),
                              const Divider(),
                              ListTile(
                                title: const Text('Authentification Ã  deux facteurs'),
                                leading: const Icon(Icons.security),
                                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                onTap: () {
                                  Navigator.of(context).pushNamed('/two-factor-auth');
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      // Section Compte
                      _buildSectionTitle('Compte'),
                      Card(
                        elevation: Constants.cardElevation,
                        margin: const EdgeInsets.only(bottom: 24),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              ListTile(
                                title: const Text(
                                  'DÃ©connexion',
                                  style: TextStyle(color: Colors.orange),
                                ),
                                leading: const Icon(
                                  Icons.logout,
                                  color: Colors.orange,
                                ),
                                onTap: _confirmLogout,
                              ),
                              // Masquer suppression compte pour super admin
                              if (_currentUser?.isSuperAdmin != true) ...[
                                const Divider(),
                                ListTile(
                                  title: const Text(
                                    'Supprimer le compte',
                                    style: TextStyle(color: Colors.red),
                                  ),
                                  leading: const Icon(
                                    Icons.delete_forever,
                                    color: Colors.red,
                                  ),
                                  onTap: _confirmDeleteAccount,
                                ),
                              ],
                            ],
                          ),
                        ),
                      ),
                      
                      // Bouton de sauvegarde
                      Padding(
                        padding: const EdgeInsets.only(bottom: 32.0),
                        child: Center(
                          child: ElevatedButton(
                            onPressed: _isLoading ? null : _saveUserPreferences,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: KipikTheme.rouge,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(Constants.borderRadius),
                              ),
                              minimumSize: const Size(double.infinity, Constants.buttonHeight),
                            ),
                            child: _isLoading
                                ? const CircularProgressIndicator(color: Colors.white)
                                : const Text(
                                    'Enregistrer les modifications',
                                    style: TextStyle(
                                      fontFamily: 'PermanentMarker',
                                      fontSize: 16,
                                    ),
                                  ),
                          ),
                        ),
                      ),
                      
                      // Informations sur la version
                      Center(
                        child: Padding(
                          padding: const EdgeInsets.only(bottom: 16.0),
                          child: Text(
                            '${Constants.appName} v${Constants.appVersion} â€¢ Â© 2025 Kipik SAS',
                            style: const TextStyle(
                              color: Colors.grey,
                              fontSize: 12,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }
  
  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(left: 8.0, top: 16.0, bottom: 8.0),
      child: Text(
        title,
        style: TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.bold,
          color: KipikTheme.rouge,
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\profil_tatoueur.dart

// lib/pages/pro/profil_tatoueur.dart

import 'dart:io';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart'; // âœ… CORRECT IMPORT
import 'package:kipik_v5/pages/particulier/demande_devis_page.dart';
import 'package:kipik_v5/pages/pro/mes_realisations_page.dart';
import 'package:kipik_v5/pages/pro/mon_shop_page.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';
import '../../theme/kipik_theme.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import '../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/core/database_manager.dart';
import 'package:kipik_v5/models/user_role.dart';

class ProfilTatoueur extends StatefulWidget {
  final String? tatoueurId;
  final String name;
  final String style;
  final String avatar;
  final String availability;
  final String studio;
  final String address;
  final double note;
  final String instagram;
  final String distance;
  final String location;
  
  final UserRole? forceMode;
  final int? initialTab; // âœ… NOUVEAU : Onglet Ã  sÃ©lectionner par dÃ©faut

  const ProfilTatoueur({
    Key? key,
    this.tatoueurId,
    this.name = 'InkMaster',
    this.style = 'RÃ©aliste',
    this.avatar = 'assets/avatars/avatar_profil_pro.jpg',
    this.availability = '3 jours',
    this.studio = 'Studio Ink',
    this.address = '15 Rue Saint-Dizier, 54000 Nancy',
    this.note = 4.5,
    this.instagram = '@inkmaster_tattoo',
    this.distance = '1.2 km',
    this.location = 'Nancy (54)',
    this.forceMode,
    this.initialTab, // âœ… NOUVEAU
  }) : super(key: key);

  @override
  State<ProfilTatoueur> createState() => _ProfilTatoueurState();
}

class _ProfilTatoueurState extends State<ProfilTatoueur> with TickerProviderStateMixin {
  bool _isFav = false;
  bool _isEditMode = false;
  bool _isLoading = true;
  File? _profileImage;
  File? _bannerImage;
  
  // âœ… CONTRÃ”LEUR POUR LES ONGLETS
  late TabController _tabController;
  
  // DonnÃ©es dynamiques
  Map<String, dynamic>? _tattooistData;
  UserRole? _currentUserRole;
  
  // âœ… DONNÃ‰ES FLASHS
  List<Map<String, dynamic>> _flashsList = [];
  bool _isLoadingFlashs = false;
  
  // ContrÃ´leurs pour les champs Ã©ditables
  late TextEditingController _nameController;
  late TextEditingController _studioController;
  late TextEditingController _styleController;
  late TextEditingController _addressController;
  late TextEditingController _instagramController;
  late TextEditingController _availabilityController;
  late TextEditingController _bioController;
  late TextEditingController _locationController;
  
  final String bannerAsset = 'assets/banniere_kipik.jpg';
  late String bio;

  @override
  void initState() {
    super.initState();
    // âœ… INITIALISATION AVEC ONGLET SPÃ‰CIFIQUE
    _tabController = TabController(
      length: 3, 
      vsync: this,
      initialIndex: widget.initialTab ?? 0, // âœ… Onglet par dÃ©faut ou spÃ©cifiÃ©
    );
    _initializeUserRole();
    _loadTattooistData();
    _loadFlashs(); // âœ… Charger les flashs
  }

  @override
  void dispose() {
    _tabController.dispose();
    _nameController.dispose();
    _studioController.dispose();
    _styleController.dispose();
    _addressController.dispose();
    _instagramController.dispose();
    _availabilityController.dispose();
    _bioController.dispose();
    _locationController.dispose();
    super.dispose();
  }

  void _initializeUserRole() {
    if (widget.forceMode != null) {
      _currentUserRole = widget.forceMode;
      return;
    }

    final currentRole = SecureAuthService.instance.currentUserRole;
    final currentUserId = SecureAuthService.instance.currentUserId;
    
    if (currentRole == UserRole.tatoueur) {
      if (widget.tatoueurId == null || widget.tatoueurId == currentUserId) {
        _currentUserRole = UserRole.tatoueur;
      } else {
        _currentUserRole = UserRole.client;
      }
    } else {
      _currentUserRole = currentRole;
    }

    print('ðŸŽ¯ RÃ´le utilisateur: $_currentUserRole pour utilisateur: $currentRole');
    print('ðŸŽ¯ Onglet initial sÃ©lectionnÃ©: ${widget.initialTab ?? 0}');
  }

  Future<void> _loadTattooistData() async {
    setState(() => _isLoading = true);
    
    try {
      if (widget.tatoueurId != null) {
        _tattooistData = await _fetchTattooistFromDatabase(widget.tatoueurId!);
      }
      
      if (_tattooistData == null) {
        _tattooistData = _generateTattooistData();
      }
      
      _initializeControllers();
      _generateBio();
      
    } catch (e) {
      print('âŒ Erreur chargement tatoueur: $e');
      _tattooistData = _generateTattooistData();
      _initializeControllers();
      _generateBio();
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // âœ… NOUVELLE MÃ‰THODE : CHARGER LES FLASHS
  Future<void> _loadFlashs() async {
    if (!_canManageFlashs && _currentUserRole != UserRole.client) return;
    
    setState(() => _isLoadingFlashs = true);
    
    try {
      // TODO: Remplacer par la vraie requÃªte Firebase
      await Future.delayed(const Duration(seconds: 1));
      
      // DonnÃ©es de dÃ©monstration
      _flashsList = _generateDemoFlashs();
      
    } catch (e) {
      print('âŒ Erreur chargement flashs: $e');
      _flashsList = [];
    } finally {
      setState(() => _isLoadingFlashs = false);
    }
  }

  // âœ… GÃ‰NÃ‰RER DES FLASHS DE DÃ‰MO
  List<Map<String, dynamic>> _generateDemoFlashs() {
    return [
      {
        'id': 'flash_001',
        'title': 'Rose Minimaliste',
        'imageUrl': 'assets/images/flash_rose.jpg',
        'price': 150.0,
        'size': '8x6cm',
        'style': 'Minimaliste',
        'status': 'available', // available, flashminute, reserved
        'tags': ['Rose', 'Fleur', 'DÃ©licat'],
        'placement': ['Poignet', 'Cheville'],
        'createdAt': DateTime.now().subtract(const Duration(days: 5)),
        'views': 24,
        'likes': 7,
      },
      {
        'id': 'flash_002',
        'title': 'Lion GÃ©omÃ©trique',
        'imageUrl': 'assets/images/flash_lion.jpg',
        'price': 280.0,
        'size': '12x10cm',
        'style': 'GÃ©omÃ©trique',
        'status': 'flashminute',
        'originalPrice': 350.0,
        'discount': 20,
        'tags': ['Lion', 'Animal', 'GÃ©omÃ©trie'],
        'placement': ['Bras', 'Cuisse'],
        'createdAt': DateTime.now().subtract(const Duration(days: 2)),
        'views': 45,
        'likes': 12,
        'urgentUntil': DateTime.now().add(const Duration(hours: 6)),
      },
      {
        'id': 'flash_003',
        'title': 'Mandala Lotus',
        'imageUrl': 'assets/images/flash_mandala.jpg',
        'price': 200.0,
        'size': '10x10cm',
        'style': 'Mandala',
        'status': 'available',
        'tags': ['Mandala', 'Lotus', 'Spirituel'],
        'placement': ['Dos', 'Avant-bras'],
        'createdAt': DateTime.now().subtract(const Duration(days: 10)),
        'views': 31,
        'likes': 9,
      },
    ];
  }

  Future<Map<String, dynamic>?> _fetchTattooistFromDatabase(String tatoueurId) async {
    try {
      final firestore = DatabaseManager.instance.firestore;
      final doc = await firestore.collection('users').doc(tatoueurId).get();
      
      if (doc.exists) {
        final data = doc.data()!;
        data['id'] = doc.id;
        print('âœ… DonnÃ©es tatoueur chargÃ©es depuis ${DatabaseManager.instance.activeDatabaseConfig.name}');
        return data;
      }
      
      return null;
    } catch (e) {
      print('âŒ Erreur rÃ©cupÃ©ration tatoueur: $e');
      return null;
    }
  }

  Map<String, dynamic> _generateTattooistData() {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    final dbName = DatabaseManager.instance.activeDatabaseConfig.name;
    
    if (isDemoMode) {
      final demoProfiles = [
        {
          'name': 'Alex Dubois',
          'displayName': 'Alex Dubois',
          'email': 'alex.tattoo@demo.kipik.ink',
          'studio': 'Studio Ink Paris',
          'style': 'RÃ©aliste, Japonais',
          'location': 'Paris (75)',
          'address': '42 Rue des Martyrs, 75009 Paris',
          'availability': '2-3 semaines',
          'instagram': '@alex_ink_paris',
          'note': 4.8,
          'reviewsCount': 156,
          'experience': 12,
          'specialties': ['RÃ©alisme', 'Portraits', 'Japonais traditionnel'],
          'bio': 'Tatoueur passionnÃ© spÃ©cialisÃ© dans le rÃ©alisme et l\'art japonais traditionnel. 12 ans d\'expÃ©rience dans le milieu du tatouage parisien.',
          'isActive': true,
          'role': 'tatoueur',
          '_source': 'demo',
        },
      ];
      
      final randomProfile = demoProfiles[Random().nextInt(demoProfiles.length)];
      randomProfile['_generatedFrom'] = dbName;
      
      return randomProfile;
      
    } else {
      return {
        'name': widget.name,
        'displayName': widget.name,
        'studio': widget.studio,
        'style': widget.style,
        'location': widget.location,
        'address': widget.address,
        'availability': widget.availability,
        'instagram': widget.instagram,
        'note': widget.note,
        'reviewsCount': 127,
        'experience': 10,
        'specialties': [widget.style],
        'bio': 'Tatoueur professionnel passionnÃ© par le ${widget.style}. 10 ans d\'expÃ©rience Ã  ${widget.location}.',
        'isActive': true,
        'role': 'tatoueur',
        '_source': 'production',
        '_generatedFrom': DatabaseManager.instance.activeDatabaseConfig.name,
      };
    }
  }

  void _initializeControllers() {
    final data = _tattooistData!;
    
    _nameController = TextEditingController(text: data['name'] ?? data['displayName'] ?? widget.name);
    _studioController = TextEditingController(text: data['studio'] ?? widget.studio);
    _styleController = TextEditingController(text: data['style'] ?? widget.style);
    _addressController = TextEditingController(text: data['address'] ?? widget.address);
    _instagramController = TextEditingController(text: data['instagram'] ?? widget.instagram);
    _availabilityController = TextEditingController(text: data['availability'] ?? widget.availability);
    _locationController = TextEditingController(text: data['location'] ?? widget.location);
  }

  void _generateBio() {
    final data = _tattooistData!;
    
    if (data['bio'] != null) {
      bio = data['bio'];
    } else {
      final experience = data['experience'] ?? 10;
      final specialties = data['specialties'] as List<dynamic>? ?? [data['style'] ?? widget.style];
      
      bio = 'Tatoueur passionnÃ© spÃ©cialisÃ© en ${specialties.join(', ')}.\n'
          '$experience ans d\'expÃ©rience Ã  ${data['location'] ?? widget.location}.\n'
          'Travaillant au studio "${data['studio'] ?? widget.studio}".\n'
          'Mes crÃ©ations sont reconnues pour leur finesse et leur prÃ©cision.';
    }
    
    _bioController = TextEditingController(text: bio);
  }

  // âœ… PERMISSIONS
  bool get _canEdit {
    switch (_currentUserRole) {
      case UserRole.tatoueur:
        return true;
      case UserRole.admin:
        return true;
      case UserRole.client:
      case UserRole.organisateur:
      default:
        return false;
    }
  }

  bool get _canManageFlashs {
    return _currentUserRole == UserRole.tatoueur || _currentUserRole == UserRole.admin;
  }

  bool get _canViewFlashs {
    // Tous les utilisateurs peuvent voir les flashs, mais avec des interfaces diffÃ©rentes
    return true;
  }

  bool get _showDevisButton {
    switch (_currentUserRole) {
      case UserRole.client:
        return true;
      case UserRole.organisateur:
      case UserRole.tatoueur:
      case UserRole.admin:
      default:
        return false;
    }
  }

  bool get _showFavoriteButton {
    switch (_currentUserRole) {
      case UserRole.client:
      case UserRole.organisateur:
        return true;
      case UserRole.tatoueur:
      case UserRole.admin:
      default:
        return false;
    }
  }

  String get _getPageTitle {
    switch (_currentUserRole) {
      case UserRole.tatoueur:
        return 'Mon Profil';
      case UserRole.admin:
        return 'Profil Tatoueur (Admin)';
      case UserRole.organisateur:
        return 'Profil Tatoueur';
      case UserRole.client:
      default:
        return 'Profil Tatoueur';
    }
  }

  String get _getFlashTabTitle {
    switch (_currentUserRole) {
      case UserRole.tatoueur:
      case UserRole.admin:
        return 'Mes Flashs';
      case UserRole.client:
      case UserRole.organisateur:
      default:
        return 'Flashs Dispo';
    }
  }

  UserMode _getShopMode() {
    switch (_currentUserRole) {
      case UserRole.tatoueur:
        return UserMode.tatoueur;
      case UserRole.client:
      case UserRole.organisateur:
      case UserRole.admin:
      default:
        return UserMode.particulier;
    }
  }

  // âœ… SÃ‰LECTION D'IMAGE AVEC FILE_SELECTOR
  Future<void> _pickProfileImage() async {
    if (!_canEdit) return;
    
    const XTypeGroup typeGroup = XTypeGroup(
      label: 'Images',
      extensions: <String>['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? image = await openFile(acceptedTypeGroups: <XTypeGroup>[typeGroup]);
    
    if (image != null) {
      setState(() {
        _profileImage = File(image.path);
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Photo de profil mise Ã  jour !'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  Future<void> _pickBannerImage() async {
    if (!_canEdit) return;
    
    const XTypeGroup typeGroup = XTypeGroup(
      label: 'Images',
      extensions: <String>['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? image = await openFile(acceptedTypeGroups: <XTypeGroup>[typeGroup]);
    
    if (image != null) {
      setState(() {
        _bannerImage = File(image.path);
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('BanniÃ¨re mise Ã  jour !'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  Future<void> _pickFlashImage() async {
    const XTypeGroup typeGroup = XTypeGroup(
      label: 'Images',
      extensions: <String>['jpg', 'jpeg', 'png', 'webp'],
    );

    final XFile? image = await openFile(acceptedTypeGroups: <XTypeGroup>[typeGroup]);
    
    if (image != null) {
      // TODO: Traiter l'image sÃ©lectionnÃ©e pour le flash
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Image sÃ©lectionnÃ©e : ${image.name}'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  void _toggleEditMode() {
    if (!_canEdit) return;
    
    setState(() {
      _isEditMode = !_isEditMode;
    });
  }

  Future<void> _saveChanges() async {
    if (!_canEdit) return;
    
    setState(() => _isLoading = true);
    
    try {
      final firestore = DatabaseManager.instance.firestore;
      final userId = widget.tatoueurId ?? SecureAuthService.instance.currentUserId;
      
      if (userId != null) {
        await firestore.collection('users').doc(userId).update({
          'displayName': _nameController.text,
          'name': _nameController.text,
          'studio': _studioController.text,
          'style': _styleController.text,
          'address': _addressController.text,
          'instagram': _instagramController.text,
          'availability': _availabilityController.text,
          'location': _locationController.text,
          'bio': _bioController.text,
          'updatedAt': DateTime.now().toIso8601String(),
          'updatedBy': SecureAuthService.instance.currentUserId,
        });
        
        print('âœ… Profil sauvegardÃ© dans ${DatabaseManager.instance.activeDatabaseConfig.name}');
      }
      
      setState(() {
        _isEditMode = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Modifications sauvegardÃ©es !'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
      
    } catch (e) {
      print('âŒ Erreur sauvegarde: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de la sauvegarde: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // âœ… MÃ‰THODES POUR GESTION DES FLASHS
  Future<void> _addNewFlash() async {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => _buildAddFlashBottomSheet(),
    );
  }

  Future<void> _activateFlashMinute(String flashId) async {
    final flash = _flashsList.firstWhere((f) => f['id'] == flashId);
    
    showDialog(
      context: context,
      builder: (context) => _buildFlashMinuteDialog(flash),
    );
  }

  Future<void> _deleteFlash(String flashId) async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Supprimer ce flash ?'),
        content: const Text('Cette action est irrÃ©versible.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                _flashsList.removeWhere((f) => f['id'] == flashId);
              });
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Flash supprimÃ©')),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Supprimer', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  // âœ… RÃ‰SERVER UN FLASH (pour les clients)
  Future<void> _reserveFlash(Map<String, dynamic> flash) async {
    if (_currentUserRole != UserRole.client) return;
    
    // Naviguer vers la page de demande de devis avec le flash prÃ©rempli
    final result = await Navigator.of(context).push(
      MaterialPageRoute(
        builder: (_) => DemandeDevisPage(
          prefilledFlash: flash,
          tatoueurId: widget.tatoueurId,
          tatoueurName: widget.name,
        ),
      ),
    );

    // Si la rÃ©servation a Ã©tÃ© confirmÃ©e
    if (result == true) {
      setState(() {
        flash['status'] = 'reserved';
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Flash "${flash['title']}" rÃ©servÃ© !'),
            backgroundColor: const Color(0xFF10B981),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading || _tattooistData == null) {
      return Scaffold(
        backgroundColor: const Color(0xFF0A0A0A),
        appBar: CustomAppBarKipik(
          title: 'Chargement...',
          showBackButton: true,
          useProStyle: true,
        ),
        body: const Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    final data = _tattooistData!;
    final note = (data['note'] as num?)?.toDouble() ?? widget.note;
    final reviewsCount = data['reviewsCount'] as int? ?? 127;

    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      extendBodyBehindAppBar: true,
      endDrawer: DrawerFactory.of(context),
      appBar: CustomAppBarKipik(
        title: _getPageTitle,
        showBackButton: true,
        useProStyle: true,
        onBackPressed: () {
          if (_currentUserRole == UserRole.tatoueur) {
            Navigator.pushAndRemoveUntil(
              context,
              MaterialPageRoute(builder: (context) => const HomePagePro()),
              (route) => false,
            );
          } else {
            Navigator.pop(context);
          }
        },
        actions: [
          if (_showFavoriteButton) ...[
            IconButton(
              icon: Icon(
                _isFav ? Icons.favorite : Icons.favorite_border,
                color: _isFav ? KipikTheme.rouge : Colors.white,
                size: 24,
              ),
              onPressed: () => setState(() => _isFav = !_isFav),
            ),
          ],
          if (_canEdit) ...[
            IconButton(
              icon: Icon(
                _isEditMode ? Icons.save : Icons.edit,
                color: Colors.white,
                size: 24,
              ),
              onPressed: _isEditMode ? _saveChanges : _toggleEditMode,
            ),
          ],
          if (_currentUserRole == UserRole.admin) ...[
            IconButton(
              icon: const Icon(Icons.admin_panel_settings, color: Colors.amber, size: 24),
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Actions admin Ã  implÃ©menter')),
                );
              },
            ),
          ],
          Builder(
            builder: (context) => IconButton(
              icon: const Icon(Icons.menu, color: Colors.white, size: 24),
              onPressed: () => Scaffold.of(context).openEndDrawer(),
            ),
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(
        allowImageGeneration: false,
      ),

      body: SafeArea(
        bottom: true,
        child: Column(
          children: [
            const SizedBox(height: 24),

            // BanniÃ¨re + avatar (partie fixe)
            _buildHeader(data),
            
            const SizedBox(height: 90),

            // Profil du tatoueur (partie fixe)
            _buildProfileInfo(data, note, reviewsCount),
            
            const SizedBox(height: 24),
            
            // âœ… ONGLETS AVEC MES FLASHS
            _buildTabSection(),
          ],
        ),
      ),

      bottomNavigationBar: _showDevisButton ? SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Container(
            height: 60,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  KipikTheme.rouge,
                  KipikTheme.rouge.withOpacity(0.8),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: KipikTheme.rouge.withOpacity(0.3),
                  blurRadius: 16,
                  offset: const Offset(0, 8),
                ),
              ],
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(20),
                onTap: () => Navigator.of(context).push(
                  MaterialPageRoute(builder: (_) => const DemandeDevisPage()),
                ),
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.request_quote_outlined, color: Colors.white, size: 24),
                    SizedBox(width: 12),
                    Text(
                      'Demander un devis',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ) : null,
    );
  }

  Widget _buildHeader(Map<String, dynamic> data) {
    return Stack(
      clipBehavior: Clip.none,
      alignment: Alignment.center,
      children: [
        GestureDetector(
          onTap: _canEdit ? _pickBannerImage : null,
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 10,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            margin: const EdgeInsets.symmetric(horizontal: 16),
            child: Stack(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(20),
                  child: _bannerImage != null 
                      ? Image.file(
                          _bannerImage!,
                          width: double.infinity,
                          height: 180,
                          fit: BoxFit.cover,
                        )
                      : Image.asset(
                          bannerAsset,
                          width: double.infinity,
                          height: 180,
                          fit: BoxFit.cover,
                        ),
                ),
                if (_canEdit)
                  Positioned(
                    top: 12,
                    right: 12,
                    child: Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.6),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(
                        Icons.camera_alt,
                        color: Colors.white,
                        size: 20,
                      ),
                    ),
                  ),
                if (DatabaseManager.instance.isDemoMode)
                  Positioned(
                    top: 12,
                    left: 12,
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.orange.withOpacity(0.9),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        'ðŸŽ­ ${DatabaseManager.instance.activeDatabaseConfig.name}',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
        Positioned(
          bottom: -80,
          child: GestureDetector(
            onTap: _canEdit ? _pickProfileImage : null,
            child: Hero(
              tag: 'avatarHero',
              child: Container(
                width: 160,
                height: 160,
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(color: Colors.white, width: 4),
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.2),
                      blurRadius: 16,
                      offset: const Offset(0, 8),
                    ),
                  ],
                  image: _profileImage != null
                      ? DecorationImage(
                          image: FileImage(_profileImage!),
                          fit: BoxFit.cover,
                        )
                      : DecorationImage(
                          image: AssetImage(widget.avatar),
                          fit: BoxFit.cover,
                        ),
                ),
                child: _canEdit ? Align(
                  alignment: Alignment.bottomRight,
                  child: Container(
                    margin: const EdgeInsets.all(8),
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: KipikTheme.rouge,
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: KipikTheme.rouge.withOpacity(0.3),
                          blurRadius: 8,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.camera_alt,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                ) : null,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildProfileInfo(Map<String, dynamic> data, double note, int reviewsCount) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 24,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        children: [
          // Nom et studio
          _buildEditableField(
            controller: _nameController,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 26,
              color: Color(0xFF111827),
              fontWeight: FontWeight.w400,
            ),
            hintText: 'Nom du tatoueur',
          ),
          const SizedBox(height: 8),
          
          _buildEditableField(
            controller: _studioController,
            style: const TextStyle(
              fontSize: 18,
              color: Color(0xFF6B7280),
              fontFamily: 'Roboto',
              fontWeight: FontWeight.w500,
            ),
            hintText: 'Nom du studio',
          ),
          
          const SizedBox(height: 16),
          
          // Note
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              color: Colors.amber.withOpacity(0.1),
              borderRadius: BorderRadius.circular(20),
              border: Border.all(color: Colors.amber.withOpacity(0.2)),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                for (int i = 0; i < 5; i++)
                  Icon(
                    i < note.floor() ? Icons.star : 
                    (i == note.floor() && note % 1 > 0) ? Icons.star_half : Icons.star_outline,
                    color: Colors.amber,
                    size: 20,
                  ),
                const SizedBox(width: 8),
                Text(
                  '$note',
                  style: const TextStyle(
                    color: Color(0xFF111827),
                    fontFamily: 'PermanentMarker',
                    fontWeight: FontWeight.w400,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(width: 4),
                Text(
                  '($reviewsCount avis)',
                  style: const TextStyle(
                    color: Color(0xFF6B7280),
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 20),

          // Instagram
          if (_isEditMode || _instagramController.text.isNotEmpty)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: const Color(0xFF3B82F6).withOpacity(0.1),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(color: const Color(0xFF3B82F6).withOpacity(0.2)),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(
                    Icons.camera_alt,
                    color: Color(0xFF3B82F6),
                    size: 16,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: _buildEditableField(
                      controller: _instagramController,
                      style: const TextStyle(
                        color: Color(0xFF3B82F6),
                        fontSize: 16,
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w600,
                      ),
                      hintText: '@votre_instagram',
                      compact: true,
                    ),
                  ),
                ],
              ),
            ),
          
          const SizedBox(height: 24),

          // Points forts
          _buildPointsForts(),
          
          const SizedBox(height: 20),

          // Ã€ propos
          _buildAPropos(),
        ],
      ),
    );
  }

  // âœ… NOUVELLE SECTION AVEC ONGLETS
  Widget _buildTabSection() {
    return Expanded(
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 16),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.08),
              blurRadius: 24,
              offset: const Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          children: [
            // âœ… BARRE D'ONGLETS
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[50],
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
              ),
              child: TabBar(
                controller: _tabController,
                indicatorColor: KipikTheme.rouge,
                labelColor: KipikTheme.rouge,
                unselectedLabelColor: Colors.grey[600],
                labelStyle: const TextStyle(
                  fontWeight: FontWeight.w600,
                  fontSize: 14,
                ),
                tabs: [
                  Tab(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.store_outlined, size: 18),
                        const SizedBox(width: 4),
                        Text(_currentUserRole == UserRole.tatoueur ? 'Mon Shop' : 'Shop'),
                      ],
                    ),
                  ),
                  Tab(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.photo_library_outlined, size: 18),
                        const SizedBox(width: 4),
                        Text(_currentUserRole == UserRole.tatoueur ? 'RÃ©alisations' : 'RÃ©alisations'),
                      ],
                    ),
                  ),
                  // âœ… ONGLET FLASHS - VISIBLE POUR TOUS
                  if (_canViewFlashs)
                    Tab(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Icon(Icons.flash_on_outlined, size: 18),
                          const SizedBox(width: 4),
                          Text(_getFlashTabTitle),
                        ],
                      ),
                    ),
                ],
              ),
            ),
            
            // âœ… CONTENU DES ONGLETS
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  // Shop
                  _buildShopTab(),
                  // RÃ©alisations
                  _buildRealisationsTab(),
                  // âœ… Flashs (visible pour tous)
                  if (_canViewFlashs) _buildFlashsTab(),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildShopTab() {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.store_outlined, size: 64, color: Colors.grey[400]),
          const SizedBox(height: 16),
          Text(
            _currentUserRole == UserRole.tatoueur ? 'Mon Shop' : 'Shop du tatoueur',
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Produits et accessoires',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => Navigator.of(context).push(
              MaterialPageRoute(builder: (_) => MonShopPage(
                mode: _getShopMode(),
              )),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: Text(_currentUserRole == UserRole.tatoueur ? 'GÃ©rer mon Shop' : 'Voir le Shop'),
          ),
        ],
      ),
    );
  }

  Widget _buildRealisationsTab() {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.photo_library_outlined, size: 64, color: Colors.grey[400]),
          const SizedBox(height: 16),
          Text(
            _currentUserRole == UserRole.tatoueur ? 'Mes RÃ©alisations' : 'RÃ©alisations',
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Portfolio de tatouages rÃ©alisÃ©s',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => Navigator.of(context).push(
              MaterialPageRoute(builder: (_) => const MesRealisationsPage()),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: Text(_currentUserRole == UserRole.tatoueur ? 'GÃ©rer mes RÃ©alisations' : 'Voir les RÃ©alisations'),
          ),
        ],
      ),
    );
  }

  // âœ… ONGLET FLASHS - ADAPTATIF SELON LE RÃ”LE
  Widget _buildFlashsTab() {
    if (_isLoadingFlashs) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_flashsList.isEmpty) {
      return Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.flash_on_outlined, size: 64, color: Colors.grey[400]),
            const SizedBox(height: 16),
            Text(
              _canManageFlashs ? 'Aucun flash disponible' : 'Aucun flash disponible',
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _canManageFlashs 
                  ? 'CrÃ©ez vos premiers flashs pour attirer les clients'
                  : 'Ce tatoueur n\'a pas encore publiÃ© de flashs',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[600],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            if (_canManageFlashs)
              ElevatedButton.icon(
                onPressed: _addNewFlash,
                icon: const Icon(Icons.add),
                label: const Text('CrÃ©er mon premier Flash'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
          ],
        ),
      );
    }

    return Column(
      children: [
        // âœ… EN-TÃŠTE AVEC ACTIONS
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            border: Border(
              bottom: BorderSide(color: Colors.grey[200]!),
            ),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                _canManageFlashs 
                    ? 'Mes Flashs (${_flashsList.where((f) => f['status'] != 'reserved').length})'
                    : 'Flashs Disponibles (${_flashsList.where((f) => f['status'] != 'reserved').length})',
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              if (_canManageFlashs)
                Row(
                  children: [
                    // Bouton Flash Minute
                    OutlinedButton.icon(
                      onPressed: () => _showFlashMinuteInfo(),
                      icon: const Icon(Icons.flash_on, size: 16),
                      label: const Text('Flash Minute'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.orange,
                        side: const BorderSide(color: Colors.orange),
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      ),
                    ),
                    const SizedBox(width: 8),
                    // Bouton Ajouter
                    ElevatedButton.icon(
                      onPressed: _addNewFlash,
                      icon: const Icon(Icons.add, size: 16),
                      label: const Text('Ajouter'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: KipikTheme.rouge,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      ),
                    ),
                  ],
                ),
            ],
          ),
        ),
        
        // âœ… LISTE DES FLASHS
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: _canManageFlashs 
                ? _flashsList.length 
                : _flashsList.where((f) => f['status'] != 'reserved').length,
            itemBuilder: (context, index) {
              final flashList = _canManageFlashs 
                  ? _flashsList 
                  : _flashsList.where((f) => f['status'] != 'reserved').toList();
              final flash = flashList[index];
              return _buildFlashCard(flash);
            },
          ),
        ),
      ],
    );
  }

  // âœ… CARTE FLASH ADAPTATIVE
  Widget _buildFlashCard(Map<String, dynamic> flash) {
    final isFlashMinute = flash['status'] == 'flashminute';
    final hasDiscount = flash['discount'] != null;
    final isReserved = flash['status'] == 'reserved';
    final isClient = _currentUserRole == UserRole.client;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: isFlashMinute ? Border.all(color: Colors.orange, width: 2) : null,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            // Image du flash
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                color: Colors.grey[200],
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: Image.asset(
                  flash['imageUrl'] ?? 'assets/images/placeholder_flash.jpg',
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return Container(
                      color: Colors.grey[200],
                      child: Icon(Icons.image, color: Colors.grey[400], size: 32),
                    );
                  },
                ),
              ),
            ),
            
            const SizedBox(width: 16),
            
            // Informations
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Titre + Badge Flash Minute
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          flash['title'] ?? 'Flash sans titre',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      if (isFlashMinute)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.orange,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Text(
                            'FLASH MINUTE',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      if (isReserved)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.grey[600],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Text(
                            'RÃ‰SERVÃ‰',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                    ],
                  ),
                  
                  const SizedBox(height: 4),
                  
                  // Style et taille
                  Text(
                    '${flash['style']} â€¢ ${flash['size']}',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                  
                  const SizedBox(height: 8),
                  
                  // Prix
                  Row(
                    children: [
                      if (hasDiscount) ...[
                        Text(
                          '${flash['originalPrice']}â‚¬',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[500],
                            decoration: TextDecoration.lineThrough,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.green,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            '-${flash['discount']}%',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                      ],
                      Text(
                        '${flash['price']}â‚¬',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: isFlashMinute ? Colors.orange : KipikTheme.rouge,
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 8),
                  
                  // Stats ou Action pour client
                  if (isClient && !isReserved) ...[
                    // Bouton RÃ©server pour les clients
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: () => _reserveFlash(flash),
                        icon: const Icon(Icons.flash_on, size: 16),
                        label: Text(isFlashMinute ? 'RÃ©server Flash Minute!' : 'RÃ©server ce Flash'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: isFlashMinute ? Colors.orange : KipikTheme.rouge,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 8),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                      ),
                    ),
                  ] else ...[
                    // Stats pour les tatoueurs
                    Row(
                      children: [
                        Icon(Icons.visibility, size: 16, color: Colors.grey[500]),
                        const SizedBox(width: 4),
                        Text(
                          '${flash['views']}',
                          style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                        ),
                        const SizedBox(width: 12),
                        Icon(Icons.favorite, size: 16, color: Colors.grey[500]),
                        const SizedBox(width: 4),
                        Text(
                          '${flash['likes']}',
                          style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ],
                ],
              ),
            ),
            
            // Actions pour tatoueurs
            if (_canManageFlashs)
              PopupMenuButton<String>(
                onSelected: (value) {
                  switch (value) {
                    case 'flashminute':
                      _activateFlashMinute(flash['id']);
                      break;
                    case 'edit':
                      // TODO: Ã‰diter le flash
                      break;
                    case 'delete':
                      _deleteFlash(flash['id']);
                      break;
                  }
                },
                itemBuilder: (context) => [
                  if (!isFlashMinute && !isReserved)
                    const PopupMenuItem(
                      value: 'flashminute',
                      child: Row(
                        children: [
                          Icon(Icons.flash_on, color: Colors.orange),
                          SizedBox(width: 8),
                          Text('Flash Minute'),
                        ],
                      ),
                    ),
                  const PopupMenuItem(
                    value: 'edit',
                    child: Row(
                      children: [
                        Icon(Icons.edit),
                        SizedBox(width: 8),
                        Text('Modifier'),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'delete',
                    child: Row(
                      children: [
                        Icon(Icons.delete, color: Colors.red),
                        SizedBox(width: 8),
                        Text('Supprimer'),
                      ],
                    ),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  // âœ… MÃ‰THODES BOTTOM SHEETS ET DIALOGS
  Widget _buildAddFlashBottomSheet() {
    return Container(
      height: MediaQuery.of(context).size.height * 0.9,
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
      ),
      child: Column(
        children: [
          // Handle
          Container(
            margin: const EdgeInsets.only(top: 12),
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          
          // Header
          Padding(
            padding: const EdgeInsets.all(20),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Ajouter un Flash',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                IconButton(
                  onPressed: () => Navigator.pop(context),
                  icon: const Icon(Icons.close),
                ),
              ],
            ),
          ),
          
          // Contenu
          Expanded(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.flash_on_outlined, size: 80, color: Colors.grey[400]),
                  const SizedBox(height: 20),
                  const Text(
                    'CrÃ©er un nouveau Flash',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    'Uploadez un design et dÃ©finissez le prix',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                  const SizedBox(height: 32),
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () {
                        Navigator.pop(context);
                        _pickFlashImage();
                      },
                      icon: const Icon(Icons.add_photo_alternate),
                      label: const Text('SÃ©lectionner une image'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: KipikTheme.rouge,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // âœ… DIALOG FLASH MINUTE AMÃ‰LIORÃ‰ AVEC DURÃ‰E CONFIGURABLE
  Widget _buildFlashMinuteDialog(Map<String, dynamic> flash) {
    int selectedHours = 8; // DurÃ©e par dÃ©faut
    int selectedDiscount = 20; // RÃ©duction par dÃ©faut
    
    return StatefulBuilder(
      builder: (context, setDialogState) {
        final newPrice = flash['price'] * (1 - selectedDiscount / 100);
        
        return AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.flash_on, color: Colors.orange),
              SizedBox(width: 8),
              Text('Activer Flash Minute'),
            ],
          ),
          content: SizedBox(
            width: double.maxFinite,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Flash : ${flash['title']}'),
                const SizedBox(height: 8),
                Text('Prix actuel : ${flash['price']}â‚¬'),
                const SizedBox(height: 16),
                
                // SÃ©lection de la rÃ©duction
                const Text(
                  'RÃ©duction :',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                DropdownButton<int>(
                  value: selectedDiscount,
                  isExpanded: true,
                  items: [10, 20, 30, 40].map((discount) {
                    final discountedPrice = flash['price'] * (1 - discount / 100);
                    return DropdownMenuItem(
                      value: discount,
                      child: Text('-$discount% â†’ ${discountedPrice.toStringAsFixed(0)}â‚¬'),
                    );
                  }).toList(),
                  onChanged: (value) {
                    if (value != null) {
                      setDialogState(() {
                        selectedDiscount = value;
                      });
                    }
                  },
                ),
                
                const SizedBox(height: 16),
                
                // SÃ©lection de la durÃ©e
                const Text(
                  'DurÃ©e :',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                DropdownButton<int>(
                  value: selectedHours,
                  isExpanded: true,
                  items: [8, 12, 24, 48, 72].map((hours) {
                    return DropdownMenuItem(
                      value: hours,
                      child: Text('$hours heures'),
                    );
                  }).toList(),
                  onChanged: (value) {
                    if (value != null) {
                      setDialogState(() {
                        selectedHours = value;
                      });
                    }
                  },
                ),
                
                const SizedBox(height: 16),
                
                // RÃ©capitulatif
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.orange.withOpacity(0.3)),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'RÃ©capitulatif Flash Minute :',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 4),
                      Text('â€¢ Prix final : ${newPrice.toStringAsFixed(0)}â‚¬'),
                      Text('â€¢ Ã‰conomie : ${(flash['price'] - newPrice).toStringAsFixed(0)}â‚¬'),
                      Text('â€¢ DurÃ©e : $selectedHours heures'),
                      Text('â€¢ Fin : ${DateTime.now().add(Duration(hours: selectedHours)).toString().substring(0, 16)}'),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Annuler'),
            ),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  flash['status'] = 'flashminute';
                  flash['originalPrice'] = flash['price'];
                  flash['price'] = newPrice;
                  flash['discount'] = selectedDiscount;
                  flash['urgentUntil'] = DateTime.now().add(Duration(hours: selectedHours));
                });
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Flash Minute activÃ© ! -$selectedDiscount% pendant ${selectedHours}h'),
                    backgroundColor: Colors.orange,
                    behavior: SnackBarBehavior.floating,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
              ),
              child: const Text('Activer'),
            ),
          ],
        );
      },
    );
  }

  void _showFlashMinuteInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.flash_on, color: Colors.orange),
            SizedBox(width: 8),
            Text('Flash Minute'),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Qu\'est-ce que Flash Minute ?',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              'Quand un client annule au dernier moment, activez Flash Minute sur vos flashs pour les proposer avec une rÃ©duction et remplir votre crÃ©neau libre.',
            ),
            SizedBox(height: 16),
            Text(
              'âš¡ Promotion immÃ©diate\n'
              'ðŸ“± Notification aux clients\n'
              'ðŸ’° Optimisation des revenus\n'
              'â° DurÃ©e configurable (8h Ã  72h)\n'
              'ðŸŽ¯ Pricing dynamique',
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Compris'),
          ),
        ],
      ),
    );
  }

  // âœ… NOTIFICATION AUTOMATIQUE LORS D'ANNULATION (Ã  appeler depuis le systÃ¨me de rÃ©servation)
  void _showCancellationFlashMinutePrompt() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.warning_amber, color: Colors.orange),
            SizedBox(width: 8),
            Text('CrÃ©neau annulÃ©'),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Un client vient d\'annuler son rendez-vous.'),
            SizedBox(height: 12),
            Text(
              'Voulez-vous activer Flash Minute sur vos flashs disponibles pour optimiser votre planning ?',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Plus tard'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _activateFlashMinuteForAll();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
            ),
            child: const Text('Activer Flash Minute'),
          ),
        ],
      ),
    );
  }

  // âœ… ACTIVER FLASH MINUTE SUR TOUS LES FLASHS DISPONIBLES
  void _activateFlashMinuteForAll() {
    final availableFlashs = _flashsList.where((f) => f['status'] == 'available').toList();
    
    if (availableFlashs.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Aucun flash disponible pour Flash Minute')),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Activer Flash Minute en masse'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('${availableFlashs.length} flashs seront activÃ©s en Flash Minute'),
            const SizedBox(height: 16),
            const Text('ParamÃ¨tres par dÃ©faut :'),
            const Text('â€¢ RÃ©duction : -20%'),
            const Text('â€¢ DurÃ©e : 8 heures'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                for (var flash in availableFlashs) {
                  flash['status'] = 'flashminute';
                  flash['originalPrice'] = flash['price'];
                  flash['price'] = flash['price'] * 0.8; // -20%
                  flash['discount'] = 20;
                  flash['urgentUntil'] = DateTime.now().add(const Duration(hours: 8));
                }
              });
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('${availableFlashs.length} flashs activÃ©s en Flash Minute !'),
                  backgroundColor: Colors.orange,
                  behavior: SnackBarBehavior.floating,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
            ),
            child: const Text('Activer tout'),
          ),
        ],
      ),
    );
  }

  // AUTRES MÃ‰THODES (dÃ©jÃ  existantes, restent inchangÃ©es)
  Widget _buildEditableField({
    required TextEditingController controller,
    required TextStyle style,
    required String hintText,
    bool compact = false,
    int maxLines = 1,
  }) {
    if (!_canEdit || !_isEditMode) {
      return Text(
        controller.text.isEmpty ? hintText : controller.text,
        style: controller.text.isEmpty ? style.copyWith(color: Colors.grey) : style,
        maxLines: maxLines,
        overflow: maxLines == 1 ? TextOverflow.ellipsis : null,
      );
    }

    return TextField(
      controller: controller,
      style: style,
      maxLines: maxLines,
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: style.copyWith(color: Colors.grey),
        border: compact ? InputBorder.none : UnderlineInputBorder(
          borderSide: BorderSide(color: KipikTheme.rouge.withOpacity(0.3)),
        ),
        focusedBorder: compact ? InputBorder.none : UnderlineInputBorder(
          borderSide: BorderSide(color: KipikTheme.rouge),
        ),
        contentPadding: compact ? EdgeInsets.zero : const EdgeInsets.symmetric(vertical: 8),
      ),
    );
  }

  Widget _buildPointsForts() {
    final data = _tattooistData!;
    final experience = data['experience'] ?? 10;
    
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: const Color(0xFFF3F4F6),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFFE5E7EB)),
      ),
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.star_outline, color: KipikTheme.rouge, size: 18),
              ),
              const SizedBox(width: 12),
              const Text(
                'Mes points forts',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Color(0xFF111827),
                  fontWeight: FontWeight.w400,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          FeatureRow(
            icon: Icons.brush,
            label: 'SpÃ©cialitÃ©s : ${_styleController.text}',
            isDarkMode: false,
            isEditable: _canEdit && _isEditMode,
            controller: _styleController,
          ),
          FeatureRow(
            icon: Icons.schedule,
            label: '$experience ans d\'expÃ©rience',
            isDarkMode: false,
          ),
          FeatureRow(
            icon: Icons.location_on,
            label: _locationController.text,
            isDarkMode: false,
            isEditable: _canEdit && _isEditMode,
            controller: _locationController,
          ),
          FeatureRow(
            icon: Icons.access_time,
            label: 'DisponibilitÃ© : ${_availabilityController.text}',
            isDarkMode: false,
            isEditable: _canEdit && _isEditMode,
            controller: _availabilityController,
          ),
          FeatureRow(
            icon: Icons.pin_drop,
            label: _addressController.text,
            isDarkMode: false,
            isEditable: _canEdit && _isEditMode,
            controller: _addressController,
          ),
          if (_showDevisButton)
            FeatureRow(
              icon: Icons.social_distance,
              label: 'Distance : ${widget.distance}',
              isDarkMode: false,
            ),
        ],
      ),
    );
  }

  Widget _buildAPropos() {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: const Color(0xFFF3F4F6),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFFE5E7EB)),
      ),
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.person_outline, color: KipikTheme.rouge, size: 18),
              ),
              const SizedBox(width: 12),
              const Text(
                'Ã€ propos de moi',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Color(0xFF111827),
                  fontWeight: FontWeight.w400,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          _buildEditableField(
            controller: _bioController,
            style: const TextStyle(
              color: Color(0xFF6B7280),
              fontSize: 16,
              fontFamily: 'Roboto',
              fontWeight: FontWeight.w400,
              height: 1.5,
            ),
            hintText: 'Parlez de vous, votre expÃ©rience, votre passion...',
            maxLines: 5,
          ),
        ],
      ),
    );
  }
}

class FeatureRow extends StatelessWidget {
  final IconData icon;
  final String label;
  final bool isDarkMode;
  final bool isEditable;
  final TextEditingController? controller;
  
  const FeatureRow({
    required this.icon, 
    required this.label, 
    this.isDarkMode = true,
    this.isEditable = false,
    this.controller,
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(6),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.1),
              borderRadius: BorderRadius.circular(6),
            ),
            child: Icon(icon, color: KipikTheme.rouge, size: 16),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: isEditable && controller != null
                ? TextField(
                    controller: controller,
                    style: TextStyle(
                      color: isDarkMode ? Colors.white70 : const Color(0xFF6B7280),
                      fontSize: 14,
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w500,
                    ),
                    decoration: InputDecoration(
                      border: UnderlineInputBorder(
                        borderSide: BorderSide(color: KipikTheme.rouge.withOpacity(0.3)),
                      ),
                      focusedBorder: UnderlineInputBorder(
                        borderSide: BorderSide(color: KipikTheme.rouge),
                      ),
                      contentPadding: const EdgeInsets.symmetric(vertical: 4),
                    ),
                  )
                : Text(
                    label,
                    style: TextStyle(
                      color: isDarkMode ? Colors.white70 : const Color(0xFF6B7280),
                      fontSize: 14,
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w500,
                    ),
                  ),
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\referral_page.dart

// lib/pages/pro/referral_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:share_plus/share_plus.dart';
import 'package:kipik_v5/services/promo/firebase_promo_code_service.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class ReferralPage extends StatefulWidget {
  const ReferralPage({Key? key}) : super(key: key);

  @override
  State<ReferralPage> createState() => _ReferralPageState();
}

class _ReferralPageState extends State<ReferralPage> {
  String? _referralCode;
  bool _isLoading = true;
  bool _hasError = false;
  String _errorMessage = '';
  List<Map<String, dynamic>> _referrals = [];
  Map<String, int> _stats = {};

  @override
  void initState() {
    super.initState();
    _loadReferralData();
  }

  Future<void> _loadReferralData() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
      _errorMessage = '';
    });
    
    try {
      // âœ… VÃ©rifier que l'utilisateur est connectÃ©
      if (!SecureAuthService.instance.isAuthenticated) {
        throw Exception('Vous devez Ãªtre connectÃ© pour accÃ©der au parrainage');
      }

      // âœ… Utiliser les nouvelles mÃ©thodes statiques simplifiÃ©es
      final futures = await Future.wait([
        FirebasePromoCodeService.generateReferralCode(),
        FirebasePromoCodeService.getReferralStats(),
        FirebasePromoCodeService.instance.getCurrentUserReferrals(),
      ]);
      
      setState(() {
        _referralCode = futures[0] as String?;
        _stats = futures[1] as Map<String, int>;
        _referrals = futures[2] as List<Map<String, dynamic>>;
        _isLoading = false;
      });

      // Log pour debug
      print('âœ… DonnÃ©es de parrainage chargÃ©es:');
      print('  - Code: $_referralCode');
      print('  - Stats: $_stats');
      print('  - Parrainages: ${_referrals.length}');
      
    } catch (e) {
      setState(() {
        _isLoading = false;
        _hasError = true;
        _errorMessage = e.toString();
      });
      
      print('âŒ Erreur chargement parrainage: $e');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: 'RÃ©essayer',
              textColor: Colors.white,
              onPressed: _loadReferralData,
            ),
          ),
        );
      }
    }
  }

  void _copyCode() {
    if (_referralCode != null) {
      Clipboard.setData(ClipboardData(text: _referralCode!));
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              Icon(Icons.check, color: Colors.white),
              SizedBox(width: 8),
              Text('Code copiÃ© dans le presse-papiers !'),
            ],
          ),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  void _shareCode() {
    if (_referralCode != null) {
      // âœ… CORRECTION: RÃ©cupÃ©rer les infos utilisateur depuis SecureAuthService
      final currentUser = SecureAuthService.instance.currentUser;
      final userName = currentUser?['name'] ?? 
                      currentUser?['displayName'] ?? 
                      currentUser?['email']?.split('@')[0] ?? 
                      'Un tatoueur';
      
      // âœ… UTILISER userName au lieu de $_userName
      final message = '''
ðŸŽ¨ Rejoins-moi sur Kipik !

Salut ! Je suis $userName et j'utilise l'app Kipik pour gÃ©rer mon business de tatouage. 

Utilise mon code de parrainage : $_referralCode

âœ¨ Avantages pour toi :
â€¢ Gestion complÃ¨te de tes projets
â€¢ Agenda intelligent
â€¢ ComptabilitÃ© simplifiÃ©e
â€¢ Portfolio professionnel

ðŸŽ Et si tu prends un abonnement annuel, j'aurai 1 mois gratuit !

TÃ©lÃ©charge l'app Kipik dÃ¨s maintenant !

#Kipik #Tatouage #Parrainage #TattooArtist
      ''';
      
      Share.share(message);
    }
  }

  Widget _buildErrorState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Colors.red[300],
            ),
            const SizedBox(height: 16),
            Text(
              'Erreur de chargement',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.red[700],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _errorMessage,
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _loadReferralData,
              icon: const Icon(Icons.refresh),
              label: const Text('RÃ©essayer'),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarKipik(
        title: 'Programme de parrainage',
        showBackButton: true,
        showBurger: false,
        showNotificationIcon: false,
      ),
      body: _hasError
          ? _buildErrorState()
          : _isLoading
              ? const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(height: 16),
                      Text('Chargement de vos donnÃ©es de parrainage...'),
                    ],
                  ),
                )
              : RefreshIndicator(
                  onRefresh: _loadReferralData,
                  child: SingleChildScrollView(
                    physics: const AlwaysScrollableScrollPhysics(),
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        // Header avec explication
                        Card(
                          elevation: 4,
                          child: Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(12),
                              gradient: LinearGradient(
                                colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.7)],
                              ),
                            ),
                            padding: const EdgeInsets.all(20),
                            child: const Column(
                              children: [
                                Icon(
                                  Icons.people,
                                  size: 48,
                                  color: Colors.white,
                                ),
                                SizedBox(height: 16),
                                Text(
                                  'ðŸŽ‰ Parraine un tatoueur et gagne 1 mois gratuit !',
                                  style: TextStyle(
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.white,
                                    fontFamily: 'PermanentMarker',
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                                SizedBox(height: 12),
                                Text(
                                  'Quand ton filleul souscrit un abonnement annuel, tu reÃ§ois automatiquement 1 mois gratuit !',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 20),

                        // Code de parrainage
                        Card(
                          elevation: 2,
                          child: Padding(
                            padding: const EdgeInsets.all(20),
                            child: Column(
                              children: [
                                const Text(
                                  'Ton code de parrainage',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    fontFamily: 'PermanentMarker',
                                  ),
                                ),
                                const SizedBox(height: 16),
                                Container(
                                  padding: const EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: Colors.grey[100],
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(color: KipikTheme.rouge, width: 2),
                                  ),
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Text(
                                        _referralCode ?? 'Aucun code disponible',
                                        style: TextStyle(
                                          fontSize: 24,
                                          fontWeight: FontWeight.bold,
                                          fontFamily: 'monospace',
                                          letterSpacing: 2,
                                          color: _referralCode != null ? Colors.black : Colors.grey,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                const SizedBox(height: 16),
                                if (_referralCode != null) ...[
                                  Row(
                                    children: [
                                      Expanded(
                                        child: ElevatedButton.icon(
                                          onPressed: _copyCode,
                                          icon: const Icon(Icons.copy),
                                          label: const Text('Copier'),
                                          style: ElevatedButton.styleFrom(
                                            backgroundColor: KipikTheme.rouge,
                                            foregroundColor: Colors.white,
                                            padding: const EdgeInsets.symmetric(vertical: 12),
                                          ),
                                        ),
                                      ),
                                      const SizedBox(width: 12),
                                      Expanded(
                                        child: ElevatedButton.icon(
                                          onPressed: _shareCode,
                                          icon: const Icon(Icons.share),
                                          label: const Text('Partager'),
                                          style: ElevatedButton.styleFrom(
                                            backgroundColor: Colors.green,
                                            foregroundColor: Colors.white,
                                            padding: const EdgeInsets.symmetric(vertical: 12),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ] else ...[
                                  ElevatedButton.icon(
                                    onPressed: _loadReferralData,
                                    icon: const Icon(Icons.refresh),
                                    label: const Text('GÃ©nÃ©rer un code'),
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: KipikTheme.rouge,
                                      foregroundColor: Colors.white,
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 20),

                        // Statistiques
                        Card(
                          elevation: 2,
                          child: Padding(
                            padding: const EdgeInsets.all(20),
                            child: Column(
                              children: [
                                const Text(
                                  'Tes statistiques',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    fontFamily: 'PermanentMarker',
                                  ),
                                ),
                                const SizedBox(height: 16),
                                Row(
                                  children: [
                                    Expanded(
                                      child: _StatCard(
                                        title: 'Parrainages',
                                        value: '${_stats['totalReferrals'] ?? 0}',
                                        icon: Icons.person_add,
                                        color: Colors.blue,
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: _StatCard(
                                        title: 'ValidÃ©s',
                                        value: '${_stats['completedReferrals'] ?? 0}',
                                        icon: Icons.check_circle,
                                        color: Colors.green,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                Row(
                                  children: [
                                    Expanded(
                                      child: _StatCard(
                                        title: 'En attente',
                                        value: '${(_stats['totalReferrals'] ?? 0) - (_stats['completedReferrals'] ?? 0)}',
                                        icon: Icons.hourglass_empty,
                                        color: Colors.orange,
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: _StatCard(
                                        title: 'Mois gagnÃ©s',
                                        value: '${_stats['totalRewardMonths'] ?? 0}',
                                        icon: Icons.emoji_events,
                                        color: Colors.amber,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 20),

                        // Comment Ã§a marche
                        Card(
                          elevation: 2,
                          child: Padding(
                            padding: const EdgeInsets.all(20),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text(
                                  'Comment Ã§a marche ?',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    fontFamily: 'PermanentMarker',
                                  ),
                                ),
                                const SizedBox(height: 16),
                                const _StepTile(
                                  step: '1',
                                  title: 'Partage ton code',
                                  description: 'Envoie ton code de parrainage Ã  un tatoueur ami',
                                  icon: Icons.share,
                                ),
                                const _StepTile(
                                  step: '2',
                                  title: 'Il s\'inscrit',
                                  description: 'Ton ami utilise ton code lors de son inscription',
                                  icon: Icons.person_add,
                                ),
                                const _StepTile(
                                  step: '3',
                                  title: 'Il souscrit 1 an',
                                  description: 'Il choisit un abonnement annuel pour valider le parrainage',
                                  icon: Icons.calendar_today,
                                ),
                                const _StepTile(
                                  step: '4',
                                  title: 'Tu gagnes !',
                                  description: 'Tu reÃ§ois automatiquement 1 mois gratuit',
                                  icon: Icons.emoji_events,
                                  isLast: true,
                                ),
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(height: 20),

                        // Historique des parrainages
                        if (_referrals.isNotEmpty) ...[
                          Card(
                            elevation: 2,
                            child: Padding(
                              padding: const EdgeInsets.all(20),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Row(
                                    children: [
                                      const Text(
                                        'Tes parrainages',
                                        style: TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          fontFamily: 'PermanentMarker',
                                        ),
                                      ),
                                      const Spacer(),
                                      Container(
                                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                        decoration: BoxDecoration(
                                          color: Colors.blue.withOpacity(0.1),
                                          borderRadius: BorderRadius.circular(12),
                                        ),
                                        child: Text(
                                          '${_referrals.length}',
                                          style: const TextStyle(
                                            color: Colors.blue,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  const SizedBox(height: 16),
                                  ...List.generate(_referrals.length, (index) {
                                    final referral = _referrals[index];
                                    return _ReferralTile(referral: referral);
                                  }),
                                ],
                              ),
                            ),
                          ),
                        ] else if (!_isLoading) ...[
                          Card(
                            elevation: 2,
                            child: Padding(
                              padding: const EdgeInsets.all(20),
                              child: Column(
                                children: [
                                  Icon(
                                    Icons.people_outline,
                                    size: 48,
                                    color: Colors.grey[400],
                                  ),
                                  const SizedBox(height: 16),
                                  Text(
                                    'Aucun parrainage pour le moment',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.grey[600],
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  Text(
                                    'Commence Ã  partager ton code pour inviter d\'autres tatoueurs !',
                                    textAlign: TextAlign.center,
                                    style: TextStyle(
                                      fontSize: 14,
                                      color: Colors.grey[500],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],

                        const SizedBox(height: 40),
                      ],
                    ),
                  ),
                ),
    );
  }
}

class _StatCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  final Color color;

  const _StatCard({
    required this.title,
    required this.value,
    required this.icon,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, size: 32, color: color),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: color,
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}

class _StepTile extends StatelessWidget {
  final String step;
  final String title;
  final String description;
  final IconData icon;
  final bool isLast;

  const _StepTile({
    required this.step,
    required this.title,
    required this.description,
    required this.icon,
    this.isLast = false,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: KipikTheme.rouge,
                shape: BoxShape.circle,
              ),
              child: Center(
                child: Text(
                  step,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
              ),
            ),
            if (!isLast)
              Container(
                width: 2,
                height: 40,
                color: Colors.grey[300],
                margin: const EdgeInsets.symmetric(vertical: 8),
              ),
          ],
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.only(top: 8),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(icon, size: 20, color: KipikTheme.rouge),
                    const SizedBox(width: 8),
                    Text(
                      title,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
                if (!isLast) const SizedBox(height: 16),
              ],
            ),
          ),
        ),
      ],
    );
  }
}

class _ReferralTile extends StatelessWidget {
  final Map<String, dynamic> referral;

  const _ReferralTile({required this.referral});

  @override
  Widget build(BuildContext context) {
    final status = referral['status'] as String? ?? 'pending';
    final createdAt = referral['createdAt'] as DateTime?;
    final completedAt = referral['completedAt'] as DateTime?;
    
    Color statusColor;
    IconData statusIcon;
    String statusText;

    switch (status) {
      case 'completed':
        statusColor = Colors.green;
        statusIcon = Icons.check_circle;
        statusText = 'ValidÃ©';
        break;
      case 'pending':
        statusColor = Colors.orange;
        statusIcon = Icons.hourglass_empty;
        statusText = 'En attente';
        break;
      default:
        statusColor = Colors.grey;
        statusIcon = Icons.help;
        statusText = 'Inconnu';
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey[300]!),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Icon(statusIcon, color: statusColor, size: 24),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Parrainage ${referral['referralCode'] ?? 'N/A'}',
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 4),
                if (createdAt != null)
                  Text(
                    'CrÃ©Ã© le ${createdAt.day}/${createdAt.month}/${createdAt.year}',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                if (completedAt != null)
                  Text(
                    'ValidÃ© le ${completedAt.day}/${completedAt.month}/${completedAt.year}',
                    style: const TextStyle(
                      color: Colors.green,
                      fontSize: 12,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
              ],
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: statusColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  statusText,
                  style: TextStyle(
                    color: statusColor,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              if (status == 'completed')
                const Padding(
                  padding: EdgeInsets.only(top: 4),
                  child: Text(
                    'ðŸŽ‰ +1 mois',
                    style: TextStyle(
                      color: Colors.green,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_add_event_page.dart

import 'package:flutter/material.dart';

class ProAgendaAddEventPage extends StatefulWidget {
  const ProAgendaAddEventPage({super.key});

  @override
  State<ProAgendaAddEventPage> createState() => _ProAgendaAddEventPageState();
}

class _ProAgendaAddEventPageState extends State<ProAgendaAddEventPage> {
  final _formKey = GlobalKey<FormState>();
  String title = '';
  String type = 'Tatouage';
  DateTime selectedDate = DateTime.now();
  TimeOfDay selectedTime = TimeOfDay.now();
  String? location;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Ajouter un Ã©vÃ©nement'),
        backgroundColor: Colors.black,
      ),
      backgroundColor: Colors.black,
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(20),
          children: [
            TextFormField(
              style: const TextStyle(color: Colors.white),
              decoration: const InputDecoration(
                labelText: 'Titre',
                labelStyle: TextStyle(color: Colors.white70),
                enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.white38)),
              ),
              validator: (value) => value == null || value.isEmpty ? 'Champ obligatoire' : null,
              onChanged: (value) => setState(() => title = value),
            ),
            const SizedBox(height: 20),
            DropdownButtonFormField<String>(
              dropdownColor: Colors.black,
              value: type,
              items: ['Tatouage', 'Devis', 'DÃ©placement'].map((type) {
                return DropdownMenuItem(
                  value: type,
                  child: Text(type, style: const TextStyle(color: Colors.white)),
                );
              }).toList(),
              onChanged: (value) => setState(() => type = value!),
              decoration: const InputDecoration(
                labelText: 'Type',
                labelStyle: TextStyle(color: Colors.white70),
                enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.white38)),
              ),
            ),
            const SizedBox(height: 20),
            ListTile(
              title: Text(
                'Date : ${selectedDate.toLocal().toString().split(' ')[0]}',
                style: const TextStyle(color: Colors.white),
              ),
              trailing: const Icon(Icons.calendar_today, color: Colors.white),
              onTap: _pickDate,
            ),
            ListTile(
              title: Text(
                'Heure : ${selectedTime.format(context)}',
                style: const TextStyle(color: Colors.white),
              ),
              trailing: const Icon(Icons.access_time, color: Colors.white),
              onTap: _pickTime,
            ),
            const SizedBox(height: 20),
            TextFormField(
              style: const TextStyle(color: Colors.white),
              decoration: const InputDecoration(
                labelText: 'Localisation (optionnelle)',
                labelStyle: TextStyle(color: Colors.white70),
                enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: Colors.white38)),
              ),
              onChanged: (value) => setState(() => location = value),
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                if (_formKey.currentState!.validate()) {
                  Navigator.pop(context);
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                foregroundColor: Colors.black,
              ),
              child: const Text('Ajouter'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _pickDate() async {
    final date = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (date != null) {
      setState(() {
        selectedDate = date;
      });
    }
  }

  Future<void> _pickTime() async {
    final time = await showTimePicker(
      context: context,
      initialTime: selectedTime,
    );
    if (time != null) {
      setState(() {
        selectedTime = time;
      });
    }
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_create_event_page.dart

import 'package:flutter/material.dart';

class ProAgendaCreateEventPage extends StatelessWidget {
  const ProAgendaCreateEventPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "CrÃ©ation dâ€™un Ã©vÃ©nement",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_day_view_page.dart

import 'package:flutter/material.dart';

class ProAgendaDayViewPage extends StatelessWidget {
  const ProAgendaDayViewPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "Vue quotidienne de l'agenda",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_detail_page.dart

import 'package:flutter/material.dart';

class ProAgendaDetailPage extends StatelessWidget {
  const ProAgendaDetailPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "DÃ©tail du rendez-vous",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_edit_event_page.dart

import 'package:flutter/material.dart';

class ProAgendaEditEventPage extends StatelessWidget {
  const ProAgendaEditEventPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "Modifier un Ã©vÃ©nement",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}




//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_event_creation_page.dart

import 'package:flutter/material.dart';

class ProAgendaEventCreationPage extends StatelessWidget {
  const ProAgendaEventCreationPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "CrÃ©er un Ã©vÃ©nement ou un dÃ©placement",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_google_sync_page.dart

import 'package:flutter/material.dart';

class ProAgendaGoogleSyncPage extends StatelessWidget {
  const ProAgendaGoogleSyncPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "Synchronisation avec Google Agenda",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_home_page.dart

// lib/pages/pro/agenda/pro_agenda_home_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';
import 'package:table_calendar/table_calendar.dart';
import 'dart:async';

enum EventType { consultation, session, retouche, suivi, personnel, flashMinute }
enum ViewType { day, week, month }
enum LocationType { shop, guest, convention }

class AgendaEvent {
  final String id;
  final String title;
  final String? clientName;
  final DateTime startTime;
  final DateTime endTime;
  final EventType type;
  final String? description;
  final String? location;
  final LocationType locationType;
  final bool isConfirmed;
  final String? phoneNumber;
  final String? email;
  final double? price;
  final bool isFlashMinute;
  final int? flashMinuteDiscount;
  final DateTime? flashMinuteExpiry;

  AgendaEvent({
    required this.id,
    required this.title,
    this.clientName,
    required this.startTime,
    required this.endTime,
    required this.type,
    this.description,
    this.location,
    this.locationType = LocationType.shop,
    this.isConfirmed = false,
    this.phoneNumber,
    this.email,
    this.price,
    this.isFlashMinute = false,
    this.flashMinuteDiscount,
    this.flashMinuteExpiry,
  });

  Duration get duration => endTime.difference(startTime);
  
  bool isOnDay(DateTime day) {
    return startTime.year == day.year &&
           startTime.month == day.month &&
           startTime.day == day.day;
  }
  
  Color get eventColor {
    if (isFlashMinute) return Colors.orange;
    switch (type) {
      case EventType.consultation:
        return KipikTheme.rouge;
      case EventType.session:
        return const Color(0xFF2E7D32);
      case EventType.retouche:
        return const Color(0xFF1565C0);
      case EventType.suivi:
        return const Color(0xFF7B1FA2);
      case EventType.personnel:
        return const Color(0xFF424242);
      case EventType.flashMinute:
        return Colors.orange;
    }
  }

  String get typeLabel {
    if (isFlashMinute) return 'Flash Minute';
    switch (type) {
      case EventType.consultation:
        return 'Consultation';
      case EventType.session:
        return 'SÃ©ance tatouage';
      case EventType.retouche:
        return 'Retouche';
      case EventType.suivi:
        return 'Suivi';
      case EventType.personnel:
        return 'Personnel';
      case EventType.flashMinute:
        return 'Flash Minute';
    }
  }

  String get locationLabel {
    switch (locationType) {
      case LocationType.shop:
        return 'Salon';
      case LocationType.guest:
        return 'Guest';
      case LocationType.convention:
        return 'Convention';
    }
  }

  IconData get locationIcon {
    switch (locationType) {
      case LocationType.shop:
        return Icons.home_work;
      case LocationType.guest:
        return Icons.flight;
      case LocationType.convention:
        return Icons.event;
    }
  }

  bool get canActivateFlashMinute {
    return isConfirmed && 
           !isFlashMinute && 
           startTime.isAfter(DateTime.now()) &&
           startTime.difference(DateTime.now()).inHours >= 1 &&
           startTime.difference(DateTime.now()).inDays <= 1;
  }
}

class ProAgendaHomePage extends StatefulWidget {
  const ProAgendaHomePage({Key? key}) : super(key: key);

  @override
  State<ProAgendaHomePage> createState() => _ProAgendaHomePageState();
}

class _ProAgendaHomePageState extends State<ProAgendaHomePage> 
    with TickerProviderStateMixin {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  late DateTime _selectedDate;
  ViewType _currentView = ViewType.day;
  late List<AgendaEvent> _events;
  final ScrollController _dayScrollController = ScrollController();
  
  // Animation controllers
  late AnimationController _fadeController;
  late AnimationController _slideController;
  late AnimationController _flashController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _flashAnimation;
  
  // Ã‰tat
  bool _showFlashMinuteBar = false;
  int _activeFlashMinutes = 0;
  Timer? _refreshTimer;
  CalendarFormat _calendarFormat = CalendarFormat.month;

  @override
  void initState() {
    super.initState();
    _selectedDate = DateTime.now();
    _initializeAnimations();
    _initializeEvents();
    _startRefreshTimer();
    
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_currentView == ViewType.day) {
        _scrollToCurrentHour();
      }
    });
  }

  void _initializeAnimations() {
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _flashController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fadeController, curve: Curves.easeInOut),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, -1),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _slideController, curve: Curves.elasticOut));
    
    _flashAnimation = Tween<double>(begin: 0.8, end: 1.2).animate(
      CurvedAnimation(parent: _flashController, curve: Curves.elasticInOut),
    );

    _fadeController.forward();
    _slideController.forward();
    _flashController.repeat(reverse: true);
  }

  @override
  void dispose() {
    _dayScrollController.dispose();
    _fadeController.dispose();
    _slideController.dispose();
    _flashController.dispose();
    _refreshTimer?.cancel();
    super.dispose();
  }

  void _startRefreshTimer() {
    _refreshTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
      if (mounted) {
        setState(() {
          _updateFlashMinuteStatus();
        });
      }
    });
  }

  void _updateFlashMinuteStatus() {
    _activeFlashMinutes = _events.where((e) => 
      e.isFlashMinute && 
      e.flashMinuteExpiry != null &&
      e.flashMinuteExpiry!.isAfter(DateTime.now())
    ).length;
    
    _showFlashMinuteBar = _activeFlashMinutes > 0;
  }

  void _scrollToCurrentHour() {
    final hour = DateTime.now().hour;
    final targetOffset = (hour - 2) * 80.0;
    if (_dayScrollController.hasClients && targetOffset > 0) {
      _dayScrollController.animateTo(
        targetOffset,
        duration: const Duration(milliseconds: 800),
        curve: Curves.easeInOutCubic,
      );
    }
  }

  void _initializeEvents() {
    final now = DateTime.now();
    _events = [
      AgendaEvent(
        id: '1',
        title: 'SÃ©ance Dragon Oriental',
        clientName: 'Jean Martin',
        startTime: DateTime(now.year, now.month, now.day, 14, 0),
        endTime: DateTime(now.year, now.month, now.day, 17, 0),
        type: EventType.session,
        description: 'Session 2/3 - Finalisation du dragon',
        location: 'Salon principal',
        locationType: LocationType.shop,
        isConfirmed: true,
        phoneNumber: '+33 6 12 34 56 78',
        email: 'jean.martin@email.com',
        price: 450.0,
      ),
      
      AgendaEvent(
        id: '2',
        title: 'Consultation Rose Minimaliste',
        clientName: 'Marie Dubois',
        startTime: DateTime(now.year, now.month, now.day, 9, 0),
        endTime: DateTime(now.year, now.month, now.day, 10, 0),
        type: EventType.consultation,
        description: 'PremiÃ¨re consultation pour tatouage poignet',
        location: 'Bureau consultation',
        locationType: LocationType.shop,
        isConfirmed: true,
        phoneNumber: '+33 6 98 76 54 32',
        email: 'marie.dubois@email.com',
        price: 80.0,
      ),
      
      AgendaEvent(
        id: '3',
        title: 'Flash Minute - Tribal',
        clientName: 'Alex Rodriguez',
        startTime: DateTime(now.year, now.month, now.day, 11, 30),
        endTime: DateTime(now.year, now.month, now.day, 13, 0),
        type: EventType.flashMinute,
        description: 'Flash rÃ©servÃ© via Flash Minute - Tribal moderne',
        location: 'Salon principal',
        locationType: LocationType.shop,
        isConfirmed: true,
        phoneNumber: '+33 6 55 44 33 22',
        email: 'alex.rodriguez@email.com',
        price: 120.0,
        isFlashMinute: true,
        flashMinuteDiscount: 25,
        flashMinuteExpiry: DateTime.now().add(const Duration(hours: 6)),
      ),
      
      AgendaEvent(
        id: '4',
        title: 'Session BiomÃ©canique',
        clientName: 'Tom Wilson',
        startTime: DateTime(now.year, now.month, now.day + 1, 15, 0),
        endTime: DateTime(now.year, now.month, now.day + 1, 18, 0),
        type: EventType.session,
        description: 'Session complÃ¨te bras - Art biomÃ©canique',
        location: 'Salon principal',
        locationType: LocationType.shop,
        isConfirmed: true,
        phoneNumber: '+33 6 11 22 33 44',
        email: 'tom.wilson@email.com',
        price: 600.0,
      ),
      
      AgendaEvent(
        id: '5',
        title: 'Retouche Phoenix',
        clientName: 'Sophie Chen',
        startTime: DateTime(now.year, now.month, now.day + 2, 10, 0),
        endTime: DateTime(now.year, now.month, now.day + 2, 11, 30),
        type: EventType.retouche,
        description: 'Retouche couleurs phoenix dos',
        location: 'Salon principal',
        locationType: LocationType.shop,
        isConfirmed: true,
        phoneNumber: '+33 6 77 88 99 00',
        email: 'sophie.chen@email.com',
        price: 150.0,
      ),
      
      AgendaEvent(
        id: '6',
        title: 'Convention Tattoo Paris',
        startTime: DateTime(now.year, now.month, now.day + 3, 10, 0),
        endTime: DateTime(now.year, now.month, now.day + 3, 18, 0),
        type: EventType.personnel,
        description: 'Participation convention Paris Expo',
        location: 'Paris Expo Porte de Versailles',
        locationType: LocationType.convention,
        isConfirmed: true,
      ),
    ];
    
    _updateFlashMinuteStatus();
  }

  List<AgendaEvent> _getEventsForDay(DateTime day) {
    return _events.where((event) => event.isOnDay(day)).toList()
      ..sort((a, b) => a.startTime.compareTo(b.startTime));
  }

  List<AgendaEvent> _getFreeSlots(DateTime day) {
    final dayEvents = _getEventsForDay(day)
        .where((e) => e.isConfirmed && e.type != EventType.personnel)
        .toList();
    
    List<AgendaEvent> freeSlots = [];
    final startHour = 9;
    final endHour = 20;
    
    DateTime currentTime = DateTime(day.year, day.month, day.day, startHour, 0);
    final endTime = DateTime(day.year, day.month, day.day, endHour, 0);
    
    while (currentTime.isBefore(endTime)) {
      final slotEnd = currentTime.add(const Duration(hours: 2));
      
      bool isFree = !dayEvents.any((event) =>
        (currentTime.isBefore(event.endTime) && slotEnd.isAfter(event.startTime))
      );
      
      if (isFree && slotEnd.isBefore(endTime)) {
        freeSlots.add(AgendaEvent(
          id: 'free_${currentTime.hour}',
          title: 'CrÃ©neau libre',
          startTime: currentTime,
          endTime: slotEnd,
          type: EventType.personnel,
          description: 'Disponible pour Flash Minute',
          locationType: LocationType.shop,
          isConfirmed: false,
        ));
      }
      
      currentTime = currentTime.add(const Duration(minutes: 30));
    }
    
    return freeSlots;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => const HomePagePro()),
        );
        return false;
      },
      child: Scaffold(
        key: _scaffoldKey,
        endDrawer: const CustomDrawerKipik(),
        appBar: CustomAppBarKipik(
          title: 'Agenda Pro',
          showBackButton: true,
          useProStyle: true,
          actions: [
            // âœ… BOUTONS D'ACTIONS DANS L'APPBAR
            IconButton(
              icon: const Icon(Icons.sync_rounded, color: Colors.white, size: 24),
              onPressed: _syncCalendar,
              tooltip: 'Synchroniser calendriers',
            ),
            IconButton(
              icon: const Icon(Icons.settings_rounded, color: Colors.white, size: 24),
              onPressed: _showSettings,
              tooltip: 'ParamÃ¨tres',
            ),
          ],
        ),
        floatingActionButton: _buildSmartFAB(),
        body: Stack(
          children: [
            // âœ… BACKGROUND CHARBON COMME TES AUTRES PAGES
            Image.asset(
              'assets/background_charbon.png',
              fit: BoxFit.cover,
              width: double.infinity,
              height: double.infinity,
            ),
            
            // âœ… CONTENU AVEC STRUCTURE KIPIK
            SafeArea(
              child: FadeTransition(
                opacity: _fadeAnimation,
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Column(
                    children: [
                      const SizedBox(height: 8),
                      
                      // âœ… BARRE FLASH MINUTE SI ACTIVE
                      if (_showFlashMinuteBar) _buildFlashMinuteBar(),
                      
                      // âœ… CONTRÃ”LES DE VUE AVANCÃ‰S
                      _buildAdvancedViewControls(),
                      
                      const SizedBox(height: 16),
                      
                      // âœ… CONTENU PRINCIPAL
                      Expanded(child: _buildCurrentView()),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFlashMinuteBar() {
    return SlideTransition(
      position: _slideAnimation,
      child: Container(
        margin: const EdgeInsets.only(bottom: 16),
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.orange.withOpacity(0.9),
              Colors.orange.withOpacity(0.7),
            ],
          ),
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.orange.withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          children: [
            AnimatedBuilder(
              animation: _flashAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _flashAnimation.value,
                  child: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: const Icon(Icons.flash_on, color: Colors.white, size: 20),
                  ),
                );
              },
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Flash Minute Actif',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                  Text(
                    '$_activeFlashMinutes flash(s) en promotion',
                    style: const TextStyle(
                      color: Colors.white70,
                      fontSize: 12,
                      fontFamily: 'Roboto',
                    ),
                  ),
                ],
              ),
            ),
            OutlinedButton(
              onPressed: _goToFlashMinuteDashboard,
              style: OutlinedButton.styleFrom(
                side: const BorderSide(color: Colors.white),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'GÃ©rer',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                  fontFamily: 'Roboto',
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAdvancedViewControls() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // âœ… PREMIÃˆRE LIGNE : SÃ‰LECTEUR DE VUE + DATE
          Row(
            children: [
              // SÃ©lecteur de vue
              Expanded(
                flex: 2,
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.grey.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    children: ViewType.values.map((view) {
                      final isSelected = _currentView == view;
                      return Expanded(
                        child: GestureDetector(
                          onTap: () => _changeView(view),
                          child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            decoration: BoxDecoration(
                              color: isSelected ? KipikTheme.rouge : Colors.transparent,
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              _getViewLabel(view),
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 14,
                                color: isSelected ? Colors.white : Colors.black87,
                                fontWeight: FontWeight.w400,
                              ),
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ),
              ),
              
              const SizedBox(width: 16),
              
              // SÃ©lecteur de date
              Expanded(
                flex: 3,
                child: GestureDetector(
                  onTap: _showPremiumDatePicker,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          KipikTheme.rouge.withOpacity(0.1),
                          KipikTheme.rouge.withOpacity(0.05),
                        ],
                      ),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.calendar_today, size: 16, color: KipikTheme.rouge),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            _getFormattedDateRange(),
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              color: KipikTheme.rouge,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                        Icon(Icons.expand_more, size: 16, color: KipikTheme.rouge),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          // âœ… SECONDE LIGNE : NAVIGATION + STATISTIQUES
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              // Navigation
              Row(
                children: [
                  _buildNavButton(Icons.chevron_left, _goToPrevious),
                  const SizedBox(width: 12),
                  TextButton(
                    onPressed: _goToToday,
                    style: TextButton.styleFrom(
                      backgroundColor: KipikTheme.rouge.withOpacity(0.1),
                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Text(
                      "Aujourd'hui",
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: KipikTheme.rouge,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  _buildNavButton(Icons.chevron_right, _goToNext),
                ],
              ),
              
              // Statistiques pÃ©riode
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: Colors.grey.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  _getPeriodInfo(),
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.black54,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildNavButton(IconData icon, VoidCallback onPressed) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        padding: const EdgeInsets.all(10),
        decoration: BoxDecoration(
          color: KipikTheme.rouge.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
        ),
        child: Icon(icon, size: 20, color: KipikTheme.rouge),
      ),
    );
  }

  Widget _buildCurrentView() {
    switch (_currentView) {
      case ViewType.day:
        return _buildPremiumDayView();
      case ViewType.week:
        return _buildPremiumWeekView();
      case ViewType.month:
        return _buildPremiumMonthView();
    }
  }

  Widget _buildPremiumDayView() {
    final events = _getEventsForDay(_selectedDate);
    final freeSlots = _getFreeSlots(_selectedDate);
    
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildDayHeader(),
          Expanded(
            child: SingleChildScrollView(
              controller: _dayScrollController,
              physics: const BouncingScrollPhysics(),
              child: _buildDayTimeline(events, freeSlots),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDayHeader() {
    final isToday = _isToday(_selectedDate);
    final events = _getEventsForDay(_selectedDate);
    final totalRevenue = events.where((e) => e.price != null).fold<double>(
      0, (sum, e) => sum + e.price!
    );
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            KipikTheme.rouge.withOpacity(0.9),
            KipikTheme.rouge.withOpacity(0.7),
          ],
        ),
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Row(
        children: [
          // âœ… DATE COMME TES CARDS
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              color: isToday ? Colors.white : Colors.white.withOpacity(0.9),
              borderRadius: BorderRadius.circular(12),
              boxShadow: isToday ? [
                BoxShadow(
                  color: Colors.white.withOpacity(0.5),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ] : null,
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  _getDayAbbreviation(_selectedDate),
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 10,
                    color: isToday ? KipikTheme.rouge : Colors.black87,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                Text(
                  '${_selectedDate.day}',
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 20,
                    fontWeight: FontWeight.w400,
                    color: isToday ? KipikTheme.rouge : Colors.black87,
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(width: 20),
          
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  _getFullDateString(_selectedDate),
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 18,
                    color: Colors.white,
                    fontWeight: FontWeight.w400,
                  ),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  runSpacing: 4,
                  children: [
                    _buildDayStatChip('${events.length} RDV', Icons.event, Colors.blue),
                    _buildDayStatChip('${totalRevenue.toInt()}â‚¬', Icons.euro, Colors.green),
                    if (_getFreeSlots(_selectedDate).isNotEmpty)
                      _buildDayStatChip('${_getFreeSlots(_selectedDate).length} crÃ©neaux libres', Icons.schedule, Colors.orange),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDayStatChip(String text, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 12, color: Colors.white),
          const SizedBox(width: 4),
          Text(
            text,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 11,
              color: Colors.white,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDayTimeline(List<AgendaEvent> events, List<AgendaEvent> freeSlots) {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: List.generate(24, (hour) {
          return _buildHourSlot(hour, events, freeSlots);
        }),
      ),
    );
  }

  Widget _buildHourSlot(int hour, List<AgendaEvent> events, List<AgendaEvent> freeSlots) {
    final hourEvents = events.where((e) => e.startTime.hour == hour).toList();
    final hourFreeSlots = freeSlots.where((e) => e.startTime.hour == hour).toList();
    final isCurrentHour = DateTime.now().hour == hour && _isToday(_selectedDate);
    
    return Container(
      height: 80,
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(
            color: isCurrentHour ? KipikTheme.rouge.withOpacity(0.3) : Colors.grey.withOpacity(0.2),
            width: isCurrentHour ? 2 : 1,
          ),
        ),
      ),
      child: Row(
        children: [
          // âœ… HEURE STYLE KIPIK AVEC INDICATEUR ACTUEL
          SizedBox(
            width: 80,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '${hour.toString().padLeft(2, '0')}:00',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: isCurrentHour ? KipikTheme.rouge : Colors.black54,
                    fontWeight: isCurrentHour ? FontWeight.bold : FontWeight.w500,
                  ),
                ),
                if (isCurrentHour)
                  Container(
                    width: 4,
                    height: 4,
                    margin: const EdgeInsets.only(top: 4),
                    decoration: BoxDecoration(
                      color: KipikTheme.rouge,
                      shape: BoxShape.circle,
                    ),
                  ),
              ],
            ),
          ),
          
          // âœ… Ã‰VÃ‰NEMENTS AVEC POSITIONNEMENT DYNAMIQUE
          Expanded(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              child: Stack(
                children: [
                  ...hourEvents.map((event) => _buildEventCard(event)),
                  ...hourFreeSlots.map((slot) => _buildFreeSlotCard(slot)),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEventCard(AgendaEvent event) {
    final duration = event.duration.inMinutes;
    final height = (duration * 0.8).clamp(40.0, 200.0);
    
    return Positioned(
      top: event.startTime.minute * 0.8,
      left: 0,
      right: 0,
      height: height,
      child: GestureDetector(
        onTap: () => _showEventDetails(event),
        onLongPress: event.canActivateFlashMinute ? () => _showFlashMinuteDialog(event) : null,
        child: Container(
          margin: const EdgeInsets.only(bottom: 4),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                event.eventColor,
                event.eventColor.withOpacity(0.8),
              ],
            ),
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: event.eventColor.withOpacity(0.3),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Stack(
            children: [
              Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            event.title,
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 14,
                              color: Colors.white,
                              fontWeight: FontWeight.w400,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        if (event.isFlashMinute)
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                            decoration: BoxDecoration(
                              color: Colors.orange,
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: const Text(
                              'FLASH',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 8,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                      ],
                    ),
                    
                    if (event.clientName != null && height > 60) ...[
                      const SizedBox(height: 4),
                      Text(
                        event.clientName!,
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.white70,
                          fontWeight: FontWeight.w500,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                    
                    if (height > 80) ...[
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Icon(event.locationIcon, size: 12, color: Colors.white60),
                          const SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              '${event.startTime.hour.toString().padLeft(2, '0')}:${event.startTime.minute.toString().padLeft(2, '0')} - ${event.endTime.hour.toString().padLeft(2, '0')}:${event.endTime.minute.toString().padLeft(2, '0')}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 10,
                                color: Colors.white60,
                              ),
                            ),
                          ),
                          if (event.price != null) ...[
                            Text(
                              '${event.price!.toInt()}â‚¬',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ],
                      ),
                    ],
                  ],
                ),
              ),
              
              if (event.canActivateFlashMinute)
                Positioned(
                  top: 4,
                  right: 4,
                  child: Container(
                    width: 8,
                    height: 8,
                    decoration: BoxDecoration(
                      color: Colors.orange,
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.orange.withOpacity(0.5),
                          blurRadius: 4,
                        ),
                      ],
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFreeSlotCard(AgendaEvent slot) {
    return Positioned(
      top: slot.startTime.minute * 0.8,
      left: 0,
      right: 0,
      height: 60,
      child: GestureDetector(
        onTap: () => _showFlashMinuteCreation(slot),
        child: Container(
          margin: const EdgeInsets.only(bottom: 4),
          decoration: BoxDecoration(
            color: Colors.orange.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.orange.withOpacity(0.3),
              style: BorderStyle.solid,
            ),
          ),
          child: const Padding(
            padding: EdgeInsets.all(12),
            child: Row(
              children: [
                Icon(Icons.flash_on_rounded, size: 20, color: Colors.orange),
                SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'CrÃ©neau libre',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.black87,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        'Tap pour Flash Minute',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: Colors.orange,
                        ),
                      ),
                    ],
                  ),
                ),
                Icon(Icons.add_rounded, size: 16, color: Colors.orange),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPremiumWeekView() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.view_week_outlined, size: 64, color: Colors.grey[400]),
          const SizedBox(height: 16),
          const Text(
            'Vue Semaine Premium',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Interface avancÃ©e avec planning semaine\n(Ã  implÃ©menter)',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => _showInfoSnackBar('Vue Semaine - Prochainement disponible'),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: const Text('Prochainement'),
          ),
        ],
      ),
    );
  }

  Widget _buildPremiumMonthView() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: TableCalendar<AgendaEvent>(
        firstDay: DateTime.utc(2020, 1, 1),
        lastDay: DateTime.utc(2030, 12, 31),
        focusedDay: _selectedDate,
        calendarFormat: _calendarFormat,
        eventLoader: (day) => _getEventsForDay(day),
        startingDayOfWeek: StartingDayOfWeek.monday,
        calendarStyle: CalendarStyle(
          outsideDaysVisible: false,
          weekendTextStyle: const TextStyle(color: Colors.black54),
          holidayTextStyle: const TextStyle(color: Colors.black54),
          defaultTextStyle: const TextStyle(color: Colors.black87),
          todayDecoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
            ),
            shape: BoxShape.circle,
          ),
          selectedDecoration: BoxDecoration(
            color: KipikTheme.rouge.withOpacity(0.5),
            shape: BoxShape.circle,
          ),
          markerDecoration: const BoxDecoration(
            color: Colors.orange,
            shape: BoxShape.circle,
          ),
        ),
        headerStyle: const HeaderStyle(
          formatButtonVisible: false,
          titleCentered: true,
          titleTextStyle: TextStyle(
            fontFamily: 'PermanentMarker',
            color: Colors.black87,
            fontSize: 18,
            fontWeight: FontWeight.w400,
          ),
          leftChevronIcon: Icon(Icons.chevron_left, color: Colors.black87),
          rightChevronIcon: Icon(Icons.chevron_right, color: Colors.black87),
        ),
        daysOfWeekStyle: const DaysOfWeekStyle(
          weekendStyle: TextStyle(color: Colors.black54, fontFamily: 'Roboto'),
          weekdayStyle: TextStyle(color: Colors.black87, fontFamily: 'Roboto'),
        ),
        selectedDayPredicate: (day) => isSameDay(_selectedDate, day),
        onDaySelected: (selectedDay, focusedDay) {
          setState(() {
            _selectedDate = selectedDay;
            _currentView = ViewType.day;
          });
        },
      ),
    );
  }

  Widget _buildSmartFAB() {
    final hasFreeSlots = _getFreeSlots(_selectedDate).isNotEmpty;
    
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (hasFreeSlots)
          Container(
            margin: const EdgeInsets.only(bottom: 16),
            child: FloatingActionButton(
              heroTag: 'flash_minute',
              backgroundColor: Colors.orange,
              onPressed: () => _showFlashMinuteCreation(null),
              child: const Icon(Icons.flash_on_rounded, color: Colors.white),
            ),
          ),
        
        const TattooAssistantButton(),
      ],
    );
  }

  // âœ… MÃ‰THODES UTILITAIRES COMPLÃˆTES
  void _changeView(ViewType view) {
    setState(() {
      _currentView = view;
    });
    
    if (view == ViewType.day) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _scrollToCurrentHour();
      });
    }
  }

  String _getFormattedDateRange() {
    switch (_currentView) {
      case ViewType.day:
        return '${_selectedDate.day}/${_selectedDate.month}/${_selectedDate.year}';
      case ViewType.week:
        final startOfWeek = _getStartOfWeek(_selectedDate);
        final endOfWeek = startOfWeek.add(const Duration(days: 6));
        return '${startOfWeek.day}/${startOfWeek.month} - ${endOfWeek.day}/${endOfWeek.month}';
      case ViewType.month:
        return '${_getMonthName(_selectedDate)} ${_selectedDate.year}';
    }
  }

  String _getFullDateString(DateTime date) {
    const monthNames = [
      'Janvier', 'FÃ©vrier', 'Mars', 'Avril', 'Mai', 'Juin',
      'Juillet', 'AoÃ»t', 'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'
    ];
    const dayNames = [
      'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'
    ];
    
    return '${dayNames[date.weekday - 1]} ${date.day} ${monthNames[date.month - 1]}';
  }

  String _getPeriodInfo() {
    final eventsCount = _getCurrentViewEventsCount();
    final revenue = _getCurrentViewRevenue();
    
    return '$eventsCount RDV â€¢ ${revenue.toInt()}â‚¬';
  }

  int _getCurrentViewEventsCount() {
    switch (_currentView) {
      case ViewType.day:
        return _getEventsForDay(_selectedDate).length;
      case ViewType.week:
        return _getEventsForWeek(_getStartOfWeek(_selectedDate)).length;
      case ViewType.month:
        final firstDay = DateTime(_selectedDate.year, _selectedDate.month, 1);
        final lastDay = DateTime(_selectedDate.year, _selectedDate.month + 1, 0);
        return _events.where((event) => 
          event.startTime.isAfter(firstDay.subtract(const Duration(days: 1))) &&
          event.startTime.isBefore(lastDay.add(const Duration(days: 1)))
        ).length;
    }
  }

  double _getCurrentViewRevenue() {
    switch (_currentView) {
      case ViewType.day:
        return _getEventsForDay(_selectedDate)
            .where((e) => e.price != null)
            .fold<double>(0, (sum, e) => sum + e.price!);
      case ViewType.week:
        return _getEventsForWeek(_getStartOfWeek(_selectedDate))
            .where((e) => e.price != null)
            .fold<double>(0, (sum, e) => sum + e.price!);
      case ViewType.month:
        final firstDay = DateTime(_selectedDate.year, _selectedDate.month, 1);
        final lastDay = DateTime(_selectedDate.year, _selectedDate.month + 1, 0);
        return _events.where((event) => 
          event.startTime.isAfter(firstDay.subtract(const Duration(days: 1))) &&
          event.startTime.isBefore(lastDay.add(const Duration(days: 1))) &&
          event.price != null
        ).fold<double>(0, (sum, e) => sum + e.price!);
    }
  }

  List<AgendaEvent> _getEventsForWeek(DateTime startOfWeek) {
    final endOfWeek = startOfWeek.add(const Duration(days: 6));
    return _events.where((event) {
      return event.startTime.isAfter(startOfWeek.subtract(const Duration(days: 1))) &&
             event.startTime.isBefore(endOfWeek.add(const Duration(days: 1)));
    }).toList();
  }

  DateTime _getStartOfWeek(DateTime date) {
    final weekday = date.weekday;
    return date.subtract(Duration(days: weekday - 1));
  }

  String _getViewLabel(ViewType view) {
    switch (view) {
      case ViewType.day:
        return 'Jour';
      case ViewType.week:
        return 'Semaine';
      case ViewType.month:
        return 'Mois';
    }
  }

  String _getDayAbbreviation(DateTime date) {
    const days = ['LUN', 'MAR', 'MER', 'JEU', 'VEN', 'SAM', 'DIM'];
    return days[date.weekday - 1];
  }

  String _getMonthName(DateTime date) {
    const months = [
      'Janvier', 'FÃ©vrier', 'Mars', 'Avril', 'Mai', 'Juin',
      'Juillet', 'AoÃ»t', 'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'
    ];
    return months[date.month - 1];
  }

  bool _isToday(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year && date.month == now.month && date.day == now.day;
  }

  bool isSameDay(DateTime a, DateTime b) {
    return a.year == b.year && a.month == b.month && a.day == b.day;
  }

  // âœ… ACTIONS DE NAVIGATION
  void _goToPrevious() {
    setState(() {
      switch (_currentView) {
        case ViewType.day:
          _selectedDate = _selectedDate.subtract(const Duration(days: 1));
          break;
        case ViewType.week:
          _selectedDate = _selectedDate.subtract(const Duration(days: 7));
          break;
        case ViewType.month:
          _selectedDate = DateTime(_selectedDate.year, _selectedDate.month - 1, 1);
          break;
      }
    });
  }

  void _goToNext() {
    setState(() {
      switch (_currentView) {
        case ViewType.day:
          _selectedDate = _selectedDate.add(const Duration(days: 1));
          break;
        case ViewType.week:
          _selectedDate = _selectedDate.add(const Duration(days: 7));
          break;
        case ViewType.month:
          _selectedDate = DateTime(_selectedDate.year, _selectedDate.month + 1, 1);
          break;
      }
    });
  }

  void _goToToday() {
    setState(() {
      _selectedDate = DateTime.now();
    });
    if (_currentView == ViewType.day) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _scrollToCurrentHour();
      });
    }
  }

  void _showPremiumDatePicker() {
    showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
              background: Colors.white,
              onBackground: Colors.black87,
              secondary: KipikTheme.rouge,
              onSecondary: Colors.white,
            ),
            dialogBackgroundColor: Colors.white,
          ),
          child: child!,
        );
      },
    ).then((date) {
      if (date != null) {
        setState(() {
          _selectedDate = date;
        });
      }
    });
  }

  void _syncCalendar() {
    _showSyncDialog();
  }

  void _showSyncDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: Row(
          children: [
            Icon(Icons.sync_rounded, color: KipikTheme.rouge),
            const SizedBox(width: 8),
            const Text(
              'Synchronisation Calendriers',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                color: Colors.black87,
              ),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Connectez vos calendriers externes pour synchroniser automatiquement vos rendez-vous',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
            const SizedBox(height: 20),
            ListTile(
              leading: const Icon(Icons.calendar_today, color: Colors.blue),
              title: const Text(
                'Google Calendar',
                style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
              ),
              subtitle: const Text(
                'Synchronisation bidirectionnelle',
                style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
              ),
              trailing: const Icon(Icons.link, color: Colors.grey),
              onTap: _connectGoogleCalendar,
            ),
            ListTile(
              leading: const Icon(Icons.calendar_month, color: Colors.grey),
              title: const Text(
                'Apple Calendar',
                style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
              ),
              subtitle: const Text(
                'Import/Export automatique',
                style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
              ),
              trailing: const Icon(Icons.link, color: Colors.grey),
              onTap: _connectAppleCalendar,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'Fermer',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
          ),
        ],
      ),
    );
  }

  void _connectGoogleCalendar() {
    Navigator.pop(context);
    _showSuccessSnackBar('Google Calendar - Connexion en cours...');
  }

  void _connectAppleCalendar() {
    Navigator.pop(context);
    _showSuccessSnackBar('Apple Calendar - Connexion en cours...');
  }

  void _showSettings() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'ParamÃ¨tres Agenda',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                color: Colors.black87,
                fontSize: 20,
              ),
            ),
            const SizedBox(height: 20),
            ListTile(
              leading: const Icon(Icons.sync_rounded, color: Colors.blue),
              title: const Text(
                'Synchronisation',
                style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
              ),
              subtitle: const Text(
                'GÃ©rer les calendriers connectÃ©s',
                style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
              ),
              onTap: _syncCalendar,
            ),
            ListTile(
              leading: const Icon(Icons.flash_on_rounded, color: Colors.orange),
              title: const Text(
                'Flash Minute',
                style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
              ),
              subtitle: const Text(
                'ParamÃ¨tres et gestion Flash Minute',
                style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
              ),
              onTap: _goToFlashMinuteDashboard,
            ),
            ListTile(
              leading: Icon(Icons.notifications_outlined, color: KipikTheme.rouge),
              title: const Text(
                'Notifications',
                style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
              ),
              subtitle: const Text(
                'Rappels et alertes',
                style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
              ),
              onTap: () => _showInfoSnackBar('Notifications - Ã€ implÃ©menter'),
            ),
          ],
        ),
      ),
    );
  }

  void _goToFlashMinuteDashboard() {
    Navigator.pushNamed(context, '/flash/minute/dashboard');
  }

  void _showEventDetails(AgendaEvent event) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: Colors.transparent,
        child: Container(
          constraints: const BoxConstraints(maxWidth: 400),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                offset: const Offset(0, 8),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      event.eventColor.withOpacity(0.1),
                      event.eventColor.withOpacity(0.05),
                    ],
                  ),
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
                ),
                child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: event.eventColor,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        event.isFlashMinute ? Icons.flash_on_rounded : Icons.event_rounded,
                        color: Colors.white,
                        size: 16,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            event.title,
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              color: Colors.black87,
                              fontSize: 18,
                            ),
                          ),
                          if (event.clientName != null)
                            Text(
                              event.clientName!,
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                color: Colors.black54,
                                fontSize: 14,
                              ),
                            ),
                        ],
                      ),
                    ),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close_rounded, color: Colors.black54),
                    ),
                  ],
                ),
              ),
              
              Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  children: [
                    _buildDetailRow(
                      Icons.schedule_rounded,
                      'Horaire',
                      '${event.startTime.hour.toString().padLeft(2, '0')}:${event.startTime.minute.toString().padLeft(2, '0')} - ${event.endTime.hour.toString().padLeft(2, '0')}:${event.endTime.minute.toString().padLeft(2, '0')}',
                    ),
                    _buildDetailRow(
                      Icons.timer_rounded,
                      'DurÃ©e',
                      '${event.duration.inHours}h ${event.duration.inMinutes % 60}min',
                    ),
                    _buildDetailRow(
                      Icons.category_rounded,
                      'Type',
                      event.typeLabel,
                    ),
                    if (event.price != null)
                      _buildDetailRow(
                        Icons.euro_rounded,
                        'Prix',
                        '${event.price!.toInt()}â‚¬',
                      ),
                    if (event.location != null)
                      _buildDetailRow(
                        event.locationIcon,
                        'Lieu',
                        '${event.location} (${event.locationLabel})',
                      ),
                    if (event.phoneNumber != null)
                      _buildDetailRow(
                        Icons.phone_rounded,
                        'TÃ©lÃ©phone',
                        event.phoneNumber!,
                      ),
                    if (event.email != null)
                      _buildDetailRow(
                        Icons.email_rounded,
                        'Email',
                        event.email!,
                      ),
                    if (event.description != null) ...[
                      const SizedBox(height: 8),
                      Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Description',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.black54,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              event.description!,
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 14,
                                color: Colors.black87,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                    
                    const SizedBox(height: 20),
                    
                    Row(
                      children: [
                        if (event.canActivateFlashMinute)
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () {
                                Navigator.pop(context);
                                _showFlashMinuteDialog(event);
                              },
                              icon: const Icon(Icons.flash_on_rounded, size: 16),
                              label: const Text('Flash Minute'),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.orange,
                                foregroundColor: Colors.white,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                          ),
                        if (event.canActivateFlashMinute) const SizedBox(width: 12),
                        Expanded(
                          child: OutlinedButton.icon(
                            onPressed: () {
                              Navigator.pop(context);
                              _showEditEventDialog(event);
                            },
                            icon: const Icon(Icons.edit_rounded, size: 16),
                            label: const Text('Modifier'),
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: event.eventColor),
                              foregroundColor: event.eventColor,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDetailRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, size: 16, color: Colors.black54),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.black54,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  value,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.black87,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showFlashMinuteDialog(AgendaEvent event) {
    HapticFeedback.mediumImpact();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Row(
          children: [
            Icon(Icons.flash_on_rounded, color: Colors.orange),
            SizedBox(width: 8),
            Text(
              'Activation Flash Minute',
              style: TextStyle(fontFamily: 'PermanentMarker'),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Le RDV "${event.title}" a Ã©tÃ© annulÃ© ?',
              style: const TextStyle(fontFamily: 'Roboto'),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange.withOpacity(0.3)),
              ),
              child: const Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.lightbulb_outline, color: Colors.orange, size: 16),
                      SizedBox(width: 8),
                      Text(
                        'Optimisez votre planning !',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          color: Colors.orange,
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 4),
                  Text(
                    'Activez Flash Minute pour proposer ce crÃ©neau avec remise et remplir votre planning rapidement.',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      color: Colors.black54,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'Annuler seulement',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
          ),
          ElevatedButton.icon(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
            ),
            onPressed: () {
              Navigator.pop(context);
              _activateFlashMinute(event);
            },
            icon: const Icon(Icons.flash_on, size: 16),
            label: const Text(
              'Annuler + Flash Minute',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
          ),
        ],
      ),
    );
  }

  void _showEditEventDialog(AgendaEvent event) {
    _showInfoSnackBar('Modification RDV "${event.title}" - Ã€ implÃ©menter');
  }

  void _activateFlashMinute(AgendaEvent event) {
    Navigator.pushNamed(
      context,
      '/flash/minute/create',
      arguments: {
        'timeSlot': event,
        'cancelledAppointment': true,
      },
    );
  }

  void _showFlashMinuteCreation(AgendaEvent? freeSlot) {
    Navigator.pushNamed(
      context,
      '/flash/minute/create',
      arguments: {
        'timeSlot': freeSlot,
        'cancelledAppointment': false,
      },
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.check_circle_rounded, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(fontFamily: 'Roboto'),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.error_rounded, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(fontFamily: 'Roboto'),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        duration: const Duration(seconds: 4),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.info_rounded, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(fontFamily: 'Roboto'),
              ),
            ),
          ],
        ),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        duration: const Duration(seconds: 2),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_import_events_page.dart

import 'package:flutter/material.dart';

class ProAgendaImportEventsPage extends StatelessWidget {
  const ProAgendaImportEventsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "Importer les Ã©vÃ©nements existants",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_import_page.dart

import 'package:flutter/material.dart';

class ProAgendaImportPage extends StatelessWidget {
  const ProAgendaImportPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Importer mon agenda'),
        backgroundColor: Colors.black,
      ),
      backgroundColor: Colors.black,
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.import_export, size: 80, color: Colors.white),
            const SizedBox(height: 20),
            const Text(
              'Connecte ton agenda existant',
              style: TextStyle(fontSize: 20, color: Colors.white),
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                // IntÃ©gration Ã  venir : Google, Apple, Outlook
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                foregroundColor: Colors.black,
              ),
              child: const Text('Importer depuis Google Calendar'),
            ),
          ],
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_localisation_page.dart

import 'package:flutter/material.dart';

class ProAgendaLocalisationPage extends StatelessWidget {
  const ProAgendaLocalisationPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "Localisation temporaire",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_location_override_page.dart

import 'package:flutter/material.dart';

class ProAgendaLocationOverridePage extends StatelessWidget {
  const ProAgendaLocationOverridePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "DÃ©finir une localisation temporaire",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_notifications_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';

class ProAgendaNotificationsPage extends StatelessWidget {
  const ProAgendaNotificationsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: const Text(
          'Notifications Agenda',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 24,
            color: Colors.white,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (_) => const HomePagePro()),
            );
          },
        ),
      ),
      body: const Center(
        child: Text(
          "Notifications de l'agenda",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_notification_settings_page.dart

import 'package:flutter/material.dart';

class ProAgendaNotificationSettingsPage extends StatelessWidget {
  const ProAgendaNotificationSettingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "ParamÃ¨tres des notifications de l'agenda",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_preferences_page.dart

import 'package:flutter/material.dart';

class ProAgendaPreferencesPage extends StatelessWidget {
  const ProAgendaPreferencesPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "PrÃ©fÃ©rences de l'agenda",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_rdv_details_page.dart

import 'package:flutter/material.dart';

class ProAgendaRdvDetailsPage extends StatelessWidget {
  const ProAgendaRdvDetailsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "DÃ©tails du rendez-vous",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_settings_page.dart

import 'package:flutter/material.dart';

class ProAgendaSettingsPage extends StatelessWidget {
  const ProAgendaSettingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ParamÃ¨tres de lâ€™agenda'),
        backgroundColor: Colors.black,
      ),
      backgroundColor: Colors.black,
      body: ListView(
        padding: const EdgeInsets.all(20),
        children: [
          const Text(
            'Notifications',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
          ),
          SwitchListTile(
            title: const Text('Rappel 3 jours avant', style: TextStyle(color: Colors.white)),
            value: true,
            onChanged: (bool value) {},
          ),
          SwitchListTile(
            title: const Text('Rappel 1 jour avant', style: TextStyle(color: Colors.white)),
            value: true,
            onChanged: (bool value) {},
          ),
          const Divider(color: Colors.white24),
          const SizedBox(height: 10),
          const Text(
            'Affichage de lâ€™agenda',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
          ),
          ListTile(
            title: const Text('Vue par dÃ©faut : Semaine', style: TextStyle(color: Colors.white)),
            trailing: const Icon(Icons.chevron_right, color: Colors.white),
            onTap: () {
              // Action Ã  venir
            },
          ),
          ListTile(
            title: const Text('Activer les couleurs par type de rendez-vous', style: TextStyle(color: Colors.white)),
            trailing: Switch(value: true, onChanged: (bool value) {}),
          ),
          const Divider(color: Colors.white24),
          const SizedBox(height: 10),
          const Text(
            'Localisation',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
          ),
          ListTile(
            title: const Text('Modifier la localisation temporaire', style: TextStyle(color: Colors.white)),
            trailing: const Icon(Icons.location_on, color: Colors.white),
            onTap: () {
              // Redirection future
            },
          ),
        ],
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\agenda\pro_agenda_week_view_page.dart

import 'package:flutter/material.dart';

class ProAgendaWeekViewPage extends StatelessWidget {
  const ProAgendaWeekViewPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Text(
          "Vue hebdomadaire de l'agenda",
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
          ),
        ),
      ),
    );
  }
}



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\booking_add_event_page.dart

// lib/pages/pro/booking/booking_add_event_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:table_calendar/table_calendar.dart';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../widgets/common/buttons/tattoo_assistant_button.dart';
import 'dart:math';

enum EventType { tattoo, consultation, retouche, devis, deplacement, personnel, convention, formation, guest }
enum LocationType { studio, domicile, guest, convention, autre }
enum GuestType { outgoing, incoming } // Sortant (je vais chez qqn) ou Entrant (qqn vient chez moi)
enum DurationUnit { minutes, hours }

class BookingAddEventPage extends StatefulWidget {
  final DateTime? preselectedDate;
  final TimeOfDay? preselectedTime;
  
  const BookingAddEventPage({
    Key? key,
    this.preselectedDate,
    this.preselectedTime,
  }) : super(key: key);

  @override
  State<BookingAddEventPage> createState() => _BookingAddEventPageState();
}

class _BookingAddEventPageState extends State<BookingAddEventPage> 
    with TickerProviderStateMixin {
  
  final _formKey = GlobalKey<FormState>();
  late AnimationController _slideController;
  late AnimationController _scaleController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  // ContrÃ´leurs de formulaire
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _clientNameController = TextEditingController();
  final TextEditingController _clientEmailController = TextEditingController();
  final TextEditingController _clientPhoneController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _priceController = TextEditingController();
  final TextEditingController _depositController = TextEditingController();
  final TextEditingController _locationDetailsController = TextEditingController();
  final TextEditingController _notesController = TextEditingController();

  // Ã‰tat du formulaire
  EventType _selectedEventType = EventType.tattoo;
  DateTime? _selectedDate;
  TimeOfDay? _selectedStartTime;
  TimeOfDay? _selectedEndTime;
  int _durationValue = 2;
  DurationUnit _durationUnit = DurationUnit.hours;
  LocationType _locationType = LocationType.studio;
  double? _price;
  double? _deposit;
  bool _requiresDeposit = false;
  bool _sendConfirmationEmail = true;
  bool _addToCalendar = true;
  bool _isRecurring = false;
  String _recurringPattern = 'weekly';
  int _recurringCount = 1;
  
  // Ã‰tat de la page
  bool _isLoading = false;
  bool _showAdvancedOptions = false;
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _focusedDay = DateTime.now();
  
  // Variables Guest System
  bool _isGuestEvent = false;
  GuestType _guestType = GuestType.outgoing;
  String? _selectedGuestContract;
  String? _hostShopName;
  String? _hostShopAddress;
  double _guestCommissionRate = 20.0;
  bool _accommodationIncluded = false;
  bool _hasActiveFees = false;
  Map<String, dynamic>? _guestDetails;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeForm();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _scaleController.dispose();
    _titleController.dispose();
    _clientNameController.dispose();
    _clientEmailController.dispose();
    _clientPhoneController.dispose();
    _descriptionController.dispose();
    _priceController.dispose();
    _depositController.dispose();
    _locationDetailsController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _scaleAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    _scaleController.forward();
  }

  void _initializeForm() {
    _selectedDate = widget.preselectedDate ?? DateTime.now().add(const Duration(days: 1));
    _selectedStartTime = widget.preselectedTime ?? const TimeOfDay(hour: 14, minute: 0);
    
    // Calculer l'heure de fin par dÃ©faut (2h aprÃ¨s le dÃ©but)
    if (_selectedStartTime != null) {
      final startMinutes = _selectedStartTime!.hour * 60 + _selectedStartTime!.minute;
      final endMinutes = startMinutes + (_durationValue * 60);
      _selectedEndTime = TimeOfDay(
        hour: (endMinutes ~/ 60) % 24,
        minute: endMinutes % 60,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Nouveau RDV',
        subtitle: _getEventTypeLabel(_selectedEventType),
        showBackButton: true,
        useProStyle: true,
        actions: [
          if (_isLoading)
            Container(
              margin: const EdgeInsets.only(right: 16),
              child: const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              ),
            ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Form(
      key: _formKey,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          children: [
            const SizedBox(height: 8),
            _buildEventTypeSelector(),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    _buildBasicInfoSection(),
                    const SizedBox(height: 16),
                    _buildDateTimeSection(),
                    const SizedBox(height: 16),
                    _buildClientInfoSection(),
                    const SizedBox(height: 16),
                    _buildLocationSection(),
                    const SizedBox(height: 16),
                    _buildPricingSection(),
                    const SizedBox(height: 16),
                    _buildAdvancedOptionsToggle(),
                    if (_showAdvancedOptions) ...[
                      const SizedBox(height: 16),
                      _buildAdvancedOptionsSection(),
                    ],
                    if (_isGuestEvent) ...[
                      const SizedBox(height: 16),
                      _buildGuestSystemSection(),
                    ],
                    const SizedBox(height: 32),
                    _buildActionButtons(),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEventTypeSelector() {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              KipikTheme.rouge.withOpacity(0.9),
              KipikTheme.rouge.withOpacity(0.7),
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: KipikTheme.rouge.withOpacity(0.3),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Type de rendez-vous',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 16,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 12),
            
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: EventType.values.map((type) {
                final isSelected = _selectedEventType == type;
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      _selectedEventType = type;
                      // Activer automatiquement le mode Guest si sÃ©lectionnÃ©
                      if (type == EventType.guest) {
                        _isGuestEvent = true;
                      } else {
                        _isGuestEvent = false;
                      }
                    });
                    HapticFeedback.lightImpact();
                  },
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    decoration: BoxDecoration(
                      color: isSelected ? Colors.white : Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                      border: isSelected ? null : Border.all(color: Colors.white.withOpacity(0.3)),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          _getEventTypeIcon(type),
                          size: 16,
                          color: isSelected ? KipikTheme.rouge : Colors.white,
                        ),
                        const SizedBox(width: 6),
                        Text(
                          _getEventTypeLabel(type),
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            color: isSelected ? KipikTheme.rouge : Colors.white,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBasicInfoSection() {
    return _buildFormSection(
      title: 'Informations gÃ©nÃ©rales',
      icon: Icons.info_outline,
      child: Column(
        children: [
          // Titre
          TextFormField(
            controller: _titleController,
            validator: (value) => 
                value == null || value.isEmpty ? 'Le titre est obligatoire' : null,
            decoration: _buildInputDecoration(
              labelText: 'Titre du RDV',
              hintText: 'Ex: Tatouage rose minimaliste',
              prefixIcon: Icons.title,
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Description
          TextFormField(
            controller: _descriptionController,
            maxLines: 3,
            decoration: _buildInputDecoration(
              labelText: 'Description (optionnelle)',
              hintText: 'DÃ©tails du projet, zone Ã  tatouer, style...',
              prefixIcon: Icons.description,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDateTimeSection() {
    return _buildFormSection(
      title: 'Date et heure',
      icon: Icons.schedule,
      child: Column(
        children: [
          // Date
          GestureDetector(
            onTap: _selectDate,
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.grey.withOpacity(0.3)),
              ),
              child: Row(
                children: [
                  Icon(Icons.calendar_today, color: KipikTheme.rouge),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Date du RDV',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            color: Colors.grey,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        Text(
                          _selectedDate != null 
                              ? _formatDate(_selectedDate!)
                              : 'SÃ©lectionner une date',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 16,
                            color: Colors.black87,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Icon(Icons.expand_more, color: Colors.grey),
                ],
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Heure de dÃ©but et durÃ©e
          Row(
            children: [
              Expanded(
                child: GestureDetector(
                  onTap: _selectStartTime,
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey.withOpacity(0.3)),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.access_time, color: KipikTheme.rouge),
                        const SizedBox(width: 12),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'DÃ©but',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.grey,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            Text(
                              _selectedStartTime?.format(context) ?? 'Choisir',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 16,
                                color: Colors.black87,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              
              const SizedBox(width: 12),
              
              Expanded(
                child: GestureDetector(
                  onTap: _selectDuration,
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey.withOpacity(0.3)),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.timer, color: KipikTheme.rouge),
                        const SizedBox(width: 12),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'DurÃ©e',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.grey,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            Text(
                              _formatDuration(),
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 16,
                                color: Colors.black87,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
          
          // Heure de fin calculÃ©e
          if (_selectedStartTime != null) ...[
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue.withOpacity(0.3)),
              ),
              child: Row(
                children: [
                  const Icon(Icons.info_outline, color: Colors.blue, size: 16),
                  const SizedBox(width: 8),
                  Text(
                    'Fin prÃ©vue : ${_selectedEndTime?.format(context) ?? 'Non calculÃ©e'}',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.blue,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildClientInfoSection() {
    if (_selectedEventType == EventType.personnel || 
        _selectedEventType == EventType.deplacement ||
        _selectedEventType == EventType.formation) {
      return const SizedBox.shrink();
    }

    return _buildFormSection(
      title: 'Informations client',
      icon: Icons.person_outline,
      child: Column(
        children: [
          // Nom du client
          TextFormField(
            controller: _clientNameController,
            validator: (value) => 
                value == null || value.isEmpty ? 'Le nom du client est obligatoire' : null,
            decoration: _buildInputDecoration(
              labelText: 'Nom du client',
              hintText: 'PrÃ©nom Nom',
              prefixIcon: Icons.person,
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Email et tÃ©lÃ©phone
          Row(
            children: [
              Expanded(
                child: TextFormField(
                  controller: _clientEmailController,
                  keyboardType: TextInputType.emailAddress,
                  decoration: _buildInputDecoration(
                    labelText: 'Email',
                    hintText: 'client@email.com',
                    prefixIcon: Icons.email,
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: TextFormField(
                  controller: _clientPhoneController,
                  keyboardType: TextInputType.phone,
                  decoration: _buildInputDecoration(
                    labelText: 'TÃ©lÃ©phone',
                    hintText: '06 12 34 56 78',
                    prefixIcon: Icons.phone,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildLocationSection() {
    return _buildFormSection(
      title: 'Lieu du rendez-vous',
      icon: Icons.location_on_outlined,
      child: Column(
        children: [
          // Type de lieu
          DropdownButtonFormField<LocationType>(
            value: _locationType,
            decoration: _buildInputDecoration(
              labelText: 'Type de lieu',
              prefixIcon: Icons.place,
            ),
            items: LocationType.values.map((type) {
              return DropdownMenuItem(
                value: type,
                child: Row(
                  children: [
                    Icon(_getLocationIcon(type), size: 16),
                    const SizedBox(width: 8),
                    Text(_getLocationLabel(type)),
                  ],
                ),
              );
            }).toList(),
            onChanged: (value) {
              setState(() {
                _locationType = value!;
              });
            },
          ),
          
          const SizedBox(height: 16),
          
          // DÃ©tails du lieu
          TextFormField(
            controller: _locationDetailsController,
            decoration: _buildInputDecoration(
              labelText: 'Adresse / DÃ©tails',
              hintText: _getLocationHint(_locationType),
              prefixIcon: Icons.location_on,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPricingSection() {
    if (_selectedEventType == EventType.personnel || 
        _selectedEventType == EventType.formation) {
      return const SizedBox.shrink();
    }

    return _buildFormSection(
      title: 'Tarification',
      icon: Icons.euro,
      child: Column(
        children: [
          // Prix
          TextFormField(
            controller: _priceController,
            keyboardType: TextInputType.number,
            onChanged: (value) {
              _price = double.tryParse(value);
              if (_price != null && _price! > 200) {
                setState(() {
                  _requiresDeposit = true;
                  _deposit = _price! * 0.3;
                  _depositController.text = _deposit!.toInt().toString();
                });
              }
            },
            decoration: _buildInputDecoration(
              labelText: 'Prix (â‚¬)',
              hintText: '150',
              prefixIcon: Icons.euro,
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Acompte
          Row(
            children: [
              Expanded(
                flex: 2,
                child: CheckboxListTile(
                  title: const Text(
                    'Acompte requis',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  value: _requiresDeposit,
                  activeColor: KipikTheme.rouge,
                  onChanged: (value) {
                    setState(() {
                      _requiresDeposit = value ?? false;
                      if (!_requiresDeposit) {
                        _deposit = null;
                        _depositController.clear();
                      }
                    });
                  },
                  controlAffinity: ListTileControlAffinity.leading,
                  contentPadding: EdgeInsets.zero,
                ),
              ),
              
              if (_requiresDeposit) ...[
                const SizedBox(width: 12),
                Expanded(
                  child: TextFormField(
                    controller: _depositController,
                    keyboardType: TextInputType.number,
                    onChanged: (value) {
                      _deposit = double.tryParse(value);
                    },
                    decoration: _buildInputDecoration(
                      labelText: 'Acompte (â‚¬)',
                      hintText: '50',
                    ),
                  ),
                ),
              ],
            ],
          ),
          
          // RÃ©capitulatif prix
          if (_price != null) ...[
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.withOpacity(0.3)),
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Prix total:',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      Text(
                        '${_price!.toInt()}â‚¬',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                  if (_requiresDeposit && _deposit != null) ...[
                    const SizedBox(height: 4),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          'Acompte:',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            color: Colors.grey,
                          ),
                        ),
                        Text(
                          '${_deposit!.toInt()}â‚¬',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            color: Colors.grey,
                          ),
                        ),
                      ],
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          'Reste Ã  payer:',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            color: Colors.grey,
                          ),
                        ),
                        Text(
                          '${(_price! - _deposit!).toInt()}â‚¬',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            color: Colors.grey,
                          ),
                        ),
                      ],
                    ),
                  ],
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildAdvancedOptionsToggle() {
    return GestureDetector(
      onTap: () {
        setState(() {
          _showAdvancedOptions = !_showAdvancedOptions;
        });
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.grey.withOpacity(0.3)),
        ),
        child: Row(
          children: [
            Icon(
              Icons.settings_outlined,
              color: KipikTheme.rouge,
              size: 20,
            ),
            const SizedBox(width: 12),
            const Expanded(
              child: Text(
                'Options avancÃ©es',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            Icon(
              _showAdvancedOptions ? Icons.expand_less : Icons.expand_more,
              color: Colors.grey,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAdvancedOptionsSection() {
    return _buildFormSection(
      title: 'Options avancÃ©es',
      icon: Icons.tune,
      child: Column(
        children: [
          // Options de notification
          SwitchListTile(
            title: const Text(
              'Envoyer email de confirmation',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
            value: _sendConfirmationEmail,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _sendConfirmationEmail = value;
              });
            },
          ),
          
          SwitchListTile(
            title: const Text(
              'Ajouter au calendrier externe',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
            value: _addToCalendar,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _addToCalendar = value;
              });
            },
          ),
          
          // RDV rÃ©current
          SwitchListTile(
            title: const Text(
              'Rendez-vous rÃ©current',
              style: TextStyle(fontFamily: 'Roboto'),
            ),
            value: _isRecurring,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _isRecurring = value;
              });
            },
          ),
          
          if (_isRecurring) ...[
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: DropdownButtonFormField<String>(
                    value: _recurringPattern,
                    decoration: _buildInputDecoration(
                      labelText: 'FrÃ©quence',
                    ),
                    items: const [
                      DropdownMenuItem(value: 'weekly', child: Text('Hebdomadaire')),
                      DropdownMenuItem(value: 'biweekly', child: Text('Bi-hebdomadaire')),
                      DropdownMenuItem(value: 'monthly', child: Text('Mensuel')),
                    ],
                    onChanged: (value) {
                      setState(() {
                        _recurringPattern = value!;
                      });
                    },
                  ),
                ),
                
                const SizedBox(width: 12),
                
                Expanded(
                  child: TextFormField(
                    initialValue: _recurringCount.toString(),
                    keyboardType: TextInputType.number,
                    onChanged: (value) {
                      _recurringCount = int.tryParse(value) ?? 1;
                    },
                    decoration: _buildInputDecoration(
                      labelText: 'Nombre',
                      hintText: '4',
                    ),
                  ),
                ),
              ],
            ),
          ],
          
          const SizedBox(height: 16),
          
          // Notes
          TextFormField(
            controller: _notesController,
            maxLines: 3,
            decoration: _buildInputDecoration(
              labelText: 'Notes internes',
              hintText: 'PrÃ©paration spÃ©ciale, allergies...',
              prefixIcon: Icons.note_add,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGuestSystemSection() {
    return _buildFormSection(
      title: 'Guest System Premium',
      icon: Icons.handshake,
      child: Column(
        children: [
          // Info Premium
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.amber.withOpacity(0.2),
                  Colors.orange.withOpacity(0.1),
                ],
              ),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.amber.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                const Icon(Icons.star, color: Colors.amber, size: 20),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    'FonctionnalitÃ© Premium - Guest System automatisÃ©',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.amber,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Type de Guest
          Row(
            children: [
              Expanded(
                child: RadioListTile<GuestType>(
                  title: const Text(
                    'Je vais en Guest',
                    style: TextStyle(fontFamily: 'Roboto', fontSize: 14),
                  ),
                  subtitle: const Text(
                    'Dans un autre shop',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                  value: GuestType.outgoing,
                  groupValue: _guestType,
                  activeColor: KipikTheme.rouge,
                  onChanged: (value) {
                    setState(() {
                      _guestType = value!;
                    });
                  },
                ),
              ),
              Expanded(
                child: RadioListTile<GuestType>(
                  title: const Text(
                    'Je reÃ§ois un Guest',
                    style: TextStyle(fontFamily: 'Roboto', fontSize: 14),
                  ),
                  subtitle: const Text(
                    'Dans mon shop',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                  value: GuestType.incoming,
                  groupValue: _guestType,
                  activeColor: KipikTheme.rouge,
                  onChanged: (value) {
                    setState(() {
                      _guestType = value!;
                    });
                  },
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          if (_guestType == GuestType.outgoing) 
            _buildOutgoingGuestSection()
          else 
            _buildIncomingGuestSection(),
        ],
      ),
    );
  }

  Widget _buildOutgoingGuestSection() {
    return Column(
      children: [
        // SÃ©lection contrat Guest validÃ©
        GestureDetector(
          onTap: _selectGuestContract,
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.blue.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                const Icon(Icons.description, color: Colors.blue),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Contrat Guest validÃ©',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.grey,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        _selectedGuestContract ?? 'SÃ©lectionner un contrat validÃ©',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 16,
                          color: Colors.black87,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                ),
                const Icon(Icons.arrow_forward_ios, color: Colors.blue, size: 16),
              ],
            ),
          ),
        ),
        
        if (_selectedGuestContract != null) ...[
          const SizedBox(height: 16),
          
          // DÃ©tails du contrat
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.green.withOpacity(0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.store, color: Colors.green, size: 20),
                    const SizedBox(width: 8),
                    const Expanded(
                      child: Text(
                        'DÃ©tails du contrat Guest',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.green,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                
                _buildContractDetail('Shop hÃ´te', _hostShopName ?? 'Ink Studio Paris'),
                _buildContractDetail('Adresse', _hostShopAddress ?? '15 Rue des Martyrs, 75009 Paris'),
                _buildContractDetail('Commission', '${_guestCommissionRate.toInt()}% sur chaque tatouage'),
                _buildContractDetail('HÃ©bergement', _accommodationIncluded ? 'Inclus' : 'Non inclus'),
                
                const SizedBox(height: 12),
                
                Row(
                  children: [
                    const Icon(Icons.info_outline, color: Colors.blue, size: 16),
                    const SizedBox(width: 8),
                    const Expanded(
                      child: Text(
                        'Votre localisation sera automatiquement mise Ã  jour',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.blue,
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildIncomingGuestSection() {
    return Column(
      children: [
        // SÃ©lection Guest entrant
        GestureDetector(
          onTap: _selectIncomingGuest,
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.purple.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.purple.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                const Icon(Icons.person_add, color: Colors.purple),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Tatoueur Guest',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.grey,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        _guestDetails?['name'] ?? 'SÃ©lectionner le tatoueur Guest',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 16,
                          color: Colors.black87,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                ),
                const Icon(Icons.arrow_forward_ios, color: Colors.purple, size: 16),
              ],
            ),
          ),
        ),
        
        if (_guestDetails != null) ...[
          const SizedBox(height: 16),
          
          // Profil du Guest
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.purple.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.purple.withOpacity(0.3)),
            ),
            child: Column(
              children: [
                Row(
                  children: [
                    CircleAvatar(
                      radius: 25,
                      backgroundColor: Colors.purple.withOpacity(0.2),
                      backgroundImage: _guestDetails!['avatar'] != null
                          ? AssetImage(_guestDetails!['avatar'] as String)
                          : null,
                      child: _guestDetails!['avatar'] == null
                          ? const Icon(Icons.person, color: Colors.purple)
                          : null,
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            _guestDetails!['name'] ?? 'Guest Tatoueur',
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                              color: Colors.black87,
                            ),
                          ),
                          Text(
                            _guestDetails!['style'] ?? 'Style de tatouage',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              color: Colors.grey,
                            ),
                          ),
                          Row(
                            children: [
                              const Icon(Icons.star, color: Colors.amber, size: 16),
                              const SizedBox(width: 4),
                              Text(
                                '${_guestDetails!['rating'] ?? 4.8}',
                                style: const TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 12,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      onPressed: _viewGuestProfile,
                      icon: const Icon(Icons.visibility, color: Colors.purple),
                      tooltip: 'Voir le profil',
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                // Options de suivi
                Row(
                  children: [
                    Expanded(
                      child: CheckboxListTile(
                        title: const Text(
                          'Suivi rÃ©alisations en temps rÃ©el',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                          ),
                        ),
                        value: true,
                        dense: true,
                        activeColor: KipikTheme.rouge,
                        onChanged: (value) {},
                        controlAffinity: ListTileControlAffinity.leading,
                        contentPadding: EdgeInsets.zero,
                      ),
                    ),
                  ],
                ),
                
                Row(
                  children: [
                    Expanded(
                      child: CheckboxListTile(
                        title: const Text(
                          'Notifications de facturation',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                          ),
                        ),
                        value: _hasActiveFees,
                        dense: true,
                        activeColor: KipikTheme.rouge,
                        onChanged: (value) {
                          setState(() {
                            _hasActiveFees = value ?? false;
                          });
                        },
                        controlAffinity: ListTileControlAffinity.leading,
                        contentPadding: EdgeInsets.zero,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildContractDetail(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    final canSave = _formKey.currentState?.validate() ?? false;

    return Column(
      children: [
        // Bouton principal
        SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton.icon(
            onPressed: canSave && !_isLoading ? _saveEvent : null,
            icon: _isLoading 
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : const Icon(Icons.save, size: 20),
            label: Text(
              _isLoading ? 'CrÃ©ation en cours...' : 'CrÃ©er le RDV',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: canSave ? KipikTheme.rouge : Colors.grey,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: canSave ? 4 : 0,
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Bouton secondaire
        SizedBox(
          width: double.infinity,
          height: 48,
          child: OutlinedButton.icon(
            onPressed: _saveAsDraft,
            icon: const Icon(Icons.drafts, size: 18),
            label: const Text(
              'Enregistrer comme brouillon',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.grey[600],
              side: BorderSide(color: Colors.grey.withOpacity(0.5)),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildFormSection({
    required String title,
    required IconData icon,
    required Widget child,
  }) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              Text(
                title,
                style: const TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          child,
        ],
      ),
    );
  }

  InputDecoration _buildInputDecoration({
    required String labelText,
    String? hintText,
    IconData? prefixIcon,
  }) {
    return InputDecoration(
      labelText: labelText,
      hintText: hintText,
      labelStyle: TextStyle(
        fontFamily: 'Roboto',
        color: Colors.grey[600],
      ),
      hintStyle: const TextStyle(
        fontFamily: 'Roboto',
        color: Colors.grey,
      ),
      prefixIcon: prefixIcon != null 
          ? Icon(prefixIcon, color: KipikTheme.rouge) 
          : null,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey.withOpacity(0.3)),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: KipikTheme.rouge),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: const BorderSide(color: Colors.red),
      ),
      filled: true,
      fillColor: Colors.grey.withOpacity(0.05),
    );
  }

  // Actions
  void _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _selectStartTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _selectedStartTime ?? TimeOfDay.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _selectedStartTime = picked;
        _calculateEndTime();
      });
    }
  }

  void _selectDuration() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'DurÃ©e du RDV',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),
            
            // SÃ©lecteur de durÃ©e
            Row(
              children: [
                Expanded(
                  child: Column(
                    children: [
                      const Text('Valeur', style: TextStyle(fontFamily: 'Roboto')),
                      const SizedBox(height: 8),
                      DropdownButton<int>(
                        value: _durationValue,
                        isExpanded: true,
                        items: List.generate(12, (index) => index + 1)
                            .map((value) => DropdownMenuItem(
                                  value: value,
                                  child: Text('$value'),
                                ))
                            .toList(),
                        onChanged: (value) {
                          setState(() {
                            _durationValue = value!;
                            _calculateEndTime();
                          });
                        },
                      ),
                    ],
                  ),
                ),
                const SizedBox(width: 20),
                Expanded(
                  child: Column(
                    children: [
                      const Text('UnitÃ©', style: TextStyle(fontFamily: 'Roboto')),
                      const SizedBox(height: 8),
                      DropdownButton<DurationUnit>(
                        value: _durationUnit,
                        isExpanded: true,
                        items: const [
                          DropdownMenuItem(value: DurationUnit.minutes, child: Text('Minutes')),
                          DropdownMenuItem(value: DurationUnit.hours, child: Text('Heures')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            _durationUnit = value!;
                            _calculateEndTime();
                          });
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 20),
            
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => Navigator.pop(context),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
                child: const Text('Valider'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _calculateEndTime() {
    if (_selectedStartTime != null) {
      final startMinutes = _selectedStartTime!.hour * 60 + _selectedStartTime!.minute;
      final durationMinutes = _durationUnit == DurationUnit.hours 
          ? _durationValue * 60 
          : _durationValue;
      final endMinutes = startMinutes + durationMinutes;
      
      setState(() {
        _selectedEndTime = TimeOfDay(
          hour: (endMinutes ~/ 60) % 24,
          minute: endMinutes % 60,
        );
      });
    }
  }

  void _saveEvent() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() => _isLoading = true);
    
    HapticFeedback.mediumImpact();
    
    try {
      // Simulation de sauvegarde
      await Future.delayed(const Duration(seconds: 2));
      
      if (mounted) {
        _showSuccessDialog();
      }
      
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de la crÃ©ation: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _saveAsDraft() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Brouillon enregistrÃ©'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: const BoxDecoration(
                color: Colors.green,
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: Colors.white,
                size: 40,
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'RDV CrÃ©Ã© !',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Le rendez-vous a Ã©tÃ© ajoutÃ© Ã  votre planning',
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 20),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context); // Fermer dialog
                  Navigator.pop(context, true); // Retourner avec succÃ¨s
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: const Text(
                  'Parfait !',
                  style: TextStyle(fontFamily: 'Roboto'),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Actions Guest System
  void _selectGuestContract() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Contrats Guest validÃ©s',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),
            
            // Liste des contrats (simulation)
            ...['Ink Studio Paris - 15-20 Juin', 'Black Art Lyon - 3-7 Juillet', 'Urban Tattoo Marseille - 10-15 AoÃ»t']
                .map((contract) => ListTile(
                  title: Text(
                    contract,
                    style: const TextStyle(fontFamily: 'Roboto'),
                  ),
                  leading: const Icon(Icons.description, color: Colors.blue),
                  onTap: () {
                    setState(() {
                      _selectedGuestContract = contract;
                      _hostShopName = contract.split(' - ')[0];
                      _hostShopAddress = '${contract.split(' - ')[0]} - Adresse';
                      _guestCommissionRate = 20.0;
                      _accommodationIncluded = true;
                    });
                    Navigator.pop(context);
                  },
                )),
            
            const SizedBox(height: 16),
            
            OutlinedButton.icon(
              onPressed: () {
                Navigator.pop(context);
                _goToGuestMarketplace();
              },
              icon: const Icon(Icons.add),
              label: const Text('Nouveau contrat Guest'),
              style: OutlinedButton.styleFrom(
                foregroundColor: KipikTheme.rouge,
                side: BorderSide(color: KipikTheme.rouge),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _selectIncomingGuest() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Guests confirmÃ©s',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),
            
            // Liste des guests (simulation)
            ...List.generate(3, (index) {
              final guests = [
                {'name': 'Alex Martin', 'style': 'RÃ©alisme', 'rating': 4.9, 'avatar': 'assets/avatars/guest1.png'},
                {'name': 'Emma Chen', 'style': 'Japonais', 'rating': 4.7, 'avatar': 'assets/avatars/guest2.png'},
                {'name': 'Lucas Dubois', 'style': 'Geometric', 'rating': 4.8, 'avatar': 'assets/avatars/guest3.png'},
              ];
              final guest = guests[index];
              
              return ListTile(
                leading: CircleAvatar(
                  backgroundImage: AssetImage(guest['avatar'] as String),
                ),
                title: Text(
                  guest['name'] as String,
                  style: const TextStyle(fontFamily: 'Roboto'),
                ),
                subtitle: Text(
                  '${guest['style']} â€¢ â­ ${guest['rating']}',
                  style: const TextStyle(fontSize: 12),
                ),
                onTap: () {
                  setState(() {
                    _guestDetails = guest;
                  });
                  Navigator.pop(context);
                },
              );
            }),
            
            const SizedBox(height: 16),
            
            OutlinedButton.icon(
              onPressed: () {
                Navigator.pop(context);
                _goToGuestMarketplace();
              },
              icon: const Icon(Icons.search),
              label: const Text('Chercher un Guest'),
              style: OutlinedButton.styleFrom(
                foregroundColor: KipikTheme.rouge,
                side: BorderSide(color: KipikTheme.rouge),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _viewGuestProfile() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Ouverture du profil Guest - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _goToGuestMarketplace() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Redirection vers Guest Marketplace - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // Helper methods
  String _formatDate(DateTime date) {
    const weekdays = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
    const months = ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'];
    
    final weekday = weekdays[date.weekday - 1];
    final day = date.day;
    final month = months[date.month - 1];
    final year = date.year;
    
    return '$weekday $day $month $year';
  }

  String _formatDuration() {
    final unit = _durationUnit == DurationUnit.hours ? 'h' : 'min';
    return '$_durationValue$unit';
  }

  String _getEventTypeLabel(EventType type) {
    switch (type) {
      case EventType.tattoo:
        return 'Tatouage';
      case EventType.consultation:
        return 'Consultation';
      case EventType.retouche:
        return 'Retouche';
      case EventType.devis:
        return 'Devis';
      case EventType.deplacement:
        return 'DÃ©placement';
      case EventType.personnel:
        return 'Personnel';
      case EventType.convention:
        return 'Convention';
      case EventType.formation:
        return 'Formation';
      case EventType.guest:
        return 'Guest Shop';
    }
  }

  IconData _getEventTypeIcon(EventType type) {
    switch (type) {
      case EventType.tattoo:
        return Icons.brush;
      case EventType.consultation:
        return Icons.chat_bubble_outline;
      case EventType.retouche:
        return Icons.edit;
      case EventType.devis:
        return Icons.receipt_long;
      case EventType.deplacement:
        return Icons.flight;
      case EventType.personnel:
        return Icons.person;
      case EventType.convention:
        return Icons.event;
      case EventType.formation:
        return Icons.school;
      case EventType.guest:
        return Icons.store_mall_directory;
    }
  }

  String _getLocationLabel(LocationType type) {
    switch (type) {
      case LocationType.studio:
        return 'Studio';
      case LocationType.domicile:
        return 'Ã€ domicile';
      case LocationType.guest:
        return 'Guest shop';
      case LocationType.convention:
        return 'Convention';
      case LocationType.autre:
        return 'Autre';
    }
  }

  IconData _getLocationIcon(LocationType type) {
    switch (type) {
      case LocationType.studio:
        return Icons.home_work;
      case LocationType.domicile:
        return Icons.home;
      case LocationType.guest:
        return Icons.store;
      case LocationType.convention:
        return Icons.event;
      case LocationType.autre:
        return Icons.place;
    }
  }

  String _getLocationHint(LocationType type) {
    switch (type) {
      case LocationType.studio:
        return 'Salon principal, Cabinet 2...';
      case LocationType.domicile:
        return 'Adresse du client';
      case LocationType.guest:
        return 'Nom du shop + adresse';
      case LocationType.convention:
        return 'Nom + lieu de la convention';
      case LocationType.autre:
        return 'PrÃ©ciser le lieu';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\booking_calendar_page.dart

// lib/pages/pro/booking/booking_calendar_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:table_calendar/table_calendar.dart';
import 'dart:async';
import 'dart:math';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import '../flashs/flash_minute_create_page.dart';

class BookingCalendarPage extends StatefulWidget {
  const BookingCalendarPage({Key? key}) : super(key: key);

  @override
  State<BookingCalendarPage> createState() => _BookingCalendarPageState();
}

class _BookingCalendarPageState extends State<BookingCalendarPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _pulseController;
  late AnimationController _slideController;
  late Animation<double> _pulseAnimation;
  late Animation<Offset> _slideAnimation;
  
  // Ã‰tat du calendrier
  CalendarFormat _calendarFormat = CalendarFormat.week;
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  
  // Ã‰tat de la page
  bool _isLoading = true;
  bool _showFreeSlotsOnly = false;
  String _selectedView = 'Semaine';
  
  // DonnÃ©es RDV
  Map<DateTime, List<Map<String, dynamic>>> _appointments = {};
  List<Map<String, dynamic>> _dayAppointments = [];
  List<Map<String, dynamic>> _freeSlots = [];
  
  // Flash Minute
  bool _hasActiveFlashMinute = false;
  Map<String, dynamic>? _pendingCancellation;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _selectedDay = _focusedDay;
    _loadCalendarData();
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    )..repeat(reverse: true);
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0.0, 1.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
  }

  Future<void> _loadCalendarData() async {
    setState(() => _isLoading = true);
    
    try {
      await Future.delayed(const Duration(seconds: 1));
      
      _appointments = await _generateAppointments();
      _updateDayAppointments();
      _detectFreeSlots();
      _checkActiveFlashMinute();
      
    } catch (e) {
      print('âŒ Erreur chargement calendrier: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<Map<DateTime, List<Map<String, dynamic>>>> _generateAppointments() async {
    final appointments = <DateTime, List<Map<String, dynamic>>>{};
    final now = DateTime.now();
    final random = Random();
    
    // GÃ©nÃ©rer des RDV pour les 30 prochains jours
    for (int i = 0; i < 30; i++) {
      final date = DateTime(now.year, now.month, now.day + i);
      final dayAppointments = <Map<String, dynamic>>[];
      
      // Ajouter quelques RDV par jour (sauf dimanche)
      if (date.weekday != 7) {
        final numAppointments = random.nextInt(4) + 1;
        
        for (int j = 0; j < numAppointments; j++) {
          final hour = 9 + (j * 2) + random.nextInt(2);
          final startTime = DateTime(date.year, date.month, date.day, hour, 0);
          final duration = (random.nextInt(3) + 2) * 30; // 1h Ã  2h30
          
          dayAppointments.add({
            'id': 'rdv_${i}_$j',
            'title': _getRandomTattooStyle(),
            'clientName': _getRandomClientName(),
            'startTime': startTime,
            'endTime': startTime.add(Duration(minutes: duration)),
            'status': _getRandomStatus(),
            'type': 'tattoo',
            'price': (random.nextInt(200) + 100).toDouble(),
            'isFlashMinute': false,
            'canCancel': startTime.isAfter(now.add(const Duration(hours: 24))),
          });
        }
      }
      
      if (dayAppointments.isNotEmpty) {
        appointments[date] = dayAppointments;
      }
    }
    
    return appointments;
  }

  void _updateDayAppointments() {
    if (_selectedDay != null) {
      final selectedDate = DateTime(_selectedDay!.year, _selectedDay!.month, _selectedDay!.day);
      _dayAppointments = _appointments[selectedDate] ?? [];
      _dayAppointments.sort((a, b) => a['startTime'].compareTo(b['startTime']));
    }
  }

  void _detectFreeSlots() {
    if (_selectedDay == null) return;
    
    _freeSlots.clear();
    final selectedDate = DateTime(_selectedDay!.year, _selectedDay!.month, _selectedDay!.day);
    final now = DateTime.now();
    
    // Ne dÃ©tecter que pour aujourd'hui et les jours futurs
    if (selectedDate.isBefore(DateTime(now.year, now.month, now.day))) {
      return;
    }
    
    final dayAppointments = _appointments[selectedDate] ?? [];
    
    // Heures d'ouverture : 9h-19h
    final startHour = 9;
    final endHour = 19;
    
    if (dayAppointments.isEmpty) {
      // JournÃ©e entiÃ¨rement libre
      _freeSlots.add({
        'startTime': DateTime(selectedDate.year, selectedDate.month, selectedDate.day, startHour, 0),
        'endTime': DateTime(selectedDate.year, selectedDate.month, selectedDate.day, endHour, 0),
        'duration': Duration(hours: endHour - startHour),
        'type': 'full_day',
      });
    } else {
      // DÃ©tecter les crÃ©neaux entre les RDV
      for (int hour = startHour; hour < endHour; hour++) {
        final slotStart = DateTime(selectedDate.year, selectedDate.month, selectedDate.day, hour, 0);
        final slotEnd = slotStart.add(const Duration(hours: 1));
        
        // VÃ©rifier si ce crÃ©neau est libre
        final isOccupied = dayAppointments.any((appointment) {
          final appointmentStart = appointment['startTime'] as DateTime;
          final appointmentEnd = appointment['endTime'] as DateTime;
          
          return slotStart.isBefore(appointmentEnd) && slotEnd.isAfter(appointmentStart);
        });
        
        if (!isOccupied && slotStart.isAfter(now)) {
          _freeSlots.add({
            'startTime': slotStart,
            'endTime': slotEnd,
            'duration': const Duration(hours: 1),
            'type': 'slot',
          });
        }
      }
    }
  }

  void _checkActiveFlashMinute() {
    // Simuler la vÃ©rification d'un Flash Minute actif
    _hasActiveFlashMinute = Random().nextBool();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Planning & RÃ©servations',
        subtitle: _getSubtitle(),
        showBackButton: true,
        useProStyle: true,
        actions: [
          // Bouton crÃ©neaux libres
          if (_freeSlots.isNotEmpty)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              margin: const EdgeInsets.only(right: 8),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.access_time, color: Colors.green, size: 16),
                  const SizedBox(width: 4),
                  Text(
                    '${_freeSlots.length}',
                    style: const TextStyle(
                      color: Colors.green,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          // Flash Minute actif
          if (_hasActiveFlashMinute)
            AnimatedBuilder(
              animation: _pulseAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _pulseAnimation.value,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    margin: const EdgeInsets.only(right: 8),
                    decoration: BoxDecoration(
                      color: Colors.orange,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.flash_on, color: Colors.white, size: 16),
                        SizedBox(width: 4),
                        Text(
                          'ACTIF',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert, color: Colors.white),
            color: const Color(0xFF1A1A1A),
            onSelected: _handleMenuAction,
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'sync',
                child: Row(
                  children: [
                    Icon(Icons.sync, color: Colors.blue),
                    SizedBox(width: 8),
                    Text('Synchroniser', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'export',
                child: Row(
                  children: [
                    Icon(Icons.download, color: Colors.green),
                    SizedBox(width: 8),
                    Text('Exporter', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'settings',
                child: Row(
                  children: [
                    Icon(Icons.settings, color: Colors.grey),
                    SizedBox(width: 8),
                    Text('ParamÃ¨tres', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }

  String _getSubtitle() {
    final todayAppointments = _appointments[DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day)]?.length ?? 0;
    final freeCount = _freeSlots.length;
    
    if (freeCount > 0) {
      return '$todayAppointments RDV â€¢ $freeCount crÃ©neaux libres';
    }
    return '$todayAppointments RDV aujourd\'hui';
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement du planning...',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        _buildViewSelector(),
        _buildCalendar(),
        _buildDayHeader(),
        Expanded(
          child: _buildDayView(),
        ),
      ],
    );
  }

  Widget _buildViewSelector() {
    final views = ['Jour', 'Semaine', 'Mois'];
    
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: views.map((view) {
          final isSelected = view == _selectedView;
          return Expanded(
            child: GestureDetector(
              onTap: () => _changeView(view),
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 200),
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  color: isSelected ? KipikTheme.rouge : Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  view,
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.grey,
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildCalendar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(16),
      ),
      child: TableCalendar<Map<String, dynamic>>(
        firstDay: DateTime.utc(2020, 1, 1),
        lastDay: DateTime.utc(2030, 12, 31),
        focusedDay: _focusedDay,
        calendarFormat: _calendarFormat,
        eventLoader: (day) {
          final dateKey = DateTime(day.year, day.month, day.day);
          return _appointments[dateKey] ?? [];
        },
        startingDayOfWeek: StartingDayOfWeek.monday,
        selectedDayPredicate: (day) {
          return isSameDay(_selectedDay, day);
        },
        onDaySelected: (selectedDay, focusedDay) {
          if (!isSameDay(_selectedDay, selectedDay)) {
            setState(() {
              _selectedDay = selectedDay;
              _focusedDay = focusedDay;
            });
            _updateDayAppointments();
            _detectFreeSlots();
          }
        },
        onFormatChanged: (format) {
          if (_calendarFormat != format) {
            setState(() {
              _calendarFormat = format;
            });
          }
        },
        onPageChanged: (focusedDay) {
          _focusedDay = focusedDay;
        },
        // Style du calendrier
        calendarStyle: CalendarStyle(
          outsideDaysVisible: false,
          defaultTextStyle: const TextStyle(color: Colors.white),
          weekendTextStyle: const TextStyle(color: Colors.grey),
          selectedTextStyle: const TextStyle(color: Colors.white),
          todayTextStyle: const TextStyle(color: Colors.white),
          selectedDecoration: BoxDecoration(
            color: KipikTheme.rouge,
            shape: BoxShape.circle,
          ),
          todayDecoration: BoxDecoration(
            color: Colors.orange.withOpacity(0.7),
            shape: BoxShape.circle,
          ),
          markersMaxCount: 3,
          markerDecoration: const BoxDecoration(
            color: Colors.blue,
            shape: BoxShape.circle,
          ),
        ),
        headerStyle: const HeaderStyle(
          formatButtonVisible: false,
          titleCentered: true,
          titleTextStyle: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
          leftChevronIcon: Icon(Icons.chevron_left, color: Colors.white),
          rightChevronIcon: Icon(Icons.chevron_right, color: Colors.white),
        ),
        daysOfWeekStyle: const DaysOfWeekStyle(
          weekdayStyle: TextStyle(color: Colors.grey),
          weekendStyle: TextStyle(color: Colors.grey),
        ),
      ),
    );
  }

  Widget _buildDayHeader() {
    if (_selectedDay == null) return const SizedBox.shrink();
    
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Text(
                _formatSelectedDay(),
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              Row(
                children: [
                  _buildQuickFilter('Tous', !_showFreeSlotsOnly),
                  const SizedBox(width: 8),
                  _buildQuickFilter('Libres', _showFreeSlotsOnly),
                ],
              ),
            ],
          ),
          const SizedBox(height: 12),
          _buildDayStats(),
        ],
      ),
    );
  }

  Widget _buildQuickFilter(String label, bool isSelected) {
    return GestureDetector(
      onTap: () {
        setState(() {
          _showFreeSlotsOnly = label == 'Libres';
        });
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isSelected ? KipikTheme.rouge : Colors.transparent,
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: isSelected ? KipikTheme.rouge : Colors.grey,
          ),
        ),
        child: Text(
          label,
          style: TextStyle(
            color: isSelected ? Colors.white : Colors.grey,
            fontSize: 12,
            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
          ),
        ),
      ),
    );
  }

  Widget _buildDayStats() {
    return Row(
      children: [
        _buildStatChip('RDV', _dayAppointments.length, Icons.event, Colors.blue),
        const SizedBox(width: 12),
        _buildStatChip('Libres', _freeSlots.length, Icons.access_time, Colors.green),
        const SizedBox(width: 12),
        _buildStatChip('Revenus', '${_calculateDayRevenue()}â‚¬', Icons.euro, Colors.purple),
        const Spacer(),
        if (_freeSlots.isNotEmpty)
          ElevatedButton.icon(
            onPressed: _proposeFlashMinute,
            icon: const Icon(Icons.flash_on, size: 16),
            label: const Text('Flash Minute'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildStatChip(String label, dynamic value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, color: color, size: 14),
          const SizedBox(width: 4),
          Text(
            '$value',
            style: TextStyle(
              color: color,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(width: 2),
          Text(
            label,
            style: const TextStyle(
              color: Colors.grey,
              fontSize: 10,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDayView() {
    if (_showFreeSlotsOnly) {
      return _buildFreeSlotsView();
    } else {
      return _buildAppointmentsView();
    }
  }

  Widget _buildAppointmentsView() {
    if (_dayAppointments.isEmpty) {
      return _buildEmptyDayState();
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: _dayAppointments.length,
      itemBuilder: (context, index) {
        final appointment = _dayAppointments[index];
        return _buildAppointmentCard(appointment);
      },
    );
  }

  Widget _buildFreeSlotsView() {
    if (_freeSlots.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.event_busy, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'Aucun crÃ©neau libre',
              style: TextStyle(color: Colors.white, fontSize: 18),
            ),
            Text(
              'Planning complet pour cette journÃ©e',
              style: TextStyle(color: Colors.grey, fontSize: 14),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: _freeSlots.length,
      itemBuilder: (context, index) {
        final slot = _freeSlots[index];
        return _buildFreeSlotCard(slot);
      },
    );
  }

  Widget _buildEmptyDayState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.free_breakfast,
            size: 64,
            color: Colors.grey[600],
          ),
          const SizedBox(height: 16),
          const Text(
            'JournÃ©e libre !',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'Aucun RDV prÃ©vu pour cette journÃ©e',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _proposeFlashMinute,
            icon: const Icon(Icons.flash_on),
            label: const Text('CrÃ©er un Flash Minute'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAppointmentCard(Map<String, dynamic> appointment) {
    final status = appointment['status'];
    final canCancel = appointment['canCancel'] ?? false;
    final startTime = appointment['startTime'] as DateTime;
    final endTime = appointment['endTime'] as DateTime;
    final isFlashMinute = appointment['isFlashMinute'] ?? false;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: _getStatusColor(status).withOpacity(0.3),
        ),
        boxShadow: isFlashMinute ? [
          BoxShadow(
            color: Colors.orange.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ] : null,
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(12),
          onTap: () => _showAppointmentDetails(appointment),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Container(
                      width: 8,
                      height: 8,
                      decoration: BoxDecoration(
                        color: _getStatusColor(status),
                        shape: BoxShape.circle,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            appointment['title'],
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            appointment['clientName'],
                            style: const TextStyle(
                              color: Colors.grey,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                    ),
                    if (isFlashMinute)
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.orange,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Text(
                          'FLASH',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    const SizedBox(width: 8),
                    _buildStatusBadge(status),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Icon(Icons.access_time, color: Colors.grey[600], size: 16),
                    const SizedBox(width: 8),
                    Text(
                      '${_formatTime(startTime)} - ${_formatTime(endTime)}',
                      style: const TextStyle(color: Colors.grey, fontSize: 14),
                    ),
                    const Spacer(),
                    Text(
                      '${appointment['price']}â‚¬',
                      style: const TextStyle(
                        color: Colors.green,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                if (canCancel) ...[
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      const Spacer(),
                      OutlinedButton.icon(
                        onPressed: () => _cancelAppointment(appointment),
                        icon: const Icon(Icons.cancel, size: 16),
                        label: const Text('Annuler'),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.red,
                          side: const BorderSide(color: Colors.red),
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                        ),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildFreeSlotCard(Map<String, dynamic> slot) {
    final startTime = slot['startTime'] as DateTime;
    final endTime = slot['endTime'] as DateTime;
    final duration = slot['duration'] as Duration;
    final type = slot['type'];
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: Colors.green.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.green.withOpacity(0.3)),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(12),
          onTap: () => _createFlashMinuteForSlot(slot),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(
                    Icons.access_time,
                    color: Colors.green,
                    size: 20,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        type == 'full_day' ? 'JournÃ©e complÃ¨te libre' : 'CrÃ©neau libre',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        '${_formatTime(startTime)} - ${_formatTime(endTime)} (${_formatDuration(duration)})',
                        style: const TextStyle(
                          color: Colors.grey,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: () => _createFlashMinuteForSlot(slot),
                  icon: const Icon(Icons.flash_on, size: 16),
                  label: const Text('Flash'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.orange,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildStatusBadge(String status) {
    Color color;
    String text;
    
    switch (status) {
      case 'confirmed':
        color = Colors.green;
        text = 'ConfirmÃ©';
        break;
      case 'pending':
        color = Colors.orange;
        text = 'En attente';
        break;
      case 'cancelled':
        color = Colors.red;
        text = 'AnnulÃ©';
        break;
      default:
        color = Colors.grey;
        text = status;
    }
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 10,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildFloatingActionButton() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (_freeSlots.isNotEmpty)
          FloatingActionButton.extended(
            heroTag: 'flash',
            onPressed: _proposeFlashMinute,
            backgroundColor: Colors.orange,
            icon: const Icon(Icons.flash_on),
            label: const Text('Flash Minute'),
          ),
        if (_freeSlots.isNotEmpty) const SizedBox(height: 16),
        FloatingActionButton(
          heroTag: 'add',
          onPressed: _addAppointment,
          backgroundColor: KipikTheme.rouge,
          child: const Icon(Icons.add),
        ),
      ],
    );
  }

  // Helper methods
  String _formatSelectedDay() {
    if (_selectedDay == null) return '';
    
    final weekdays = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
    final months = ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'];
    
    final weekday = weekdays[_selectedDay!.weekday - 1];
    final day = _selectedDay!.day;
    final month = months[_selectedDay!.month - 1];
    
    final today = DateTime.now();
    if (isSameDay(_selectedDay!, today)) {
      return 'Aujourd\'hui â€¢ $weekday $day $month';
    } else if (isSameDay(_selectedDay!, today.add(const Duration(days: 1)))) {
      return 'Demain â€¢ $weekday $day $month';
    } else {
      return '$weekday $day $month';
    }
  }

  String _formatTime(DateTime time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  String _formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes % 60;
    
    if (hours > 0 && minutes > 0) {
      return '${hours}h${minutes}min';
    } else if (hours > 0) {
      return '${hours}h';
    } else {
      return '${minutes}min';
    }
  }

  int _calculateDayRevenue() {
    return _dayAppointments.fold<int>(0, (sum, appointment) {
      return sum + (appointment['price'] as double).toInt();
    });
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'confirmed':
        return Colors.green;
      case 'pending':
        return Colors.orange;
      case 'cancelled':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  String _getRandomTattooStyle() {
    final styles = ['Tatouage RÃ©aliste', 'Flash Rose', 'Mandala', 'GÃ©omÃ©trique', 'Aquarelle', 'Old School'];
    return styles[Random().nextInt(styles.length)];
  }

  String _getRandomClientName() {
    final names = ['Sophie M.', 'Lucas D.', 'Emma L.', 'Thomas P.', 'Marie C.', 'Antoine R.'];
    return names[Random().nextInt(names.length)];
  }

  String _getRandomStatus() {
    final statuses = ['confirmed', 'pending'];
    return statuses[Random().nextInt(statuses.length)];
  }

  // Actions
  void _changeView(String view) {
    setState(() {
      _selectedView = view;
      switch (view) {
        case 'Jour':
          _calendarFormat = CalendarFormat.week;
          break;
        case 'Semaine':
          _calendarFormat = CalendarFormat.week;
          break;
        case 'Mois':
          _calendarFormat = CalendarFormat.month;
          break;
      }
    });
  }

  void _proposeFlashMinute() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const FlashMinuteCreatePage()),
    ).then((_) => _loadCalendarData());
  }

  void _createFlashMinuteForSlot(Map<String, dynamic> slot) {
    HapticFeedback.mediumImpact();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Row(
          children: [
            Icon(Icons.flash_on, color: Colors.orange),
            SizedBox(width: 8),
            Text('Flash Minute', style: TextStyle(color: Colors.white)),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'CrÃ©er un Flash Minute pour ce crÃ©neau ?',
              style: const TextStyle(color: Colors.white, fontSize: 16),
            ),
            const SizedBox(height: 8),
            Text(
              '${_formatTime(slot['startTime'])} - ${_formatTime(slot['endTime'])}',
              style: const TextStyle(color: Colors.grey, fontSize: 14),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _proposeFlashMinute();
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('CrÃ©er'),
          ),
        ],
      ),
    );
  }

  void _cancelAppointment(Map<String, dynamic> appointment) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text('Annuler le RDV', style: TextStyle(color: Colors.white)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Annuler le RDV avec ${appointment['clientName']} ?',
              style: const TextStyle(color: Colors.white),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange.withOpacity(0.3)),
              ),
              child: const Row(
                children: [
                  Icon(Icons.flash_on, color: Colors.orange, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Voulez-vous crÃ©er un Flash Minute pour ce crÃ©neau ?',
                      style: TextStyle(color: Colors.orange, fontSize: 14),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Garder RDV'),
          ),
          OutlinedButton(
            onPressed: () {
              Navigator.pop(context);
              _performCancelAppointment(appointment, false);
            },
            style: OutlinedButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Annuler seulement'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _performCancelAppointment(appointment, true);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('Annuler + Flash'),
          ),
        ],
      ),
    );
  }

  void _performCancelAppointment(Map<String, dynamic> appointment, bool createFlash) {
    setState(() {
      appointment['status'] = 'cancelled';
    });
    
    HapticFeedback.heavyImpact();
    
    if (createFlash) {
      _slideController.forward().then((_) {
        _proposeFlashMinute();
        _slideController.reset();
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('RDV annulÃ© ! CrÃ©ez votre Flash Minute maintenant.'),
          backgroundColor: Colors.orange,
          action: SnackBarAction(
            label: 'CrÃ©er',
            onPressed: _proposeFlashMinute,
          ),
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('RDV annulÃ©'),
          backgroundColor: Colors.red,
        ),
      );
    }
    
    _detectFreeSlots();
  }

  void _addAppointment() {
    // TODO: ImplÃ©menter l'ajout de RDV
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Ajout de RDV Ã  implÃ©menter')),
    );
  }

  void _showAppointmentDetails(Map<String, dynamic> appointment) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Color(0xFF1A1A1A),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[600],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    appointment['title'],
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Client: ${appointment['clientName']}',
                    style: const TextStyle(color: Colors.grey, fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Horaire: ${_formatTime(appointment['startTime'])} - ${_formatTime(appointment['endTime'])}',
                    style: const TextStyle(color: Colors.grey, fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Prix: ${appointment['price']}â‚¬',
                    style: const TextStyle(color: Colors.green, fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'sync':
        _syncCalendar();
        break;
      case 'export':
        _exportCalendar();
        break;
      case 'settings':
        _showCalendarSettings();
        break;
    }
  }

  void _syncCalendar() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('ðŸ“… Synchronisation avec Google Calendar...'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _exportCalendar() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('ðŸ“Š Export du planning en cours...'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _showCalendarSettings() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('ParamÃ¨tres Ã  implÃ©menter')),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\booking_day_view_page.dart

// lib/pages/pro/booking/booking_day_view_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../widgets/common/buttons/tattoo_assistant_button.dart';
import 'dart:math';

enum EventType { tattoo, consultation, retouche, devis, deplacement, personnel, convention, formation, guest }
enum EventStatus { pending, confirmed, inProgress, completed, cancelled }
enum ViewMode { timeline, list, grid }
enum FilterType { all, today, upcoming, completed }

class DayEvent {
  final String id;
  final String title;
  final String? clientName;
  final String? clientPhone;
  final String? clientEmail;
  final DateTime startTime;
  final DateTime endTime;
  final EventType type;
  final EventStatus status;
  final String? description;
  final String? location;
  final double? price;
  final double? deposit;
  final String? notes;
  final Color? customColor;
  final bool isFlashMinute;
  final bool hasReminder;
  final List<String>? attachments;

  DayEvent({
    required this.id,
    required this.title,
    this.clientName,
    this.clientPhone,
    this.clientEmail,
    required this.startTime,
    required this.endTime,
    required this.type,
    this.status = EventStatus.pending,
    this.description,
    this.location,
    this.price,
    this.deposit,
    this.notes,
    this.customColor,
    this.isFlashMinute = false,
    this.hasReminder = false,
    this.attachments,
  });

  Duration get duration => endTime.difference(startTime);
  
  Color get eventColor {
    if (customColor != null) return customColor!;
    if (isFlashMinute) return Colors.orange;
    
    switch (type) {
      case EventType.tattoo:
        return KipikTheme.rouge;
      case EventType.consultation:
        return Colors.blue;
      case EventType.retouche:
        return Colors.orange;
      case EventType.devis:
        return Colors.purple;
      case EventType.deplacement:
        return Colors.green;
      case EventType.personnel:
        return Colors.grey;
      case EventType.convention:
        return Colors.indigo;
      case EventType.formation:
        return Colors.teal;
      case EventType.guest:
        return Colors.amber;
    }
  }

  Color get statusColor {
    switch (status) {
      case EventStatus.pending:
        return Colors.orange;
      case EventStatus.confirmed:
        return Colors.blue;
      case EventStatus.inProgress:
        return Colors.green;
      case EventStatus.completed:
        return Colors.green.shade700;
      case EventStatus.cancelled:
        return Colors.red;
    }
  }

  String get statusText {
    switch (status) {
      case EventStatus.pending:
        return 'En attente';
      case EventStatus.confirmed:
        return 'ConfirmÃ©';
      case EventStatus.inProgress:
        return 'En cours';
      case EventStatus.completed:
        return 'TerminÃ©';
      case EventStatus.cancelled:
        return 'AnnulÃ©';
    }
  }

  bool get canStart => status == EventStatus.confirmed && DateTime.now().isAfter(startTime.subtract(const Duration(minutes: 15)));
  bool get canComplete => status == EventStatus.inProgress;
  bool get isUpcoming => startTime.isAfter(DateTime.now());
  bool get isToday => startTime.day == DateTime.now().day && startTime.month == DateTime.now().month && startTime.year == DateTime.now().year;
}

class BookingDayViewPage extends StatefulWidget {
  final DateTime? initialDate;
  
  const BookingDayViewPage({
    Key? key,
    this.initialDate,
  }) : super(key: key);

  @override
  State<BookingDayViewPage> createState() => _BookingDayViewPageState();
}

class _BookingDayViewPageState extends State<BookingDayViewPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _scaleController;
  late AnimationController _timelineController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _timelineAnimation;

  final ScrollController _timelineScrollController = ScrollController();
  final PageController _datePageController = PageController(initialPage: 1000);

  // Ã‰tat de la page
  DateTime _selectedDate = DateTime.now();
  ViewMode _viewMode = ViewMode.timeline;
  FilterType _filterType = FilterType.all;
  bool _isLoading = false;
  bool _showWorkingHoursOnly = true;
  bool _showCompletedEvents = true;
  
  // DonnÃ©es
  List<DayEvent> _allEvents = [];
  List<DayEvent> _filteredEvents = [];
  
  // Configuration
  final TimeOfDay _workStartTime = const TimeOfDay(hour: 8, minute: 0);
  final TimeOfDay _workEndTime = const TimeOfDay(hour: 20, minute: 0);
  final int _slotDuration = 30; // minutes
  
  @override
  void initState() {
    super.initState();
    _selectedDate = widget.initialDate ?? DateTime.now();
    _initializeAnimations();
    _loadEvents();
    
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scrollToCurrentTime();
    });
  }

  @override
  void dispose() {
    _slideController.dispose();
    _scaleController.dispose();
    _timelineController.dispose();
    _timelineScrollController.dispose();
    _datePageController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _timelineController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _scaleAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.elasticOut),
    );
    
    _timelineAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _timelineController, curve: Curves.easeInOut),
    );

    _slideController.forward();
    _scaleController.forward();
    _timelineController.forward();
  }

  Future<void> _loadEvents() async {
    setState(() => _isLoading = true);
    
    // Simulation du chargement
    await Future.delayed(const Duration(milliseconds: 800));
    
    setState(() {
      _allEvents = _generateSampleEvents();
      _applyFilters();
      _isLoading = false;
    });
  }

  List<DayEvent> _generateSampleEvents() {
    final now = DateTime.now();
    final selectedDay = DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);
    
    return [
      DayEvent(
        id: '1',
        title: 'Consultation Tatouage Dragon',
        clientName: 'Marie Dubois',
        clientPhone: '+33 6 12 34 56 78',
        clientEmail: 'marie.dubois@email.com',
        startTime: selectedDay.add(const Duration(hours: 9)),
        endTime: selectedDay.add(const Duration(hours: 10)),
        type: EventType.consultation,
        status: EventStatus.confirmed,
        description: 'PremiÃ¨re consultation pour tatouage dragon japonais sur le dos',
        location: 'Salon principal',
        price: 80.0,
        hasReminder: true,
      ),
      
      DayEvent(
        id: '2',
        title: 'SÃ©ance Tatouage - Rose Minimaliste',
        clientName: 'Sophie Martin',
        clientPhone: '+33 6 98 76 54 32',
        clientEmail: 'sophie.martin@email.com',
        startTime: selectedDay.add(const Duration(hours: 10, minutes: 30)),
        endTime: selectedDay.add(const Duration(hours: 13)),
        type: EventType.tattoo,
        status: DateTime.now().hour >= 10 ? EventStatus.inProgress : EventStatus.confirmed,
        description: 'Tatouage rose minimaliste sur l\'avant-bras',
        location: 'Salon principal',
        price: 280.0,
        deposit: 84.0,
        hasReminder: true,
      ),
      
      DayEvent(
        id: '3',
        title: 'Flash Minute - Tribal',
        clientName: 'Alex Rodriguez',
        clientPhone: '+33 6 55 44 33 22',
        startTime: selectedDay.add(const Duration(hours: 14)),
        endTime: selectedDay.add(const Duration(hours: 15, minutes: 30)),
        type: EventType.tattoo,
        status: EventStatus.confirmed,
        description: 'Flash Minute - Tatouage tribal moderne',
        location: 'Salon principal',
        price: 120.0,
        isFlashMinute: true,
        hasReminder: false,
      ),
      
      DayEvent(
        id: '4',
        title: 'Retouche Phoenix',
        clientName: 'Jean Dupont',
        clientPhone: '+33 6 77 88 99 00',
        startTime: selectedDay.add(const Duration(hours: 16)),
        endTime: selectedDay.add(const Duration(hours: 17)),
        type: EventType.retouche,
        status: EventStatus.pending,
        description: 'Retouche couleurs sur tatouage phoenix',
        location: 'Salon principal',
        price: 150.0,
        hasReminder: true,
      ),
      
      DayEvent(
        id: '5',
        title: 'Formation - Nouvelles Techniques',
        startTime: selectedDay.add(const Duration(hours: 18)),
        endTime: selectedDay.add(const Duration(hours: 20)),
        type: EventType.formation,
        status: EventStatus.confirmed,
        description: 'Formation sur les nouvelles techniques de tatouage',
        location: 'Salle de formation',
        hasReminder: true,
      ),
    ];
  }

  void _applyFilters() {
    setState(() {
      _filteredEvents = _allEvents.where((event) {
        switch (_filterType) {
          case FilterType.all:
            return true;
          case FilterType.today:
            return event.isToday;
          case FilterType.upcoming:
            return event.isUpcoming && event.status != EventStatus.cancelled;
          case FilterType.completed:
            return event.status == EventStatus.completed;
        }
      }).toList();
      
      if (!_showCompletedEvents) {
        _filteredEvents = _filteredEvents.where((e) => e.status != EventStatus.completed).toList();
      }
      
      _filteredEvents.sort((a, b) => a.startTime.compareTo(b.startTime));
    });
  }

  void _scrollToCurrentTime() {
    if (!_timelineScrollController.hasClients) return;
    
    final now = DateTime.now();
    if (!_isToday(_selectedDate)) return;
    
    final hour = now.hour;
    final minute = now.minute;
    
    // Calculer la position de scroll (80px par heure)
    final targetOffset = ((hour - _workStartTime.hour) * 80.0) + (minute / 60.0 * 80.0) - 200;
    
    if (targetOffset > 0) {
      _timelineScrollController.animateTo(
        targetOffset.clamp(0.0, _timelineScrollController.position.maxScrollExtent),
        duration: const Duration(milliseconds: 1000),
        curve: Curves.easeInOutCubic,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Vue Jour DÃ©taillÃ©e',
        subtitle: _formatSelectedDate(),
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            onPressed: _toggleViewMode,
            icon: Icon(_getViewModeIcon(), color: Colors.white),
            tooltip: 'Changer la vue',
          ),
          IconButton(
            onPressed: _showFilterMenu,
            icon: const Icon(Icons.filter_list, color: Colors.white),
            tooltip: 'Filtres',
          ),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert, color: Colors.white),
            color: const Color(0xFF1A1A1A),
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'add_event',
                child: Row(
                  children: [
                    Icon(Icons.add, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Ajouter RDV', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'export_day',
                child: Row(
                  children: [
                    Icon(Icons.share, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Exporter journÃ©e', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'print_schedule',
                child: Row(
                  children: [
                    Icon(Icons.print, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Imprimer planning', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
            ],
            onSelected: _handleMenuAction,
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          FloatingActionButton(
            heroTag: 'add_event',
            backgroundColor: KipikTheme.rouge,
            onPressed: _addNewEvent,
            child: const Icon(Icons.add, color: Colors.white),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? _buildLoadingView() : _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 4,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement de la journÃ©e...',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 16,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          _buildDayHeader(),
          const SizedBox(height: 16),
          _buildDateSelector(),
          const SizedBox(height: 16),
          _buildDayStats(),
          const SizedBox(height: 16),
          Expanded(
            child: _buildCurrentView(),
          ),
        ],
      ),
    );
  }

  Widget _buildDayHeader() {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              KipikTheme.rouge.withOpacity(0.9),
              KipikTheme.rouge.withOpacity(0.7),
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: KipikTheme.rouge.withOpacity(0.3),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    _getDayAbbreviation(_selectedDate),
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      color: Colors.white70,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  Text(
                    '${_selectedDate.day}',
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 20),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _getFullDateString(_selectedDate),
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _getDayStatusText(),
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
                ],
              ),
            ),
            if (_isToday(_selectedDate))
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  "AUJOURD'HUI",
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 10,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildDateSelector() {
    return Container(
      height: 80,
      child: PageView.builder(
        controller: _datePageController,
        onPageChanged: (index) {
          final newDate = DateTime.now().add(Duration(days: index - 1000));
          setState(() {
            _selectedDate = newDate;
          });
          _loadEvents();
        },
        itemBuilder: (context, index) {
          final date = DateTime.now().add(Duration(days: index - 1000));
          final isSelected = _isSameDay(date, _selectedDate);
          final isToday = _isToday(date);
          
          return GestureDetector(
            onTap: () {
              setState(() => _selectedDate = date);
              _loadEvents();
            },
            child: Container(
              margin: const EdgeInsets.symmetric(horizontal: 4),
              decoration: BoxDecoration(
                gradient: isSelected 
                    ? LinearGradient(
                        colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                      )
                    : null,
                color: isSelected ? null : Colors.white.withOpacity(0.95),
                borderRadius: BorderRadius.circular(16),
                border: isToday && !isSelected 
                    ? Border.all(color: KipikTheme.rouge, width: 2)
                    : null,
                boxShadow: isSelected ? [
                  BoxShadow(
                    color: KipikTheme.rouge.withOpacity(0.3),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ] : null,
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    _getDayAbbreviation(date),
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      color: isSelected ? Colors.white : Colors.grey,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  Text(
                    '${date.day}',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 18,
                      color: isSelected ? Colors.white : Colors.black87,
                    ),
                  ),
                  Text(
                    _getMonthAbbreviation(date),
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      color: isSelected ? Colors.white70 : Colors.grey,
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildDayStats() {
    final eventsCount = _filteredEvents.length;
    final completedCount = _filteredEvents.where((e) => e.status == EventStatus.completed).length;
    final totalRevenue = _filteredEvents.where((e) => e.price != null).fold<double>(0, (sum, e) => sum + e.price!);
    final workingHours = _calculateWorkingHours();
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(child: _buildStatItem('RDV', '$eventsCount', Icons.event, Colors.blue)),
          Container(width: 1, height: 40, color: Colors.grey.withOpacity(0.3)),
          Expanded(child: _buildStatItem('TerminÃ©s', '$completedCount', Icons.check_circle, Colors.green)),
          Container(width: 1, height: 40, color: Colors.grey.withOpacity(0.3)),
          Expanded(child: _buildStatItem('Revenus', '${totalRevenue.toInt()}â‚¬', Icons.euro, KipikTheme.rouge)),
          Container(width: 1, height: 40, color: Colors.grey.withOpacity(0.3)),
          Expanded(child: _buildStatItem('DurÃ©e', workingHours, Icons.schedule, Colors.orange)),
        ],
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Column(
      children: [
        Icon(icon, color: color, size: 20),
        const SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 16,
            color: color,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 10,
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildCurrentView() {
    switch (_viewMode) {
      case ViewMode.timeline:
        return _buildTimelineView();
      case ViewMode.list:
        return _buildListView();
      case ViewMode.grid:
        return _buildGridView();
    }
  }

  Widget _buildTimelineView() {
    return FadeTransition(
      opacity: _timelineAnimation,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          children: [
            // Header timeline
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    Colors.grey.shade100,
                    Colors.grey.shade50,
                  ],
                ),
                borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
              ),
              child: Row(
                children: [
                  Icon(Icons.schedule, color: KipikTheme.rouge, size: 20),
                  const SizedBox(width: 8),
                  const Text(
                    'Timeline de la journÃ©e',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                    onPressed: _scrollToCurrentTime,
                    icon: Icon(Icons.my_location, color: KipikTheme.rouge, size: 20),
                    tooltip: 'Aller Ã  maintenant',
                  ),
                ],
              ),
            ),
            
            // Timeline content
            Expanded(
              child: SingleChildScrollView(
                controller: _timelineScrollController,
                physics: const BouncingScrollPhysics(),
                child: _buildTimelineContent(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTimelineContent() {
    final startHour = _showWorkingHoursOnly ? _workStartTime.hour : 0;
    final endHour = _showWorkingHoursOnly ? _workEndTime.hour : 24;
    
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: List.generate(endHour - startHour, (index) {
          final hour = startHour + index;
          return _buildTimelineHour(hour);
        }),
      ),
    );
  }

  Widget _buildTimelineHour(int hour) {
    final hourEvents = _filteredEvents.where((event) => event.startTime.hour == hour).toList();
    final isCurrentHour = _isToday(_selectedDate) && DateTime.now().hour == hour;
    final isPastHour = _isToday(_selectedDate) && DateTime.now().hour > hour;
    
    return Container(
      height: 80,
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(
            color: isCurrentHour 
                ? KipikTheme.rouge.withOpacity(0.3) 
                : Colors.grey.withOpacity(0.2),
            width: isCurrentHour ? 2 : 1,
          ),
        ),
        color: isPastHour ? Colors.grey.withOpacity(0.05) : null,
      ),
      child: Row(
        children: [
          // Colonne heure
          SizedBox(
            width: 80,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '${hour.toString().padLeft(2, '0')}:00',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: isCurrentHour ? KipikTheme.rouge : Colors.black54,
                    fontWeight: isCurrentHour ? FontWeight.bold : FontWeight.w500,
                  ),
                ),
                if (isCurrentHour)
                  Container(
                    width: 4,
                    height: 4,
                    margin: const EdgeInsets.only(top: 4),
                    decoration: BoxDecoration(
                      color: KipikTheme.rouge,
                      shape: BoxShape.circle,
                    ),
                  ),
              ],
            ),
          ),
          
          // Colonne Ã©vÃ©nements
          Expanded(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              child: Stack(
                children: [
                  // Indicateur heure actuelle
                  if (isCurrentHour && _isToday(_selectedDate))
                    Positioned(
                      top: _getCurrentMinutePosition(),
                      left: 0,
                      right: 0,
                      child: Container(
                        height: 2,
                        decoration: BoxDecoration(
                          color: KipikTheme.rouge,
                          borderRadius: BorderRadius.circular(1),
                        ),
                      ),
                    ),
                  
                  // Ã‰vÃ©nements
                  ...hourEvents.map((event) => _buildTimelineEventCard(event)),
                  
                  // Slot libre si aucun Ã©vÃ©nement
                  if (hourEvents.isEmpty)
                    GestureDetector(
                      onTap: () => _addEventAtTime(hour),
                      child: Container(
                        height: 64,
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.05),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: Colors.grey.withOpacity(0.2),
                            style: BorderStyle.solid,
                          ),
                        ),
                        child: const Center(
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(Icons.add, color: Colors.grey, size: 16),
                              SizedBox(width: 4),
                              Text(
                                'CrÃ©neau libre',
                                style: TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 12,
                                  color: Colors.grey,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTimelineEventCard(DayEvent event) {
    final duration = event.duration.inMinutes;
    final height = (duration * 0.8).clamp(40.0, 200.0);
    final top = event.startTime.minute * 0.8;
    
    return Positioned(
      top: top,
      left: 0,
      right: 0,
      height: height,
      child: GestureDetector(
        onTap: () => _showEventDetails(event),
        onLongPress: () => _showEventActions(event),
        child: Container(
          margin: const EdgeInsets.only(bottom: 4),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                event.eventColor,
                event.eventColor.withOpacity(0.8),
              ],
            ),
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: event.eventColor.withOpacity(0.3),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Stack(
            children: [
              Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            event.title,
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 14,
                              color: Colors.white,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        if (event.isFlashMinute)
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                            decoration: BoxDecoration(
                              color: Colors.orange,
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: const Text(
                              'FLASH',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 8,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                      ],
                    ),
                    
                    if (event.clientName != null && height > 60) ...[
                      const SizedBox(height: 4),
                      Text(
                        event.clientName!,
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.white70,
                          fontWeight: FontWeight.w500,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                    
                    if (height > 80) ...[
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Icon(Icons.access_time, size: 12, color: Colors.white60),
                          const SizedBox(width: 4),
                          Text(
                            '${event.startTime.hour.toString().padLeft(2, '0')}:${event.startTime.minute.toString().padLeft(2, '0')} - ${event.endTime.hour.toString().padLeft(2, '0')}:${event.endTime.minute.toString().padLeft(2, '0')}',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 10,
                              color: Colors.white60,
                            ),
                          ),
                          const Spacer(),
                          if (event.price != null)
                            Text(
                              '${event.price!.toInt()}â‚¬',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                        ],
                      ),
                    ],
                  ],
                ),
              ),
              
              // Indicateur de statut
              Positioned(
                top: 4,
                right: 4,
                child: Container(
                  width: 8,
                  height: 8,
                  decoration: BoxDecoration(
                    color: event.statusColor,
                    shape: BoxShape.circle,
                    boxShadow: [
                      BoxShadow(
                        color: event.statusColor.withOpacity(0.5),
                        blurRadius: 4,
                      ),
                    ],
                  ),
                ),
              ),
              
              // Actions rapides
              if (event.canStart || event.canComplete)
                Positioned(
                  bottom: 4,
                  right: 4,
                  child: GestureDetector(
                    onTap: () => _handleQuickAction(event),
                    child: Container(
                      padding: const EdgeInsets.all(4),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Icon(
                        event.canStart ? Icons.play_arrow : Icons.check,
                        color: Colors.white,
                        size: 16,
                      ),
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildListView() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.grey.shade100,
                  Colors.grey.shade50,
                ],
              ),
              borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
            ),
            child: Row(
              children: [
                Icon(Icons.list, color: KipikTheme.rouge, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Liste des rendez-vous',
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: _filteredEvents.length,
              itemBuilder: (context, index) {
                final event = _filteredEvents[index];
                return _buildListEventCard(event);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildListEventCard(DayEvent event) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: event.eventColor.withOpacity(0.3)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            width: 4,
            height: 60,
            decoration: BoxDecoration(
              color: event.eventColor,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        event.title,
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: event.statusColor.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        event.statusText,
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: event.statusColor,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                if (event.clientName != null)
                  Text(
                    event.clientName!,
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.black54,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.access_time, size: 14, color: Colors.grey),
                    const SizedBox(width: 4),
                    Text(
                      '${event.startTime.hour.toString().padLeft(2, '0')}:${event.startTime.minute.toString().padLeft(2, '0')} - ${event.endTime.hour.toString().padLeft(2, '0')}:${event.endTime.minute.toString().padLeft(2, '0')}',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.grey,
                      ),
                    ),
                    const Spacer(),
                    if (event.price != null)
                      Text(
                        '${event.price!.toInt()}â‚¬',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: event.eventColor,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(width: 16),
          Column(
            children: [
              IconButton(
                onPressed: () => _showEventDetails(event),
                icon: const Icon(Icons.visibility, color: Colors.grey),
                iconSize: 20,
              ),
              if (event.canStart || event.canComplete)
                IconButton(
                  onPressed: () => _handleQuickAction(event),
                  icon: Icon(
                    event.canStart ? Icons.play_arrow : Icons.check,
                    color: Colors.green,
                  ),
                  iconSize: 20,
                ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildGridView() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.grey.shade100,
                  Colors.grey.shade50,
                ],
              ),
              borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
            ),
            child: Row(
              children: [
                Icon(Icons.grid_view, color: KipikTheme.rouge, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Vue grille',
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: GridView.builder(
              padding: const EdgeInsets.all(16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 12,
                mainAxisSpacing: 12,
                childAspectRatio: 1.2,
              ),
              itemCount: _filteredEvents.length,
              itemBuilder: (context, index) {
                final event = _filteredEvents[index];
                return _buildGridEventCard(event);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGridEventCard(DayEvent event) {
    return GestureDetector(
      onTap: () => _showEventDetails(event),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              event.eventColor.withOpacity(0.8),
              event.eventColor.withOpacity(0.6),
            ],
          ),
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: event.eventColor.withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Text(
                    event.title,
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 14,
                      color: Colors.white,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                Container(
                  width: 8,
                  height: 8,
                  decoration: BoxDecoration(
                    color: event.statusColor,
                    shape: BoxShape.circle,
                  ),
                ),
              ],
            ),
            const Spacer(),
            if (event.clientName != null)
              Text(
                event.clientName!,
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 12,
                  color: Colors.white70,
                  fontWeight: FontWeight.w500,
                ),
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: Text(
                    '${event.startTime.hour.toString().padLeft(2, '0')}:${event.startTime.minute.toString().padLeft(2, '0')}',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 16,
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                if (event.price != null)
                  Text(
                    '${event.price!.toInt()}â‚¬',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Actions et mÃ©thodes utilitaires
  void _toggleViewMode() {
    setState(() {
      switch (_viewMode) {
        case ViewMode.timeline:
          _viewMode = ViewMode.list;
          break;
        case ViewMode.list:
          _viewMode = ViewMode.grid;
          break;
        case ViewMode.grid:
          _viewMode = ViewMode.timeline;
          break;
      }
    });
  }

  IconData _getViewModeIcon() {
    switch (_viewMode) {
      case ViewMode.timeline:
        return Icons.timeline;
      case ViewMode.list:
        return Icons.list;
      case ViewMode.grid:
        return Icons.grid_view;
    }
  }

  void _showFilterMenu() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Filtres et Options',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),
            
            // Filtres
            const Text(
              'Affichage',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            ...FilterType.values.map((filter) {
              return RadioListTile<FilterType>(
                title: Text(_getFilterLabel(filter)),
                value: filter,
                groupValue: _filterType,
                activeColor: KipikTheme.rouge,
                onChanged: (value) {
                  setState(() => _filterType = value!);
                  _applyFilters();
                  Navigator.pop(context);
                },
                contentPadding: EdgeInsets.zero,
              );
            }),
            
            const SizedBox(height: 16),
            
            // Options
            SwitchListTile(
              title: const Text('Heures de travail seulement'),
              value: _showWorkingHoursOnly,
              activeColor: KipikTheme.rouge,
              onChanged: (value) {
                setState(() => _showWorkingHoursOnly = value);
                Navigator.pop(context);
              },
              contentPadding: EdgeInsets.zero,
            ),
            
            SwitchListTile(
              title: const Text('Afficher les RDV terminÃ©s'),
              value: _showCompletedEvents,
              activeColor: KipikTheme.rouge,
              onChanged: (value) {
                setState(() => _showCompletedEvents = value);
                _applyFilters();
                Navigator.pop(context);
              },
              contentPadding: EdgeInsets.zero,
            ),
          ],
        ),
      ),
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'add_event':
        _addNewEvent();
        break;
      case 'export_day':
        _exportDay();
        break;
      case 'print_schedule':
        _printSchedule();
        break;
    }
  }

  void _addNewEvent() {
    Navigator.pushNamed(context, '/booking/add', arguments: {
      'preselectedDate': _selectedDate,
    });
  }

  void _addEventAtTime(int hour) {
    Navigator.pushNamed(context, '/booking/add', arguments: {
      'preselectedDate': _selectedDate,
      'preselectedTime': TimeOfDay(hour: hour, minute: 0),
    });
  }

  void _showEventDetails(DayEvent event) {
    Navigator.pushNamed(context, '/booking/edit', arguments: event);
  }

  void _showEventActions(DayEvent event) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              event.title,
              style: const TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 16,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),
            
            ListTile(
              leading: const Icon(Icons.visibility),
              title: const Text('Voir dÃ©tails'),
              onTap: () {
                Navigator.pop(context);
                _showEventDetails(event);
              },
            ),
            
            if (event.canStart)
              ListTile(
                leading: const Icon(Icons.play_arrow, color: Colors.green),
                title: const Text('Commencer'),
                onTap: () {
                  Navigator.pop(context);
                  _handleQuickAction(event);
                },
              ),
            
            if (event.canComplete)
              ListTile(
                leading: const Icon(Icons.check, color: Colors.green),
                title: const Text('Terminer'),
                onTap: () {
                  Navigator.pop(context);
                  _handleQuickAction(event);
                },
              ),
            
            ListTile(
              leading: const Icon(Icons.edit),
              title: const Text('Modifier'),
              onTap: () {
                Navigator.pop(context);
                _showEventDetails(event);
              },
            ),
            
            if (event.clientPhone != null)
              ListTile(
                leading: const Icon(Icons.phone, color: Colors.blue),
                title: const Text('Appeler client'),
                onTap: () {
                  Navigator.pop(context);
                  _callClient(event);
                },
              ),
          ],
        ),
      ),
    );
  }

  void _handleQuickAction(DayEvent event) {
    if (event.canStart) {
      _startEvent(event);
    } else if (event.canComplete) {
      _completeEvent(event);
    }
  }

  void _startEvent(DayEvent event) {
    HapticFeedback.mediumImpact();
    _showSuccessSnackBar('RDV "${event.title}" commencÃ©');
    _loadEvents(); // Recharger pour mettre Ã  jour le statut
  }

  void _completeEvent(DayEvent event) {
    HapticFeedback.mediumImpact();
    _showSuccessSnackBar('RDV "${event.title}" terminÃ©');
    _loadEvents(); // Recharger pour mettre Ã  jour le statut
  }

  void _callClient(DayEvent event) {
    _showInfoSnackBar('Appel vers ${event.clientPhone} - Ã€ implÃ©menter');
  }

  void _exportDay() {
    _showInfoSnackBar('Export de la journÃ©e - Ã€ implÃ©menter');
  }

  void _printSchedule() {
    _showInfoSnackBar('Impression du planning - Ã€ implÃ©menter');
  }

  // MÃ©thodes utilitaires
  double _getCurrentMinutePosition() {
    final now = DateTime.now();
    return (now.minute / 60.0) * 64; // 64px de hauteur par heure
  }

  String _calculateWorkingHours() {
    final totalMinutes = _filteredEvents.fold<int>(0, (sum, event) => sum + event.duration.inMinutes);
    final hours = totalMinutes ~/ 60;
    final minutes = totalMinutes % 60;
    
    if (hours > 0 && minutes > 0) {
      return '${hours}h${minutes}min';
    } else if (hours > 0) {
      return '${hours}h';
    } else {
      return '${minutes}min';
    }
  }

  String _formatSelectedDate() {
    final now = DateTime.now();
    if (_isSameDay(_selectedDate, now)) {
      return "Aujourd'hui";
    } else if (_isSameDay(_selectedDate, now.add(const Duration(days: 1)))) {
      return 'Demain';
    } else if (_isSameDay(_selectedDate, now.subtract(const Duration(days: 1)))) {
      return 'Hier';
    } else {
      return _getFullDateString(_selectedDate);
    }
  }

  String _getFullDateString(DateTime date) {
    const monthNames = [
      'Janvier', 'FÃ©vrier', 'Mars', 'Avril', 'Mai', 'Juin',
      'Juillet', 'AoÃ»t', 'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'
    ];
    const dayNames = [
      'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'
    ];
    
    return '${dayNames[date.weekday - 1]} ${date.day} ${monthNames[date.month - 1]}';
  }

  String _getDayAbbreviation(DateTime date) {
    const days = ['LUN', 'MAR', 'MER', 'JEU', 'VEN', 'SAM', 'DIM'];
    return days[date.weekday - 1];
  }

  String _getMonthAbbreviation(DateTime date) {
    const months = ['JAN', 'FÃ‰V', 'MAR', 'AVR', 'MAI', 'JUN', 'JUL', 'AOÃ›', 'SEP', 'OCT', 'NOV', 'DÃ‰C'];
    return months[date.month - 1];
  }

  String _getDayStatusText() {
    if (_isToday(_selectedDate)) {
      final upcomingCount = _filteredEvents.where((e) => e.isUpcoming).length;
      if (upcomingCount > 0) {
        return '$upcomingCount RDV restants aujourd\'hui';
      } else {
        return 'JournÃ©e terminÃ©e';
      }
    } else if (_selectedDate.isAfter(DateTime.now())) {
      return '${_filteredEvents.length} RDV programmÃ©s';
    } else {
      final completedCount = _filteredEvents.where((e) => e.status == EventStatus.completed).length;
      return '$completedCount/${_filteredEvents.length} RDV terminÃ©s';
    }
  }

  String _getFilterLabel(FilterType filter) {
    switch (filter) {
      case FilterType.all:
        return 'Tous les RDV';
      case FilterType.today:
        return "Aujourd'hui seulement";
      case FilterType.upcoming:
        return 'RDV Ã  venir';
      case FilterType.completed:
        return 'RDV terminÃ©s';
    }
  }

  bool _isToday(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year && date.month == now.month && date.day == now.day;
  }

  bool _isSameDay(DateTime a, DateTime b) {
    return a.year == b.year && a.month == b.month && a.day == b.day;
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\booking_import_page.dart

// lib/pages/pro/booking/booking_import_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../widgets/common/buttons/tattoo_assistant_button.dart';
import 'dart:math';

enum CalendarProvider { google, apple, outlook, ical, csv }
enum SyncDirection { import, export, bidirectional }
enum SyncFrequency { manual, realtime, hourly, daily }
enum ImportStatus { idle, connecting, importing, success, error }

class CalendarAccount {
  final String id;
  final CalendarProvider provider;
  final String email;
  final String name;
  final bool isConnected;
  final DateTime? lastSync;
  final int eventsCount;
  final String? error;

  CalendarAccount({
    required this.id,
    required this.provider,
    required this.email,
    required this.name,
    this.isConnected = false,
    this.lastSync,
    this.eventsCount = 0,
    this.error,
  });
}

class ImportedEvent {
  final String id;
  final String title;
  final DateTime startTime;
  final DateTime endTime;
  final String? description;
  final String? location;
  final CalendarProvider source;
  final bool isSelected;
  final bool hasConflict;
  final String? conflictReason;

  ImportedEvent({
    required this.id,
    required this.title,
    required this.startTime,
    required this.endTime,
    this.description,
    this.location,
    required this.source,
    this.isSelected = true,
    this.hasConflict = false,
    this.conflictReason,
  });
}

class BookingImportPage extends StatefulWidget {
  const BookingImportPage({Key? key}) : super(key: key);

  @override
  State<BookingImportPage> createState() => _BookingImportPageState();
}

class _BookingImportPageState extends State<BookingImportPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _scaleController;
  late AnimationController _syncController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _syncAnimation;

  // Ã‰tat de la page
  ImportStatus _importStatus = ImportStatus.idle;
  int _currentStep = 0;
  bool _isLoading = false;
  String? _errorMessage;
  
  // DonnÃ©es
  List<CalendarAccount> _accounts = [];
  List<ImportedEvent> _importedEvents = [];
  CalendarAccount? _selectedAccount;
  SyncDirection _syncDirection = SyncDirection.import;
  SyncFrequency _syncFrequency = SyncFrequency.daily;
  DateTimeRange? _importRange;
  
  // Filtres
  bool _importPersonalEvents = false;
  bool _skipConflicts = true;
  bool _mergeWithExisting = true;
  bool _createBackup = true;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadAccounts();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _scaleController.dispose();
    _syncController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _syncController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _scaleAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.elasticOut),
    );
    
    _syncAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _syncController, curve: Curves.linear),
    );

    _slideController.forward();
    _scaleController.forward();
  }

  Future<void> _loadAccounts() async {
    setState(() => _isLoading = true);
    
    // Simulation du chargement des comptes
    await Future.delayed(const Duration(milliseconds: 1000));
    
    setState(() {
      _accounts = [
        CalendarAccount(
          id: '1',
          provider: CalendarProvider.google,
          email: 'tatoueur@gmail.com',
          name: 'Calendrier Principal',
          isConnected: true,
          lastSync: DateTime.now().subtract(const Duration(hours: 2)),
          eventsCount: 45,
        ),
        CalendarAccount(
          id: '2',
          provider: CalendarProvider.apple,
          email: 'tatoueur@icloud.com',
          name: 'iCloud Calendar',
          isConnected: false,
          eventsCount: 0,
        ),
        CalendarAccount(
          id: '3',
          provider: CalendarProvider.outlook,
          email: 'tatoueur@outlook.com',
          name: 'Outlook Calendar',
          isConnected: false,
          eventsCount: 0,
        ),
      ];
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Import Calendriers',
        subtitle: 'Synchronisation et import de donnÃ©es',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            onPressed: _refreshAccounts,
            icon: _isLoading 
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : const Icon(Icons.refresh, color: Colors.white),
            tooltip: 'Actualiser',
          ),
          IconButton(
            onPressed: _showImportHistory,
            icon: const Icon(Icons.history, color: Colors.white),
            tooltip: 'Historique',
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? _buildLoadingView() : _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 4,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement des calendriers...',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 16,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          _buildImportHeader(),
          const SizedBox(height: 16),
          _buildProgressIndicator(),
          const SizedBox(height: 16),
          Expanded(
            child: _buildCurrentStepContent(),
          ),
        ],
      ),
    );
  }

  Widget _buildImportHeader() {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              KipikTheme.rouge.withOpacity(0.9),
              KipikTheme.rouge.withOpacity(0.7),
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: KipikTheme.rouge.withOpacity(0.3),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Icon(
                Icons.cloud_download_outlined,
                color: Colors.white,
                size: 32,
              ),
            ),
            const SizedBox(width: 20),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Import & Synchronisation',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 4),
                  const Text(
                    'Connectez vos calendriers existants',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      _buildHeaderStat('Comptes', '${_accounts.where((a) => a.isConnected).length}'),
                      const SizedBox(width: 16),
                      _buildHeaderStat('Ã‰vÃ©nements', '${_accounts.fold(0, (sum, a) => sum + a.eventsCount)}'),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeaderStat(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 10,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }

  Widget _buildProgressIndicator() {
    final steps = ['Connexion', 'Configuration', 'Import', 'Finalisation'];
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: List.generate(steps.length, (index) {
              final isCompleted = index < _currentStep;
              final isCurrent = index == _currentStep;
              
              return Expanded(
                child: Column(
                  children: [
                    Container(
                      width: 32,
                      height: 32,
                      decoration: BoxDecoration(
                        color: isCompleted || isCurrent 
                            ? KipikTheme.rouge 
                            : Colors.grey.withOpacity(0.3),
                        shape: BoxShape.circle,
                        border: Border.all(
                          color: isCurrent ? Colors.white : Colors.transparent,
                          width: 2,
                        ),
                      ),
                      child: Center(
                        child: isCompleted 
                            ? const Icon(Icons.check, color: Colors.white, size: 16)
                            : Text(
                                '${index + 1}',
                                style: TextStyle(
                                  fontFamily: 'Roboto',
                                  color: isCompleted || isCurrent ? Colors.white : Colors.grey,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      steps[index],
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: isCompleted || isCurrent ? KipikTheme.rouge : Colors.grey,
                        fontWeight: isCurrent ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                  ],
                ),
              );
            }),
          ),
          const SizedBox(height: 16),
          LinearProgressIndicator(
            value: (_currentStep + 1) / steps.length,
            backgroundColor: Colors.grey.withOpacity(0.2),
            valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
          ),
        ],
      ),
    );
  }

  Widget _buildCurrentStepContent() {
    switch (_currentStep) {
      case 0:
        return _buildConnectionStep();
      case 1:
        return _buildConfigurationStep();
      case 2:
        return _buildImportStep();
      case 3:
        return _buildFinalizationStep();
      default:
        return _buildConnectionStep();
    }
  }

  Widget _buildConnectionStep() {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildStepHeader(
            'Connexion aux Calendriers',
            'Connectez-vous Ã  vos calendriers existants pour synchroniser vos rendez-vous',
          ),
          const SizedBox(height: 24),
          
          // Liste des comptes
          ...(_accounts.map((account) => _buildAccountCard(account))),
          
          const SizedBox(height: 24),
          
          // Boutons d'ajout
          _buildAddAccountSection(),
          
          const SizedBox(height: 32),
          
          // Navigation
          _buildStepNavigation(
            canContinue: _accounts.any((a) => a.isConnected),
            onContinue: () => setState(() => _currentStep = 1),
          ),
        ],
      ),
    );
  }

  Widget _buildConfigurationStep() {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildStepHeader(
            'Configuration de l\'Import',
            'DÃ©finissez les paramÃ¨tres de synchronisation selon vos besoins',
          ),
          const SizedBox(height: 24),
          
          // SÃ©lection du compte
          _buildAccountSelector(),
          const SizedBox(height: 16),
          
          // Direction de sync
          _buildSyncDirectionSelector(),
          const SizedBox(height: 16),
          
          // PÃ©riode d'import
          _buildDateRangeSelector(),
          const SizedBox(height: 16),
          
          // Options avancÃ©es
          _buildAdvancedOptions(),
          
          const SizedBox(height: 32),
          
          // Navigation
          _buildStepNavigation(
            canContinue: _selectedAccount != null,
            onContinue: _startImport,
            onBack: () => setState(() => _currentStep = 0),
          ),
        ],
      ),
    );
  }

  Widget _buildImportStep() {
    return Column(
      children: [
        _buildStepHeader(
          'Import en Cours',
          'RÃ©cupÃ©ration et analyse de vos Ã©vÃ©nements existants',
        ),
        const SizedBox(height: 24),
        
        if (_importStatus == ImportStatus.importing) 
          _buildImportProgress()
        else if (_importStatus == ImportStatus.success)
          Expanded(child: _buildImportResults())
        else if (_importStatus == ImportStatus.error)
          _buildImportError(),
        
        const SizedBox(height: 24),
        
        if (_importStatus == ImportStatus.success)
          _buildStepNavigation(
            canContinue: true,
            onContinue: () => setState(() => _currentStep = 3),
            onBack: () => setState(() => _currentStep = 1),
          ),
      ],
    );
  }

  Widget _buildFinalizationStep() {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildStepHeader(
            'Finalisation',
            'Import terminÃ© avec succÃ¨s ! Configurez la synchronisation continue',
          ),
          const SizedBox(height: 24),
          
          // RÃ©sumÃ© de l'import
          _buildImportSummary(),
          const SizedBox(height: 24),
          
          // Configuration sync continue
          _buildContinuousSyncConfig(),
          const SizedBox(height: 32),
          
          // Actions finales
          _buildFinalActions(),
        ],
      ),
    );
  }

  Widget _buildStepHeader(String title, String subtitle) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 18,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            subtitle,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAccountCard(CalendarAccount account) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: account.isConnected 
              ? Colors.green.withOpacity(0.3) 
              : Colors.grey.withOpacity(0.3),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: _getProviderColor(account.provider).withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              _getProviderIcon(account.provider),
              color: _getProviderColor(account.provider),
              size: 24,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  account.name,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                Text(
                  account.email,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.grey,
                  ),
                ),
                if (account.isConnected) ...[
                  const SizedBox(height: 4),
                  Row(
                    children: [
                      Icon(Icons.check_circle, color: Colors.green, size: 16),
                      const SizedBox(width: 4),
                      Text(
                        '${account.eventsCount} Ã©vÃ©nements',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.green,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          ),
          Column(
            children: [
              ElevatedButton(
                onPressed: () => _toggleAccountConnection(account),
                style: ElevatedButton.styleFrom(
                  backgroundColor: account.isConnected ? Colors.orange : KipikTheme.rouge,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: Text(
                  account.isConnected ? 'DÃ©connecter' : 'Connecter',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                  ),
                ),
              ),
              if (account.lastSync != null) ...[
                const SizedBox(height: 4),
                Text(
                  'Sync: ${_formatLastSync(account.lastSync!)}',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 10,
                    color: Colors.grey,
                  ),
                ),
              ],
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAddAccountSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.grey.withOpacity(0.3), style: BorderStyle.solid),
      ),
      child: Column(
        children: [
          const Text(
            'Ajouter un nouveau calendrier',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 16),
          Wrap(
            spacing: 12,
            runSpacing: 12,
            children: [
              _buildProviderButton(CalendarProvider.google),
              _buildProviderButton(CalendarProvider.apple),
              _buildProviderButton(CalendarProvider.outlook),
              _buildProviderButton(CalendarProvider.ical),
              _buildProviderButton(CalendarProvider.csv),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildProviderButton(CalendarProvider provider) {
    return OutlinedButton.icon(
      onPressed: () => _connectProvider(provider),
      icon: Icon(_getProviderIcon(provider), size: 16),
      label: Text(_getProviderName(provider)),
      style: OutlinedButton.styleFrom(
        foregroundColor: _getProviderColor(provider),
        side: BorderSide(color: _getProviderColor(provider)),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }

  Widget _buildAccountSelector() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.account_circle, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Compte Ã  synchroniser',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          DropdownButtonFormField<CalendarAccount>(
            value: _selectedAccount,
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            items: _accounts.where((a) => a.isConnected).map((account) {
              return DropdownMenuItem(
                value: account,
                child: Row(
                  children: [
                    Icon(_getProviderIcon(account.provider), size: 16),
                    const SizedBox(width: 8),
                    Text('${account.name} (${account.eventsCount} Ã©vÃ©nements)'),
                  ],
                ),
              );
            }).toList(),
            onChanged: (account) => setState(() => _selectedAccount = account),
          ),
        ],
      ),
    );
  }

  Widget _buildSyncDirectionSelector() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.sync_alt, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Direction de synchronisation',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          ...SyncDirection.values.map((direction) {
            return RadioListTile<SyncDirection>(
              title: Text(_getSyncDirectionLabel(direction)),
              subtitle: Text(_getSyncDirectionDescription(direction)),
              value: direction,
              groupValue: _syncDirection,
              activeColor: KipikTheme.rouge,
              onChanged: (value) => setState(() => _syncDirection = value!),
              contentPadding: EdgeInsets.zero,
            );
          }),
        ],
      ),
    );
  }

  Widget _buildDateRangeSelector() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.date_range, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'PÃ©riode d\'import',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          GestureDetector(
            onTap: _selectDateRange,
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.withOpacity(0.3)),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(Icons.calendar_today, color: KipikTheme.rouge),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      _importRange != null
                          ? '${_formatDate(_importRange!.start)} - ${_formatDate(_importRange!.end)}'
                          : 'SÃ©lectionner une pÃ©riode',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        color: Colors.black87,
                      ),
                    ),
                  ),
                  const Icon(Icons.expand_more, color: Colors.grey),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAdvancedOptions() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.tune, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Options avancÃ©es',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          SwitchListTile(
            title: const Text('Importer Ã©vÃ©nements personnels'),
            subtitle: const Text('Inclure les Ã©vÃ©nements non-professionnels'),
            value: _importPersonalEvents,
            activeColor: KipikTheme.rouge,
            onChanged: (value) => setState(() => _importPersonalEvents = value),
            contentPadding: EdgeInsets.zero,
          ),
          
          SwitchListTile(
            title: const Text('Ignorer les conflits'),
            subtitle: const Text('Ne pas importer les Ã©vÃ©nements en conflit'),
            value: _skipConflicts,
            activeColor: KipikTheme.rouge,
            onChanged: (value) => setState(() => _skipConflicts = value),
            contentPadding: EdgeInsets.zero,
          ),
          
          SwitchListTile(
            title: const Text('Fusionner avec l\'existant'),
            subtitle: const Text('Combiner avec les RDV actuels'),
            value: _mergeWithExisting,
            activeColor: KipikTheme.rouge,
            onChanged: (value) => setState(() => _mergeWithExisting = value),
            contentPadding: EdgeInsets.zero,
          ),
          
          SwitchListTile(
            title: const Text('CrÃ©er une sauvegarde'),
            subtitle: const Text('Sauvegarder avant import (recommandÃ©)'),
            value: _createBackup,
            activeColor: KipikTheme.rouge,
            onChanged: (value) => setState(() => _createBackup = value),
            contentPadding: EdgeInsets.zero,
          ),
        ],
      ),
    );
  }

  Widget _buildImportProgress() {
    return Container(
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          AnimatedBuilder(
            animation: _syncController,
            builder: (context, child) {
              return Stack(
                alignment: Alignment.center,
                children: [
                  SizedBox(
                    width: 120,
                    height: 120,
                    child: CircularProgressIndicator(
                      value: _syncAnimation.value,
                      strokeWidth: 8,
                      backgroundColor: Colors.grey.withOpacity(0.2),
                      valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                    ),
                  ),
                  Column(
                    children: [
                      Icon(
                        Icons.cloud_sync,
                        color: KipikTheme.rouge,
                        size: 40,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '${(_syncAnimation.value * 100).round()}%',
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 18,
                          color: KipikTheme.rouge,
                        ),
                      ),
                    ],
                  ),
                ],
              );
            },
          ),
          const SizedBox(height: 32),
          const Text(
            'Import en cours...',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'RÃ©cupÃ©ration et analyse de vos Ã©vÃ©nements',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImportResults() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Import rÃ©ussi !',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          Text(
            '${_importedEvents.length} Ã©vÃ©nements trouvÃ©s',
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 16),
          
          Expanded(
            child: ListView.builder(
              itemCount: _importedEvents.length,
              itemBuilder: (context, index) {
                final event = _importedEvents[index];
                return _buildImportedEventCard(event);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImportedEventCard(ImportedEvent event) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: event.hasConflict 
            ? Colors.red.withOpacity(0.1) 
            : Colors.green.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: event.hasConflict ? Colors.red.withOpacity(0.3) : Colors.green.withOpacity(0.3),
        ),
      ),
      child: Row(
        children: [
          Checkbox(
            value: event.isSelected,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              // Toggle selection
            },
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  event.title,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  '${_formatDateTime(event.startTime)} - ${_formatTime(event.endTime)}',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
                if (event.hasConflict) ...[
                  const SizedBox(height: 4),
                  Text(
                    event.conflictReason ?? 'Conflit dÃ©tectÃ©',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.red,
                    ),
                  ),
                ],
              ],
            ),
          ),
          Icon(
            _getProviderIcon(event.source),
            color: _getProviderColor(event.source),
            size: 16,
          ),
        ],
      ),
    );
  }

  Widget _buildImportError() {
    return Container(
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          const Icon(
            Icons.error_outline,
            color: Colors.red,
            size: 64,
          ),
          const SizedBox(height: 24),
          const Text(
            'Erreur d\'import',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.red,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            _errorMessage ?? 'Une erreur est survenue lors de l\'import',
            textAlign: TextAlign.center,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _retryImport,
            icon: const Icon(Icons.refresh),
            label: const Text('RÃ©essayer'),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImportSummary() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.summarize, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'RÃ©sumÃ© de l\'import',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          _buildSummaryRow('Ã‰vÃ©nements importÃ©s', '${_importedEvents.where((e) => e.isSelected).length}'),
          _buildSummaryRow('Conflits dÃ©tectÃ©s', '${_importedEvents.where((e) => e.hasConflict).length}'),
          _buildSummaryRow('Source', _selectedAccount?.name ?? ''),
          _buildSummaryRow('PÃ©riode', _importRange != null 
              ? '${_formatDate(_importRange!.start)} - ${_formatDate(_importRange!.end)}'
              : 'Toutes les dates'),
        ],
      ),
    );
  }

  Widget _buildSummaryRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContinuousSyncConfig() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.autorenew, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Synchronisation continue',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          DropdownButtonFormField<SyncFrequency>(
            value: _syncFrequency,
            decoration: InputDecoration(
              labelText: 'FrÃ©quence de synchronisation',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            items: SyncFrequency.values.map((frequency) {
              return DropdownMenuItem(
                value: frequency,
                child: Text(_getSyncFrequencyLabel(frequency)),
              );
            }).toList(),
            onChanged: (value) => setState(() => _syncFrequency = value!),
          ),
        ],
      ),
    );
  }

  Widget _buildFinalActions() {
    return Column(
      children: [
        SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton.icon(
            onPressed: _finishImport,
            icon: const Icon(Icons.check_circle, size: 20),
            label: const Text(
              'Terminer l\'import',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 4,
            ),
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _exportData,
                icon: const Icon(Icons.download, size: 18),
                label: const Text('Exporter'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey[600],
                  side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _viewInCalendar,
                icon: const Icon(Icons.calendar_view_day, size: 18),
                label: const Text('Voir agenda'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: KipikTheme.rouge,
                  side: BorderSide(color: KipikTheme.rouge),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildStepNavigation({
    required bool canContinue,
    VoidCallback? onContinue,
    VoidCallback? onBack,
  }) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          if (onBack != null) ...[
            Expanded(
              child: OutlinedButton.icon(
                onPressed: onBack,
                icon: const Icon(Icons.arrow_back, size: 18),
                label: const Text('Retour'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey[600],
                  side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                ),
              ),
            ),
            const SizedBox(width: 16),
          ],
          Expanded(
            child: ElevatedButton.icon(
              onPressed: canContinue ? onContinue : null,
              icon: const Icon(Icons.arrow_forward, size: 18),
              label: const Text('Continuer'),
              style: ElevatedButton.styleFrom(
                backgroundColor: canContinue ? KipikTheme.rouge : Colors.grey,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Actions
  void _refreshAccounts() async {
    await _loadAccounts();
  }

  void _showImportHistory() {
    _showInfoSnackBar('Historique des imports - Ã€ implÃ©menter');
  }

  void _toggleAccountConnection(CalendarAccount account) async {
    if (account.isConnected) {
      // DÃ©connexion
      setState(() {
        final index = _accounts.indexOf(account);
        _accounts[index] = CalendarAccount(
          id: account.id,
          provider: account.provider,
          email: account.email,
          name: account.name,
          isConnected: false,
          eventsCount: 0,
        );
      });
      _showSuccessSnackBar('Compte dÃ©connectÃ©');
    } else {
      // Connexion
      setState(() => _isLoading = true);
      
      try {
        // Simulation de connexion
        await Future.delayed(const Duration(seconds: 2));
        
        setState(() {
          final index = _accounts.indexOf(account);
          _accounts[index] = CalendarAccount(
            id: account.id,
            provider: account.provider,
            email: account.email,
            name: account.name,
            isConnected: true,
            lastSync: DateTime.now(),
            eventsCount: Random().nextInt(50) + 10,
          );
        });
        
        _showSuccessSnackBar('Compte connectÃ© avec succÃ¨s');
      } catch (e) {
        _showErrorSnackBar('Erreur de connexion');
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  void _connectProvider(CalendarProvider provider) {
    _showInfoSnackBar('Connexion ${_getProviderName(provider)} - Ã€ implÃ©menter');
  }

  void _selectDateRange() async {
    final DateTimeRange? picked = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      initialDateRange: _importRange,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() => _importRange = picked);
    }
  }

  void _startImport() async {
    setState(() {
      _currentStep = 2;
      _importStatus = ImportStatus.importing;
    });
    
    _syncController.repeat();
    
    try {
      // Simulation de l'import
      await Future.delayed(const Duration(seconds: 3));
      
      // GÃ©nÃ©ration d'Ã©vÃ©nements factices
      _importedEvents = List.generate(15, (index) {
        final start = DateTime.now().add(Duration(days: index, hours: 9 + (index % 8)));
        return ImportedEvent(
          id: 'event_$index',
          title: 'RDV Client ${index + 1}',
          startTime: start,
          endTime: start.add(const Duration(hours: 2)),
          description: 'Description de l\'Ã©vÃ©nement',
          location: 'Studio',
          source: _selectedAccount!.provider,
          hasConflict: index % 5 == 0,
          conflictReason: index % 5 == 0 ? 'CrÃ©neau dÃ©jÃ  occupÃ©' : null,
        );
      });
      
      setState(() => _importStatus = ImportStatus.success);
      _syncController.stop();
      
    } catch (e) {
      setState(() {
        _importStatus = ImportStatus.error;
        _errorMessage = e.toString();
      });
      _syncController.stop();
    }
  }

  void _retryImport() {
    _startImport();
  }

  void _finishImport() {
    Navigator.pop(context);
    _showSuccessSnackBar('Import terminÃ© avec succÃ¨s !');
  }

  void _exportData() {
    _showInfoSnackBar('Export des donnÃ©es - Ã€ implÃ©menter');
  }

  void _viewInCalendar() {
    Navigator.pushReplacementNamed(context, '/booking/calendar');
  }

  // Helper methods
  Color _getProviderColor(CalendarProvider provider) {
    switch (provider) {
      case CalendarProvider.google:
        return Colors.blue;
      case CalendarProvider.apple:
        return Colors.grey;
      case CalendarProvider.outlook:
        return Colors.orange;
      case CalendarProvider.ical:
        return Colors.purple;
      case CalendarProvider.csv:
        return Colors.green;
    }
  }

  IconData _getProviderIcon(CalendarProvider provider) {
    switch (provider) {
      case CalendarProvider.google:
        return Icons.account_circle;
      case CalendarProvider.apple:
        return Icons.phone_iphone;
      case CalendarProvider.outlook:
        return Icons.email;
      case CalendarProvider.ical:
        return Icons.calendar_today;
      case CalendarProvider.csv:
        return Icons.table_chart;
    }
  }

  String _getProviderName(CalendarProvider provider) {
    switch (provider) {
      case CalendarProvider.google:
        return 'Google Calendar';
      case CalendarProvider.apple:
        return 'Apple Calendar';
      case CalendarProvider.outlook:
        return 'Outlook';
      case CalendarProvider.ical:
        return 'iCal / ICS';
      case CalendarProvider.csv:
        return 'Fichier CSV';
    }
  }

  String _getSyncDirectionLabel(SyncDirection direction) {
    switch (direction) {
      case SyncDirection.import:
        return 'Import seulement';
      case SyncDirection.export:
        return 'Export seulement';
      case SyncDirection.bidirectional:
        return 'Synchronisation bidirectionnelle';
    }
  }

  String _getSyncDirectionDescription(SyncDirection direction) {
    switch (direction) {
      case SyncDirection.import:
        return 'Importer les Ã©vÃ©nements externes vers Kipik';
      case SyncDirection.export:
        return 'Exporter les RDV Kipik vers le calendrier externe';
      case SyncDirection.bidirectional:
        return 'Synchronisation automatique dans les deux sens';
    }
  }

  String _getSyncFrequencyLabel(SyncFrequency frequency) {
    switch (frequency) {
      case SyncFrequency.manual:
        return 'Manuelle';
      case SyncFrequency.realtime:
        return 'Temps rÃ©el';
      case SyncFrequency.hourly:
        return 'Toutes les heures';
      case SyncFrequency.daily:
        return 'Quotidienne';
    }
  }

  String _formatLastSync(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    
    if (difference.inDays > 0) {
      return 'Il y a ${difference.inDays}j';
    } else if (difference.inHours > 0) {
      return 'Il y a ${difference.inHours}h';
    } else {
      return 'Il y a ${difference.inMinutes}min';
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  String _formatDateTime(DateTime date) {
    return '${date.day}/${date.month} ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }

  String _formatTime(DateTime date) {
    return '${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\guest_system\guest_calendar_integration.dart

// lib/pages/pro/booking/guest_system/guest_calendar_integration.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:table_calendar/table_calendar.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';

enum IntegrationType { automatic, manual, selective }
enum SyncStatus { pending, syncing, completed, failed }

class GuestCalendarIntegration extends StatefulWidget {
  final Map<String, dynamic>? guestContract;
  
  const GuestCalendarIntegration({
    Key? key,
    this.guestContract,
  }) : super(key: key);

  @override
  State<GuestCalendarIntegration> createState() => _GuestCalendarIntegrationState();
}

class _GuestCalendarIntegrationState extends State<GuestCalendarIntegration> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _progressController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _progressAnimation;

  IntegrationType _selectedType = IntegrationType.automatic;
  SyncStatus _currentStatus = SyncStatus.pending;
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  CalendarFormat _calendarFormat = CalendarFormat.month;
  
  bool _isIntegrating = false;
  bool _locationChangeEnabled = true;
  bool _autoBlockSlots = true;
  bool _sendNotifications = true;
  bool _syncWithExternalCalendar = true;
  
  double _integrationProgress = 0.0;
  List<Map<String, dynamic>> _guestSlots = [];
  List<String> _integrationSteps = [];
  int _currentStep = 0;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeGuestData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _progressController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _progressController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _progressAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _progressController, curve: Curves.easeInOut),
    );

    _slideController.forward();
  }

  void _initializeGuestData() {
    if (widget.guestContract != null) {
      _generateGuestSlots();
      _setupIntegrationSteps();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'IntÃ©gration Agenda',
        subtitle: 'Guest System Premium',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: Icon(
              _currentStatus == SyncStatus.completed ? Icons.cloud_done : Icons.sync,
              color: Colors.white,
            ),
            onPressed: _currentStatus != SyncStatus.syncing ? _syncCalendar : null,
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          if (widget.guestContract != null) ...[
            _buildGuestContractHeader(),
            const SizedBox(height: 16),
          ],
          _buildIntegrationTypeSelector(),
          const SizedBox(height: 16),
          if (_isIntegrating) ...[
            _buildIntegrationProgress(),
            const SizedBox(height: 16),
          ],
          Expanded(
            child: _buildCalendarView(),
          ),
          if (!_isIntegrating) ...[
            const SizedBox(height: 16),
            _buildIntegrationOptions(),
            const SizedBox(height: 16),
            _buildActionButtons(),
          ],
          const SizedBox(height: 20),
        ],
      ),
    );
  }

  Widget _buildGuestContractHeader() {
    final contract = widget.guestContract!;
    final isOutgoing = contract['type'] == 'outgoing';
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: isOutgoing 
              ? [Colors.blue.withOpacity(0.8), Colors.blue.withOpacity(0.6)]
              : [Colors.purple.withOpacity(0.8), Colors.purple.withOpacity(0.6)],
        ),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              isOutgoing ? Icons.flight_takeoff : Icons.flight_land,
              color: Colors.white,
              size: 24,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  contract['partnerName'],
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Colors.white,
                  ),
                ),
                Text(
                  '${contract['startDate']} - ${contract['endDate']}',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
                Text(
                  isOutgoing ? 'Guest sortant' : 'Guest entrant',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              contract['location'],
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 10,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildIntegrationTypeSelector() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.integration_instructions, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Type d\'intÃ©gration',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          Column(
            children: IntegrationType.values.map((type) {
              return _buildIntegrationTypeCard(type);
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildIntegrationTypeCard(IntegrationType type) {
    final isSelected = _selectedType == type;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedType = type;
          });
          HapticFeedback.lightImpact();
        },
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            gradient: isSelected ? LinearGradient(
              colors: [KipikTheme.rouge.withOpacity(0.8), KipikTheme.rouge.withOpacity(0.6)],
            ) : null,
            color: isSelected ? null : Colors.grey.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: isSelected ? KipikTheme.rouge : Colors.grey.withOpacity(0.3),
              width: isSelected ? 2 : 1,
            ),
          ),
          child: Row(
            children: [
              Icon(
                _getIntegrationTypeIcon(type),
                color: isSelected ? Colors.white : KipikTheme.rouge,
                size: 24,
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _getIntegrationTypeTitle(type),
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 14,
                        color: isSelected ? Colors.white : Colors.black87,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _getIntegrationTypeDescription(type),
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: isSelected ? Colors.white70 : Colors.grey,
                      ),
                    ),
                  ],
                ),
              ),
              if (isSelected)
                const Icon(
                  Icons.check_circle,
                  color: Colors.white,
                  size: 20,
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildIntegrationProgress() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.sync, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'IntÃ©gration en cours',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Barre de progression
          AnimatedBuilder(
            animation: _progressAnimation,
            builder: (context, child) {
              return Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Progression',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.grey,
                        ),
                      ),
                      Text(
                        '${(_integrationProgress * 100).toInt()}%',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: KipikTheme.rouge,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  LinearProgressIndicator(
                    value: _integrationProgress,
                    backgroundColor: Colors.grey[300],
                    valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                    minHeight: 8,
                  ),
                ],
              );
            },
          ),
          
          const SizedBox(height: 16),
          
          // Ã‰tapes
          Column(
            children: _integrationSteps.asMap().entries.map((entry) {
              final index = entry.key;
              final step = entry.value;
              final isCompleted = index < _currentStep;
              final isCurrent = index == _currentStep;
              
              return Container(
                margin: const EdgeInsets.only(bottom: 8),
                child: Row(
                  children: [
                    Icon(
                      isCompleted ? Icons.check_circle : 
                      (isCurrent ? Icons.radio_button_checked : Icons.radio_button_unchecked),
                      color: isCompleted ? Colors.green : 
                            (isCurrent ? KipikTheme.rouge : Colors.grey),
                      size: 20,
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        step,
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 13,
                          color: isCompleted ? Colors.green : 
                                (isCurrent ? Colors.black87 : Colors.grey),
                          fontWeight: isCurrent ? FontWeight.bold : FontWeight.normal,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildCalendarView() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.calendar_month, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Planning Guest',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
              const Spacer(),
              if (_guestSlots.isNotEmpty)
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    '${_guestSlots.length} crÃ©neaux',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.blue,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: TableCalendar<Map<String, dynamic>>(
              firstDay: DateTime.utc(2024, 1, 1),
              lastDay: DateTime.utc(2025, 12, 31),
              focusedDay: _focusedDay,
              calendarFormat: _calendarFormat,
              eventLoader: _getEventsForDay,
              startingDayOfWeek: StartingDayOfWeek.monday,
              selectedDayPredicate: (day) {
                return isSameDay(_selectedDay, day);
              },
              onDaySelected: (selectedDay, focusedDay) {
                setState(() {
                  _selectedDay = selectedDay;
                  _focusedDay = focusedDay;
                });
              },
              onFormatChanged: (format) {
                setState(() {
                  _calendarFormat = format;
                });
              },
              onPageChanged: (focusedDay) {
                _focusedDay = focusedDay;
              },
              calendarStyle: CalendarStyle(
                outsideDaysVisible: false,
                weekendTextStyle: const TextStyle(color: Colors.red),
                holidayTextStyle: const TextStyle(color: Colors.red),
                selectedDecoration: BoxDecoration(
                  color: KipikTheme.rouge,
                  shape: BoxShape.circle,
                ),
                todayDecoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.5),
                  shape: BoxShape.circle,
                ),
                markerDecoration: const BoxDecoration(
                  color: Colors.blue,
                  shape: BoxShape.circle,
                ),
              ),
              headerStyle: HeaderStyle(
                titleCentered: true,
                formatButtonVisible: true,
                titleTextStyle: const TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                ),
                formatButtonTextStyle: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 12,
                ),
                formatButtonDecoration: BoxDecoration(
                  color: KipikTheme.rouge.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          ),
          
          // Ã‰vÃ©nements du jour sÃ©lectionnÃ©
          if (_selectedDay != null) ...[
            const SizedBox(height: 16),
            _buildDayEvents(),
          ],
        ],
      ),
    );
  }

  Widget _buildDayEvents() {
    final events = _getEventsForDay(_selectedDay!);
    
    if (events.isEmpty) {
      return Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.grey[100],
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Center(
          child: Text(
            'Aucun Ã©vÃ©nement ce jour',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.grey,
            ),
          ),
        ),
      );
    }
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Ã‰vÃ©nements du ${_formatDate(_selectedDay!)}',
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 14,
            color: Colors.black87,
          ),
        ),
        const SizedBox(height: 8),
        ...events.map((event) => _buildEventCard(event)),
      ],
    );
  }

  Widget _buildEventCard(Map<String, dynamic> event) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.blue.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.blue.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(
            Icons.event,
            color: Colors.blue,
            size: 16,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  event['title'],
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                Text(
                  '${event['startTime']} - ${event['endTime']}',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
            decoration: BoxDecoration(
              color: Colors.blue,
              borderRadius: BorderRadius.circular(4),
            ),
            child: Text(
              'GUEST',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 10,
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildIntegrationOptions() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.settings, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Options d\'intÃ©gration',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          CheckboxListTile(
            title: const Text(
              'Changement de localisation automatique',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 14),
            ),
            subtitle: const Text(
              'Votre localisation sera mise Ã  jour pendant le guest',
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
            value: _locationChangeEnabled,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _locationChangeEnabled = value ?? false;
              });
            },
            controlAffinity: ListTileControlAffinity.leading,
            contentPadding: EdgeInsets.zero,
          ),
          
          CheckboxListTile(
            title: const Text(
              'Blocage automatique des crÃ©neaux',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 14),
            ),
            subtitle: const Text(
              'Vos crÃ©neaux habituels seront bloquÃ©s pendant le guest',
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
            value: _autoBlockSlots,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _autoBlockSlots = value ?? false;
              });
            },
            controlAffinity: ListTileControlAffinity.leading,
            contentPadding: EdgeInsets.zero,
          ),
          
          CheckboxListTile(
            title: const Text(
              'Notifications automatiques',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 14),
            ),
            subtitle: const Text(
              'Alertes pour les Ã©vÃ©nements Guest importants',
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
            value: _sendNotifications,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _sendNotifications = value ?? false;
              });
            },
            controlAffinity: ListTileControlAffinity.leading,
            contentPadding: EdgeInsets.zero,
          ),
          
          CheckboxListTile(
            title: const Text(
              'Synchronisation calendrier externe',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 14),
            ),
            subtitle: const Text(
              'Ajouter les Ã©vÃ©nements Guest Ã  Google/Apple Calendar',
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
            value: _syncWithExternalCalendar,
            activeColor: KipikTheme.rouge,
            onChanged: (value) {
              setState(() {
                _syncWithExternalCalendar = value ?? false;
              });
            },
            controlAffinity: ListTileControlAffinity.leading,
            contentPadding: EdgeInsets.zero,
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton.icon(
            onPressed: !_isIntegrating ? _startIntegration : null,
            icon: _isIntegrating 
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : const Icon(Icons.integration_instructions, size: 20),
            label: Text(
              _isIntegrating ? 'IntÃ©gration en cours...' : 'IntÃ©grer Guest Ã  l\'agenda',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: _isIntegrating ? Colors.grey : KipikTheme.rouge,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: _isIntegrating ? 0 : 4,
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _previewIntegration,
                icon: const Icon(Icons.preview, size: 18),
                label: const Text(
                  'AperÃ§u',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey[600],
                  side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _saveAsTemplate,
                icon: const Icon(Icons.save, size: 18),
                label: const Text(
                  'ModÃ¨le',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  // Actions
  void _startIntegration() async {
    setState(() {
      _isIntegrating = true;
      _currentStatus = SyncStatus.syncing;
      _integrationProgress = 0.0;
      _currentStep = 0;
    });
    
    _progressController.forward();
    
    // Simulation du processus d'intÃ©gration
    for (int i = 0; i < _integrationSteps.length; i++) {
      await Future.delayed(const Duration(seconds: 1));
      
      setState(() {
        _currentStep = i + 1;
        _integrationProgress = (i + 1) / _integrationSteps.length;
      });
      
      if (i == _integrationSteps.length - 1) {
        setState(() {
          _currentStatus = SyncStatus.completed;
          _isIntegrating = false;
        });
        
        _showSuccessDialog();
      }
    }
  }

  void _syncCalendar() async {
    setState(() => _currentStatus = SyncStatus.syncing);
    
    await Future.delayed(const Duration(seconds: 2));
    
    setState(() => _currentStatus = SyncStatus.completed);
    
    _showSuccessSnackBar('Calendrier synchronisÃ© avec succÃ¨s !');
  }

  void _previewIntegration() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.8,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) {
          return Container(
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            child: _buildPreviewContent(scrollController),
          );
        },
      ),
    );
  }

  Widget _buildPreviewContent(ScrollController scrollController) {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Handle bar
          Center(
            child: Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
          ),
          
          const SizedBox(height: 20),
          
          const Text(
            'AperÃ§u de l\'intÃ©gration',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 20,
              color: Colors.black87,
            ),
          ),
          
          const SizedBox(height: 20),
          
          Expanded(
            child: SingleChildScrollView(
              controller: scrollController,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildPreviewSection('Ã‰vÃ©nements Ã  crÃ©er', [
                    'Guest ${widget.guestContract?['partnerName']} - ArrivÃ©e',
                    'PÃ©riode Guest - ${widget.guestContract?['duration']}',
                    'Guest ${widget.guestContract?['partnerName']} - DÃ©part',
                  ]),
                  
                  _buildPreviewSection('Modifications de localisation', [
                    if (_locationChangeEnabled) 
                      'Localisation temporaire: ${widget.guestContract?['location']}'
                    else 
                      'Aucune modification',
                  ]),
                  
                  _buildPreviewSection('CrÃ©neaux bloquÃ©s', [
                    if (_autoBlockSlots)
                      '${_calculateBlockedSlots()} crÃ©neaux seront bloquÃ©s'
                    else
                      'Aucun blocage automatique',
                  ]),
                  
                  _buildPreviewSection('Notifications programmÃ©es', [
                    if (_sendNotifications) ...[
                      'Rappel 24h avant le guest',
                      'Notification d\'arrivÃ©e',
                      'RÃ©sumÃ© quotidien des rÃ©alisations',
                    ] else
                      'Aucune notification',
                  ]),
                  
                  const SizedBox(height: 80),
                ],
              ),
            ),
          ),
          
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: () => Navigator.pop(context),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
              ),
              child: const Text('Fermer'),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPreviewSection(String title, List<String> items) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          ...items.map((item) => Padding(
            padding: const EdgeInsets.only(left: 16, bottom: 4),
            child: Row(
              children: [
                Icon(Icons.check_circle_outline, color: KipikTheme.rouge, size: 16),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    item,
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.black54,
                    ),
                  ),
                ),
              ],
            ),
          )),
        ],
      ),
    );
  }

  void _saveAsTemplate() {
    _showSuccessSnackBar('ModÃ¨le d\'intÃ©gration sauvegardÃ© !');
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: const BoxDecoration(
                color: Colors.green,
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: Colors.white,
                size: 40,
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'IntÃ©gration rÃ©ussie !',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Le Guest a Ã©tÃ© intÃ©grÃ© Ã  votre agenda avec toutes les options sÃ©lectionnÃ©es.',
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 20),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pop(context, true);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
                child: const Text(
                  'Parfait !',
                  style: TextStyle(fontFamily: 'Roboto'),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  // Helper methods
  List<Map<String, dynamic>> _getEventsForDay(DateTime day) {
    return _guestSlots.where((slot) {
      final slotDate = DateTime.parse(slot['date']);
      return isSameDay(slotDate, day);
    }).toList();
  }

  void _generateGuestSlots() {
    if (widget.guestContract == null) return;
    
    final contract = widget.guestContract!;
    final startDate = DateTime.now().add(const Duration(days: 30));
    final endDate = startDate.add(const Duration(days: 10));
    
    _guestSlots = [
      {
        'date': startDate.toIso8601String(),
        'title': 'ArrivÃ©e Guest - ${contract['partnerName']}',
        'startTime': '10:00',
        'endTime': '11:00',
        'type': 'arrival',
      },
      {
        'date': startDate.add(const Duration(days: 1)).toIso8601String(),
        'title': 'Session Guest - Jour 1',
        'startTime': '14:00',
        'endTime': '18:00',
        'type': 'session',
      },
      {
        'date': startDate.add(const Duration(days: 5)).toIso8601String(),
        'title': 'Session Guest - Mi-parcours',
        'startTime': '10:00',
        'endTime': '17:00',
        'type': 'session',
      },
      {
        'date': endDate.toIso8601String(),
        'title': 'DÃ©part Guest - ${contract['partnerName']}',
        'startTime': '16:00',
        'endTime': '17:00',
        'type': 'departure',
      },
    ];
  }

  void _setupIntegrationSteps() {
    _integrationSteps = [
      'Validation des crÃ©neaux Guest',
      'CrÃ©ation des Ã©vÃ©nements agenda',
      'Configuration changement localisation',
      'Blocage des crÃ©neaux conflictuels',
      'ParamÃ©trage des notifications',
      'Synchronisation calendrier externe',
      'Finalisation de l\'intÃ©gration',
    ];
  }

  String _getIntegrationTypeTitle(IntegrationType type) {
    switch (type) {
      case IntegrationType.automatic:
        return 'IntÃ©gration automatique';
      case IntegrationType.manual:
        return 'IntÃ©gration manuelle';
      case IntegrationType.selective:
        return 'IntÃ©gration sÃ©lective';
    }
  }

  String _getIntegrationTypeDescription(IntegrationType type) {
    switch (type) {
      case IntegrationType.automatic:
        return 'Toutes les options sont activÃ©es automatiquement';
      case IntegrationType.manual:
        return 'Vous contrÃ´lez chaque Ã©tape de l\'intÃ©gration';
      case IntegrationType.selective:
        return 'Choisissez les options Ã  activer';
    }
  }

  IconData _getIntegrationTypeIcon(IntegrationType type) {
    switch (type) {
      case IntegrationType.automatic:
        return Icons.auto_mode;
      case IntegrationType.manual:
        return Icons.touch_app;
      case IntegrationType.selective:
        return Icons.tune;
    }
  }

  String _formatDate(DateTime date) {
    const weekdays = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
    const months = ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'];
    
    final weekday = weekdays[date.weekday - 1];
    final day = date.day;
    final month = months[date.month - 1];
    
    return '$weekday $day $month';
  }

  int _calculateBlockedSlots() {
    // Calcul simulÃ© du nombre de crÃ©neaux qui seront bloquÃ©s
    return 15;
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\guest_system\guest_contract_page.dart

// lib/pages/pro/booking/guest_system/guest_contract_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';

enum ContractStatus { pending, negotiating, accepted, declined, active, completed }
enum ContractFilter { all, pending, active, completed }

class GuestContractPage extends StatefulWidget {
  const GuestContractPage({Key? key}) : super(key: key);

  @override
  State<GuestContractPage> createState() => _GuestContractPageState();
}

class _GuestContractPageState extends State<GuestContractPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _cardController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _cardAnimation;

  ContractFilter _selectedFilter = ContractFilter.all;
  bool _isLoading = false;
  
  List<Map<String, dynamic>> _contracts = [];
  List<Map<String, dynamic>> _filteredContracts = [];

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadContracts();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _cardController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _cardController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _cardAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _cardController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 200), () {
      _cardController.forward();
    });
  }

  void _loadContracts() {
    setState(() => _isLoading = true);
    
    // Simulation de chargement des contrats
    Future.delayed(const Duration(seconds: 1), () {
      setState(() {
        _contracts = _generateSampleContracts();
        _filteredContracts = _contracts;
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Contrats Guest',
        subtitle: 'GÃ©rer vos collaborations',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.filter_list, color: Colors.white),
            onPressed: _showFilterDialog,
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          _buildFilterTabs(),
          const SizedBox(height: 16),
          _buildStatsHeader(),
          const SizedBox(height: 16),
          Expanded(
            child: _isLoading ? _buildLoadingState() : _buildContractsList(),
          ),
        ],
      ),
    );
  }

  Widget _buildFilterTabs() {
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: ContractFilter.values.map((filter) {
          final isSelected = _selectedFilter == filter;
          return Expanded(
            child: GestureDetector(
              onTap: () {
                setState(() {
                  _selectedFilter = filter;
                  _filterContracts();
                });
                HapticFeedback.lightImpact();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  gradient: isSelected ? LinearGradient(
                    colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                  ) : null,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    Icon(
                      _getFilterIcon(filter),
                      color: isSelected ? Colors.white : Colors.grey[600],
                      size: 20,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _getFilterLabel(filter),
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 11,
                        fontWeight: FontWeight.w600,
                        color: isSelected ? Colors.white : Colors.grey[600],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildStatsHeader() {
    final totalContracts = _contracts.length;
    final activeContracts = _contracts.where((c) => c['status'] == ContractStatus.active).length;
    final pendingContracts = _contracts.where((c) => c['status'] == ContractStatus.pending).length;

    return FadeTransition(
      opacity: _cardAnimation,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.purple.withOpacity(0.8),
              Colors.blue.withOpacity(0.8),
            ],
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatItem('Total', '$totalContracts', Icons.description),
            _buildStatItem('En cours', '$activeContracts', Icons.play_circle),
            _buildStatItem('En attente', '$pendingContracts', Icons.pending),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Chargement des contrats...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContractsList() {
    if (_filteredContracts.isEmpty) {
      return _buildEmptyState();
    }

    return ListView.builder(
      itemCount: _filteredContracts.length,
      itemBuilder: (context, index) {
        return AnimatedBuilder(
          animation: _cardAnimation,
          builder: (context, child) {
            return Transform.scale(
              scale: _cardAnimation.value,
              child: _buildContractCard(_filteredContracts[index]),
            );
          },
        );
      },
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(32),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.assignment_outlined,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Aucun contrat trouvÃ©',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Vos contrats Guest apparaÃ®tront ici',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContractCard(Map<String, dynamic> contract) {
    final status = contract['status'] as ContractStatus;
    final statusColor = _getStatusColor(status);
    final isOutgoing = contract['type'] == 'outgoing';

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte avec statut
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [statusColor.withOpacity(0.8), statusColor.withOpacity(0.6)],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                CircleAvatar(
                  radius: 25,
                  backgroundImage: contract['partnerAvatar'] != null
                      ? AssetImage(contract['partnerAvatar'])
                      : null,
                  backgroundColor: Colors.white.withOpacity(0.2),
                  child: contract['partnerAvatar'] == null
                      ? Icon(
                          isOutgoing ? Icons.store : Icons.person,
                          color: Colors.white,
                        )
                      : null,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              contract['partnerName'],
                              style: const TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 16,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 4,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              isOutgoing ? 'GUEST' : 'HÃ”TE',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        contract['location'],
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.white70,
                        ),
                      ),
                      Row(
                        children: [
                          Icon(
                            _getStatusIcon(status),
                            color: Colors.white,
                            size: 16,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            _getStatusLabel(status),
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          // Contenu principal
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // PÃ©riode
                Row(
                  children: [
                    Icon(Icons.calendar_today, color: KipikTheme.rouge, size: 16),
                    const SizedBox(width: 8),
                    Text(
                      'PÃ©riode: ${contract['startDate']} - ${contract['endDate']}',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 8),
                
                // DurÃ©e et styles
                Row(
                  children: [
                    Icon(Icons.schedule, color: KipikTheme.rouge, size: 16),
                    const SizedBox(width: 8),
                    Text(
                      '${contract['duration']} â€¢ ${contract['styles'].join(', ')}',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        color: Colors.black87,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 12),
                
                // Conditions financiÃ¨res
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Commission',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          Text(
                            '${contract['commission']}%',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                            ),
                          ),
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'HÃ©bergement',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          Icon(
                            contract['accommodation'] ? Icons.check : Icons.close,
                            color: contract['accommodation'] ? Colors.green : Colors.red,
                            size: 20,
                          ),
                        ],
                      ),
                      if (status == ContractStatus.active) ...[
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Revenus',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.grey,
                              ),
                            ),
                            Text(
                              '${contract['currentRevenue'] ?? 0}â‚¬',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                color: Colors.blue,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ],
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // Actions selon le statut
                _buildContractActions(contract),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContractActions(Map<String, dynamic> contract) {
    final status = contract['status'] as ContractStatus;
    
    switch (status) {
      case ContractStatus.pending:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _declineContract(contract),
                icon: const Icon(Icons.close, size: 16),
                label: const Text('Refuser'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.red,
                  side: const BorderSide(color: Colors.red),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _acceptContract(contract),
                icon: const Icon(Icons.check, size: 16),
                label: const Text('Accepter'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ContractStatus.negotiating:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewNegotiation(contract),
                icon: const Icon(Icons.chat_bubble_outline, size: 16),
                label: const Text('NÃ©gocier'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _finalizeContract(contract),
                icon: const Icon(Icons.handshake, size: 16),
                label: const Text('Finaliser'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ContractStatus.accepted:
        return SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: () => _addToCalendar(contract),
            icon: const Icon(Icons.calendar_today, size: 16),
            label: const Text('Ajouter Ã  l\'agenda'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
          ),
        );
        
      case ContractStatus.active:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewProgress(contract),
                icon: const Icon(Icons.timeline, size: 16),
                label: const Text('Suivi'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _manageContract(contract),
                icon: const Icon(Icons.settings, size: 16),
                label: const Text('GÃ©rer'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ContractStatus.completed:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewSummary(contract),
                icon: const Icon(Icons.summarize, size: 16),
                label: const Text('RÃ©sumÃ©'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey[600],
                  side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _leaveReview(contract),
                icon: const Icon(Icons.star, size: 16),
                label: const Text('Noter'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.amber,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case ContractStatus.declined:
        return SizedBox(
          width: double.infinity,
          child: OutlinedButton.icon(
            onPressed: () => _removeContract(contract),
            icon: const Icon(Icons.delete, size: 16),
            label: const Text('Supprimer'),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.red,
              side: const BorderSide(color: Colors.red),
            ),
          ),
        );
    }
  }

  // Actions sur les contrats
  void _acceptContract(Map<String, dynamic> contract) async {
    final confirmed = await _showConfirmDialog(
      'Accepter le contrat',
      'ÃŠtes-vous sÃ»r de vouloir accepter cette collaboration ?',
      confirmText: 'Accepter',
      confirmColor: Colors.green,
    );
    
    if (confirmed) {
      setState(() {
        contract['status'] = ContractStatus.accepted;
      });
      
      _showSuccessSnackBar('Contrat acceptÃ© ! Il sera ajoutÃ© Ã  votre agenda.');
    }
  }

  void _declineContract(Map<String, dynamic> contract) async {
    final confirmed = await _showConfirmDialog(
      'Refuser le contrat',
      'ÃŠtes-vous sÃ»r de vouloir refuser cette collaboration ?',
      confirmText: 'Refuser',
      confirmColor: Colors.red,
    );
    
    if (confirmed) {
      setState(() {
        contract['status'] = ContractStatus.declined;
      });
      
      _showInfoSnackBar('Contrat refusÃ©. Le partenaire sera notifiÃ©.');
    }
  }

  void _addToCalendar(Map<String, dynamic> contract) {
    // Logique d'ajout automatique Ã  l'agenda
    setState(() {
      contract['status'] = ContractStatus.active;
      contract['addedToCalendar'] = true;
    });
    
    _showSuccessSnackBar('Guest ajoutÃ© Ã  votre agenda avec succÃ¨s !');
  }

  void _viewNegotiation(Map<String, dynamic> contract) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Ouverture de la nÃ©gociation - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _finalizeContract(Map<String, dynamic> contract) {
    setState(() {
      contract['status'] = ContractStatus.accepted;
    });
    
    _showSuccessSnackBar('Contrat finalisÃ© ! PrÃªt pour l\'agenda.');
  }

  void _viewProgress(Map<String, dynamic> contract) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Ouverture du suivi - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _manageContract(Map<String, dynamic> contract) {
    _showContractDetailsBottomSheet(contract);
  }

  void _viewSummary(Map<String, dynamic> contract) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Ouverture du rÃ©sumÃ© - Ã€ implÃ©menter'),
        backgroundColor: Colors.grey,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _leaveReview(Map<String, dynamic> contract) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('SystÃ¨me de notation - Ã€ implÃ©menter'),
        backgroundColor: Colors.amber,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _removeContract(Map<String, dynamic> contract) async {
    final confirmed = await _showConfirmDialog(
      'Supprimer le contrat',
      'Cette action est irrÃ©versible. Continuer ?',
      confirmText: 'Supprimer',
      confirmColor: Colors.red,
    );
    
    if (confirmed) {
      setState(() {
        _contracts.remove(contract);
        _filterContracts();
      });
      
      _showInfoSnackBar('Contrat supprimÃ©.');
    }
  }

  void _showContractDetailsBottomSheet(Map<String, dynamic> contract) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) {
          return Container(
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Handle bar
                  Center(
                    child: Container(
                      width: 40,
                      height: 4,
                      decoration: BoxDecoration(
                        color: Colors.grey[300],
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                  ),
                  
                  const SizedBox(height: 20),
                  
                  Text(
                    'Gestion du contrat',
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.black87,
                    ),
                  ),
                  
                  const SizedBox(height: 20),
                  
                  Expanded(
                    child: SingleChildScrollView(
                      controller: scrollController,
                      child: Column(
                        children: [
                          _buildDetailTile('Partenaire', contract['partnerName']),
                          _buildDetailTile('Localisation', contract['location']),
                          _buildDetailTile('PÃ©riode', '${contract['startDate']} - ${contract['endDate']}'),
                          _buildDetailTile('Commission', '${contract['commission']}%'),
                          _buildDetailTile('HÃ©bergement', contract['accommodation'] ? 'Inclus' : 'Non inclus'),
                          if (contract['currentRevenue'] != null)
                            _buildDetailTile('Revenus actuels', '${contract['currentRevenue']}â‚¬'),
                          
                          const SizedBox(height: 20),
                          
                          SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed: () => Navigator.pop(context),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: KipikTheme.rouge,
                                foregroundColor: Colors.white,
                              ),
                              child: const Text('Fermer'),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildDetailTile(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showFilterDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          'Filtrer les contrats',
          style: TextStyle(fontFamily: 'PermanentMarker'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: ContractFilter.values.map((filter) {
            return RadioListTile<ContractFilter>(
              title: Text(_getFilterLabel(filter)),
              value: filter,
              groupValue: _selectedFilter,
              activeColor: KipikTheme.rouge,
              onChanged: (value) {
                setState(() {
                  _selectedFilter = value!;
                });
                Navigator.pop(context);
                _filterContracts();
              },
            );
          }).toList(),
        ),
      ),
    );
  }

  void _filterContracts() {
    setState(() {
      switch (_selectedFilter) {
        case ContractFilter.all:
          _filteredContracts = _contracts;
          break;
        case ContractFilter.pending:
          _filteredContracts = _contracts.where((c) => 
              c['status'] == ContractStatus.pending || 
              c['status'] == ContractStatus.negotiating).toList();
          break;
        case ContractFilter.active:
          _filteredContracts = _contracts.where((c) => 
              c['status'] == ContractStatus.active || 
              c['status'] == ContractStatus.accepted).toList();
          break;
        case ContractFilter.completed:
          _filteredContracts = _contracts.where((c) => 
              c['status'] == ContractStatus.completed || 
              c['status'] == ContractStatus.declined).toList();
          break;
      }
    });
  }

  Future<bool> _showConfirmDialog(String title, String content, {
    String confirmText = 'Confirmer',
    Color confirmColor = Colors.blue,
  }) async {
    return await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: Text(
          title,
          style: const TextStyle(fontFamily: 'PermanentMarker'),
        ),
        content: Text(
          content,
          style: const TextStyle(fontFamily: 'Roboto'),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(backgroundColor: confirmColor),
            child: Text(
              confirmText,
              style: const TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    ) ?? false;
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  // Helper methods
  String _getFilterLabel(ContractFilter filter) {
    switch (filter) {
      case ContractFilter.all:
        return 'Tous';
      case ContractFilter.pending:
        return 'En attente';
      case ContractFilter.active:
        return 'Actifs';
      case ContractFilter.completed:
        return 'TerminÃ©s';
    }
  }

  IconData _getFilterIcon(ContractFilter filter) {
    switch (filter) {
      case ContractFilter.all:
        return Icons.assignment;
      case ContractFilter.pending:
        return Icons.pending;
      case ContractFilter.active:
        return Icons.play_circle;
      case ContractFilter.completed:
        return Icons.check_circle;
    }
  }

  Color _getStatusColor(ContractStatus status) {
    switch (status) {
      case ContractStatus.pending:
        return Colors.orange;
      case ContractStatus.negotiating:
        return Colors.blue;
      case ContractStatus.accepted:
        return Colors.green;
      case ContractStatus.declined:
        return Colors.red;
      case ContractStatus.active:
        return Colors.purple;
      case ContractStatus.completed:
        return Colors.grey;
    }
  }

  IconData _getStatusIcon(ContractStatus status) {
    switch (status) {
      case ContractStatus.pending:
        return Icons.pending;
      case ContractStatus.negotiating:
        return Icons.chat_bubble;
      case ContractStatus.accepted:
        return Icons.check_circle;
      case ContractStatus.declined:
        return Icons.cancel;
      case ContractStatus.active:
        return Icons.play_circle;
      case ContractStatus.completed:
        return Icons.check_circle_outline;
    }
  }

  String _getStatusLabel(ContractStatus status) {
    switch (status) {
      case ContractStatus.pending:
        return 'En attente';
      case ContractStatus.negotiating:
        return 'NÃ©gociation';
      case ContractStatus.accepted:
        return 'AcceptÃ©';
      case ContractStatus.declined:
        return 'RefusÃ©';
      case ContractStatus.active:
        return 'En cours';
      case ContractStatus.completed:
        return 'TerminÃ©';
    }
  }

  List<Map<String, dynamic>> _generateSampleContracts() {
    return [
      {
        'id': '1',
        'type': 'outgoing', // Je vais en guest
        'partnerName': 'Ink Studio Paris',
        'partnerAvatar': 'assets/shops/shop1.png',
        'location': 'Paris 9Ã¨me, France',
        'startDate': '15 Juin 2025',
        'endDate': '25 Juin 2025',
        'duration': '10 jours',
        'styles': ['RÃ©alisme', 'Portrait'],
        'commission': 20,
        'accommodation': true,
        'status': ContractStatus.pending,
      },
      {
        'id': '2',
        'type': 'incoming', // Je reÃ§ois un guest
        'partnerName': 'Emma Chen',
        'partnerAvatar': 'assets/avatars/guest2.png',
        'location': 'Mon studio',
        'startDate': '1 Juillet 2025',
        'endDate': '15 Juillet 2025',
        'duration': '2 semaines',
        'styles': ['Japonais', 'Traditionnel'],
        'commission': 25,
        'accommodation': false,
        'status': ContractStatus.active,
        'currentRevenue': 1250,
      },
      {
        'id': '3',
        'type': 'outgoing',
        'partnerName': 'Black Art Lyon',
        'partnerAvatar': 'assets/shops/shop2.png',
        'location': 'Lyon, France',
        'startDate': '20 AoÃ»t 2025',
        'endDate': '30 AoÃ»t 2025',
        'duration': '10 jours',
        'styles': ['Black & Grey'],
        'commission': 30,
        'accommodation': false,
        'status': ContractStatus.negotiating,
      },
      {
        'id': '4',
        'type': 'incoming',
        'partnerName': 'Lucas Dubois',
        'partnerAvatar': 'assets/avatars/guest3.png',
        'location': 'Mon studio',
        'startDate': '10 Mai 2025',
        'endDate': '20 Mai 2025',
        'duration': '10 jours',
        'styles': ['GÃ©omÃ©trique', 'Dotwork'],
        'commission': 20,
        'accommodation': true,
        'status': ContractStatus.completed,
        'totalRevenue': 2100,
      },
    ];
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\guest_system\guest_marketplace_page.dart

// lib/pages/pro/booking/guest_system/guest_marketplace_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../../../core/database_manager.dart';
import '../../../../services/auth/secure_auth_service.dart';
import 'guest_proposal_page.dart';
import 'guest_contract_page.dart';

enum MarketplaceMode { browse, seeking, offering }
enum GuestFilter { all, style, location, duration, price }

class GuestMarketplacePage extends StatefulWidget {
  const GuestMarketplacePage({Key? key}) : super(key: key);

  @override
  State<GuestMarketplacePage> createState() => _GuestMarketplacePageState();
}

class _GuestMarketplacePageState extends State<GuestMarketplacePage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _fabController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _fabAnimation;

  MarketplaceMode _selectedMode = MarketplaceMode.browse;
  GuestFilter _selectedFilter = GuestFilter.all;
  String _searchQuery = '';
  bool _isLoading = false;
  
  final TextEditingController _searchController = TextEditingController();

  // Services
  SecureAuthService get _authService => SecureAuthService.instance;
  DatabaseManager get _databaseManager => DatabaseManager.instance;

  // DonnÃ©es
  List<Map<String, dynamic>> _allOffers = [];
  List<Map<String, dynamic>> _filteredOffers = [];
  Map<String, dynamic> _marketplaceStats = {
    'totalOffers': 0,
    'activeGuests': 0,
    'openShops': 0,
    'userOffers': 0,
  };

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadMarketplaceData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _fabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _fabAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fabController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 400), () {
      if (mounted) _fabController.forward();
    });
  }

  Future<void> _loadMarketplaceData() async {
    if (!mounted) return;
    
    setState(() => _isLoading = true);
    
    try {
      await Future.wait([
        _loadOffers(),
        _loadStats(),
      ]);
      
      _applyFilters();
    } catch (e) {
      print('âŒ Erreur chargement marketplace: $e');
      _setDefaultData();
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _loadOffers() async {
    try {
      if (_databaseManager.isDemoMode) {
        // Mode dÃ©mo avec donnÃ©es simulÃ©es
        _allOffers = _generateDemoOffers();
      } else {
        // Mode production avec Firestore
        final snapshot = await _databaseManager.firestore
            .collection('guest_offers')
            .where('status', isEqualTo: 'active')
            .orderBy('createdAt', descending: true)
            .limit(50)
            .get();

        _allOffers = snapshot.docs.map((doc) {
          final data = doc.data();
          data['id'] = doc.id;
          return data;
        }).toList();
        
        // Fallback si pas de donnÃ©es
        if (_allOffers.isEmpty) {
          _allOffers = _generateDemoOffers();
        }
      }
    } catch (e) {
      print('âŒ Erreur chargement offres: $e');
      _allOffers = _generateDemoOffers();
    }
  }

  Future<void> _loadStats() async {
    try {
      if (_databaseManager.isDemoMode) {
        _marketplaceStats = {
          'totalOffers': _allOffers.length,
          'activeGuests': 12,
          'openShops': 8,
          'userOffers': 1,
        };
      } else {
        // Charger stats rÃ©elles depuis Firestore
        final offersCount = await _databaseManager.firestore
            .collection('guest_offers')
            .where('status', isEqualTo: 'active')
            .count()
            .get();

        final guestsCount = _allOffers.where((o) => o['type'] == 'guest').length;
        final shopsCount = _allOffers.where((o) => o['type'] == 'shop').length;

        _marketplaceStats = {
          'totalOffers': offersCount.count ?? _allOffers.length,
          'activeGuests': guestsCount,
          'openShops': shopsCount,
          'userOffers': 1,
        };
      }
    } catch (e) {
      print('âŒ Erreur chargement stats: $e');
      _marketplaceStats = {
        'totalOffers': _allOffers.length,
        'activeGuests': 0,
        'openShops': 0,
        'userOffers': 0,
      };
    }
  }

  void _setDefaultData() {
    _allOffers = _generateDemoOffers();
    _marketplaceStats = {
      'totalOffers': _allOffers.length,
      'activeGuests': 8,
      'openShops': 4,
      'userOffers': 0,
    };
  }

  List<Map<String, dynamic>> _generateDemoOffers() {
    return [
      {
        'id': '1',
        'type': 'shop',
        'name': 'Ink Studio Paris',
        'location': 'Paris 9Ã¨me, France',
        'rating': 4.8,
        'reviewCount': 127,
        'avatar': null,
        'availableDates': '15-25 Juin 2025',
        'styles': ['RÃ©alisme', 'Japonais', 'Portrait'],
        'description': 'Studio parisien haut de gamme, clientÃ¨le internationale. Ã‰quipe expÃ©rimentÃ©e et ambiance professionnelle.',
        'fullDescription': 'Studio de tatouage rÃ©putÃ© au cÅ“ur de Paris 9Ã¨me. Nous accueillons des artistes guests talentueux pour des collaborations enrichissantes. Notre clientÃ¨le internationale et notre Ã©quipe expÃ©rimentÃ©e offrent un environnement idÃ©al pour dÃ©velopper votre art et Ã©largir votre rÃ©seau.',
        'commission': 25,
        'accommodation': true,
        'duration': '10 jours',
        'isVerified': true,
        'isPremium': true,
        'createdAt': DateTime.now().subtract(const Duration(days: 2)),
      },
      {
        'id': '2',
        'type': 'guest',
        'name': 'Alex Martinez',
        'location': 'Lyon, France',
        'rating': 4.9,
        'reviewCount': 89,
        'avatar': null,
        'availableDates': '1-15 Juillet 2025',
        'styles': ['Blackwork', 'GÃ©omÃ©trique', 'Minimaliste'],
        'description': 'Tatoueur spÃ©cialisÃ© blackwork et gÃ©omÃ©trique. 6 ans d\'expÃ©rience, portfolio solide.',
        'fullDescription': 'Tatoueur professionnel spÃ©cialisÃ© dans le blackwork et les designs gÃ©omÃ©triques. Avec 6 ans d\'expÃ©rience, je propose des crÃ©ations uniques et prÃ©cises. Recherche des opportunitÃ©s de guest pour dÃ©couvrir de nouveaux environnements et partager mon savoir-faire.',
        'commission': 30,
        'accommodation': false,
        'duration': '2 semaines',
        'isVerified': true,
        'isPremium': false,
        'createdAt': DateTime.now().subtract(const Duration(days: 1)),
      },
      {
        'id': '3',
        'type': 'shop',
        'name': 'Urban Art Marseille',
        'location': 'Marseille, France',
        'rating': 4.6,
        'reviewCount': 156,
        'avatar': null,
        'availableDates': 'AoÃ»t-Septembre 2025',
        'styles': ['Aquarelle', 'Neo-traditional', 'Couleur'],
        'description': 'Shop moderne sur le Vieux-Port. SpÃ©cialisÃ© couleur et aquarelle.',
        'fullDescription': 'Studio moderne situÃ© sur le Vieux-Port de Marseille. Nous sommes spÃ©cialisÃ©s dans les techniques couleur et aquarelle. Notre Ã©quipe jeune et dynamique accueille des artistes guests pour des collaborations crÃ©atives dans une ambiance dÃ©contractÃ©e.',
        'commission': 20,
        'accommodation': true,
        'duration': 'Flexible',
        'isVerified': true,
        'isPremium': false,
        'createdAt': DateTime.now().subtract(const Duration(hours: 18)),
      },
      {
        'id': '4',
        'type': 'guest',
        'name': 'Sophie Chen',
        'location': 'Nice, France',
        'rating': 4.7,
        'reviewCount': 134,
        'avatar': null,
        'availableDates': '20-30 Juin 2025',
        'styles': ['Japonais', 'Traditionnel', 'Oriental'],
        'description': 'Artiste spÃ©cialisÃ©e tatouage japonais traditionnel. Formation au Japon.',
        'fullDescription': 'Artiste tatouage spÃ©cialisÃ©e dans l\'art japonais traditionnel. FormÃ©e directement au Japon, je maÃ®trise les techniques ancestrales et propose des crÃ©ations authentiques. Je recherche des collaborations avec des shops partageant les mÃªmes valeurs artistiques.',
        'commission': 35,
        'accommodation': true,
        'duration': '10 jours',
        'isVerified': true,
        'isPremium': true,
        'createdAt': DateTime.now().subtract(const Duration(hours: 12)),
      },
    ];
  }

  void _applyFilters() {
    setState(() {
      _filteredOffers = _allOffers.where((offer) {
        // Filtre par mode
        if (_selectedMode == MarketplaceMode.seeking) {
          if (offer['type'] != 'shop') return false;
        } else if (_selectedMode == MarketplaceMode.offering) {
          if (offer['type'] != 'guest') return false;
        }
        
        // Filtre par recherche
        if (_searchQuery.isNotEmpty) {
          final query = _searchQuery.toLowerCase();
          if (!offer['name'].toLowerCase().contains(query) &&
              !offer['location'].toLowerCase().contains(query) &&
              !offer['styles'].any((style) => 
                style.toLowerCase().contains(query))) {
            return false;
          }
        }
        
        return true;
      }).toList();
      
      // Trier par premium, vÃ©rifiÃ©, puis rating
      _filteredOffers.sort((a, b) {
        if (a['isPremium'] == true && b['isPremium'] != true) return -1;
        if (a['isPremium'] != true && b['isPremium'] == true) return 1;
        if (a['isVerified'] == true && b['isVerified'] != true) return -1;
        if (a['isVerified'] != true && b['isVerified'] == true) return 1;
        return (b['rating'] as double).compareTo(a['rating'] as double);
      });
    });
  }

  Future<void> _refreshData() async {
    await _loadMarketplaceData();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Guest Marketplace',
        subtitle: 'RÃ©seau professionnel tatouage',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: Icon(
              Icons.filter_list,
              color: _hasActiveFilters() ? Colors.amber : Colors.white,
            ),
            onPressed: _showFilterDialog,
            tooltip: 'Filtres',
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          ScaleTransition(
            scale: _fabAnimation,
            child: FloatingActionButton.extended(
              onPressed: _createGuestOffer,
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
              icon: const Icon(Icons.add),
              label: const Text(
                'Nouvelle offre',
                style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
              ),
            ),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: _isLoading 
                ? _buildLoadingState()
                : RefreshIndicator(
                    onRefresh: _refreshData,
                    color: KipikTheme.rouge,
                    child: SlideTransition(
                      position: _slideAnimation,
                      child: _buildContent(),
                    ),
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
          ),
          SizedBox(height: 16),
          Text(
            'Chargement du marketplace...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          _buildHeader(),
          const SizedBox(height: 16),
          _buildModeSelector(),
          const SizedBox(height: 16),
          _buildSearchBar(),
          const SizedBox(height: 16),
          _buildStatsHeader(),
          const SizedBox(height: 16),
          Expanded(
            child: _buildOffersList(),
          ),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.purple.withOpacity(0.9),
            Colors.purple.withOpacity(0.7),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.purple.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(16),
            ),
            child: const Icon(
              Icons.public,
              color: Colors.white,
              size: 32,
            ),
          ),
          const SizedBox(width: 20),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Text(
                      'Guest Network',
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 20,
                        color: Colors.white,
                      ),
                    ),
                    if (_databaseManager.isDemoMode) ...[
                      const SizedBox(width: 8),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Colors.orange.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Text(
                          'DÃ‰MO',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 10,
                            color: Colors.orange,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
                const SizedBox(height: 4),
                const Text(
                  'Connectez-vous avec des professionnels',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModeSelector() {
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: MarketplaceMode.values.map((mode) {
          final isSelected = _selectedMode == mode;
          return Expanded(
            child: GestureDetector(
              onTap: () {
                setState(() {
                  _selectedMode = mode;
                });
                _applyFilters();
                HapticFeedback.lightImpact();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
                decoration: BoxDecoration(
                  gradient: isSelected ? LinearGradient(
                    colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                  ) : null,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    Icon(
                      _getModeIcon(mode),
                      color: isSelected ? Colors.white : Colors.grey[600],
                      size: 20,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _getModeLabel(mode),
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                        color: isSelected ? Colors.white : Colors.grey[600],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildSearchBar() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: _searchController,
        onChanged: (value) {
          setState(() => _searchQuery = value);
          _applyFilters();
        },
        decoration: InputDecoration(
          hintText: 'Rechercher par ville, style, nom...',
          hintStyle: TextStyle(
            fontFamily: 'Roboto',
            color: Colors.grey[500],
          ),
          border: InputBorder.none,
          prefixIcon: Icon(Icons.search, color: KipikTheme.rouge),
          suffixIcon: _searchQuery.isNotEmpty
              ? IconButton(
                  icon: const Icon(Icons.clear, color: Colors.grey),
                  onPressed: () {
                    _searchController.clear();
                    setState(() => _searchQuery = '');
                    _applyFilters();
                  },
                )
              : null,
        ),
      ),
    );
  }

  Widget _buildStatsHeader() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.blue.withOpacity(0.8),
            Colors.purple.withOpacity(0.8),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildStatItem(
            'Offres actives', 
            '${_marketplaceStats['totalOffers']}', 
            Icons.local_offer
          ),
          _buildStatItem(
            'Tatoueurs', 
            '${_marketplaceStats['activeGuests']}', 
            Icons.person
          ),
          _buildStatItem(
            'Shops', 
            '${_marketplaceStats['openShops']}', 
            Icons.store
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }

  Widget _buildOffersList() {
    if (_filteredOffers.isEmpty) {
      return _buildEmptyState();
    }

    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _filteredOffers.length,
        itemBuilder: (context, index) {
          final offer = _filteredOffers[index];
          return _buildOfferCard(offer);
        },
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search_off,
            size: 64,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'Aucune offre trouvÃ©e',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 18,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Essayez de modifier vos filtres ou crÃ©ez une nouvelle offre',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey[500],
            ),
          ),
          const SizedBox(height: 20),
          ElevatedButton.icon(
            onPressed: _createGuestOffer,
            icon: const Icon(Icons.add),
            label: const Text('CrÃ©er une offre'),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOfferCard(Map<String, dynamic> offer) {
    final isGuestOffer = offer['type'] == 'guest';
    final gradientColors = isGuestOffer 
        ? [Colors.blue.withOpacity(0.8), Colors.blue.withOpacity(0.6)]
        : [Colors.purple.withOpacity(0.8), Colors.purple.withOpacity(0.6)];

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        border: offer['isPremium'] == true
            ? Border.all(color: Colors.amber.withOpacity(0.5), width: 2)
            : null,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte avec gradient
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: gradientColors),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                Stack(
                  children: [
                    Container(
                      width: 50,
                      height: 50,
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Icon(
                        isGuestOffer ? Icons.person : Icons.store,
                        color: Colors.white,
                        size: 24,
                      ),
                    ),
                    if (offer['isVerified'] == true)
                      Positioned(
                        top: -2,
                        right: -2,
                        child: Container(
                          padding: const EdgeInsets.all(2),
                          decoration: const BoxDecoration(
                            color: Colors.blue,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.verified,
                            color: Colors.white,
                            size: 12,
                          ),
                        ),
                      ),
                    if (offer['isPremium'] == true)
                      Positioned(
                        bottom: -2,
                        right: -2,
                        child: Container(
                          padding: const EdgeInsets.all(2),
                          decoration: const BoxDecoration(
                            color: Colors.amber,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.star,
                            color: Colors.white,
                            size: 12,
                          ),
                        ),
                      ),
                  ],
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              offer['name'],
                              style: const TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 16,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 4,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              isGuestOffer ? 'GUEST' : 'SHOP',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        offer['location'],
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.white70,
                        ),
                      ),
                      Row(
                        children: [
                          const Icon(Icons.star, color: Colors.amber, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            '${offer['rating']} â€¢ ${offer['reviewCount']} avis',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          // Contenu principal
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Dates disponibles
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.calendar_today, color: KipikTheme.rouge, size: 16),
                      const SizedBox(width: 8),
                      Text(
                        'Disponible: ${offer['availableDates']}',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: Colors.blue,
                        ),
                      ),
                    ],
                  ),
                ),
                
                const SizedBox(height: 12),
                
                // Styles
                Wrap(
                  spacing: 4,
                  runSpacing: 4,
                  children: (offer['styles'] as List).map<Widget>((style) {
                    return Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.purple.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Text(
                        style,
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: Colors.purple,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    );
                  }).toList(),
                ),
                
                const SizedBox(height: 12),
                
                // Description
                Text(
                  offer['description'],
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 13,
                    color: Colors.black87,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                
                const SizedBox(height: 12),
                
                // DÃ©tails commission/hÃ©bergement
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Commission',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          Text(
                            '${offer['commission']}%',
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                            ),
                          ),
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'HÃ©bergement',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          Text(
                            offer['accommodation'] ? 'Inclus' : 'Non inclus',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              color: offer['accommodation'] ? Colors.green : Colors.orange,
                            ),
                          ),
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'DurÃ©e',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          Text(
                            offer['duration'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // Actions
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: () => _viewOfferDetails(offer),
                        icon: const Icon(Icons.visibility, size: 16),
                        label: const Text(
                          'Voir dÃ©tails',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                          ),
                        ),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.grey[600],
                          side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                          padding: const EdgeInsets.symmetric(vertical: 8),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _makeProposal(offer),
                        icon: const Icon(Icons.send, size: 16),
                        label: const Text(
                          'Contacter',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: KipikTheme.rouge,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 8),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Actions
  void _createGuestOffer() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const GuestProposalPage(mode: ProposalMode.create),
      ),
    );
  }

  void _makeProposal(Map<String, dynamic> offer) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => GuestProposalPage(
          mode: ProposalMode.respond,
          targetOffer: offer,
        ),
      ),
    );
  }

  void _viewOfferDetails(Map<String, dynamic> offer) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.8,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) {
          return Container(
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            child: _buildOfferDetailsContent(offer, scrollController),
          );
        },
      ),
    );
  }

  Widget _buildOfferDetailsContent(Map<String, dynamic> offer, ScrollController scrollController) {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Handle bar
          Center(
            child: Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
          ),
          
          const SizedBox(height: 20),
          
          Expanded(
            child: SingleChildScrollView(
              controller: scrollController,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // En-tÃªte
                  Row(
                    children: [
                      Container(
                        width: 60,
                        height: 60,
                        decoration: BoxDecoration(
                          color: KipikTheme.rouge.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Icon(
                          offer['type'] == 'guest' ? Icons.person : Icons.store,
                          color: KipikTheme.rouge,
                          size: 30,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              offer['name'],
                              style: const TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 20,
                                color: Colors.black87,
                              ),
                            ),
                            Text(
                              offer['location'],
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 16,
                                color: Colors.grey,
                              ),
                            ),
                            Row(
                              children: [
                                const Icon(Icons.star, color: Colors.amber, size: 18),
                                const SizedBox(width: 4),
                                Text(
                                  '${offer['rating']} (${offer['reviewCount']} avis)',
                                  style: const TextStyle(
                                    fontFamily: 'Roboto',
                                    fontSize: 14,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 24),
                  
                  // Description complÃ¨te
                  _buildDetailSection('Description', offer['fullDescription'] ?? offer['description']),
                  
                  // Styles et spÃ©cialitÃ©s
                  _buildDetailSection('Styles & SpÃ©cialitÃ©s', (offer['styles'] as List).join(', ')),
                  
                  // DisponibilitÃ©s
                  _buildDetailSection('DisponibilitÃ©s', offer['availableDates']),
                  
                  // Conditions
                  _buildDetailSection('Conditions', 
                    'Commission: ${offer['commission']}%\n'
                    'HÃ©bergement: ${offer['accommodation'] ? 'Inclus' : 'Non inclus'}\n'
                    'DurÃ©e: ${offer['duration']}'
                  ),
                  
                  const SizedBox(height: 80), // Espace pour les boutons
                ],
              ),
            ),
          ),
          
          // Boutons d'action
          Container(
            padding: const EdgeInsets.only(top: 16),
            child: Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => Navigator.pop(context),
                    icon: const Icon(Icons.close),
                    label: const Text('Fermer'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.grey[600],
                      side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      Navigator.pop(context);
                      _makeProposal(offer);
                    },
                    icon: const Icon(Icons.send),
                    label: const Text('Contacter'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: KipikTheme.rouge,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailSection(String title, String content) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            content,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.black54,
              height: 1.4,
            ),
          ),
        ],
      ),
    );
  }

  void _showFilterDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          'Filtres',
          style: TextStyle(fontFamily: 'PermanentMarker'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: GuestFilter.values.map((filter) {
            return RadioListTile<GuestFilter>(
              title: Text(_getFilterLabel(filter)),
              value: filter,
              groupValue: _selectedFilter,
              activeColor: KipikTheme.rouge,
              onChanged: (value) {
                setState(() => _selectedFilter = value!);
                Navigator.pop(context);
                _applyFilters();
              },
            );
          }).toList(),
        ),
      ),
    );
  }

  // Helper methods
  bool _hasActiveFilters() {
    return _selectedFilter != GuestFilter.all || _searchQuery.isNotEmpty;
  }

  String _getModeLabel(MarketplaceMode mode) {
    switch (mode) {
      case MarketplaceMode.browse:
        return 'Parcourir';
      case MarketplaceMode.seeking:
        return 'Chercher Shop';
      case MarketplaceMode.offering:
        return 'Chercher Guest';
    }
  }

  IconData _getModeIcon(MarketplaceMode mode) {
    switch (mode) {
      case MarketplaceMode.browse:
        return Icons.explore;
      case MarketplaceMode.seeking:
        return Icons.store;
      case MarketplaceMode.offering:
        return Icons.person_search;
    }
  }

  String _getFilterLabel(GuestFilter filter) {
    switch (filter) {
      case GuestFilter.all:
        return 'Tous';
      case GuestFilter.style:
        return 'Par style';
      case GuestFilter.location:
        return 'Par localisation';
      case GuestFilter.duration:
        return 'Par durÃ©e';
      case GuestFilter.price:
        return 'Par commission';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\guest_system\guest_notifications.dart

// lib/pages/pro/booking/guest_system/guest_notifications.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';

enum NotificationType { arrival, session, revenue, departure, review, contract }
enum NotificationPriority { low, normal, high, urgent }
enum NotificationStatus { unread, read, archived }

class GuestNotifications extends StatefulWidget {
  const GuestNotifications({Key? key}) : super(key: key);

  @override
  State<GuestNotifications> createState() => _GuestNotificationsState();
}

class _GuestNotificationsState extends State<GuestNotifications> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _floatController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _floatAnimation;

  NotificationStatus _selectedFilter = NotificationStatus.unread;
  bool _isLoading = false;
  
  List<Map<String, dynamic>> _notifications = [];
  List<Map<String, dynamic>> _filteredNotifications = [];

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadNotifications();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _floatController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _floatController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _floatAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _floatController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      _floatController.repeat(reverse: true);
    });
  }

  void _loadNotifications() {
    setState(() => _isLoading = true);
    
    // Simulation de chargement des notifications
    Future.delayed(const Duration(seconds: 1), () {
      setState(() {
        _notifications = _generateSampleNotifications();
        _filteredNotifications = _notifications;
        _isLoading = false;
      });
      _filterNotifications();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Notifications Guest',
        subtitle: 'SystÃ¨me Premium',
        showBackButton: true,
        useProStyle: true,
        actions: [
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.notifications, color: Colors.white),
                onPressed: _markAllAsRead,
              ),
              if (_getUnreadCount() > 0)
                Positioned(
                  right: 8,
                  top: 8,
                  child: AnimatedBuilder(
                    animation: _floatAnimation,
                    builder: (context, child) {
                      return Transform.scale(
                        scale: 1.0 + (_floatAnimation.value * 0.2),
                        child: Container(
                          padding: const EdgeInsets.all(4),
                          decoration: const BoxDecoration(
                            color: Colors.red,
                            shape: BoxShape.circle,
                          ),
                          child: Text(
                            '${_getUnreadCount()}',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
            ],
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          _buildFilterTabs(),
          const SizedBox(height: 16),
          _buildStatsHeader(),
          const SizedBox(height: 16),
          Expanded(
            child: _isLoading ? _buildLoadingState() : _buildNotificationsList(),
          ),
        ],
      ),
    );
  }

  Widget _buildFilterTabs() {
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: NotificationStatus.values.map((status) {
          final isSelected = _selectedFilter == status;
          final count = _getStatusCount(status);
          
          return Expanded(
            child: GestureDetector(
              onTap: () {
                setState(() {
                  _selectedFilter = status;
                  _filterNotifications();
                });
                HapticFeedback.lightImpact();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  gradient: isSelected ? LinearGradient(
                    colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                  ) : null,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          _getStatusIcon(status),
                          color: isSelected ? Colors.white : Colors.grey[600],
                          size: 18,
                        ),
                        if (count > 0) ...[
                          const SizedBox(width: 4),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                            decoration: BoxDecoration(
                              color: isSelected ? Colors.white.withOpacity(0.3) : KipikTheme.rouge.withOpacity(0.8),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              '$count',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _getStatusLabel(status),
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 11,
                        fontWeight: FontWeight.w600,
                        color: isSelected ? Colors.white : Colors.grey[600],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildStatsHeader() {
    final totalNotifications = _notifications.length;
    final unreadNotifications = _getUnreadCount();
    final highPriorityNotifications = _notifications
        .where((n) => n['priority'] == NotificationPriority.high || n['priority'] == NotificationPriority.urgent)
        .length;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.purple.withOpacity(0.8),
            Colors.blue.withOpacity(0.8),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildStatItem('Total', '$totalNotifications', Icons.notifications),
          _buildStatItem('Non lues', '$unreadNotifications', Icons.mark_email_unread),
          _buildStatItem('PrioritÃ©', '$highPriorityNotifications', Icons.priority_high),
        ],
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Chargement des notifications...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationsList() {
    if (_filteredNotifications.isEmpty) {
      return _buildEmptyState();
    }

    return ListView.builder(
      itemCount: _filteredNotifications.length,
      itemBuilder: (context, index) {
        return _buildNotificationCard(_filteredNotifications[index], index);
      },
    );
  }

  Widget _buildEmptyState() {
    String message = '';
    IconData icon = Icons.notifications_none;
    
    switch (_selectedFilter) {
      case NotificationStatus.unread:
        message = 'Aucune notification non lue';
        icon = Icons.mark_email_read;
        break;
      case NotificationStatus.read:
        message = 'Aucune notification lue';
        icon = Icons.drafts;
        break;
      case NotificationStatus.archived:
        message = 'Aucune notification archivÃ©e';
        icon = Icons.archive;
        break;
    }

    return Center(
      child: Container(
        padding: const EdgeInsets.all(32),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              message,
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Les notifications Guest apparaÃ®tront ici',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNotificationCard(Map<String, dynamic> notification, int index) {
    final type = notification['type'] as NotificationType;
    final priority = notification['priority'] as NotificationPriority;
    final status = notification['status'] as NotificationStatus;
    final isUnread = status == NotificationStatus.unread;

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: Dismissible(
        key: Key(notification['id']),
        direction: DismissDirection.endToStart,
        onDismissed: (direction) => _archiveNotification(notification),
        background: Container(
          alignment: Alignment.centerRight,
          padding: const EdgeInsets.only(right: 20),
          decoration: BoxDecoration(
            color: Colors.red,
            borderRadius: BorderRadius.circular(20),
          ),
          child: const Icon(
            Icons.archive,
            color: Colors.white,
            size: 24,
          ),
        ),
        child: GestureDetector(
          onTap: () => _openNotification(notification),
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(isUnread ? 0.98 : 0.85),
              borderRadius: BorderRadius.circular(20),
              border: isUnread ? Border.all(
                color: KipikTheme.rouge.withOpacity(0.3),
                width: 2,
              ) : null,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(isUnread ? 0.15 : 0.1),
                  blurRadius: isUnread ? 10 : 6,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              children: [
                // En-tÃªte
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: _getTypeColor(type).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        _getTypeIcon(type),
                        color: _getTypeColor(type),
                        size: 20,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: Text(
                                  notification['title'],
                                  style: TextStyle(
                                    fontFamily: 'PermanentMarker',
                                    fontSize: 14,
                                    color: Colors.black87,
                                    fontWeight: isUnread ? FontWeight.bold : FontWeight.normal,
                                  ),
                                ),
                              ),
                              if (priority == NotificationPriority.high || priority == NotificationPriority.urgent)
                                Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: _getPriorityColor(priority),
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Text(
                                    _getPriorityLabel(priority),
                                    style: const TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 10,
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                            ],
                          ),
                          const SizedBox(height: 4),
                          Row(
                            children: [
                              Text(
                                notification['guestName'] ?? 'SystÃ¨me',
                                style: const TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 12,
                                  color: Colors.blue,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Text(
                                'â€¢',
                                style: TextStyle(color: Colors.grey[400]),
                              ),
                              const SizedBox(width: 8),
                              Text(
                                _formatTimeAgo(notification['timestamp']),
                                style: TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 12,
                                  color: Colors.grey[600],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    if (isUnread)
                      Container(
                        width: 8,
                        height: 8,
                        decoration: BoxDecoration(
                          color: KipikTheme.rouge,
                          shape: BoxShape.circle,
                        ),
                      ),
                  ],
                ),
                
                const SizedBox(height: 12),
                
                // Contenu
                Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    notification['content'],
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 13,
                      color: Colors.black54,
                      height: 1.4,
                    ),
                  ),
                ),
                
                // Actions spÃ©cifiques selon le type
                if (notification['actions'] != null) ...[
                  const SizedBox(height: 12),
                  _buildNotificationActions(notification),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNotificationActions(Map<String, dynamic> notification) {
    final actions = notification['actions'] as List<Map<String, dynamic>>;
    
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: actions.map((action) {
        return Container(
          margin: const EdgeInsets.only(left: 8),
          child: TextButton.icon(
            onPressed: () => _executeAction(action['id'], notification),
            icon: Icon(
              action['icon'] as IconData,
              size: 16,
              color: action['color'] as Color,
            ),
            label: Text(
              action['label'],
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                fontWeight: FontWeight.w600,
                color: action['color'] as Color,
              ),
            ),
            style: TextButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
                side: BorderSide(color: (action['color'] as Color).withOpacity(0.3)),
              ),
            ),
          ),
        );
      }).toList(),
    );
  }

  // Actions
  void _openNotification(Map<String, dynamic> notification) {
    if (notification['status'] == NotificationStatus.unread) {
      setState(() {
        notification['status'] = NotificationStatus.read;
      });
    }
    
    _showNotificationDetails(notification);
  }

  void _showNotificationDetails(Map<String, dynamic> notification) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) {
          return Container(
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            child: _buildNotificationDetailsContent(notification, scrollController),
          );
        },
      ),
    );
  }

  Widget _buildNotificationDetailsContent(Map<String, dynamic> notification, ScrollController scrollController) {
    final type = notification['type'] as NotificationType;
    
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Handle bar
          Center(
            child: Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
          ),
          
          const SizedBox(height: 20),
          
          // En-tÃªte
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: _getTypeColor(type).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  _getTypeIcon(type),
                  color: _getTypeColor(type),
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      notification['title'],
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 18,
                        color: Colors.black87,
                      ),
                    ),
                    Text(
                      'De: ${notification['guestName'] ?? 'SystÃ¨me Guest'}',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        color: Colors.blue,
                      ),
                    ),
                    Text(
                      _formatFullDate(notification['timestamp']),
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // Contenu dÃ©taillÃ©
          Expanded(
            child: SingleChildScrollView(
              controller: scrollController,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    notification['content'],
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 16,
                      color: Colors.black87,
                      height: 1.5,
                    ),
                  ),
                  
                  if (notification['details'] != null) ...[
                    const SizedBox(height: 20),
                    _buildNotificationDetails(notification['details']),
                  ],
                  
                  if (notification['attachments'] != null) ...[
                    const SizedBox(height: 20),
                    _buildAttachments(notification['attachments']),
                  ],
                  
                  const SizedBox(height: 80),
                ],
              ),
            ),
          ),
          
          // Actions
          if (notification['actions'] != null) ...[
            const Divider(),
            Row(
              children: (notification['actions'] as List<Map<String, dynamic>>)
                  .map((action) => Expanded(
                    child: Container(
                      margin: const EdgeInsets.symmetric(horizontal: 4),
                      child: ElevatedButton.icon(
                        onPressed: () {
                          Navigator.pop(context);
                          _executeAction(action['id'], notification);
                        },
                        icon: Icon(action['icon'] as IconData, size: 16),
                        label: Text(
                          action['label'],
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: action['color'] as Color,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),
                    ),
                  ))
                  .toList(),
            ),
          ] else ...[
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => Navigator.pop(context),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
                child: const Text('Fermer'),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildNotificationDetails(Map<String, dynamic> details) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'DÃ©tails',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 12),
          ...details.entries.map((entry) => Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(
                  width: 100,
                  child: Text(
                    '${entry.key}:',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.grey,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
                Expanded(
                  child: Text(
                    entry.value.toString(),
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.black87,
                    ),
                  ),
                ),
              ],
            ),
          )),
        ],
      ),
    );
  }

  Widget _buildAttachments(List<Map<String, dynamic>> attachments) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'PiÃ¨ces jointes',
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 16,
            color: Colors.black87,
          ),
        ),
        const SizedBox(height: 12),
        ...attachments.map((attachment) => Container(
          margin: const EdgeInsets.only(bottom: 8),
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.blue.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.blue.withOpacity(0.3)),
          ),
          child: Row(
            children: [
              Icon(
                _getAttachmentIcon(attachment['type']),
                color: Colors.blue,
                size: 20,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      attachment['name'],
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    if (attachment['size'] != null)
                      Text(
                        attachment['size'],
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.grey,
                        ),
                      ),
                  ],
                ),
              ),
              IconButton(
                onPressed: () => _downloadAttachment(attachment),
                icon: const Icon(Icons.download, color: Colors.blue),
              ),
            ],
          ),
        )),
      ],
    );
  }

  void _archiveNotification(Map<String, dynamic> notification) {
    setState(() {
      notification['status'] = NotificationStatus.archived;
      _filterNotifications();
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Notification archivÃ©e'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _markAllAsRead() {
    setState(() {
      for (var notification in _notifications) {
        if (notification['status'] == NotificationStatus.unread) {
          notification['status'] = NotificationStatus.read;
        }
      }
      _filterNotifications();
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Toutes les notifications marquÃ©es comme lues'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _executeAction(String actionId, Map<String, dynamic> notification) {
    switch (actionId) {
      case 'accept_guest':
        _showSuccessSnackBar('Guest acceptÃ© dans votre planning !');
        break;
      case 'decline_guest':
        _showInfoSnackBar('Guest dÃ©clinÃ©. Le demandeur sera notifiÃ©.');
        break;
      case 'view_revenue':
        _showInfoSnackBar('Ouverture du dÃ©tail des revenus...');
        break;
      case 'rate_guest':
        _showInfoSnackBar('SystÃ¨me de notation en cours de dÃ©veloppement.');
        break;
      case 'view_portfolio':
        _showInfoSnackBar('Ouverture du portfolio...');
        break;
      case 'contact_guest':
        _showInfoSnackBar('Ouverture de la messagerie...');
        break;
      default:
        _showInfoSnackBar('Action exÃ©cutÃ©e: $actionId');
    }
  }

  void _downloadAttachment(Map<String, dynamic> attachment) {
    _showInfoSnackBar('TÃ©lÃ©chargement de ${attachment['name']}...');
  }

  void _filterNotifications() {
    setState(() {
      switch (_selectedFilter) {
        case NotificationStatus.unread:
          _filteredNotifications = _notifications
              .where((n) => n['status'] == NotificationStatus.unread)
              .toList();
          break;
        case NotificationStatus.read:
          _filteredNotifications = _notifications
              .where((n) => n['status'] == NotificationStatus.read)
              .toList();
          break;
        case NotificationStatus.archived:
          _filteredNotifications = _notifications
              .where((n) => n['status'] == NotificationStatus.archived)
              .toList();
          break;
      }
    });
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  // Helper methods
  int _getUnreadCount() {
    return _notifications
        .where((n) => n['status'] == NotificationStatus.unread)
        .length;
  }

  int _getStatusCount(NotificationStatus status) {
    return _notifications
        .where((n) => n['status'] == status)
        .length;
  }

  String _getStatusLabel(NotificationStatus status) {
    switch (status) {
      case NotificationStatus.unread:
        return 'Non lues';
      case NotificationStatus.read:
        return 'Lues';
      case NotificationStatus.archived:
        return 'ArchivÃ©es';
    }
  }

  IconData _getStatusIcon(NotificationStatus status) {
    switch (status) {
      case NotificationStatus.unread:
        return Icons.mark_email_unread;
      case NotificationStatus.read:
        return Icons.drafts;
      case NotificationStatus.archived:
        return Icons.archive;
    }
  }

  Color _getTypeColor(NotificationType type) {
    switch (type) {
      case NotificationType.arrival:
        return Colors.green;
      case NotificationType.session:
        return Colors.blue;
      case NotificationType.revenue:
        return Colors.orange;
      case NotificationType.departure:
        return Colors.purple;
      case NotificationType.review:
        return Colors.amber;
      case NotificationType.contract:
        return Colors.red;
    }
  }

  IconData _getTypeIcon(NotificationType type) {
    switch (type) {
      case NotificationType.arrival:
        return Icons.flight_land;
      case NotificationType.session:
        return Icons.brush;
      case NotificationType.revenue:
        return Icons.euro;
      case NotificationType.departure:
        return Icons.flight_takeoff;
      case NotificationType.review:
        return Icons.star;
      case NotificationType.contract:
        return Icons.assignment;
    }
  }

  Color _getPriorityColor(NotificationPriority priority) {
    switch (priority) {
      case NotificationPriority.low:
        return Colors.grey;
      case NotificationPriority.normal:
        return Colors.blue;
      case NotificationPriority.high:
        return Colors.orange;
      case NotificationPriority.urgent:
        return Colors.red;
    }
  }

  String _getPriorityLabel(NotificationPriority priority) {
    switch (priority) {
      case NotificationPriority.low:
        return 'Faible';
      case NotificationPriority.normal:
        return 'Normal';
      case NotificationPriority.high:
        return 'Ã‰levÃ©';
      case NotificationPriority.urgent:
        return 'Urgent';
    }
  }

  IconData _getAttachmentIcon(String type) {
    switch (type.toLowerCase()) {
      case 'image':
        return Icons.image;
      case 'pdf':
        return Icons.picture_as_pdf;
      case 'document':
        return Icons.description;
      default:
        return Icons.attachment;
    }
  }

  String _formatTimeAgo(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    
    if (difference.inMinutes < 1) {
      return 'Ã€ l\'instant';
    } else if (difference.inHours < 1) {
      return 'Il y a ${difference.inMinutes}min';
    } else if (difference.inDays < 1) {
      return 'Il y a ${difference.inHours}h';
    } else if (difference.inDays < 7) {
      return 'Il y a ${difference.inDays}j';
    } else {
      return '${timestamp.day}/${timestamp.month}/${timestamp.year}';
    }
  }

  String _formatFullDate(DateTime timestamp) {
    const weekdays = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
    const months = ['Janvier', 'FÃ©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 
                   'Juillet', 'AoÃ»t', 'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'];
    
    final weekday = weekdays[timestamp.weekday - 1];
    final day = timestamp.day;
    final month = months[timestamp.month - 1];
    final year = timestamp.year;
    final hour = timestamp.hour.toString().padLeft(2, '0');
    final minute = timestamp.minute.toString().padLeft(2, '0');
    
    return '$weekday $day $month $year Ã  ${hour}h${minute}';
  }

  List<Map<String, dynamic>> _generateSampleNotifications() {
    final now = DateTime.now();
    
    return [
      {
        'id': '1',
        'type': NotificationType.arrival,
        'priority': NotificationPriority.high,
        'status': NotificationStatus.unread,
        'title': 'ArrivÃ©e de Guest confirmÃ©e',
        'content': 'Emma Chen arrivera dans votre studio demain Ã  14h pour son guest de 2 semaines. Assurez-vous que l\'espace de travail soit prÃªt.',
        'guestName': 'Emma Chen',
        'timestamp': now.subtract(const Duration(hours: 2)),
        'details': {
          'Date d\'arrivÃ©e': 'Demain 14h00',
          'DurÃ©e': '2 semaines',
          'Style': 'Japonais traditionnel',
          'Commission': '25%',
        },
        'actions': [
          {
            'id': 'accept_guest',
            'label': 'Confirmer',
            'icon': Icons.check,
            'color': Colors.green,
          },
          {
            'id': 'contact_guest',
            'label': 'Contacter',
            'icon': Icons.message,
            'color': Colors.blue,
          },
        ],
      },
      {
        'id': '2',
        'type': NotificationType.revenue,
        'priority': NotificationPriority.normal,
        'status': NotificationStatus.unread,
        'title': 'Nouveau revenu Guest',
        'content': 'Votre guest Lucas a rÃ©alisÃ© un tatouage de 350â‚¬. Votre commission: 70â‚¬ (20%).',
        'guestName': 'Lucas Dubois',
        'timestamp': now.subtract(const Duration(hours: 6)),
        'details': {
          'Montant tatouage': '350â‚¬',
          'Commission': '20%',
          'Votre part': '70â‚¬',
          'Client': 'Marie D.',
        },
        'actions': [
          {
            'id': 'view_revenue',
            'label': 'DÃ©tails',
            'icon': Icons.visibility,
            'color': Colors.orange,
          },
        ],
      },
      {
        'id': '3',
        'type': NotificationType.session,
        'priority': NotificationPriority.normal,
        'status': NotificationStatus.read,
        'title': 'Session Guest terminÃ©e',
        'content': 'Alex Martin a terminÃ© sa session de 6h. Excellent travail sur le portrait rÃ©aliste !',
        'guestName': 'Alex Martin',
        'timestamp': now.subtract(const Duration(days: 1)),
        'attachments': [
          {
            'type': 'image',
            'name': 'Tatouage_final.jpg',
            'size': '2.4 MB',
          },
        ],
      },
      {
        'id': '4',
        'type': NotificationType.contract,
        'priority': NotificationPriority.urgent,
        'status': NotificationStatus.unread,
        'title': 'Nouveau contrat Guest',
        'content': 'Sofia Rodriguez propose un guest dans votre studio pour AoÃ»t 2025. Conditions: 30% commission, hÃ©bergement requis.',
        'guestName': 'Sofia Rodriguez',
        'timestamp': now.subtract(const Duration(minutes: 30)),
        'details': {
          'PÃ©riode': 'AoÃ»t 2025',
          'DurÃ©e': '3 semaines',
          'Commission': '30%',
          'HÃ©bergement': 'Requis',
          'Style': 'RÃ©alisme couleur',
        },
        'actions': [
          {
            'id': 'accept_guest',
            'label': 'Accepter',
            'icon': Icons.check,
            'color': Colors.green,
          },
          {
            'id': 'decline_guest',
            'label': 'Refuser',
            'icon': Icons.close,
            'color': Colors.red,
          },
          {
            'id': 'view_portfolio',
            'label': 'Portfolio',
            'icon': Icons.photo_library,
            'color': Colors.purple,
          },
        ],
      },
      {
        'id': '5',
        'type': NotificationType.departure,
        'priority': NotificationPriority.normal,
        'status': NotificationStatus.read,
        'title': 'Guest terminÃ© avec succÃ¨s',
        'content': 'Le guest d\'Emma Chen s\'est terminÃ©. Revenus totaux: 2,400â‚¬. N\'oubliez pas de laisser un avis !',
        'guestName': 'Emma Chen',
        'timestamp': now.subtract(const Duration(days: 3)),
        'details': {
          'DurÃ©e totale': '2 semaines',
          'Tatouages rÃ©alisÃ©s': '8',
          'Revenus totaux': '2,400â‚¬',
          'Votre commission': '600â‚¬',
        },
        'actions': [
          {
            'id': 'rate_guest',
            'label': 'Noter',
            'icon': Icons.star,
            'color': Colors.amber,
          },
        ],
      },
    ];
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\guest_system\guest_proposal_page.dart

// lib/pages/pro/booking/guest_system/guest_proposal_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';
import 'guest_contract_page.dart';

enum ProposalMode { create, respond }
enum ProposalType { seekingShop, offeringGuest }

class GuestProposalPage extends StatefulWidget {
  final ProposalMode mode;
  final Map<String, dynamic>? targetOffer;
  
  const GuestProposalPage({
    Key? key,
    required this.mode,
    this.targetOffer,
  }) : super(key: key);

  @override
  State<GuestProposalPage> createState() => _GuestProposalPageState();
}

class _GuestProposalPageState extends State<GuestProposalPage> 
    with TickerProviderStateMixin {
  
  final _formKey = GlobalKey<FormState>();
  late AnimationController _slideController;
  late AnimationController _stepController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _stepAnimation;

  // ContrÃ´leurs de formulaire
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _messageController = TextEditingController();
  final TextEditingController _portfolioController = TextEditingController();

  // Ã‰tat du formulaire
  ProposalType _proposalType = ProposalType.seekingShop;
  DateTime? _startDate;
  DateTime? _endDate;
  List<String> _selectedStyles = [];
  String _selectedLocation = '';
  double _commissionRate = 20.0;
  bool _accommodationRequired = false;
  bool _accommodationOffered = false;
  String _experienceLevel = 'IntermÃ©diaire';
  List<String> _availability = [];
  bool _isFlexibleDates = false;
  int _currentStep = 0;
  bool _isLoading = false;

  final List<String> _tattooStyles = [
    'RÃ©alisme', 'Traditionnel', 'Neo-traditionnel', 'Japonais', 'Tribal',
    'Black & Grey', 'Couleur', 'Minimaliste', 'GÃ©omÃ©trique', 'BiomÃ©canique',
    'Portrait', 'Lettering', 'Dotwork', 'Watercolor', 'Old School'
  ];

  final List<String> _cities = [
    'Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nantes',
    'Bordeaux', 'Lille', 'Rennes', 'Strasbourg', 'Montpellier'
  ];

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeFromTarget();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _stepController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    _messageController.dispose();
    _portfolioController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _stepController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _stepAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _stepController, curve: Curves.easeOut),
    );

    _slideController.forward();
    _stepController.forward();
  }

  void _initializeFromTarget() {
    if (widget.targetOffer != null) {
      final offer = widget.targetOffer!;
      _selectedLocation = offer['location'].split(',')[0];
      _selectedStyles = List<String>.from(offer['styles']);
      _commissionRate = offer['commission'].toDouble();
      _accommodationOffered = offer['accommodation'] ?? false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: widget.mode == ProposalMode.create ? 'Nouvelle Proposition' : 'RÃ©pondre Ã  l\'offre',
        subtitle: 'Ã‰tape ${_currentStep + 1}/4',
        showBackButton: true,
        useProStyle: true,
        actions: [
          if (_isLoading)
            Container(
              margin: const EdgeInsets.only(right: 16),
              child: const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              ),
            ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Form(
      key: _formKey,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          children: [
            const SizedBox(height: 8),
            _buildProgressIndicator(),
            const SizedBox(height: 16),
            Expanded(
              child: PageView(
                controller: PageController(initialPage: _currentStep),
                onPageChanged: (index) {
                  setState(() {
                    _currentStep = index;
                  });
                  _stepController.reset();
                  _stepController.forward();
                },
                children: [
                  _buildStep1ProposalType(),
                  _buildStep2Details(),
                  _buildStep3Terms(),
                  _buildStep4Message(),
                ],
              ),
            ),
            _buildNavigationButtons(),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildProgressIndicator() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: List.generate(4, (index) {
          final isActive = index <= _currentStep;
          final isCurrent = index == _currentStep;
          
          return Expanded(
            child: Container(
              margin: EdgeInsets.only(right: index < 3 ? 8 : 0),
              child: Column(
                children: [
                  AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    height: 4,
                    decoration: BoxDecoration(
                      color: isActive ? KipikTheme.rouge : Colors.grey[300],
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _getStepTitle(index),
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 11,
                      fontWeight: isCurrent ? FontWeight.bold : FontWeight.w500,
                      color: isActive ? KipikTheme.rouge : Colors.grey,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
          );
        }),
      ),
    );
  }

  Widget _buildStep1ProposalType() {
    return FadeTransition(
      opacity: _stepAnimation,
      child: SingleChildScrollView(
        child: Column(
          children: [
            _buildStepCard(
              title: 'Type de proposition',
              icon: Icons.handshake,
              child: Column(
                children: [
                  // Info sur l'offre cible si mode rÃ©ponse
                  if (widget.mode == ProposalMode.respond && widget.targetOffer != null) ...[
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue.withOpacity(0.3)),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              const Icon(Icons.info_outline, color: Colors.blue, size: 20),
                              const SizedBox(width: 8),
                              const Text(
                                'Vous rÃ©pondez Ã  l\'offre de:',
                                style: TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 14,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.blue,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          Text(
                            '${widget.targetOffer!['name']} - ${widget.targetOffer!['location']}',
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 16,
                              color: Colors.black87,
                            ),
                          ),
                          Text(
                            widget.targetOffer!['description'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 13,
                              color: Colors.grey,
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 20),
                  ],

                  // SÃ©lection du type de proposition
                  const Text(
                    'Que proposez-vous ?',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  Column(
                    children: [
                      _buildProposalTypeCard(
                        ProposalType.seekingShop,
                        'Je cherche un shop',
                        'Je veux faire un guest dans un shop',
                        Icons.store,
                        Colors.blue,
                      ),
                      const SizedBox(height: 12),
                      _buildProposalTypeCard(
                        ProposalType.offeringGuest,
                        'J\'accueille un guest',
                        'Je propose mon shop pour accueillir',
                        Icons.person_add,
                        Colors.purple,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStep2Details() {
    return FadeTransition(
      opacity: _stepAnimation,
      child: SingleChildScrollView(
        child: Column(
          children: [
            _buildStepCard(
              title: 'DÃ©tails de la proposition',
              icon: Icons.info,
              child: Column(
                children: [
                  // Titre
                  TextFormField(
                    controller: _titleController,
                    validator: (value) => 
                        value == null || value.isEmpty ? 'Le titre est obligatoire' : null,
                    decoration: _buildInputDecoration(
                      labelText: 'Titre de votre proposition',
                      hintText: 'Ex: Guest rÃ©alisme disponible Ã©tÃ© 2025',
                      prefixIcon: Icons.title,
                    ),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Localisation
                  DropdownButtonFormField<String>(
                    value: _selectedLocation.isNotEmpty ? _selectedLocation : null,
                    validator: (value) => value == null ? 'SÃ©lectionnez une ville' : null,
                    decoration: _buildInputDecoration(
                      labelText: 'Ville',
                      prefixIcon: Icons.location_city,
                    ),
                    items: _cities.map((city) {
                      return DropdownMenuItem(
                        value: city,
                        child: Text(city),
                      );
                    }).toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedLocation = value!;
                      });
                    },
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Dates
                  Row(
                    children: [
                      Expanded(
                        child: GestureDetector(
                          onTap: _selectStartDate,
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.grey.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.withOpacity(0.3)),
                            ),
                            child: Row(
                              children: [
                                Icon(Icons.calendar_today, color: KipikTheme.rouge),
                                const SizedBox(width: 12),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      'Date dÃ©but',
                                      style: TextStyle(
                                        fontFamily: 'Roboto',
                                        fontSize: 12,
                                        color: Colors.grey,
                                      ),
                                    ),
                                    Text(
                                      _startDate != null 
                                          ? _formatDate(_startDate!)
                                          : 'SÃ©lectionner',
                                      style: const TextStyle(
                                        fontFamily: 'Roboto',
                                        fontSize: 14,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: GestureDetector(
                          onTap: _selectEndDate,
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.grey.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.withOpacity(0.3)),
                            ),
                            child: Row(
                              children: [
                                Icon(Icons.event, color: KipikTheme.rouge),
                                const SizedBox(width: 12),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      'Date fin',
                                      style: TextStyle(
                                        fontFamily: 'Roboto',
                                        fontSize: 12,
                                        color: Colors.grey,
                                      ),
                                    ),
                                    Text(
                                      _endDate != null 
                                          ? _formatDate(_endDate!)
                                          : 'SÃ©lectionner',
                                      style: const TextStyle(
                                        fontFamily: 'Roboto',
                                        fontSize: 14,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Dates flexibles
                  CheckboxListTile(
                    title: const Text(
                      'Dates flexibles',
                      style: TextStyle(fontFamily: 'Roboto'),
                    ),
                    subtitle: const Text(
                      'Je peux m\'adapter selon les disponibilitÃ©s',
                      style: TextStyle(fontSize: 12, color: Colors.grey),
                    ),
                    value: _isFlexibleDates,
                    activeColor: KipikTheme.rouge,
                    onChanged: (value) {
                      setState(() {
                        _isFlexibleDates = value ?? false;
                      });
                    },
                    controlAffinity: ListTileControlAffinity.leading,
                    contentPadding: EdgeInsets.zero,
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Styles
                  const Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      'Styles de tatouage',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  
                  Wrap(
                    spacing: 8,
                    runSpacing: 8,
                    children: _tattooStyles.map((style) {
                      final isSelected = _selectedStyles.contains(style);
                      return GestureDetector(
                        onTap: () {
                          setState(() {
                            if (isSelected) {
                              _selectedStyles.remove(style);
                            } else {
                              _selectedStyles.add(style);
                            }
                          });
                        },
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          decoration: BoxDecoration(
                            color: isSelected ? KipikTheme.rouge : Colors.grey.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: isSelected ? KipikTheme.rouge : Colors.grey.withOpacity(0.3),
                            ),
                          ),
                          child: Text(
                            style,
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: isSelected ? Colors.white : Colors.black87,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStep3Terms() {
    return FadeTransition(
      opacity: _stepAnimation,
      child: SingleChildScrollView(
        child: Column(
          children: [
            _buildStepCard(
              title: 'Conditions financiÃ¨res',
              icon: Icons.euro,
              child: Column(
                children: [
                  // Commission
                  const Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      'Commission proposÃ©e',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  
                  Row(
                    children: [
                      Expanded(
                        child: Slider(
                          value: _commissionRate,
                          min: 10,
                          max: 50,
                          divisions: 8,
                          activeColor: KipikTheme.rouge,
                          label: '${_commissionRate.toInt()}%',
                          onChanged: (value) {
                            setState(() {
                              _commissionRate = value;
                            });
                          },
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          color: KipikTheme.rouge.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          '${_commissionRate.toInt()}%',
                          style: TextStyle(
                            fontFamily: 'PermanentMarker',
                            fontSize: 16,
                            color: KipikTheme.rouge,
                          ),
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // HÃ©bergement
                  if (_proposalType == ProposalType.seekingShop) ...[
                    CheckboxListTile(
                      title: const Text(
                        'HÃ©bergement souhaitÃ©',
                        style: TextStyle(fontFamily: 'Roboto'),
                      ),
                      subtitle: const Text(
                        'Je recherche un hÃ©bergement pendant mon guest',
                        style: TextStyle(fontSize: 12, color: Colors.grey),
                      ),
                      value: _accommodationRequired,
                      activeColor: KipikTheme.rouge,
                      onChanged: (value) {
                        setState(() {
                          _accommodationRequired = value ?? false;
                        });
                      },
                      controlAffinity: ListTileControlAffinity.leading,
                      contentPadding: EdgeInsets.zero,
                    ),
                  ] else ...[
                    CheckboxListTile(
                      title: const Text(
                        'HÃ©bergement offert',
                        style: TextStyle(fontFamily: 'Roboto'),
                      ),
                      subtitle: const Text(
                        'Je peux fournir un hÃ©bergement au guest',
                        style: TextStyle(fontSize: 12, color: Colors.grey),
                      ),
                      value: _accommodationOffered,
                      activeColor: KipikTheme.rouge,
                      onChanged: (value) {
                        setState(() {
                          _accommodationOffered = value ?? false;
                        });
                      },
                      controlAffinity: ListTileControlAffinity.leading,
                      contentPadding: EdgeInsets.zero,
                    ),
                  ],
                  
                  const SizedBox(height: 16),
                  
                  // Niveau d'expÃ©rience
                  DropdownButtonFormField<String>(
                    value: _experienceLevel,
                    decoration: _buildInputDecoration(
                      labelText: 'Niveau d\'expÃ©rience',
                      prefixIcon: Icons.star,
                    ),
                    items: const [
                      DropdownMenuItem(value: 'DÃ©butant', child: Text('DÃ©butant (< 2 ans)')),
                      DropdownMenuItem(value: 'IntermÃ©diaire', child: Text('IntermÃ©diaire (2-5 ans)')),
                      DropdownMenuItem(value: 'ConfirmÃ©', child: Text('ConfirmÃ© (5-10 ans)')),
                      DropdownMenuItem(value: 'Expert', child: Text('Expert (> 10 ans)')),
                    ],
                    onChanged: (value) {
                      setState(() {
                        _experienceLevel = value!;
                      });
                    },
                  ),
                  
                  const SizedBox(height: 20),
                  
                  // RÃ©capitulatif
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.green.withOpacity(0.3)),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            Icon(Icons.summarize, color: Colors.green, size: 20),
                            SizedBox(width: 8),
                            Text(
                              'RÃ©capitulatif',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 12),
                        
                        _buildSummaryRow('Commission', '${_commissionRate.toInt()}%'),
                        _buildSummaryRow('HÃ©bergement', 
                          _proposalType == ProposalType.seekingShop 
                              ? (_accommodationRequired ? 'DemandÃ©' : 'Non nÃ©cessaire')
                              : (_accommodationOffered ? 'Offert' : 'Non offert')),
                        _buildSummaryRow('ExpÃ©rience', _experienceLevel),
                        if (_startDate != null && _endDate != null)
                          _buildSummaryRow('DurÃ©e', 
                            '${_endDate!.difference(_startDate!).inDays} jours'),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStep4Message() {
    return FadeTransition(
      opacity: _stepAnimation,
      child: SingleChildScrollView(
        child: Column(
          children: [
            _buildStepCard(
              title: 'Message personnel',
              icon: Icons.message,
              child: Column(
                children: [
                  // Description gÃ©nÃ©rale
                  TextFormField(
                    controller: _descriptionController,
                    maxLines: 4,
                    validator: (value) => 
                        value == null || value.isEmpty ? 'La description est obligatoire' : null,
                    decoration: _buildInputDecoration(
                      labelText: 'Description de votre proposition',
                      hintText: 'PrÃ©sentez votre projet, vos attentes...',
                      prefixIcon: Icons.description,
                    ),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Message personnalisÃ©
                  TextFormField(
                    controller: _messageController,
                    maxLines: 5,
                    decoration: _buildInputDecoration(
                      labelText: 'Message personnel (optionnel)',
                      hintText: 'Pourquoi cette collaboration vous intÃ©resse...',
                      prefixIcon: Icons.chat_bubble_outline,
                    ),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Portfolio/rÃ©fÃ©rences
                  TextFormField(
                    controller: _portfolioController,
                    decoration: _buildInputDecoration(
                      labelText: 'Liens portfolio/Instagram',
                      hintText: 'https://instagram.com/votre_compte',
                      prefixIcon: Icons.link,
                    ),
                  ),
                  
                  const SizedBox(height: 20),
                  
                  // Options d'envoi
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.blue.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.blue.withOpacity(0.3)),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            Icon(Icons.send, color: Colors.blue, size: 20),
                            SizedBox(width: 8),
                            Text(
                              'Options d\'envoi',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: Colors.blue,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 12),
                        
                        CheckboxListTile(
                          title: const Text(
                            'Proposer un appel vidÃ©o',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                            ),
                          ),
                          value: true,
                          dense: true,
                          activeColor: KipikTheme.rouge,
                          onChanged: (value) {},
                          controlAffinity: ListTileControlAffinity.leading,
                          contentPadding: EdgeInsets.zero,
                        ),
                        
                        CheckboxListTile(
                          title: const Text(
                            'Notification de lecture',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                            ),
                          ),
                          value: true,
                          dense: true,
                          activeColor: KipikTheme.rouge,
                          onChanged: (value) {},
                          controlAffinity: ListTileControlAffinity.leading,
                          contentPadding: EdgeInsets.zero,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNavigationButtons() {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 16),
      child: Row(
        children: [
          if (_currentStep > 0) ...[
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _previousStep,
                icon: const Icon(Icons.arrow_back, size: 18),
                label: const Text(
                  'PrÃ©cÃ©dent',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w500,
                  ),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey[600],
                  side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
            const SizedBox(width: 16),
          ],
          
          Expanded(
            flex: _currentStep > 0 ? 1 : 2,
            child: ElevatedButton.icon(
              onPressed: _isLoading ? null : 
                  (_currentStep < 3 ? _nextStep : _submitProposal),
              icon: _isLoading 
                  ? const SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2,
                      ),
                    )
                  : Icon(
                      _currentStep < 3 ? Icons.arrow_forward : Icons.send,
                      size: 18,
                    ),
              label: Text(
                _isLoading ? 'Envoi...' : 
                    (_currentStep < 3 ? 'Suivant' : 'Envoyer proposition'),
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontWeight: FontWeight.w600,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStepCard({
    required String title,
    required IconData icon,
    required Widget child,
  }) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              Text(
                title,
                style: const TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          child,
        ],
      ),
    );
  }

  Widget _buildProposalTypeCard(
    ProposalType type,
    String title,
    String subtitle,
    IconData icon,
    Color color,
  ) {
    final isSelected = _proposalType == type;
    
    return GestureDetector(
      onTap: () {
        setState(() {
          _proposalType = type;
        });
        HapticFeedback.lightImpact();
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: isSelected ? LinearGradient(
            colors: [color.withOpacity(0.8), color.withOpacity(0.6)],
          ) : null,
          color: isSelected ? null : Colors.grey.withOpacity(0.1),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: isSelected ? color : Colors.grey.withOpacity(0.3),
            width: isSelected ? 2 : 1,
          ),
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: isSelected ? Colors.white.withOpacity(0.2) : color.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                icon,
                color: isSelected ? Colors.white : color,
                size: 24,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                      color: isSelected ? Colors.white : Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    subtitle,
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 13,
                      color: isSelected ? Colors.white70 : Colors.grey,
                    ),
                  ),
                ],
              ),
            ),
            if (isSelected)
              const Icon(
                Icons.check_circle,
                color: Colors.white,
                size: 24,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildSummaryRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            '$label:',
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 13,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 13,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }

  InputDecoration _buildInputDecoration({
    required String labelText,
    String? hintText,
    IconData? prefixIcon,
  }) {
    return InputDecoration(
      labelText: labelText,
      hintText: hintText,
      labelStyle: TextStyle(
        fontFamily: 'Roboto',
        color: Colors.grey[600],
      ),
      hintStyle: const TextStyle(
        fontFamily: 'Roboto',
        color: Colors.grey,
      ),
      prefixIcon: prefixIcon != null 
          ? Icon(prefixIcon, color: KipikTheme.rouge) 
          : null,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey.withOpacity(0.3)),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: KipikTheme.rouge),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: const BorderSide(color: Colors.red),
      ),
      filled: true,
      fillColor: Colors.grey.withOpacity(0.05),
    );
  }

  // Actions
  void _nextStep() {
    if (_currentStep < 3) {
      // Validation par Ã©tape
      bool canProceed = true;
      
      switch (_currentStep) {
        case 0:
          // Pas de validation spÃ©ciale pour l'Ã©tape 1
          break;
        case 1:
          canProceed = _titleController.text.isNotEmpty && 
                      _selectedLocation.isNotEmpty &&
                      _selectedStyles.isNotEmpty;
          break;
        case 2:
          // Validation des conditions dÃ©jÃ  faite
          break;
        case 3:
          canProceed = _descriptionController.text.isNotEmpty;
          break;
      }
      
      if (canProceed) {
        setState(() {
          _currentStep++;
        });
        _stepController.reset();
        _stepController.forward();
      } else {
        _showValidationError();
      }
    }
  }

  void _previousStep() {
    if (_currentStep > 0) {
      setState(() {
        _currentStep--;
      });
      _stepController.reset();
      _stepController.forward();
    }
  }

  void _submitProposal() async {
    if (!_formKey.currentState!.validate()) {
      _showValidationError();
      return;
    }
    
    setState(() => _isLoading = true);
    
    HapticFeedback.mediumImpact();
    
    try {
      // Simulation d'envoi
      await Future.delayed(const Duration(seconds: 2));
      
      if (mounted) {
        _showSuccessDialog();
      }
      
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de l\'envoi: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _showValidationError() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Veuillez remplir tous les champs obligatoires'),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: const BoxDecoration(
                color: Colors.green,
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: Colors.white,
                size: 40,
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'Proposition envoyÃ©e !',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Votre proposition a Ã©tÃ© envoyÃ©e. Vous recevrez une notification dÃ¨s que la personne aura rÃ©pondu.',
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 20),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () {
                      Navigator.pop(context); // Fermer dialog
                      Navigator.pop(context); // Retourner Ã  marketplace
                    },
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.grey[600],
                      side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                    ),
                    child: const Text(
                      'Retour',
                      style: TextStyle(fontFamily: 'Roboto'),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context); // Fermer dialog
                      Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const GuestContractPage(),
                        ),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                    ),
                    child: const Text(
                      'Voir contrats',
                      style: TextStyle(fontFamily: 'Roboto'),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _selectStartDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate ?? DateTime.now().add(const Duration(days: 7)),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _startDate = picked;
        // Ajuster la date de fin si nÃ©cessaire
        if (_endDate != null && _endDate!.isBefore(picked)) {
          _endDate = picked.add(const Duration(days: 7));
        }
      });
    }
  }

  void _selectEndDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _endDate ?? 
          (_startDate?.add(const Duration(days: 7)) ?? DateTime.now().add(const Duration(days: 14))),
      firstDate: _startDate ?? DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _endDate = picked;
      });
    }
  }

  // Helper methods
  String _getStepTitle(int step) {
    switch (step) {
      case 0:
        return 'Type';
      case 1:
        return 'DÃ©tails';
      case 2:
        return 'Conditions';
      case 3:
        return 'Message';
      default:
        return '';
    }
  }

  String _formatDate(DateTime date) {
    const months = ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun', 
                   'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'];
    
    return '${date.day} ${months[date.month - 1]}';
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\booking\guest_system\guest_tracking_page.dart

// lib/pages/pro/booking/guest_system/guest_tracking_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';

enum TrackingPeriod { today, week, month, total }
enum RevenueType { commission, tip, bonus }

class GuestTrackingPage extends StatefulWidget {
  final Map<String, dynamic>? activeGuest;
  
  const GuestTrackingPage({
    Key? key,
    this.activeGuest,
  }) : super(key: key);

  @override
  State<GuestTrackingPage> createState() => _GuestTrackingPageState();
}

class _GuestTrackingPageState extends State<GuestTrackingPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _chartController;
  late AnimationController _revenueController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _chartAnimation;
  late Animation<double> _revenueAnimation;

  TrackingPeriod _selectedPeriod = TrackingPeriod.week;
  bool _isLoading = false;
  
  Map<String, dynamic> _trackingData = {};
  List<Map<String, dynamic>> _recentSessions = [];
  List<Map<String, dynamic>> _revenueHistory = [];

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadTrackingData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _chartController.dispose();
    _revenueController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _chartController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    
    _revenueController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _chartAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _chartController, curve: Curves.elasticOut),
    );
    
    _revenueAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _revenueController, curve: Curves.easeOutBack),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 400), () {
      _chartController.forward();
    });
    Future.delayed(const Duration(milliseconds: 600), () {
      _revenueController.forward();
    });
  }

  void _loadTrackingData() {
    setState(() => _isLoading = true);
    
    // Simulation de chargement des donnÃ©es de suivi
    Future.delayed(const Duration(seconds: 1), () {
      setState(() {
        _trackingData = _generateTrackingData();
        _recentSessions = _generateRecentSessions();
        _revenueHistory = _generateRevenueHistory();
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Suivi Guest',
        subtitle: 'RÃ©alisations & Revenus',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: _refreshData,
          ),
          IconButton(
            icon: const Icon(Icons.download, color: Colors.white),
            onPressed: _exportData,
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          if (widget.activeGuest != null) ...[
            _buildActiveGuestHeader(),
            const SizedBox(height: 16),
          ],
          _buildPeriodSelector(),
          const SizedBox(height: 16),
          Expanded(
            child: _isLoading ? _buildLoadingState() : _buildTrackingContent(),
          ),
        ],
      ),
    );
  }

  Widget _buildActiveGuestHeader() {
    final guest = widget.activeGuest!;
    
    return AnimatedBuilder(
      animation: _revenueAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _revenueAnimation.value,
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.purple.withOpacity(0.8),
                  Colors.blue.withOpacity(0.8),
                ],
              ),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Row(
              children: [
                CircleAvatar(
                  radius: 25,
                  backgroundImage: guest['avatar'] != null
                      ? AssetImage(guest['avatar'])
                      : null,
                  backgroundColor: Colors.white.withOpacity(0.2),
                  child: guest['avatar'] == null
                      ? const Icon(Icons.person, color: Colors.white)
                      : null,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        guest['name'],
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Colors.white,
                        ),
                      ),
                      Text(
                        'Guest actif â€¢ ${guest['daysRemaining']} jours restants',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.white70,
                        ),
                      ),
                      Row(
                        children: [
                          const Icon(Icons.location_on, color: Colors.white70, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            guest['location'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    'ACTIF',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildPeriodSelector() {
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: TrackingPeriod.values.map((period) {
          final isSelected = _selectedPeriod == period;
          return Expanded(
            child: GestureDetector(
              onTap: () {
                setState(() {
                  _selectedPeriod = period;
                  _loadTrackingData();
                });
                HapticFeedback.lightImpact();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  gradient: isSelected ? LinearGradient(
                    colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                  ) : null,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  _getPeriodLabel(period),
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: isSelected ? Colors.white : Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Chargement des donnÃ©es...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTrackingContent() {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildRevenueOverview(),
          const SizedBox(height: 16),
          _buildPerformanceMetrics(),
          const SizedBox(height: 16),
          _buildRevenueChart(),
          const SizedBox(height: 16),
          _buildRecentSessions(),
          const SizedBox(height: 16),
          _buildDetailedBreakdown(),
          const SizedBox(height: 20),
        ],
      ),
    );
  }

  Widget _buildRevenueOverview() {
    final data = _trackingData['revenue'] ?? {};
    
    return AnimatedBuilder(
      animation: _revenueAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _revenueAnimation.value,
          child: Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.green.withOpacity(0.8),
                  Colors.teal.withOpacity(0.8),
                ],
              ),
              borderRadius: BorderRadius.circular(20),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.euro, color: Colors.white, size: 24),
                    const SizedBox(width: 12),
                    Text(
                      'Revenus ${_getPeriodLabel(_selectedPeriod).toLowerCase()}',
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 18,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 20),
                
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    _buildRevenueItem(
                      'Commission',
                      '${data['commission'] ?? 0}â‚¬',
                      Icons.percent,
                      Colors.white,
                    ),
                    _buildRevenueItem(
                      'Pourboires',
                      '${data['tips'] ?? 0}â‚¬',
                      Icons.volunteer_activism,
                      Colors.white70,
                    ),
                    _buildRevenueItem(
                      'Total',
                      '${data['total'] ?? 0}â‚¬',
                      Icons.account_balance_wallet,
                      Colors.white,
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildRevenueItem(String label, String value, IconData icon, Color color) {
    return Column(
      children: [
        Icon(icon, color: color, size: 20),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 18,
            color: color,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: color.withOpacity(0.8),
          ),
        ),
      ],
    );
  }

  Widget _buildPerformanceMetrics() {
    final metrics = _trackingData['metrics'] ?? {};
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.analytics, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'MÃ©triques de performance',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 20),
          
          Row(
            children: [
              Expanded(
                child: _buildMetricCard(
                  'Tatouages',
                  '${metrics['tattoos'] ?? 0}',
                  Icons.brush,
                  Colors.blue,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildMetricCard(
                  'Heures',
                  '${metrics['hours'] ?? 0}h',
                  Icons.schedule,
                  Colors.orange,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          Row(
            children: [
              Expanded(
                child: _buildMetricCard(
                  'Clients',
                  '${metrics['clients'] ?? 0}',
                  Icons.people,
                  Colors.purple,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildMetricCard(
                  'Moyenne/RDV',
                  '${metrics['avgPerSession'] ?? 0}â‚¬',
                  Icons.trending_up,
                  Colors.green,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMetricCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: color,
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRevenueChart() {
    return AnimatedBuilder(
      animation: _chartAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _chartAnimation.value,
          child: Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.show_chart, color: KipikTheme.rouge, size: 24),
                    const SizedBox(width: 12),
                    const Text(
                      'Ã‰volution des revenus',
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 18,
                        color: Colors.black87,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 20),
                
                // Graphique simplifiÃ©
                SizedBox(
                  height: 150,
                  child: _buildSimpleChart(),
                ),
                
                const SizedBox(height: 16),
                
                // LÃ©gende
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    _buildChartLegend('Commission', Colors.blue),
                    _buildChartLegend('Pourboires', Colors.orange),
                    _buildChartLegend('Total', Colors.green),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildSimpleChart() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.trending_up, size: 40, color: Colors.grey),
            SizedBox(height: 8),
            Text(
              'Graphique des revenus',
              style: TextStyle(
                fontFamily: 'Roboto',
                color: Colors.grey,
              ),
            ),
            Text(
              'IntÃ©gration en cours...',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildChartLegend(String label, Color color) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
          ),
        ),
        const SizedBox(width: 6),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildRecentSessions() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.history, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'Sessions rÃ©centes',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          ..._recentSessions.take(5).map((session) => _buildSessionCard(session)),
          
          if (_recentSessions.length > 5) ...[
            const SizedBox(height: 12),
            Center(
              child: TextButton(
                onPressed: _viewAllSessions,
                child: Text(
                  'Voir toutes les sessions (${_recentSessions.length})',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    color: KipikTheme.rouge,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildSessionCard(Map<String, dynamic> session) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.withOpacity(0.2)),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              Icons.brush,
              color: Colors.blue,
              size: 16,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  session['title'],
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  '${session['client']} â€¢ ${session['duration']}',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(
                '${session['amount']}â‚¬',
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Colors.green,
                ),
              ),
              Text(
                session['date'],
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 11,
                  color: Colors.grey,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildDetailedBreakdown() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.receipt_long, color: KipikTheme.rouge, size: 24),
              const SizedBox(width: 12),
              const Text(
                'DÃ©tail des revenus',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          ..._revenueHistory.map((item) => _buildRevenueItem2(item)),
          
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: OutlinedButton.icon(
                  onPressed: _exportRevenue,
                  icon: const Icon(Icons.file_download, size: 16),
                  label: const Text(
                    'Exporter',
                    style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                  ),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.grey[600],
                    side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _viewDetailedReport,
                  icon: const Icon(Icons.analytics, size: 16),
                  label: const Text(
                    'Rapport',
                    style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: KipikTheme.rouge,
                    foregroundColor: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildRevenueItem2(Map<String, dynamic> item) {
    final type = item['type'] as RevenueType;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: _getRevenueTypeColor(type).withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: _getRevenueTypeColor(type).withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(
            _getRevenueTypeIcon(type),
            color: _getRevenueTypeColor(type),
            size: 16,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  item['description'],
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                Text(
                  '${item['client']} â€¢ ${item['date']}',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ),
          Text(
            '+${item['amount']}â‚¬',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: _getRevenueTypeColor(type),
            ),
          ),
        ],
      ),
    );
  }

  // Actions
  void _refreshData() {
    _loadTrackingData();
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('DonnÃ©es actualisÃ©es'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _exportData() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Export en cours...'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewAllSessions() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Ouverture de toutes les sessions - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _exportRevenue() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Export des revenus en cours...'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewDetailedReport() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('GÃ©nÃ©ration du rapport dÃ©taillÃ©...'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // Helper methods
  String _getPeriodLabel(TrackingPeriod period) {
    switch (period) {
      case TrackingPeriod.today:
        return 'Aujourd\'hui';
      case TrackingPeriod.week:
        return 'Cette semaine';
      case TrackingPeriod.month:
        return 'Ce mois';
      case TrackingPeriod.total:
        return 'Total';
    }
  }

  Color _getRevenueTypeColor(RevenueType type) {
    switch (type) {
      case RevenueType.commission:
        return Colors.blue;
      case RevenueType.tip:
        return Colors.orange;
      case RevenueType.bonus:
        return Colors.purple;
    }
  }

  IconData _getRevenueTypeIcon(RevenueType type) {
    switch (type) {
      case RevenueType.commission:
        return Icons.percent;
      case RevenueType.tip:
        return Icons.volunteer_activism;
      case RevenueType.bonus:
        return Icons.star;
    }
  }

  Map<String, dynamic> _generateTrackingData() {
    return {
      'revenue': {
        'commission': 850,
        'tips': 120,
        'total': 970,
      },
      'metrics': {
        'tattoos': 6,
        'hours': 28,
        'clients': 5,
        'avgPerSession': 162,
      },
    };
  }

  List<Map<String, dynamic>> _generateRecentSessions() {
    return [
      {
        'title': 'Portrait rÃ©aliste',
        'client': 'Sarah M.',
        'duration': '4h',
        'amount': 280,
        'date': 'Aujourd\'hui',
      },
      {
        'title': 'Tatouage gÃ©omÃ©trique',
        'client': 'Lucas P.',
        'duration': '3h',
        'amount': 200,
        'date': 'Hier',
      },
      {
        'title': 'Lettering custom',
        'client': 'Emma R.',
        'duration': '2h',
        'amount': 150,
        'date': 'Il y a 2 jours',
      },
      {
        'title': 'Retouche couleur',
        'client': 'Marie D.',
        'duration': '1h30',
        'amount': 80,
        'date': 'Il y a 3 jours',
      },
      {
        'title': 'Mandala dÃ©taillÃ©',
        'client': 'Alex C.',
        'duration': '5h',
        'amount': 350,
        'date': 'Il y a 4 jours',
      },
    ];
  }

  List<Map<String, dynamic>> _generateRevenueHistory() {
    return [
      {
        'type': RevenueType.commission,
        'description': 'Commission portrait Sarah M.',
        'client': 'Sarah M.',
        'amount': 56,
        'date': 'Aujourd\'hui',
      },
      {
        'type': RevenueType.tip,
        'description': 'Pourboire client Lucas P.',
        'client': 'Lucas P.',
        'amount': 30,
        'date': 'Hier',
      },
      {
        'type': RevenueType.commission,
        'description': 'Commission lettering Emma R.',
        'client': 'Emma R.',
        'amount': 30,
        'date': 'Il y a 2 jours',
      },
      {
        'type': RevenueType.bonus,
        'description': 'Bonus qualitÃ© mandala',
        'client': 'Alex C.',
        'amount': 50,
        'date': 'Il y a 4 jours',
      },
    ];
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\comptabilite\comptabilite_page.dart

// lib/pages/pro/comptabilite_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/custom_drawer_kipik.dart';
import 'package:kipik_v5/pages/pro/home_page_pro.dart';

class ComptabilitePage extends StatelessWidget {
  const ComptabilitePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // TODO : Remplacer par des donnÃ©es dynamiques issus du service de facturation

    // DonnÃ©es mock
    final double paiementsRecus = 12500.75;
    final double paiementsEnAttente = 3200.50;
    final double totalFactureMois = 15701.25;
    final List<Map<String, dynamic>> transactions = [
      { 'date': '01/05/2025', 'client': 'Sophie Durand', 'montant': 250.00, 'statut': 'ReÃ§u' },
      { 'date': '03/05/2025', 'client': 'Thomas Lemoine', 'montant': 450.00, 'statut': 'En attente' },
      { 'date': '07/05/2025', 'client': 'Emma Martin', 'montant': 120.00, 'statut': 'ReÃ§u' },
      // ...
    ];

    return Scaffold(
      appBar: CustomAppBarKipik(
        title: 'ComptabilitÃ©',
        showBurger: false,
        showBackButton: true,
        showNotificationIcon: true,
        onBackPressed: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => const HomePagePro()),
          );
        },
      ),
      drawer: const CustomDrawerKipik(),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Cartes de synthÃ¨se
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                _SummaryCard(
                  label: 'Paiements reÃ§us',
                  value: paiementsRecus,
                  color: Colors.greenAccent,
                ),
                _SummaryCard(
                  label: 'En attente',
                  value: paiementsEnAttente,
                  color: Colors.orangeAccent,
                ),
                _SummaryCard(
                  label: 'Total facturÃ© mois',
                  value: totalFactureMois,
                  color: Colors.blueAccent,
                ),
              ],
            ),
            const SizedBox(height: 24),
            const Text(
              'Transactions rÃ©centes',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Expanded(
              child: ListView.builder(
                itemCount: transactions.length,
                itemBuilder: (context, index) {
                  final tx = transactions[index];
                  return Card(
                    margin: const EdgeInsets.symmetric(vertical: 6),
                    child: ListTile(
                      leading: Text(tx['date'], style: const TextStyle(fontSize: 14)),
                      title: Text(tx['client']),
                      subtitle: Text('${tx['statut']}'),
                      trailing: Text(
                        '${tx['montant'].toStringAsFixed(2)} â‚¬',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: tx['statut'] == 'ReÃ§u' ? Colors.green : Colors.orange,
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// Carte de synthÃ¨se pour les totaux
class _SummaryCard extends StatelessWidget {
  final String label;
  final double value;
  final Color color;

  const _SummaryCard({
    required this.label,
    required this.value,
    required this.color,
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      color: color.withOpacity(0.2),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: SizedBox(
        width: MediaQuery.of(context).size.width / 3 - 24,
        height: 100,
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                label,
                style: TextStyle(
                  color: color.darken(),
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                '${value.toStringAsFixed(2)} â‚¬',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: color.darken(),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Extension pour assombrir la couleur
extension ColorUtils on Color {
  Color darken([double amount = .2]) {
    assert(amount >= 0 && amount <= 1);
    final hsl = HSLColor.fromColor(this);
    final hslDark = hsl.withLightness((hsl.lightness - amount).clamp(0.0, 1.0));
    return hslDark.toColor();
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\analytics_flashs_page.dart

// lib/pages/pro/flashs/analytics_flashs_page.dart

import 'package:flutter/material.dart';
import 'dart:math';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';

class AnalyticsFlashsPage extends StatefulWidget {
  const AnalyticsFlashsPage({Key? key}) : super(key: key);

  @override
  State<AnalyticsFlashsPage> createState() => _AnalyticsFlashsPageState();
}

class _AnalyticsFlashsPageState extends State<AnalyticsFlashsPage> with TickerProviderStateMixin {
  late TabController _tabController;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late AnimationController _barAnimationController;
  late Animation<double> _barAnimation;
  
  bool _isLoading = true;
  String _selectedPeriod = '30J';
  
  // DonnÃ©es analytics
  Map<String, dynamic> _analyticsData = {};
  List<Map<String, dynamic>> _topFlashs = [];
  List<Map<String, dynamic>> _revenueData = [];
  Map<String, int> _stylePerformance = {};

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _barAnimationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _barAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _barAnimationController, curve: Curves.elasticOut),
    );
    
    _loadAnalytics();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _animationController.dispose();
    _barAnimationController.dispose();
    super.dispose();
  }

  Future<void> _loadAnalytics() async {
    setState(() => _isLoading = true);
    
    try {
      // Simuler le chargement des donnÃ©es
      await Future.delayed(const Duration(seconds: 2));
      
      _generateAnalyticsData();
      _animationController.forward();
      _barAnimationController.forward();
      
    } catch (e) {
      print('âŒ Erreur chargement analytics: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _generateAnalyticsData() {
    final random = Random();
    
    // DonnÃ©es gÃ©nÃ©rales
    _analyticsData = {
      'totalFlashs': 24,
      'activeFlashs': 18,
      'flashMinuteCount': 6,
      'totalViews': 1247,
      'totalLikes': 189,
      'totalSaves': 76,
      'conversionRate': 12.3,
      'averagePrice': 185.50,
      'totalRevenue': 3780.0,
      'flashMinuteRevenue': 1240.0,
      'topViewsIncrease': 23.4,
      'likesIncrease': 18.9,
      'revenueIncrease': 31.2,
    };
    
    // Top flashs
    _topFlashs = [
      {
        'title': 'Rose Minimaliste',
        'views': 156,
        'likes': 23,
        'revenue': 450.0,
        'conversionRate': 18.5,
        'style': 'Minimaliste',
        'trend': 'up',
      },
      {
        'title': 'Lion GÃ©omÃ©trique',
        'views': 134,
        'likes': 19,
        'revenue': 420.0,
        'conversionRate': 15.2,
        'style': 'GÃ©omÃ©trique',
        'trend': 'up',
      },
      {
        'title': 'Mandala Lotus',
        'views': 98,
        'likes': 15,
        'revenue': 380.0,
        'conversionRate': 12.8,
        'style': 'Mandala',
        'trend': 'down',
      },
      {
        'title': 'Papillon Aquarelle',
        'views': 87,
        'likes': 12,
        'revenue': 320.0,
        'conversionRate': 10.1,
        'style': 'Aquarelle',
        'trend': 'stable',
      },
    ];
    
    // DonnÃ©es de revenus sur 30 jours
    _revenueData = List.generate(30, (index) {
      return {
        'day': index + 1,
        'revenue': 50 + random.nextInt(300).toDouble(),
        'flashMinute': random.nextInt(150).toDouble(),
      };
    });
    
    // Performance par style
    _stylePerformance = {
      'Minimaliste': 28,
      'GÃ©omÃ©trique': 22,
      'RÃ©alisme': 18,
      'Mandala': 15,
      'Aquarelle': 10,
      'Autres': 7,
    };
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Analytics Flashs',
        subtitle: 'Performance et insights',
        showBackButton: true,
        useProStyle: true,
        actions: [
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert, color: Colors.white),
            color: const Color(0xFF1A1A1A),
            onSelected: _handleMenuAction,
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'export',
                child: Row(
                  children: [
                    Icon(Icons.download, color: Colors.blue),
                    SizedBox(width: 8),
                    Text('Exporter rapport', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'settings',
                child: Row(
                  children: [
                    Icon(Icons.settings, color: Colors.grey),
                    SizedBox(width: 8),
                    Text('ParamÃ¨tres', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
    );
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Calcul des analytics...',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Column(
        children: [
          _buildPeriodSelector(),
          _buildOverviewCards(),
          _buildTabSection(),
        ],
      ),
    );
  }

  Widget _buildPeriodSelector() {
    final periods = ['7J', '30J', '90J', '1A'];
    
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: periods.map((period) {
          final isSelected = period == _selectedPeriod;
          return Expanded(
            child: GestureDetector(
              onTap: () => setState(() => _selectedPeriod = period),
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  color: isSelected ? KipikTheme.rouge : Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  period,
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.grey,
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildOverviewCards() {
    return Container(
      height: 120,
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: ListView(
        scrollDirection: Axis.horizontal,
        children: [
          _buildMetricCard(
            'Revenus Total',
            '${_analyticsData['totalRevenue'].toStringAsFixed(0)}â‚¬',
            Icons.euro,
            Colors.green,
            '+${_analyticsData['revenueIncrease']}%',
            0,
          ),
          _buildMetricCard(
            'Vues Total',
            '${_analyticsData['totalViews']}',
            Icons.visibility,
            Colors.blue,
            '+${_analyticsData['topViewsIncrease']}%',
            1,
          ),
          _buildMetricCard(
            'Taux Conversion',
            '${_analyticsData['conversionRate']}%',
            Icons.trending_up,
            Colors.orange,
            '+2.1%',
            2,
          ),
          _buildMetricCard(
            'Flash Minute',
            '${_analyticsData['flashMinuteRevenue'].toStringAsFixed(0)}â‚¬',
            Icons.flash_on,
            Colors.purple,
            '+45.8%',
            3,
          ),
        ],
      ),
    );
  }

  Widget _buildMetricCard(
    String title, 
    String value, 
    IconData icon, 
    Color color,
    String trend,
    int index,
  ) {
    return AnimatedBuilder(
      animation: _fadeAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, 50 * (1 - _fadeAnimation.value)),
          child: Opacity(
            opacity: _fadeAnimation.value,
            child: Container(
              width: 160,
              margin: const EdgeInsets.only(right: 12),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    color.withOpacity(0.1),
                    Colors.transparent,
                  ],
                ),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(color: color.withOpacity(0.3)),
                boxShadow: [
                  BoxShadow(
                    color: color.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(icon, color: color, size: 20),
                      const Spacer(),
                      AnimatedContainer(
                        duration: Duration(milliseconds: 500 + (index * 200)),
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.green.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          trend,
                          style: const TextStyle(
                            color: Colors.green,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  AnimatedDefaultTextStyle(
                    duration: Duration(milliseconds: 800 + (index * 200)),
                    style: TextStyle(
                      color: color,
                      fontSize: 20 * _fadeAnimation.value,
                      fontWeight: FontWeight.bold,
                    ),
                    child: Text(value),
                  ),
                  Text(
                    title,
                    style: const TextStyle(
                      color: Colors.grey,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildTabSection() {
    return Expanded(
      child: Container(
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: const Color(0xFF1A1A1A),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          children: [
            Container(
              decoration: BoxDecoration(
                color: const Color(0xFF2A2A2A),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              child: TabBar(
                controller: _tabController,
                indicatorColor: KipikTheme.rouge,
                labelColor: Colors.white,
                unselectedLabelColor: Colors.grey,
                labelStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
                tabs: const [
                  Tab(text: 'Top Flashs'),
                  Tab(text: 'Revenus'),
                  Tab(text: 'Styles'),
                  Tab(text: 'Insights'),
                ],
              ),
            ),
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  _buildTopFlashsTab(),
                  _buildRevenueTab(),
                  _buildStylesTab(),
                  _buildInsightsTab(),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTopFlashsTab() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _topFlashs.length,
      itemBuilder: (context, index) {
        final flash = _topFlashs[index];
        return _buildFlashAnalyticsCard(flash, index + 1);
      },
    );
  }

  Widget _buildFlashAnalyticsCard(Map<String, dynamic> flash, int rank) {
    final trendColor = flash['trend'] == 'up' 
        ? Colors.green 
        : flash['trend'] == 'down' 
            ? Colors.red 
            : Colors.grey;
    
    final trendIcon = flash['trend'] == 'up' 
        ? Icons.trending_up 
        : flash['trend'] == 'down' 
            ? Icons.trending_down 
            : Icons.trending_flat;

    return AnimatedBuilder(
      animation: _barAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, 30 * (1 - _barAnimation.value)),
          child: Opacity(
            opacity: _barAnimation.value,
            child: Container(
              margin: const EdgeInsets.only(bottom: 12),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFF2A2A2A),
                borderRadius: BorderRadius.circular(12),
                border: rank <= 3 ? Border.all(color: KipikTheme.rouge.withOpacity(0.3)) : null,
              ),
              child: Row(
                children: [
                  // Rang avec animation
                  AnimatedContainer(
                    duration: Duration(milliseconds: 300 + (rank * 100)),
                    width: 32,
                    height: 32,
                    decoration: BoxDecoration(
                      color: rank <= 3 ? KipikTheme.rouge : Colors.grey,
                      shape: BoxShape.circle,
                    ),
                    child: Center(
                      child: Text(
                        '$rank',
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                  
                  const SizedBox(width: 16),
                  
                  // Infos flash
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                flash['title'],
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            AnimatedRotation(
                              turns: _barAnimation.value,
                              duration: const Duration(milliseconds: 800),
                              child: Icon(trendIcon, color: trendColor, size: 16),
                            ),
                          ],
                        ),
                        const SizedBox(height: 4),
                        Text(
                          flash['style'],
                          style: const TextStyle(
                            color: Colors.grey,
                            fontSize: 12,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            _buildMiniMetric('ðŸ‘ï¸', '${flash['views']}'),
                            const SizedBox(width: 12),
                            _buildMiniMetric('â¤ï¸', '${flash['likes']}'),
                            const SizedBox(width: 12),
                            _buildMiniMetric('ðŸ’°', '${flash['revenue'].toStringAsFixed(0)}â‚¬'),
                            const SizedBox(width: 12),
                            _buildMiniMetric('ðŸ“ˆ', '${flash['conversionRate']}%'),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildMiniMetric(String emoji, String value) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(emoji, style: const TextStyle(fontSize: 12)),
        const SizedBox(width: 2),
        Text(
          value,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 12,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }

  Widget _buildRevenueTab() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // RÃ©sumÃ© revenus
          Row(
            children: [
              Expanded(
                child: _buildRevenueCard(
                  'Flashs Normaux',
                  '${(_analyticsData['totalRevenue'] - _analyticsData['flashMinuteRevenue']).toStringAsFixed(0)}â‚¬',
                  KipikTheme.rouge,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildRevenueCard(
                  'Flash Minute',
                  '${_analyticsData['flashMinuteRevenue'].toStringAsFixed(0)}â‚¬',
                  Colors.orange,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // Graphique natif
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFF2A2A2A),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Ã‰volution des revenus (30 derniers jours)',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Expanded(
                    child: _buildNativeLineChart(),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      _buildLegendItem('Flashs normaux', KipikTheme.rouge),
                      const SizedBox(width: 24),
                      _buildLegendItem('Flash Minute', Colors.orange),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNativeLineChart() {
    final maxRevenue = _revenueData.map((d) => d['revenue'] as double).reduce(max);
    
    return AnimatedBuilder(
      animation: _barAnimation,
      builder: (context, child) {
        return CustomPaint(
          size: Size.infinite,
          painter: LineChartPainter(
            revenueData: _revenueData,
            maxValue: maxRevenue,
            animation: _barAnimation.value,
            primaryColor: KipikTheme.rouge,
            secondaryColor: Colors.orange,
          ),
        );
      },
    );
  }

  Widget _buildRevenueCard(String title, String value, Color color) {
    return AnimatedBuilder(
      animation: _barAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: 0.8 + (0.2 * _barAnimation.value),
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: color.withOpacity(0.3)),
            ),
            child: Column(
              children: [
                Text(
                  value,
                  style: TextStyle(
                    color: color,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  title,
                  style: const TextStyle(
                    color: Colors.grey,
                    fontSize: 12,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildLegendItem(String label, Color color) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
          ),
        ),
        const SizedBox(width: 6),
        Text(
          label,
          style: const TextStyle(
            color: Colors.grey,
            fontSize: 12,
          ),
        ),
      ],
    );
  }

  Widget _buildStylesTab() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Performance par style',
            style: TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 24),
          Expanded(
            child: _buildNativePieChart(),
          ),
          const SizedBox(height: 24),
          Wrap(
            spacing: 16,
            runSpacing: 8,
            children: _stylePerformance.entries.map((entry) {
              final colors = [
                KipikTheme.rouge,
                Colors.blue,
                Colors.green,
                Colors.orange,
                Colors.purple,
                Colors.teal,
              ];
              final index = _stylePerformance.keys.toList().indexOf(entry.key);
              
              return _buildLegendItem(entry.key, colors[index % colors.length]);
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildNativePieChart() {
    return AnimatedBuilder(
      animation: _barAnimation,
      builder: (context, child) {
        return CustomPaint(
          size: Size.infinite,
          painter: PieChartPainter(
            data: _stylePerformance,
            animation: _barAnimation.value,
          ),
        );
      },
    );
  }

  Widget _buildInsightsTab() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Recommandations intelligentes',
            style: TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 24),
          Expanded(
            child: ListView(
              children: [
                _buildInsightCard(
                  'ðŸŽ¯ Optimisation pricing',
                  'Vos flashs minimalistes performent +23% mieux Ã  180â‚¬ qu\'Ã  150â‚¬',
                  'Augmenter le prix de vos flashs minimalistes',
                  Colors.green,
                  0,
                ),
                _buildInsightCard(
                  'âš¡ Flash Minute efficace',
                  'Flash Minute gÃ©nÃ¨re 45% de revenus supplÃ©mentaires avec -20% de rÃ©duction',
                  'Activer plus souvent Flash Minute',
                  Colors.orange,
                  1,
                ),
                _buildInsightCard(
                  'ðŸ“… Meilleur timing',
                  'Vos flashs publiÃ©s le vendredi ont 35% plus de vues',
                  'Programmer vos publications le vendredi',
                  Colors.blue,
                  2,
                ),
                _buildInsightCard(
                  'ðŸŽ¨ Style tendance',
                  'Le style gÃ©omÃ©trique gagne +18% de popularitÃ© ce mois',
                  'CrÃ©er plus de flashs gÃ©omÃ©triques',
                  KipikTheme.rouge,
                  3,
                ),
                _buildInsightCard(
                  'ðŸ“± RÃ©seaux sociaux',
                  'Vos flashs avec hashtag Instagram ont 2x plus d\'engagement',
                  'Ajouter des hashtags Ã  tous vos flashs',
                  Colors.purple,
                  4,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInsightCard(
    String title, 
    String description, 
    String action, 
    Color color,
    int index,
  ) {
    return AnimatedBuilder(
      animation: _barAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, 50 * (1 - _barAnimation.value)),
          child: Opacity(
            opacity: _barAnimation.value,
            child: Container(
              margin: const EdgeInsets.only(bottom: 16),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFF2A2A2A),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: color.withOpacity(0.3)),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      color: color,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    description,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      Icon(Icons.lightbulb_outline, color: color, size: 16),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          action,
                          style: TextStyle(
                            color: color,
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                      Icon(Icons.arrow_forward_ios, color: color, size: 12),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'export':
        _showExportDialog();
        break;
      case 'settings':
        _showSettingsDialog();
        break;
    }
  }

  void _showExportDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text(
          'Exporter le rapport',
          style: TextStyle(color: Colors.white),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.picture_as_pdf, color: Colors.red),
              title: const Text('PDF DÃ©taillÃ©', style: TextStyle(color: Colors.white)),
              onTap: () {
                Navigator.pop(context);
                _exportToPDF();
              },
            ),
            ListTile(
              leading: const Icon(Icons.table_chart, color: Colors.green),
              title: const Text('Excel/CSV', style: TextStyle(color: Colors.white)),
              onTap: () {
                Navigator.pop(context);
                _exportToExcel();
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showSettingsDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text(
          'ParamÃ¨tres Analytics',
          style: TextStyle(color: Colors.white),
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SwitchListTile(
              title: Text('Notifications insights', style: TextStyle(color: Colors.white)),
              value: true,
              onChanged: null,
            ),
            SwitchListTile(
              title: Text('Analyse automatique', style: TextStyle(color: Colors.white)),
              value: true,
              onChanged: null,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Fermer', style: TextStyle(color: KipikTheme.rouge)),
          ),
        ],
      ),
    );
  }

  void _exportToPDF() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('ðŸ“„ Rapport PDF en cours de gÃ©nÃ©ration...'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _exportToExcel() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('ðŸ“Š Export Excel en cours...'),
        backgroundColor: Colors.green,
      ),
    );
  }
}

// Custom Painter pour le graphique en ligne natif
class LineChartPainter extends CustomPainter {
  final List<Map<String, dynamic>> revenueData;
  final double maxValue;
  final double animation;
  final Color primaryColor;
  final Color secondaryColor;

  LineChartPainter({
    required this.revenueData,
    required this.maxValue,
    required this.animation,
    required this.primaryColor,
    required this.secondaryColor,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint1 = Paint()
      ..color = primaryColor
      ..strokeWidth = 3
      ..style = PaintingStyle.stroke;

    final paint2 = Paint()
      ..color = secondaryColor
      ..strokeWidth = 2
      ..style = PaintingStyle.stroke;

    final fillPaint1 = Paint()
      ..color = primaryColor.withOpacity(0.1)
      ..style = PaintingStyle.fill;

    final path1 = Path();
    final path2 = Path();
    final fillPath1 = Path();

    final stepX = size.width / (revenueData.length - 1);

    for (int i = 0; i < revenueData.length; i++) {
      final x = i * stepX;
      final y1 = size.height - (revenueData[i]['revenue'] / maxValue * size.height * animation);
      final y2 = size.height - (revenueData[i]['flashMinute'] / maxValue * size.height * animation);

      if (i == 0) {
        path1.moveTo(x, y1);
        path2.moveTo(x, y2);
        fillPath1.moveTo(x, size.height);
        fillPath1.lineTo(x, y1);
      } else {
        path1.lineTo(x, y1);
        path2.lineTo(x, y2);
        fillPath1.lineTo(x, y1);
      }

      if (i == revenueData.length - 1) {
        fillPath1.lineTo(x, size.height);
        fillPath1.close();
      }
    }

    canvas.drawPath(fillPath1, fillPaint1);
    canvas.drawPath(path1, paint1);
    canvas.drawPath(path2, paint2);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

// Custom Painter pour le graphique en camembert natif
class PieChartPainter extends CustomPainter {
  final Map<String, int> data;
  final double animation;

  PieChartPainter({required this.data, required this.animation});

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = min(size.width, size.height) / 3;
    
    final colors = [
      const Color(0xFFE53E3E), // rouge
      Colors.blue,
      Colors.green,
      Colors.orange,
      Colors.purple,
      Colors.teal,
    ];

    final total = data.values.reduce((a, b) => a + b);
    double startAngle = -pi / 2;

    int colorIndex = 0;
    for (final entry in data.entries) {
      final sweepAngle = (entry.value / total) * 2 * pi * animation;
      
      final paint = Paint()
        ..color = colors[colorIndex % colors.length]
        ..style = PaintingStyle.fill;

      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        startAngle,
        sweepAngle,
        true,
        paint,
      );

      startAngle += sweepAngle;
      colorIndex++;
    }

    // Cercle central
    final centerPaint = Paint()
      ..color = const Color(0xFF1A1A1A)
      ..style = PaintingStyle.fill;

    canvas.drawCircle(center, radius * 0.6, centerPaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\demandes_rdv_page.dart

// lib/pages/pro/flashs/demandes_rdv_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';

class DemandesRdvPage extends StatefulWidget {
  const DemandesRdvPage({Key? key}) : super(key: key);

  @override
  State<DemandesRdvPage> createState() => _DemandesRdvPageState();
}

class _DemandesRdvPageState extends State<DemandesRdvPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _pulseController;
  late AnimationController _slideController;
  late Animation<double> _pulseAnimation;
  late Animation<Offset> _slideAnimation;
  
  // Ã‰tat de la page
  bool _isLoading = true;
  String _selectedFilter = 'Toutes';
  
  // DonnÃ©es
  List<Map<String, dynamic>> _demandes = [];
  Map<String, Timer> _countdownTimers = {};
  
  // Filtres
  final List<String> _filters = ['Toutes', 'En attente', 'NÃ©gociation', 'Urgentes'];

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadDemandes();
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _slideController.dispose();
    _disposeTimers();
    super.dispose();
  }

  void _initializeAnimations() {
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    )..repeat(reverse: true);
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0.0, 1.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
  }

  void _disposeTimers() {
    for (final timer in _countdownTimers.values) {
      timer.cancel();
    }
    _countdownTimers.clear();
  }

  Future<void> _loadDemandes() async {
    setState(() => _isLoading = true);
    
    try {
      await Future.delayed(const Duration(seconds: 1));
      
      // Simuler les demandes
      _demandes = _generateDemandes();
      _startCountdownTimers();
      
    } catch (e) {
      print('âŒ Erreur chargement demandes: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  List<Map<String, dynamic>> _generateDemandes() {
    final random = Random();
    final now = DateTime.now();
    
    return [
      {
        'id': 'demande_001',
        'clientName': 'Sophie Martin',
        'clientAvatar': 'assets/avatars/client_1.jpg',
        'flashTitle': 'Rose Minimaliste',
        'flashId': 'flash_001',
        'flashImage': 'assets/images/flash_rose.jpg',
        'originalPrice': 150.0,
        'discountedPrice': 120.0,
        'originalSize': '8x6cm',
        'requestedSize': '10x8cm',
        'requestedChanges': 'Agrandir le tatouage et ajouter des feuilles',
        'hasModifications': true,
        'status': 'pending', // pending, negotiation, accepted, refused, expired
        'priority': 'high',
        'createdAt': now.subtract(const Duration(minutes: 15)),
        'expiresAt': now.add(const Duration(hours: 1, minutes: 45)),
        'clientMessage': 'Bonjour ! J\'adore ce flash mais j\'aimerais l\'agrandir un peu et ajouter quelques feuilles autour de la rose. C\'est possible ?',
        'acompteAmount': 36.0, // 30% de 120â‚¬
      },
      {
        'id': 'demande_002',
        'clientName': 'Lucas Dubois',
        'clientAvatar': 'assets/avatars/client_2.jpg',
        'flashTitle': 'Lion GÃ©omÃ©trique',
        'flashId': 'flash_002',
        'flashImage': 'assets/images/flash_lion.jpg',
        'originalPrice': 280.0,
        'discountedPrice': 224.0,
        'originalSize': '12x10cm',
        'requestedSize': '12x10cm',
        'requestedChanges': null,
        'hasModifications': false,
        'status': 'pending',
        'priority': 'medium',
        'createdAt': now.subtract(const Duration(minutes: 32)),
        'expiresAt': now.add(const Duration(hours: 1, minutes: 28)),
        'clientMessage': 'Parfait comme Ã§a ! Quand pouvez-vous me recevoir ?',
        'acompteAmount': 67.2, // 30% de 224â‚¬
      },
      {
        'id': 'demande_003',
        'clientName': 'Emma Leroy',
        'clientAvatar': 'assets/avatars/client_3.jpg',
        'flashTitle': 'Mandala Lotus',
        'flashId': 'flash_003',
        'flashImage': 'assets/images/flash_mandala.jpg',
        'originalPrice': 200.0,
        'discountedPrice': 160.0,
        'originalSize': '10x10cm',
        'requestedSize': '8x8cm',
        'requestedChanges': 'Simplifier le mandala et changer les couleurs',
        'hasModifications': true,
        'status': 'negotiation',
        'priority': 'high',
        'createdAt': now.subtract(const Duration(hours: 1, minutes: 10)),
        'expiresAt': now.add(const Duration(minutes: 50)),
        'clientMessage': 'Je voudrais une version plus simple et en noir et blanc uniquement.',
        'acompteAmount': 48.0, // 30% de 160â‚¬
      },
      {
        'id': 'demande_004',
        'clientName': 'Thomas Petit',
        'clientAvatar': 'assets/avatars/client_4.jpg',
        'flashTitle': 'Papillon Aquarelle',
        'flashId': 'flash_004',
        'flashImage': 'assets/images/flash_papillon.jpg',
        'originalPrice': 180.0,
        'discountedPrice': 144.0,
        'originalSize': '9x7cm',
        'requestedSize': '12x9cm',
        'requestedChanges': 'Ajouter plus de couleurs vives',
        'hasModifications': true,
        'status': 'pending',
        'priority': 'urgent',
        'createdAt': now.subtract(const Duration(hours: 1, minutes: 45)),
        'expiresAt': now.add(const Duration(minutes: 15)),
        'clientMessage': 'Flash Minute ! Pouvez-vous ajouter du violet et du turquoise ?',
        'acompteAmount': 43.2, // 30% de 144â‚¬
      },
    ];
  }

  void _startCountdownTimers() {
    for (final demande in _demandes) {
      if (demande['status'] == 'pending' || demande['status'] == 'negotiation') {
        final timerId = demande['id'];
        _countdownTimers[timerId] = Timer.periodic(
          const Duration(seconds: 1),
          (timer) => _updateCountdown(timerId),
        );
      }
    }
  }

  void _updateCountdown(String demandeId) {
    final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
    final now = DateTime.now();
    final expiresAt = demande['expiresAt'] as DateTime;
    
    if (now.isAfter(expiresAt)) {
      // Demande expirÃ©e
      _expireDemande(demandeId);
    } else {
      // Mise Ã  jour de l'UI si nÃ©cessaire
      if (mounted) {
        setState(() {
          // Forcer le rebuild pour mettre Ã  jour les countdowns
        });
      }
    }
  }

  void _expireDemande(String demandeId) {
    setState(() {
      final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
      demande['status'] = 'expired';
    });
    
    _countdownTimers[demandeId]?.cancel();
    _countdownTimers.remove(demandeId);
    
    HapticFeedback.heavyImpact();
    _showExpiredNotification(demandeId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Demandes RDV',
        subtitle: _getSubtitle(),
        showBackButton: true,
        useProStyle: true,
        actions: [
          // Badge urgent
          if (_getUrgentCount() > 0)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              margin: const EdgeInsets.only(right: 8),
              decoration: BoxDecoration(
                color: Colors.red,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.priority_high, color: Colors.white, size: 16),
                  const SizedBox(width: 4),
                  Text(
                    '${_getUrgentCount()}',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: _loadDemandes,
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
      floatingActionButton: _buildQuickActionsButton(),
    );
  }

  String _getSubtitle() {
    final activeDemandes = _getFilteredDemandes().length;
    final urgentCount = _getUrgentCount();
    
    if (urgentCount > 0) {
      return '$activeDemandes demandes â€¢ $urgentCount urgentes !';
    }
    return '$activeDemandes demandes actives';
  }

  int _getUrgentCount() {
    return _demandes.where((d) => 
      (d['status'] == 'pending' || d['status'] == 'negotiation') &&
      _getRemainingMinutes(d) < 30
    ).length;
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement des demandes...',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    if (_demandes.isEmpty) {
      return _buildEmptyState();
    }

    return Column(
      children: [
        _buildFilters(),
        Expanded(
          child: _buildDemandesList(),
        ),
      ],
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.inbox_outlined,
            size: 80,
            color: Colors.grey[600],
          ),
          const SizedBox(height: 24),
          const Text(
            'Aucune demande active',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Les demandes de Flash Minute apparaÃ®tront ici',
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFilters() {
    return Container(
      height: 50,
      margin: const EdgeInsets.all(16),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _filters.length,
        itemBuilder: (context, index) {
          final filter = _filters[index];
          final isSelected = filter == _selectedFilter;
          final count = _getFilterCount(filter);
          
          return GestureDetector(
            onTap: () => setState(() => _selectedFilter = filter),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              margin: const EdgeInsets.only(right: 12),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: isSelected ? KipikTheme.rouge : const Color(0xFF1A1A1A),
                borderRadius: BorderRadius.circular(25),
                border: Border.all(
                  color: isSelected ? KipikTheme.rouge : Colors.grey[700]!,
                ),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    filter,
                    style: TextStyle(
                      color: isSelected ? Colors.white : Colors.grey,
                      fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                    ),
                  ),
                  if (count > 0) ...[
                    const SizedBox(width: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: isSelected ? Colors.white.withOpacity(0.2) : KipikTheme.rouge,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Text(
                        '$count',
                        style: TextStyle(
                          color: isSelected ? Colors.white : Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildDemandesList() {
    final filteredDemandes = _getFilteredDemandes();
    
    if (filteredDemandes.isEmpty) {
      return Center(
        child: Text(
          'Aucune demande dans "$_selectedFilter"',
          style: const TextStyle(color: Colors.grey, fontSize: 16),
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: filteredDemandes.length,
      itemBuilder: (context, index) {
        final demande = filteredDemandes[index];
        return _buildDemandeCard(demande, index);
      },
    );
  }

  Widget _buildDemandeCard(Map<String, dynamic> demande, int index) {
    final isUrgent = _getRemainingMinutes(demande) < 30;
    final hasModifications = demande['hasModifications'] == true;
    final status = demande['status'];
    
    return AnimatedBuilder(
      animation: isUrgent ? _pulseAnimation : const AlwaysStoppedAnimation(1.0),
      builder: (context, child) {
        return Transform.scale(
          scale: isUrgent ? _pulseAnimation.value : 1.0,
          child: Container(
            margin: const EdgeInsets.only(bottom: 16),
            decoration: BoxDecoration(
              color: const Color(0xFF1A1A1A),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: _getStatusColor(status).withOpacity(0.3),
                width: isUrgent ? 2 : 1,
              ),
              boxShadow: isUrgent ? [
                BoxShadow(
                  color: Colors.red.withOpacity(0.3),
                  blurRadius: 8,
                  offset: const Offset(0, 4),
                ),
              ] : null,
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(16),
                onTap: () => _showDemandeDetails(demande),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildDemandeHeader(demande),
                      const SizedBox(height: 12),
                      _buildFlashInfo(demande),
                      if (hasModifications) ...[
                        const SizedBox(height: 12),
                        _buildModificationInfo(demande),
                      ],
                      const SizedBox(height: 12),
                      _buildCountdownAndActions(demande),
                    ],
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDemandeHeader(Map<String, dynamic> demande) {
    final status = demande['status'];
    final priority = demande['priority'];
    
    return Row(
      children: [
        // Avatar client
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(20),
            color: Colors.grey[800],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(20),
            child: Image.asset(
              demande['clientAvatar'],
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => Container(
                color: Colors.grey[800],
                child: Icon(Icons.person, color: Colors.grey[600]),
              ),
            ),
          ),
        ),
        
        const SizedBox(width: 12),
        
        // Nom client
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                demande['clientName'],
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                _formatTime(demande['createdAt']),
                style: const TextStyle(
                  color: Colors.grey,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
        
        // Badges statut
        Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            _buildStatusBadge(status),
            if (priority == 'urgent') ...[
              const SizedBox(height: 4),
              _buildPriorityBadge(priority),
            ],
          ],
        ),
      ],
    );
  }

  Widget _buildFlashInfo(Map<String, dynamic> demande) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF2A2A2A),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          // Image flash
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(6),
              color: Colors.grey[800],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(6),
              child: Image.asset(
                demande['flashImage'],
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) => Container(
                  color: Colors.grey[800],
                  child: const Icon(Icons.image, color: Colors.grey),
                ),
              ),
            ),
          ),
          
          const SizedBox(width: 12),
          
          // Info flash
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  demande['flashTitle'],
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Row(
                  children: [
                    Text(
                      '${demande['originalPrice']}â‚¬',
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                        decoration: TextDecoration.lineThrough,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Text(
                      '${demande['discountedPrice']}â‚¬',
                      style: const TextStyle(
                        color: Colors.orange,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.green.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        'Acompte: ${demande['acompteAmount']}â‚¬',
                        style: const TextStyle(
                          color: Colors.green,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModificationInfo(Map<String, dynamic> demande) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.blue.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.blue.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.edit, color: Colors.blue, size: 16),
              const SizedBox(width: 8),
              const Text(
                'Modifications demandÃ©es',
                style: TextStyle(
                  color: Colors.blue,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          if (demande['originalSize'] != demande['requestedSize'])
            Text(
              'Taille: ${demande['originalSize']} â†’ ${demande['requestedSize']}',
              style: const TextStyle(color: Colors.white, fontSize: 12),
            ),
          if (demande['requestedChanges'] != null)
            Text(
              demande['requestedChanges'],
              style: const TextStyle(color: Colors.white, fontSize: 12),
            ),
        ],
      ),
    );
  }

  Widget _buildCountdownAndActions(Map<String, dynamic> demande) {
    final status = demande['status'];
    final remainingMinutes = _getRemainingMinutes(demande);
    final isExpired = status == 'expired';
    
    return Row(
      children: [
        // Countdown
        if (!isExpired) ...[
          Icon(
            Icons.access_time,
            color: remainingMinutes < 30 ? Colors.red : Colors.orange,
            size: 16,
          ),
          const SizedBox(width: 4),
          Text(
            _formatCountdown(remainingMinutes),
            style: TextStyle(
              color: remainingMinutes < 30 ? Colors.red : Colors.orange,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
        ] else ...[
          const Icon(Icons.schedule_outlined, color: Colors.grey, size: 16),
          const SizedBox(width: 4),
          const Text(
            'ExpirÃ©',
            style: TextStyle(color: Colors.grey, fontSize: 12),
          ),
        ],
        
        const Spacer(),
        
        // Actions rapides
        if (status == 'pending' || status == 'negotiation') ...[
          OutlinedButton(
            onPressed: () => _refuseDemande(demande['id']),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.red,
              side: const BorderSide(color: Colors.red),
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              minimumSize: const Size(0, 0),
            ),
            child: const Text('Refuser', style: TextStyle(fontSize: 12)),
          ),
          const SizedBox(width: 8),
          ElevatedButton(
            onPressed: () => _acceptDemande(demande['id']),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              minimumSize: const Size(0, 0),
            ),
            child: Text(
              demande['hasModifications'] ? 'NÃ©gocier' : 'Accepter',
              style: const TextStyle(fontSize: 12),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildStatusBadge(String status) {
    Color color;
    String text;
    IconData icon;
    
    switch (status) {
      case 'pending':
        color = Colors.orange;
        text = 'En attente';
        icon = Icons.schedule;
        break;
      case 'negotiation':
        color = Colors.blue;
        text = 'NÃ©gociation';
        icon = Icons.chat;
        break;
      case 'accepted':
        color = Colors.green;
        text = 'AcceptÃ©';
        icon = Icons.check_circle;
        break;
      case 'refused':
        color = Colors.red;
        text = 'RefusÃ©';
        icon = Icons.cancel;
        break;
      case 'expired':
        color = Colors.grey;
        text = 'ExpirÃ©';
        icon = Icons.schedule_outlined;
        break;
      default:
        color = Colors.grey;
        text = status;
        icon = Icons.help;
    }
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, color: color, size: 12),
          const SizedBox(width: 4),
          Text(
            text,
            style: TextStyle(
              color: color,
              fontSize: 10,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPriorityBadge(String priority) {
    if (priority != 'urgent') return const SizedBox.shrink();
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: Colors.red,
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.priority_high, color: Colors.white, size: 10),
          SizedBox(width: 2),
          Text(
            'URGENT',
            style: TextStyle(
              color: Colors.white,
              fontSize: 8,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQuickActionsButton() {
    final urgentCount = _getUrgentCount();
    
    if (urgentCount == 0) return const SizedBox.shrink();
    
    return FloatingActionButton.extended(
      onPressed: _showQuickActions,
      backgroundColor: Colors.red,
      icon: const Icon(Icons.flash_on, color: Colors.white),
      label: Text(
        'Urgent ($urgentCount)',
        style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
      ),
    );
  }

  // Helper methods
  List<Map<String, dynamic>> _getFilteredDemandes() {
    switch (_selectedFilter) {
      case 'En attente':
        return _demandes.where((d) => d['status'] == 'pending').toList();
      case 'NÃ©gociation':
        return _demandes.where((d) => d['status'] == 'negotiation').toList();
      case 'Urgentes':
        return _demandes.where((d) => 
          (d['status'] == 'pending' || d['status'] == 'negotiation') &&
          _getRemainingMinutes(d) < 30
        ).toList();
      default:
        return _demandes.where((d) => 
          d['status'] != 'accepted' && d['status'] != 'refused'
        ).toList();
    }
  }

  int _getFilterCount(String filter) {
    switch (filter) {
      case 'En attente':
        return _demandes.where((d) => d['status'] == 'pending').length;
      case 'NÃ©gociation':
        return _demandes.where((d) => d['status'] == 'negotiation').length;
      case 'Urgentes':
        return _getUrgentCount();
      default:
        return _demandes.where((d) => 
          d['status'] != 'accepted' && d['status'] != 'refused'
        ).length;
    }
  }

  int _getRemainingMinutes(Map<String, dynamic> demande) {
    final expiresAt = demande['expiresAt'] as DateTime;
    final now = DateTime.now();
    final difference = expiresAt.difference(now);
    return difference.inMinutes.clamp(0, double.infinity).toInt();
  }

  String _formatCountdown(int minutes) {
    final hours = minutes ~/ 60;
    final mins = minutes % 60;
    
    if (hours > 0) {
      return '${hours}h ${mins}min';
    } else {
      return '${mins}min';
    }
  }

  String _formatTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    
    if (difference.inMinutes < 60) {
      return 'Il y a ${difference.inMinutes}min';
    } else if (difference.inHours < 24) {
      return 'Il y a ${difference.inHours}h';
    } else {
      return '${dateTime.day}/${dateTime.month} Ã  ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')}';
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'pending':
        return Colors.orange;
      case 'negotiation':
        return Colors.blue;
      case 'accepted':
        return Colors.green;
      case 'refused':
        return Colors.red;
      case 'expired':
        return Colors.grey;
      default:
        return Colors.grey;
    }
  }

  // Actions
  void _showDemandeDetails(Map<String, dynamic> demande) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => _buildDemandeDetailsSheet(demande),
    );
  }

  Widget _buildDemandeDetailsSheet(Map<String, dynamic> demande) {
    return DraggableScrollableSheet(
      initialChildSize: 0.8,
      minChildSize: 0.5,
      maxChildSize: 0.95,
      builder: (context, scrollController) {
        return Container(
          decoration: const BoxDecoration(
            color: Color(0xFF1A1A1A),
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              // Handle
              Container(
                margin: const EdgeInsets.only(top: 12),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey[600],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              
              // Header
              Padding(
                padding: const EdgeInsets.all(20),
                child: Row(
                  children: [
                    Expanded(
                      child: Text(
                        'Demande de ${demande['clientName']}',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),
              
              // Contenu
              Expanded(
                child: SingleChildScrollView(
                  controller: scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildDetailFlashInfo(demande),
                      const SizedBox(height: 20),
                      _buildClientMessage(demande),
                      const SizedBox(height: 20),
                      if (demande['hasModifications'])
                        _buildNegotiationSection(demande),
                      const SizedBox(height: 100), // Espace pour les boutons
                    ],
                  ),
                ),
              ),
              
              // Actions
              _buildDetailActions(demande),
            ],
          ),
        );
      },
    );
  }

  Widget _buildDetailFlashInfo(Map<String, dynamic> demande) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF2A2A2A),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 80,
                height: 80,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  color: Colors.grey[800],
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    demande['flashImage'],
                    fit: BoxFit.cover,
                    errorBuilder: (_, __, ___) => Container(
                      color: Colors.grey[800],
                      child: const Icon(Icons.image, color: Colors.grey),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      demande['flashTitle'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Text(
                          '${demande['originalPrice']}â‚¬',
                          style: const TextStyle(
                            color: Colors.grey,
                            decoration: TextDecoration.lineThrough,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          '${demande['discountedPrice']}â‚¬',
                          style: const TextStyle(
                            color: Colors.orange,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'Acompte: ${demande['acompteAmount']}â‚¬ (30%)',
                      style: const TextStyle(
                        color: Colors.green,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildClientMessage(Map<String, dynamic> demande) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.blue.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.blue.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Icon(Icons.message, color: Colors.blue, size: 20),
              SizedBox(width: 8),
              Text(
                'Message du client',
                style: TextStyle(
                  color: Colors.blue,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Text(
            demande['clientMessage'],
            style: const TextStyle(
              color: Colors.white,
              fontSize: 14,
              height: 1.4,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNegotiationSection(Map<String, dynamic> demande) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.orange.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.orange.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Icon(Icons.edit, color: Colors.orange, size: 20),
              SizedBox(width: 8),
              Text(
                'Modifications demandÃ©es',
                style: TextStyle(
                  color: Colors.orange,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          if (demande['originalSize'] != demande['requestedSize']) ...[
            Row(
              children: [
                const Text('Taille: ', style: TextStyle(color: Colors.grey)),
                Text(
                  '${demande['originalSize']} â†’ ${demande['requestedSize']}',
                  style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 8),
          ],
          if (demande['requestedChanges'] != null) ...[
            const Text('Modifications: ', style: TextStyle(color: Colors.grey)),
            Text(
              demande['requestedChanges'],
              style: const TextStyle(color: Colors.white),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildDetailActions(Map<String, dynamic> demande) {
    final status = demande['status'];
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: const BoxDecoration(
        color: Color(0xFF2A2A2A),
        border: Border(
          top: BorderSide(color: Color(0xFF3A3A3A)),
        ),
      ),
      child: SafeArea(
        child: Row(
          children: [
            if (status == 'pending' || status == 'negotiation') ...[
              Expanded(
                child: OutlinedButton(
                  onPressed: () {
                    Navigator.pop(context);
                    _refuseDemande(demande['id']);
                  },
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.red,
                    side: const BorderSide(color: Colors.red),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Text('Refuser'),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                flex: 2,
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context);
                    _acceptDemande(demande['id']);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: Text(
                    demande['hasModifications'] ? 'Accepter les modifications' : 'Accepter la demande',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              ),
            ] else ...[
              Expanded(
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey[700],
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Text('Fermer'),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  void _acceptDemande(String demandeId) {
    setState(() {
      final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
      demande['status'] = 'accepted';
    });
    
    _countdownTimers[demandeId]?.cancel();
    _countdownTimers.remove(demandeId);
    
    HapticFeedback.heavyImpact();
    _showAcceptedSnackBar(demandeId);
  }

  void _refuseDemande(String demandeId) {
    setState(() {
      final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
      demande['status'] = 'refused';
    });
    
    _countdownTimers[demandeId]?.cancel();
    _countdownTimers.remove(demandeId);
    
    HapticFeedback.mediumImpact();
    _showRefusedSnackBar(demandeId);
  }

  void _showQuickActions() {
    final urgentDemandes = _demandes.where((d) => 
      (d['status'] == 'pending' || d['status'] == 'negotiation') &&
      _getRemainingMinutes(d) < 30
    ).toList();
    
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Color(0xFF1A1A1A),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[600],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  const Text(
                    'Actions rapides - Demandes urgentes',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 20),
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: () {
                            Navigator.pop(context);
                            _refuseAllUrgent();
                          },
                          icon: const Icon(Icons.cancel, color: Colors.red),
                          label: const Text('Refuser tout'),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.red,
                            side: const BorderSide(color: Colors.red),
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () {
                            Navigator.pop(context);
                            _acceptAllUrgent();
                          },
                          icon: const Icon(Icons.check_circle),
                          label: const Text('Accepter tout'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _acceptAllUrgent() {
    final urgentDemandes = _demandes.where((d) => 
      (d['status'] == 'pending' || d['status'] == 'negotiation') &&
      _getRemainingMinutes(d) < 30
    ).toList();
    
    for (final demande in urgentDemandes) {
      _acceptDemande(demande['id']);
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('${urgentDemandes.length} demandes urgentes acceptÃ©es'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _refuseAllUrgent() {
    final urgentDemandes = _demandes.where((d) => 
      (d['status'] == 'pending' || d['status'] == 'negotiation') &&
      _getRemainingMinutes(d) < 30
    ).toList();
    
    for (final demande in urgentDemandes) {
      _refuseDemande(demande['id']);
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('${urgentDemandes.length} demandes urgentes refusÃ©es'),
        backgroundColor: Colors.red,
      ),
    );
  }

  void _showAcceptedSnackBar(String demandeId) {
    final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Demande de ${demande['clientName']} acceptÃ©e ! Acompte: ${demande['acompteAmount']}â‚¬'),
        backgroundColor: Colors.green,
        action: SnackBarAction(
          label: 'Voir',
          onPressed: () => _showDemandeDetails(demande),
        ),
      ),
    );
  }

  void _showRefusedSnackBar(String demandeId) {
    final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Demande de ${demande['clientName']} refusÃ©e'),
        backgroundColor: Colors.red,
      ),
    );
  }

  void _showExpiredNotification(String demandeId) {
    final demande = _demandes.firstWhere((d) => d['id'] == demandeId);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('â° Demande de ${demande['clientName']} expirÃ©e'),
        backgroundColor: Colors.grey[700],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\flash_minute_create_page.dart

// lib/pages/pro/flashs/flash_minute_create_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';

class FlashMinuteCreatePage extends StatefulWidget {
  const FlashMinuteCreatePage({Key? key}) : super(key: key);

  @override
  State<FlashMinuteCreatePage> createState() => _FlashMinuteCreatePageState();
}

class _FlashMinuteCreatePageState extends State<FlashMinuteCreatePage> 
    with TickerProviderStateMixin {
  
  late AnimationController _pulseController;
  late AnimationController _slideController;
  late Animation<double> _pulseAnimation;
  late Animation<Offset> _slideAnimation;
  
  // Ã‰tat de la page
  bool _isLoading = false;
  bool _isCreating = false;
  int _step = 0; // 0: SÃ©lection flashs, 1: ParamÃ¨tres, 2: Confirmation
  
  // DonnÃ©es
  List<Map<String, dynamic>> _availableFlashs = [];
  List<String> _selectedFlashIds = [];
  
  // ParamÃ¨tres Flash Minute
  int _selectedDiscount = 20;
  int _selectedDuration = 8; // heures
  bool _notifyClients = true;
  bool _socialMediaPost = true;
  String _customMessage = '';
  
  // Timer pour urgence
  Timer? _urgencyTimer;
  int _urgencySeconds = 0;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadAvailableFlashs();
    _startUrgencyTimer();
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _slideController.dispose();
    _urgencyTimer?.cancel();
    super.dispose();
  }

  void _initializeAnimations() {
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(1.0, 0.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
  }

  void _startUrgencyTimer() {
    _urgencyTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _urgencySeconds++;
      });
    });
  }

  Future<void> _loadAvailableFlashs() async {
    setState(() => _isLoading = true);
    
    try {
      await Future.delayed(const Duration(seconds: 1));
      
      // Simuler les flashs disponibles
      _availableFlashs = [
        {
          'id': 'flash_001',
          'title': 'Rose Minimaliste',
          'imageUrl': 'assets/images/flash_rose.jpg',
          'originalPrice': 150.0,
          'size': '8x6cm',
          'style': 'Minimaliste',
          'views': 24,
          'likes': 7,
          'isPopular': true,
        },
        {
          'id': 'flash_002',
          'title': 'Lion GÃ©omÃ©trique',
          'imageUrl': 'assets/images/flash_lion.jpg',
          'originalPrice': 280.0,
          'size': '12x10cm',
          'style': 'GÃ©omÃ©trique',
          'views': 45,
          'likes': 12,
          'isPopular': true,
        },
        {
          'id': 'flash_003',
          'title': 'Mandala Lotus',
          'imageUrl': 'assets/images/flash_mandala.jpg',
          'originalPrice': 200.0,
          'size': '10x10cm',
          'style': 'Mandala',
          'views': 31,
          'likes': 9,
          'isPopular': false,
        },
        {
          'id': 'flash_004',
          'title': 'Papillon Aquarelle',
          'imageUrl': 'assets/images/flash_papillon.jpg',
          'originalPrice': 180.0,
          'size': '9x7cm',
          'style': 'Aquarelle',
          'views': 18,
          'likes': 5,
          'isPopular': false,
        },
      ];
      
    } catch (e) {
      print('âŒ Erreur chargement flashs: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _nextStep() {
    if (_step < 2) {
      setState(() => _step++);
      _slideController.forward().then((_) => _slideController.reset());
    }
  }

  void _previousStep() {
    if (_step > 0) {
      setState(() => _step--);
      _slideController.forward().then((_) => _slideController.reset());
    }
  }

  Future<void> _createFlashMinute() async {
    if (_selectedFlashIds.isEmpty) {
      _showErrorSnackBar('Veuillez sÃ©lectionner au moins un flash');
      return;
    }

    setState(() => _isCreating = true);
    HapticFeedback.mediumImpact();

    try {
      // Simuler la crÃ©ation
      await Future.delayed(const Duration(seconds: 3));
      
      // TODO: ImplÃ©menter la logique de crÃ©ation Flash Minute
      // - Mettre Ã  jour les flashs sÃ©lectionnÃ©s
      // - Envoyer notifications si activÃ©es
      // - Poster sur rÃ©seaux sociaux si activÃ©
      // - Programmer la fin automatique
      
      HapticFeedback.heavyImpact();
      _showSuccessDialog();
      
    } catch (e) {
      _showErrorSnackBar('Erreur lors de la crÃ©ation: $e');
    } finally {
      setState(() => _isCreating = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Flash Minute',
        subtitle: _getSubtitle(),
        showBackButton: true,
        useProStyle: true,
        actions: [
          // Timer urgence
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            margin: const EdgeInsets.only(right: 8),
            decoration: BoxDecoration(
              color: Colors.red.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.red.withOpacity(0.3)),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.timer, color: Colors.red, size: 16),
                const SizedBox(width: 4),
                Text(
                  _formatUrgencyTime(),
                  style: const TextStyle(
                    color: Colors.red,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
      bottomNavigationBar: _buildBottomBar(),
    );
  }

  String _getSubtitle() {
    switch (_step) {
      case 0:
        return 'SÃ©lectionnez vos flashs (${_selectedFlashIds.length} sÃ©lectionnÃ©s)';
      case 1:
        return 'Configurez votre offre Flash Minute';
      case 2:
        return 'VÃ©rifiez et lancez votre Flash Minute';
      default:
        return 'CrÃ©ation Flash Minute';
    }
  }

  String _formatUrgencyTime() {
    final minutes = _urgencySeconds ~/ 60;
    final seconds = _urgencySeconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: Colors.orange,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement de vos flashs...',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return SlideTransition(
      position: _slideAnimation,
      child: Column(
        children: [
          _buildProgressIndicator(),
          Expanded(
            child: _buildCurrentStep(),
          ),
        ],
      ),
    );
  }

  Widget _buildProgressIndicator() {
    return Container(
      margin: const EdgeInsets.all(16),
      child: Row(
        children: List.generate(3, (index) {
          final isActive = index <= _step;
          final isCompleted = index < _step;
          
          return Expanded(
            child: Container(
              margin: EdgeInsets.only(right: index < 2 ? 8 : 0),
              child: Column(
                children: [
                  Container(
                    height: 4,
                    decoration: BoxDecoration(
                      color: isActive ? Colors.orange : Colors.grey[700],
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Container(
                        width: 24,
                        height: 24,
                        decoration: BoxDecoration(
                          color: isActive ? Colors.orange : Colors.grey[700],
                          shape: BoxShape.circle,
                        ),
                        child: Center(
                          child: isCompleted
                              ? const Icon(Icons.check, color: Colors.white, size: 16)
                              : Text(
                                  '${index + 1}',
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          _getStepLabel(index),
                          style: TextStyle(
                            color: isActive ? Colors.white : Colors.grey,
                            fontSize: 12,
                            fontWeight: isActive ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        }),
      ),
    );
  }

  String _getStepLabel(int index) {
    switch (index) {
      case 0:
        return 'SÃ©lection';
      case 1:
        return 'Configuration';
      case 2:
        return 'Confirmation';
      default:
        return '';
    }
  }

  Widget _buildCurrentStep() {
    switch (_step) {
      case 0:
        return _buildFlashSelectionStep();
      case 1:
        return _buildConfigurationStep();
      case 2:
        return _buildConfirmationStep();
      default:
        return Container();
    }
  }

  Widget _buildFlashSelectionStep() {
    return Column(
      children: [
        // Header avec actions rapides
        Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: const Color(0xFF1A1A1A),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.orange.withOpacity(0.3)),
          ),
          child: Column(
            children: [
              Row(
                children: [
                  const Icon(Icons.flash_on, color: Colors.orange),
                  const SizedBox(width: 8),
                  const Text(
                    'SÃ©lectionnez vos flashs',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  Text(
                    '${_selectedFlashIds.length}/${_availableFlashs.length}',
                    style: const TextStyle(
                      color: Colors.orange,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: _selectAllFlashs,
                      icon: const Icon(Icons.select_all, size: 16),
                      label: const Text('Tout sÃ©lectionner'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.orange,
                        side: const BorderSide(color: Colors.orange),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: _selectPopularFlashs,
                      icon: const Icon(Icons.trending_up, size: 16),
                      label: const Text('Les populaires'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.blue,
                        side: const BorderSide(color: Colors.blue),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
        
        // Liste des flashs
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            itemCount: _availableFlashs.length,
            itemBuilder: (context, index) {
              final flash = _availableFlashs[index];
              final isSelected = _selectedFlashIds.contains(flash['id']);
              
              return _buildFlashCard(flash, isSelected);
            },
          ),
        ),
      ],
    );
  }

  Widget _buildFlashCard(Map<String, dynamic> flash, bool isSelected) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isSelected ? Colors.orange : Colors.transparent,
          width: 2,
        ),
        boxShadow: isSelected ? [
          BoxShadow(
            color: Colors.orange.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ] : null,
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(12),
          onTap: () => _toggleFlashSelection(flash['id']),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                // Image
                Container(
                  width: 60,
                  height: 60,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(8),
                    color: Colors.grey[800],
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(8),
                    child: Image.asset(
                      flash['imageUrl'],
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        return Container(
                          color: Colors.grey[800],
                          child: const Icon(Icons.image, color: Colors.grey),
                        );
                      },
                    ),
                  ),
                ),
                
                const SizedBox(width: 16),
                
                // Infos
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              flash['title'],
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          if (flash['isPopular'])
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: Colors.blue.withOpacity(0.2),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: const Text(
                                'POPULAIRE',
                                style: TextStyle(
                                  color: Colors.blue,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${flash['style']} â€¢ ${flash['size']}',
                        style: const TextStyle(
                          color: Colors.grey,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Text(
                            '${flash['originalPrice']}â‚¬',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Text(
                            'â†’ ${_calculateDiscountedPrice(flash['originalPrice'])}â‚¬',
                            style: const TextStyle(
                              color: Colors.orange,
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const Spacer(),
                          Row(
                            children: [
                              const Icon(Icons.visibility, size: 14, color: Colors.grey),
                              const SizedBox(width: 2),
                              Text('${flash['views']}', style: const TextStyle(color: Colors.grey, fontSize: 12)),
                              const SizedBox(width: 8),
                              const Icon(Icons.favorite, size: 14, color: Colors.grey),
                              const SizedBox(width: 2),
                              Text('${flash['likes']}', style: const TextStyle(color: Colors.grey, fontSize: 12)),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                
                const SizedBox(width: 16),
                
                // Checkbox
                AnimatedContainer(
                  duration: const Duration(milliseconds: 200),
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    color: isSelected ? Colors.orange : Colors.transparent,
                    border: Border.all(
                      color: isSelected ? Colors.orange : Colors.grey,
                      width: 2,
                    ),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: isSelected
                      ? const Icon(Icons.check, color: Colors.white, size: 16)
                      : null,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildConfigurationStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // RÃ©duction
          _buildConfigCard(
            'RÃ©duction',
            Icons.local_offer,
            Colors.green,
            Column(
              children: [
                Text(
                  'RÃ©duction actuelle : $_selectedDiscount%',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Slider(
                  value: _selectedDiscount.toDouble(),
                  min: 10,
                  max: 50,
                  divisions: 8,
                  activeColor: Colors.green,
                  inactiveColor: Colors.grey[700],
                  onChanged: (value) {
                    setState(() {
                      _selectedDiscount = value.round();
                    });
                  },
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text('10%', style: TextStyle(color: Colors.grey[600], fontSize: 12)),
                    Text('50%', style: TextStyle(color: Colors.grey[600], fontSize: 12)),
                  ],
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // DurÃ©e
          _buildConfigCard(
            'DurÃ©e',
            Icons.timer,
            Colors.blue,
            Column(
              children: [
                Text(
                  'DurÃ©e : $_selectedDuration heures',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Wrap(
                  spacing: 8,
                  children: [8, 12, 24, 48, 72].map((hours) {
                    final isSelected = hours == _selectedDuration;
                    return GestureDetector(
                      onTap: () => setState(() => _selectedDuration = hours),
                      child: AnimatedContainer(
                        duration: const Duration(milliseconds: 200),
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        decoration: BoxDecoration(
                          color: isSelected ? Colors.blue : Colors.transparent,
                          borderRadius: BorderRadius.circular(20),
                          border: Border.all(
                            color: isSelected ? Colors.blue : Colors.grey,
                          ),
                        ),
                        child: Text(
                          '${hours}h',
                          style: TextStyle(
                            color: isSelected ? Colors.white : Colors.grey,
                            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                      ),
                    );
                  }).toList(),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Options
          _buildConfigCard(
            'Options',
            Icons.settings,
            Colors.purple,
            Column(
              children: [
                SwitchListTile(
                  title: const Text(
                    'Notifier les clients',
                    style: TextStyle(color: Colors.white),
                  ),
                  subtitle: const Text(
                    'Envoyer une notification push',
                    style: TextStyle(color: Colors.grey),
                  ),
                  value: _notifyClients,
                  onChanged: (value) => setState(() => _notifyClients = value),
                  activeColor: Colors.purple,
                ),
                SwitchListTile(
                  title: const Text(
                    'Publier sur les rÃ©seaux',
                    style: TextStyle(color: Colors.white),
                  ),
                  subtitle: const Text(
                    'Post automatique Instagram/Facebook',
                    style: TextStyle(color: Colors.grey),
                  ),
                  value: _socialMediaPost,
                  onChanged: (value) => setState(() => _socialMediaPost = value),
                  activeColor: Colors.purple,
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Message personnalisÃ©
          _buildConfigCard(
            'Message personnalisÃ©',
            Icons.message,
            Colors.orange,
            TextField(
              maxLines: 3,
              style: const TextStyle(color: Colors.white),
              decoration: InputDecoration(
                hintText: 'Ajoutez un message personnalisÃ© (optionnel)...',
                hintStyle: TextStyle(color: Colors.grey[600]),
                filled: true,
                fillColor: Colors.grey[900],
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide.none,
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: const BorderSide(color: Colors.orange),
                ),
              ),
              onChanged: (value) => _customMessage = value,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConfigCard(String title, IconData icon, Color color, Widget content) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: color),
              const SizedBox(width: 8),
              Text(
                title,
                style: TextStyle(
                  color: color,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          content,
        ],
      ),
    );
  }

  Widget _buildConfirmationStep() {
    final selectedFlashs = _availableFlashs.where((f) => _selectedFlashIds.contains(f['id'])).toList();
    final totalOriginalPrice = selectedFlashs.fold<double>(0, (sum, f) => sum + f['originalPrice']);
    final totalDiscountedPrice = selectedFlashs.fold<double>(0, (sum, f) => sum + _calculateDiscountedPrice(f['originalPrice']));
    final totalSavings = totalOriginalPrice - totalDiscountedPrice;
    
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // RÃ©sumÃ©
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.orange.withOpacity(0.1), Colors.transparent],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: Colors.orange.withOpacity(0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.flash_on, color: Colors.orange, size: 32),
                    const SizedBox(width: 12),
                    const Text(
                      'Flash Minute PrÃªt !',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Row(
                  children: [
                    Expanded(
                      child: _buildSummaryMetric(
                        'Flashs sÃ©lectionnÃ©s',
                        '${selectedFlashs.length}',
                        Icons.flash_on,
                        Colors.orange,
                      ),
                    ),
                    Expanded(
                      child: _buildSummaryMetric(
                        'RÃ©duction',
                        '$_selectedDiscount%',
                        Icons.local_offer,
                        Colors.green,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: _buildSummaryMetric(
                        'DurÃ©e',
                        '${_selectedDuration}h',
                        Icons.timer,
                        Colors.blue,
                      ),
                    ),
                    Expanded(
                      child: _buildSummaryMetric(
                        'Ã‰conomies clients',
                        '${totalSavings.toStringAsFixed(0)}â‚¬',
                        Icons.savings,
                        Colors.purple,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 24),
          
          // Flashs sÃ©lectionnÃ©s
          const Text(
            'Flashs sÃ©lectionnÃ©s',
            style: TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          ...selectedFlashs.map((flash) => _buildConfirmationFlashCard(flash)),
          
          const SizedBox(height: 24),
          
          // Timeline
          _buildTimeline(),
        ],
      ),
    );
  }

  Widget _buildSummaryMetric(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      margin: const EdgeInsets.only(right: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              color: color,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              color: Colors.grey,
              fontSize: 10,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildConfirmationFlashCard(Map<String, dynamic> flash) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(6),
              color: Colors.grey[800],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(6),
              child: Image.asset(
                flash['imageUrl'],
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) => Container(
                  color: Colors.grey[800],
                  child: const Icon(Icons.image, color: Colors.grey, size: 20),
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  flash['title'],
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  flash['style'],
                  style: const TextStyle(
                    color: Colors.grey,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(
                '${flash['originalPrice']}â‚¬',
                style: const TextStyle(
                  color: Colors.grey,
                  fontSize: 12,
                  decoration: TextDecoration.lineThrough,
                ),
              ),
              Text(
                '${_calculateDiscountedPrice(flash['originalPrice'])}â‚¬',
                style: const TextStyle(
                  color: Colors.orange,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTimeline() {
    final endTime = DateTime.now().add(Duration(hours: _selectedDuration));
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Timeline',
            style: TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          _buildTimelineItem(
            'ðŸš€',
            'Lancement immÃ©diat',
            'Flash Minute activÃ© sur tous les flashs sÃ©lectionnÃ©s',
            true,
          ),
          if (_notifyClients)
            _buildTimelineItem(
              'ðŸ“±',
              '+ 2 minutes',
              'Notification push envoyÃ©e aux clients',
              false,
            ),
          if (_socialMediaPost)
            _buildTimelineItem(
              'ðŸ“¢',
              '+ 5 minutes',
              'Publication automatique sur les rÃ©seaux sociaux',
              false,
            ),
          _buildTimelineItem(
            'â°',
            'Dans ${_selectedDuration}h',
            'Fin automatique du Flash Minute (${endTime.hour}:${endTime.minute.toString().padLeft(2, '0')})',
            false,
          ),
        ],
      ),
    );
  }

  Widget _buildTimelineItem(String emoji, String time, String description, bool isActive) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Text(emoji, style: const TextStyle(fontSize: 20)),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  time,
                  style: TextStyle(
                    color: isActive ? Colors.orange : Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  description,
                  style: const TextStyle(
                    color: Colors.grey,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomBar() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        color: Color(0xFF1A1A1A),
        border: Border(
          top: BorderSide(color: Color(0xFF2A2A2A)),
        ),
      ),
      child: SafeArea(
        child: Row(
          children: [
            if (_step > 0)
              Expanded(
                child: OutlinedButton(
                  onPressed: _previousStep,
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.grey,
                    side: const BorderSide(color: Colors.grey),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Text('PrÃ©cÃ©dent'),
                ),
              ),
            if (_step > 0) const SizedBox(width: 16),
            Expanded(
              flex: _step == 0 ? 1 : 2,
              child: _step == 2
                  ? AnimatedBuilder(
                      animation: _pulseAnimation,
                      builder: (context, child) {
                        return Transform.scale(
                          scale: _pulseAnimation.value,
                          child: ElevatedButton(
                            onPressed: _isCreating ? null : _createFlashMinute,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: _isCreating
                                ? const SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: CircularProgressIndicator(
                                      strokeWidth: 2,
                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                    ),
                                  )
                                : const Text(
                                    'ðŸš€ LANCER FLASH MINUTE',
                                    style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 16,
                                    ),
                                  ),
                          ),
                        );
                      },
                    )
                  : ElevatedButton(
                      onPressed: _canProceed() ? _nextStep : null,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Text(
                        _step == 0 ? 'Configurer (${_selectedFlashIds.length})' : 'Confirmer',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper methods
  bool _canProceed() {
    if (_step == 0) return _selectedFlashIds.isNotEmpty;
    return true;
  }

  void _toggleFlashSelection(String flashId) {
    setState(() {
      if (_selectedFlashIds.contains(flashId)) {
        _selectedFlashIds.remove(flashId);
      } else {
        _selectedFlashIds.add(flashId);
      }
    });
    HapticFeedback.selectionClick();
  }

  void _selectAllFlashs() {
    setState(() {
      _selectedFlashIds = _availableFlashs.map((f) => f['id'] as String).toList();
    });
    HapticFeedback.mediumImpact();
  }

  void _selectPopularFlashs() {
    setState(() {
      _selectedFlashIds = _availableFlashs
          .where((f) => f['isPopular'] == true)
          .map((f) => f['id'] as String)
          .toList();
    });
    HapticFeedback.mediumImpact();
  }

  double _calculateDiscountedPrice(double originalPrice) {
    return originalPrice * (1 - _selectedDiscount / 100);
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.2),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.flash_on,
                color: Colors.orange,
                size: 40,
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Flash Minute LancÃ© !',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              '${_selectedFlashIds.length} flashs activÃ©s avec -$_selectedDiscount% pendant ${_selectedDuration}h',
              style: const TextStyle(
                color: Colors.grey,
                fontSize: 16,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                Navigator.of(context).pop();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text('Parfait !'),
            ),
          ],
        ),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\flash_minute_dashboard_page.dart

// lib/pages/pro/flashs/flash_minute_dashboard_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'flash_minute_create_page.dart';
import 'demandes_rdv_page.dart';
import 'analytics_flashs_page.dart';

class FlashMinuteDashboardPage extends StatefulWidget {
  const FlashMinuteDashboardPage({Key? key}) : super(key: key);

  @override
  State<FlashMinuteDashboardPage> createState() => _FlashMinuteDashboardPageState();
}

class _FlashMinuteDashboardPageState extends State<FlashMinuteDashboardPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _pulseController;
  late AnimationController _rotationController;
  late AnimationController _slideController;
  late Animation<double> _pulseAnimation;
  late Animation<double> _rotationAnimation;
  late Animation<Offset> _slideAnimation;
  
  // Ã‰tat de la page
  bool _isLoading = true;
  bool _hasActiveFlashMinute = false;
  
  // DonnÃ©es temps rÃ©el
  Map<String, dynamic> _dashboardData = {};
  List<Map<String, dynamic>> _activeFlashMinutes = [];
  List<Map<String, dynamic>> _recentDemandes = [];
  
  // Timers pour mise Ã  jour temps rÃ©el
  Timer? _metricsTimer;
  Timer? _notificationTimer;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadDashboardData();
    _startRealTimeUpdates();
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _rotationController.dispose();
    _slideController.dispose();
    _metricsTimer?.cancel();
    _notificationTimer?.cancel();
    super.dispose();
  }

  void _initializeAnimations() {
    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    
    _rotationController = AnimationController(
      duration: const Duration(seconds: 10),
      vsync: this,
    )..repeat();
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    _rotationAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _rotationController, curve: Curves.linear),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0.0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
  }

  void _startRealTimeUpdates() {
    // Mise Ã  jour des mÃ©triques toutes les 30 secondes
    _metricsTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      _updateMetrics();
    });
    
    // VÃ©rification des notifications toutes les 10 secondes
    _notificationTimer = Timer.periodic(const Duration(seconds: 10), (timer) {
      _checkNotifications();
    });
  }

  Future<void> _loadDashboardData() async {
    setState(() => _isLoading = true);
    
    try {
      await Future.delayed(const Duration(seconds: 1));
      
      _dashboardData = await _generateDashboardData();
      _activeFlashMinutes = await _generateActiveFlashMinutes();
      _recentDemandes = await _generateRecentDemandes();
      
      _hasActiveFlashMinute = _activeFlashMinutes.isNotEmpty;
      
      _slideController.forward();
      
    } catch (e) {
      print('âŒ Erreur chargement dashboard: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<Map<String, dynamic>> _generateDashboardData() async {
    final random = Random();
    final now = DateTime.now();
    
    return {
      'totalRevenue': 1847.50,
      'todayRevenue': 320.0,
      'activeFlashMinutes': 6,
      'totalViews': 342,
      'totalClicks': 89,
      'conversionRate': 26.0,
      'pendingDemandes': 4,
      'acceptedToday': 8,
      'urgentDemandes': 2,
      'averageResponseTime': 18, // minutes
      'nextExpiration': now.add(const Duration(minutes: 43)),
      'topPerformingFlash': 'Rose Minimaliste',
      'lastUpdate': now,
      'trends': {
        'revenue': 15.3, // % d'augmentation
        'views': 23.7,
        'conversion': -2.1,
      },
    };
  }

  Future<List<Map<String, dynamic>>> _generateActiveFlashMinutes() async {
    final now = DateTime.now();
    
    return [
      {
        'id': 'fm_001',
        'title': 'Rose Minimaliste',
        'imageUrl': 'assets/images/flash_rose.jpg',
        'originalPrice': 150.0,
        'flashPrice': 120.0,
        'discount': 20,
        'views': 89,
        'clicks': 23,
        'demandes': 5,
        'status': 'active',
        'priority': 'high',
        'startedAt': now.subtract(const Duration(hours: 2, minutes: 15)),
        'expiresAt': now.add(const Duration(hours: 5, minutes: 45)),
        'performance': 'excellent',
      },
      {
        'id': 'fm_002',
        'title': 'Lion GÃ©omÃ©trique',
        'imageUrl': 'assets/images/flash_lion.jpg',
        'originalPrice': 280.0,
        'flashPrice': 224.0,
        'discount': 20,
        'views': 67,
        'clicks': 18,
        'demandes': 3,
        'status': 'active',
        'priority': 'medium',
        'startedAt': now.subtract(const Duration(hours: 1, minutes: 30)),
        'expiresAt': now.add(const Duration(hours: 6, minutes: 30)),
        'performance': 'good',
      },
      {
        'id': 'fm_003',
        'title': 'Mandala Lotus',
        'imageUrl': 'assets/images/flash_mandala.jpg',
        'originalPrice': 200.0,
        'flashPrice': 160.0,
        'discount': 20,
        'views': 34,
        'clicks': 8,
        'demandes': 1,
        'status': 'expiring',
        'priority': 'urgent',
        'startedAt': now.subtract(const Duration(hours: 7, minutes: 45)),
        'expiresAt': now.add(const Duration(minutes: 15)),
        'performance': 'poor',
      },
    ];
  }

  Future<List<Map<String, dynamic>>> _generateRecentDemandes() async {
    final now = DateTime.now();
    
    return [
      {
        'id': 'demande_001',
        'clientName': 'Sophie Martin',
        'flashTitle': 'Rose Minimaliste',
        'status': 'pending',
        'amount': 36.0,
        'createdAt': now.subtract(const Duration(minutes: 8)),
        'priority': 'high',
      },
      {
        'id': 'demande_002',
        'clientName': 'Lucas Dubois',
        'flashTitle': 'Lion GÃ©omÃ©trique',
        'status': 'accepted',
        'amount': 67.2,
        'createdAt': now.subtract(const Duration(minutes: 25)),
        'priority': 'medium',
      },
      {
        'id': 'demande_003',
        'clientName': 'Emma Leroy',
        'flashTitle': 'Mandala Lotus',
        'status': 'negotiation',
        'amount': 48.0,
        'createdAt': now.subtract(const Duration(hours: 1, minutes: 12)),
        'priority': 'urgent',
      },
    ];
  }

  void _updateMetrics() {
    // Simulation de mise Ã  jour des mÃ©triques en temps rÃ©el
    if (mounted) {
      setState(() {
        _dashboardData['totalViews'] += Random().nextInt(20);
        _dashboardData['totalClicks'] += Random().nextInt(5);
        _dashboardData['lastUpdate'] = DateTime.now();
      });
    }
  }

  void _checkNotifications() {
    // VÃ©rifier les Flash Minute qui expirent bientÃ´t
    final expiringSoon = _activeFlashMinutes.where((fm) {
      final expiresAt = fm['expiresAt'] as DateTime;
      final now = DateTime.now();
      return expiresAt.difference(now).inMinutes <= 30;
    }).toList();
    
    if (expiringSoon.isNotEmpty && mounted) {
      // Mettre Ã  jour le statut
      setState(() {
        for (final fm in expiringSoon) {
          fm['status'] = 'expiring';
          fm['priority'] = 'urgent';
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Flash Minute',
        subtitle: _getSubtitle(),
        showBackButton: true,
        useProStyle: true,
        actions: [
          // Indicateur temps rÃ©el
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            margin: const EdgeInsets.only(right: 8),
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                AnimatedBuilder(
                  animation: _pulseAnimation,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _pulseAnimation.value,
                      child: Container(
                        width: 8,
                        height: 8,
                        decoration: const BoxDecoration(
                          color: Colors.green,
                          shape: BoxShape.circle,
                        ),
                      ),
                    );
                  },
                ),
                const SizedBox(width: 6),
                const Text(
                  'LIVE',
                  style: TextStyle(
                    color: Colors.green,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
          IconButton(
            icon: const Icon(Icons.analytics, color: Colors.white),
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => const AnalyticsFlashsPage()),
            ),
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }

  String _getSubtitle() {
    if (_hasActiveFlashMinute) {
      final activeCount = _activeFlashMinutes.where((fm) => fm['status'] == 'active').length;
      final expiringCount = _activeFlashMinutes.where((fm) => fm['status'] == 'expiring').length;
      
      if (expiringCount > 0) {
        return '$activeCount actifs â€¢ $expiringCount expirent bientÃ´t';
      }
      return '$activeCount Flash Minute actifs';
    }
    return 'Tableau de bord Flash Minute';
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: Colors.orange,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement du dashboard...',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return SlideTransition(
      position: _slideAnimation,
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (!_hasActiveFlashMinute) ...[
              _buildEmptyState(),
            ] else ...[
              _buildOverviewCards(),
              const SizedBox(height: 24),
              _buildActiveFlashMinutes(),
              const SizedBox(height: 24),
              _buildRecentActivity(),
              const SizedBox(height: 24),
              _buildQuickActions(),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.orange.withOpacity(0.1), Colors.transparent],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: Colors.orange.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          AnimatedBuilder(
            animation: _rotationAnimation,
            builder: (context, child) {
              return Transform.rotate(
                angle: _rotationAnimation.value * 2 * pi,
                child: Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.2),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.flash_on,
                    color: Colors.orange,
                    size: 40,
                  ),
                ),
              );
            },
          ),
          const SizedBox(height: 24),
          const Text(
            'Aucun Flash Minute actif',
            style: TextStyle(
              color: Colors.white,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          const Text(
            'CrÃ©ez votre premier Flash Minute pour optimiser vos crÃ©neaux libres et booster vos revenus !',
            style: TextStyle(
              color: Colors.grey,
              fontSize: 16,
              height: 1.4,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 32),
          ElevatedButton.icon(
            onPressed: _createFlashMinute,
            icon: const Icon(Icons.add),
            label: const Text('CrÃ©er un Flash Minute'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOverviewCards() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Vue d\'ensemble',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        SizedBox(
          height: 120,
          child: ListView(
            scrollDirection: Axis.horizontal,
            children: [
              _buildMetricCard(
                'Revenus aujourd\'hui',
                '${_dashboardData['todayRevenue']}â‚¬',
                Icons.euro,
                Colors.green,
                '+${_dashboardData['trends']['revenue']}%',
              ),
              _buildMetricCard(
                'Vues totales',
                '${_dashboardData['totalViews']}',
                Icons.visibility,
                Colors.blue,
                '+${_dashboardData['trends']['views']}%',
              ),
              _buildMetricCard(
                'Taux conversion',
                '${_dashboardData['conversionRate']}%',
                Icons.trending_up,
                Colors.purple,
                '${_dashboardData['trends']['conversion']}%',
              ),
              _buildMetricCard(
                'Demandes en attente',
                '${_dashboardData['pendingDemandes']}',
                Icons.schedule,
                Colors.orange,
                'Urgent!',
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildMetricCard(
    String title, 
    String value, 
    IconData icon, 
    Color color,
    String trend,
  ) {
    final isNegative = trend.startsWith('-');
    final trendColor = isNegative ? Colors.red : Colors.green;
    
    return Container(
      width: 160,
      margin: const EdgeInsets.only(right: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            color.withOpacity(0.1),
            Colors.transparent,
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: color, size: 20),
              const Spacer(),
              if (trend != 'Urgent!') ...[
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                  decoration: BoxDecoration(
                    color: trendColor.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    trend,
                    style: TextStyle(
                      color: trendColor,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ] else ...[
                AnimatedBuilder(
                  animation: _pulseAnimation,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _pulseAnimation.value,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.red,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Text(
                          'URGENT',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ],
            ],
          ),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              color: color,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          Text(
            title,
            style: const TextStyle(
              color: Colors.grey,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActiveFlashMinutes() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Text(
              'Flash Minute actifs',
              style: TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const Spacer(),
            TextButton.icon(
              onPressed: _createFlashMinute,
              icon: const Icon(Icons.add, size: 16),
              label: const Text('Nouveau'),
              style: TextButton.styleFrom(
                foregroundColor: Colors.orange,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _activeFlashMinutes.length,
          itemBuilder: (context, index) {
            final flashMinute = _activeFlashMinutes[index];
            return _buildFlashMinuteCard(flashMinute);
          },
        ),
      ],
    );
  }

  Widget _buildFlashMinuteCard(Map<String, dynamic> flashMinute) {
    final status = flashMinute['status'];
    final isExpiring = status == 'expiring';
    final performance = flashMinute['performance'];
    
    return AnimatedBuilder(
      animation: isExpiring ? _pulseAnimation : const AlwaysStoppedAnimation(1.0),
      builder: (context, child) {
        return Transform.scale(
          scale: isExpiring ? _pulseAnimation.value : 1.0,
          child: Container(
            margin: const EdgeInsets.only(bottom: 12),
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: const Color(0xFF1A1A1A),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: _getPerformanceColor(performance).withOpacity(0.3),
                width: isExpiring ? 2 : 1,
              ),
              boxShadow: isExpiring ? [
                BoxShadow(
                  color: Colors.red.withOpacity(0.3),
                  blurRadius: 8,
                  offset: const Offset(0, 4),
                ),
              ] : null,
            ),
            child: Column(
              children: [
                Row(
                  children: [
                    // Image flash
                    Container(
                      width: 50,
                      height: 50,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        color: Colors.grey[800],
                      ),
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: Image.asset(
                          flashMinute['imageUrl'],
                          fit: BoxFit.cover,
                          errorBuilder: (_, __, ___) => Container(
                            color: Colors.grey[800],
                            child: const Icon(Icons.image, color: Colors.grey),
                          ),
                        ),
                      ),
                    ),
                    
                    const SizedBox(width: 12),
                    
                    // Info flash
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: Text(
                                  flashMinute['title'],
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 16,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                              _buildPerformanceBadge(performance),
                            ],
                          ),
                          const SizedBox(height: 4),
                          Row(
                            children: [
                              Text(
                                '${flashMinute['originalPrice']}â‚¬',
                                style: const TextStyle(
                                  color: Colors.grey,
                                  fontSize: 12,
                                  decoration: TextDecoration.lineThrough,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Text(
                                '${flashMinute['flashPrice']}â‚¬',
                                style: const TextStyle(
                                  color: Colors.orange,
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                decoration: BoxDecoration(
                                  color: Colors.green.withOpacity(0.2),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: Text(
                                  '-${flashMinute['discount']}%',
                                  style: const TextStyle(
                                    color: Colors.green,
                                    fontSize: 10,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    
                    // Countdown
                    _buildCountdown(flashMinute),
                  ],
                ),
                
                const SizedBox(height: 12),
                
                // MÃ©triques
                _buildFlashMetrics(flashMinute),
                
                const SizedBox(height: 12),
                
                // Actions
                _buildFlashActions(flashMinute),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildCountdown(Map<String, dynamic> flashMinute) {
    final expiresAt = flashMinute['expiresAt'] as DateTime;
    final now = DateTime.now();
    final difference = expiresAt.difference(now);
    final hours = difference.inHours;
    final minutes = difference.inMinutes % 60;
    
    final isUrgent = difference.inMinutes < 60;
    
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: isUrgent ? Colors.red.withOpacity(0.2) : Colors.blue.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(
            Icons.schedule,
            color: isUrgent ? Colors.red : Colors.blue,
            size: 16,
          ),
          const SizedBox(height: 4),
          Text(
            '${hours}h ${minutes}m',
            style: TextStyle(
              color: isUrgent ? Colors.red : Colors.blue,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFlashMetrics(Map<String, dynamic> flashMinute) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF2A2A2A),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Expanded(
            child: _buildMiniMetric('Vues', '${flashMinute['views']}', Icons.visibility),
          ),
          Expanded(
            child: _buildMiniMetric('Clics', '${flashMinute['clicks']}', Icons.mouse),
          ),
          Expanded(
            child: _buildMiniMetric('Demandes', '${flashMinute['demandes']}', Icons.request_page),
          ),
          Expanded(
            child: _buildMiniMetric(
              'Taux',
              '${((flashMinute['clicks'] / flashMinute['views']) * 100).toStringAsFixed(1)}%',
              Icons.trending_up,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMiniMetric(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.grey, size: 16),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 14,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            color: Colors.grey,
            fontSize: 10,
          ),
        ),
      ],
    );
  }

  Widget _buildFlashActions(Map<String, dynamic> flashMinute) {
    return Row(
      children: [
        Expanded(
          child: OutlinedButton.icon(
            onPressed: () => _extendFlashMinute(flashMinute['id']),
            icon: const Icon(Icons.schedule, size: 16),
            label: const Text('Prolonger'),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.blue,
              side: const BorderSide(color: Colors.blue),
              padding: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: OutlinedButton.icon(
            onPressed: () => _editFlashMinute(flashMinute['id']),
            icon: const Icon(Icons.edit, size: 16),
            label: const Text('Modifier'),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.orange,
              side: const BorderSide(color: Colors.orange),
              padding: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: ElevatedButton.icon(
            onPressed: () => _stopFlashMinute(flashMinute['id']),
            icon: const Icon(Icons.stop, size: 16),
            label: const Text('ArrÃªter'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPerformanceBadge(String performance) {
    Color color;
    String text;
    
    switch (performance) {
      case 'excellent':
        color = Colors.green;
        text = 'Excellent';
        break;
      case 'good':
        color = Colors.blue;
        text = 'Bon';
        break;
      case 'poor':
        color = Colors.red;
        text = 'Faible';
        break;
      default:
        color = Colors.grey;
        text = 'Normal';
    }
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 10,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildRecentActivity() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Text(
              'ActivitÃ© rÃ©cente',
              style: TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const Spacer(),
            TextButton(
              onPressed: () => Navigator.push(
                context,
                MaterialPageRoute(builder: (_) => const DemandesRdvPage()),
              ),
              child: const Text('Voir tout'),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _recentDemandes.length,
          itemBuilder: (context, index) {
            final demande = _recentDemandes[index];
            return _buildActivityCard(demande);
          },
        ),
      ],
    );
  }

  Widget _buildActivityCard(Map<String, dynamic> demande) {
    final status = demande['status'];
    final statusColor = _getStatusColor(status);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: statusColor.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Container(
            width: 8,
            height: 8,
            decoration: BoxDecoration(
              color: statusColor,
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '${demande['clientName']} - ${demande['flashTitle']}',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  _getStatusText(status),
                  style: TextStyle(
                    color: statusColor,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Text(
            '${demande['amount']}â‚¬',
            style: const TextStyle(
              color: Colors.green,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(width: 8),
          Text(
            _formatTime(demande['createdAt']),
            style: const TextStyle(
              color: Colors.grey,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQuickActions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Actions rapides',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _buildQuickActionCard(
                'CrÃ©er Flash Minute',
                'Nouveau crÃ©neau libre',
                Icons.flash_on,
                Colors.orange,
                _createFlashMinute,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildQuickActionCard(
                'Demandes RDV',
                '${_dashboardData['pendingDemandes']} en attente',
                Icons.schedule,
                Colors.blue,
                () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const DemandesRdvPage()),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: _buildQuickActionCard(
                'Analytics',
                'Performance dÃ©taillÃ©e',
                Icons.analytics,
                Colors.purple,
                () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const AnalyticsFlashsPage()),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildQuickActionCard(
                'ParamÃ¨tres',
                'Configuration',
                Icons.settings,
                Colors.grey,
                _showSettings,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildQuickActionCard(
    String title,
    String subtitle,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: onTap,
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: color.withOpacity(0.3)),
          ),
          child: Column(
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  color: color,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              Text(
                subtitle,
                style: const TextStyle(
                  color: Colors.grey,
                  fontSize: 12,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFloatingActionButton() {
    if (!_hasActiveFlashMinute) return const SizedBox.shrink();
    
    final urgentCount = _dashboardData['urgentDemandes'] as int;
    
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (urgentCount > 0)
          FloatingActionButton.extended(
            heroTag: 'urgent',
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => const DemandesRdvPage()),
            ),
            backgroundColor: Colors.red,
            icon: const Icon(Icons.priority_high),
            label: Text('$urgentCount urgent${urgentCount > 1 ? 's' : ''}'),
          ),
        if (urgentCount > 0) const SizedBox(height: 16),
        FloatingActionButton(
          heroTag: 'create',
          onPressed: _createFlashMinute,
          backgroundColor: Colors.orange,
          child: const Icon(Icons.add),
        ),
      ],
    );
  }

  // Helper methods
  Color _getPerformanceColor(String performance) {
    switch (performance) {
      case 'excellent':
        return Colors.green;
      case 'good':
        return Colors.blue;
      case 'poor':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'pending':
        return Colors.orange;
      case 'accepted':
        return Colors.green;
      case 'negotiation':
        return Colors.blue;
      case 'refused':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  String _getStatusText(String status) {
    switch (status) {
      case 'pending':
        return 'Demande en attente';
      case 'accepted':
        return 'Demande acceptÃ©e';
      case 'negotiation':
        return 'En nÃ©gociation';
      case 'refused':
        return 'Demande refusÃ©e';
      default:
        return status;
    }
  }

  String _formatTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    
    if (difference.inMinutes < 60) {
      return '${difference.inMinutes}min';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}h';
    } else {
      return '${dateTime.day}/${dateTime.month}';
    }
  }

  // Actions
  void _createFlashMinute() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const FlashMinuteCreatePage()),
    ).then((_) => _loadDashboardData());
  }

  void _extendFlashMinute(String flashMinuteId) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text('Prolonger Flash Minute', style: TextStyle(color: Colors.white)),
        content: const Text(
          'De combien d\'heures voulez-vous prolonger ce Flash Minute ?',
          style: TextStyle(color: Colors.grey),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _performExtendFlashMinute(flashMinuteId, 2);
            },
            child: const Text('+2h'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _performExtendFlashMinute(flashMinuteId, 4);
            },
            child: const Text('+4h'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _performExtendFlashMinute(flashMinuteId, 8);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
            child: const Text('+8h'),
          ),
        ],
      ),
    );
  }

  void _performExtendFlashMinute(String flashMinuteId, int hours) {
    setState(() {
      final flashMinute = _activeFlashMinutes.firstWhere((fm) => fm['id'] == flashMinuteId);
      final currentExpiry = flashMinute['expiresAt'] as DateTime;
      flashMinute['expiresAt'] = currentExpiry.add(Duration(hours: hours));
      if (flashMinute['status'] == 'expiring') {
        flashMinute['status'] = 'active';
      }
    });
    
    HapticFeedback.mediumImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Flash Minute prolongÃ© de ${hours}h'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _editFlashMinute(String flashMinuteId) {
    // TODO: ImplÃ©menter l'Ã©dition
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Ã‰dition Ã  implÃ©menter')),
    );
  }

  void _stopFlashMinute(String flashMinuteId) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text('ArrÃªter Flash Minute', style: TextStyle(color: Colors.white)),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir arrÃªter ce Flash Minute ? Cette action est irrÃ©versible.',
          style: TextStyle(color: Colors.grey),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _performStopFlashMinute(flashMinuteId);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('ArrÃªter'),
          ),
        ],
      ),
    );
  }

  void _performStopFlashMinute(String flashMinuteId) {
    setState(() {
      _activeFlashMinutes.removeWhere((fm) => fm['id'] == flashMinuteId);
      _hasActiveFlashMinute = _activeFlashMinutes.isNotEmpty;
    });
    
    HapticFeedback.heavyImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Flash Minute arrÃªtÃ©'),
        backgroundColor: Colors.red,
      ),
    );
  }

  void _showSettings() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Color(0xFF1A1A1A),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[600],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const Padding(
              padding: EdgeInsets.all(20),
              child: Text(
                'ParamÃ¨tres Flash Minute',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const ListTile(
              leading: Icon(Icons.notifications, color: Colors.blue),
              title: Text('Notifications', style: TextStyle(color: Colors.white)),
              subtitle: Text('GÃ©rer les alertes', style: TextStyle(color: Colors.grey)),
              trailing: Switch(value: true, onChanged: null),
            ),
            const ListTile(
              leading: Icon(Icons.schedule, color: Colors.orange),
              title: Text('DurÃ©e par dÃ©faut', style: TextStyle(color: Colors.white)),
              subtitle: Text('8 heures', style: TextStyle(color: Colors.grey)),
              trailing: Icon(Icons.arrow_forward_ios, color: Colors.grey, size: 16),
            ),
            const ListTile(
              leading: Icon(Icons.percent, color: Colors.green),
              title: Text('RÃ©duction par dÃ©faut', style: TextStyle(color: Colors.white)),
              subtitle: Text('20%', style: TextStyle(color: Colors.grey)),
              trailing: Icon(Icons.arrow_forward_ios, color: Colors.grey, size: 16),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\gestion_flashs_page.dart

// lib/pages/pro/flashs/gestion_flashs_page.dart

import 'package:flutter/material.dart';
import '../../../theme/kipik_theme.dart';
import '../../../services/flash/flash_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/flash/flash.dart';
import '../../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../shared/flashs/flash_detail_page.dart';
import 'publier_flash_page.dart';

class GestionFlashsPage extends StatefulWidget {
  const GestionFlashsPage({Key? key}) : super(key: key);

  @override
  State<GestionFlashsPage> createState() => _GestionFlashsPageState();
}

class _GestionFlashsPageState extends State<GestionFlashsPage> with TickerProviderStateMixin {
  final FlashService _flashService = FlashService.instance;
  late TabController _tabController;
  
  List<Flash> _allFlashs = [];
  List<Flash> _publishedFlashs = [];
  List<Flash> _reservedFlashs = [];
  List<Flash> _completedFlashs = [];
  
  bool _isLoading = true;
  String _selectedFilter = 'Tous';
  final List<String> _filters = ['Tous', 'RÃ©alisme', 'Japonais', 'Minimaliste', 'GÃ©omÃ©trique'];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _loadFlashs();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadFlashs() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) {
        throw Exception('Utilisateur non connectÃ©');
      }

      final flashs = await _flashService.getFlashsByArtist(currentUser.uid);
      
      setState(() {
        _allFlashs = flashs;
        _publishedFlashs = flashs.where((f) => f.status == FlashStatus.published).toList();
        _reservedFlashs = flashs.where((f) => [FlashStatus.reserved, FlashStatus.booked].contains(f.status)).toList();
        _completedFlashs = flashs.where((f) => f.status == FlashStatus.completed).toList();
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      _showErrorSnackBar('Erreur lors du chargement des flashs');
    }
  }

  Future<void> _deleteFlash(Flash flash) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Supprimer le flash'),
        content: Text('ÃŠtes-vous sÃ»r de vouloir supprimer "${flash.title}" ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Supprimer', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        // TODO: ImplÃ©menter deleteFlash dans FlashService
        _showSuccessSnackBar('Flash supprimÃ© avec succÃ¨s');
        _loadFlashs(); // Recharger la liste
      } catch (e) {
        _showErrorSnackBar('Erreur lors de la suppression');
      }
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Mes Flashs',
        showBackButton: true,
      ),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          // Content
          SafeArea(
            child: Column(
              children: [
                // Header avec statistiques
                _buildStatsHeader(),
                
                // Filtres
                _buildFilters(),
                
                // Tabs
                _buildTabBar(),
                
                // Content des tabs
                Expanded(
                  child: _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : TabBarView(
                          controller: _tabController,
                          children: [
                            _buildFlashList(_allFlashs, 'Aucun flash trouvÃ©'),
                            _buildFlashList(_publishedFlashs, 'Aucun flash publiÃ©'),
                            _buildFlashList(_reservedFlashs, 'Aucune rÃ©servation'),
                            _buildFlashList(_completedFlashs, 'Aucun flash terminÃ©'),
                          ],
                        ),
                ),
              ],
            ),
          ),
        ],
      ),
      
      // Bouton d'ajout
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => _navigateToPublishFlash(),
        backgroundColor: KipikTheme.rouge,
        icon: const Icon(Icons.add, color: Colors.white),
        label: const Text(
          'Nouveau Flash',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }

  Widget _buildStatsHeader() {
    final totalViews = _allFlashs.fold<int>(0, (sum, flash) => sum + flash.views);
    final totalLikes = _allFlashs.fold<int>(0, (sum, flash) => sum + flash.likes);
    final totalSaves = _allFlashs.fold<int>(0, (sum, flash) => sum + flash.saves);

    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(Icons.dashboard, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              Text(
                'Tableau de bord',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: KipikTheme.rouge,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  'Flashs',
                  _allFlashs.length.toString(),
                  Icons.flash_on,
                  KipikTheme.rouge,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard(
                  'Vues',
                  _formatNumber(totalViews),
                  Icons.visibility,
                  Colors.blue,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard(
                  'Likes',
                  _formatNumber(totalLikes),
                  Icons.favorite,
                  Colors.red,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard(
                  'Favoris',
                  _formatNumber(totalSaves),
                  Icons.bookmark,
                  Colors.orange,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  String _formatNumber(int number) {
    if (number >= 1000) {
      return '${(number / 1000).toStringAsFixed(1)}k';
    }
    return number.toString();
  }

  Widget _buildFilters() {
    return Container(
      height: 50,
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _filters.length,
        itemBuilder: (context, index) {
          final filter = _filters[index];
          final isSelected = filter == _selectedFilter;
          
          return Container(
            margin: const EdgeInsets.only(right: 8),
            child: FilterChip(
              label: Text(filter),
              selected: isSelected,
              onSelected: (selected) {
                setState(() {
                  _selectedFilter = filter;
                });
                // TODO: ImplÃ©menter le filtrage
              },
              selectedColor: KipikTheme.rouge.withOpacity(0.3),
              checkmarkColor: KipikTheme.rouge,
            ),
          );
        },
      ),
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(8),
      ),
      child: TabBar(
        controller: _tabController,
        labelColor: KipikTheme.rouge,
        unselectedLabelColor: Colors.grey[600],
        indicator: BoxDecoration(
          color: KipikTheme.rouge.withOpacity(0.1),
          borderRadius: BorderRadius.circular(6),
        ),
        tabs: [
          Tab(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text('Tous', style: TextStyle(fontSize: 12)),
                Text('${_allFlashs.length}', style: const TextStyle(fontSize: 10)),
              ],
            ),
          ),
          Tab(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text('PubliÃ©s', style: TextStyle(fontSize: 12)),
                Text('${_publishedFlashs.length}', style: const TextStyle(fontSize: 10)),
              ],
            ),
          ),
          Tab(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text('RÃ©servÃ©s', style: TextStyle(fontSize: 12)),
                Text('${_reservedFlashs.length}', style: const TextStyle(fontSize: 10)),
              ],
            ),
          ),
          Tab(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text('TerminÃ©s', style: TextStyle(fontSize: 12)),
                Text('${_completedFlashs.length}', style: const TextStyle(fontSize: 10)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFlashList(List<Flash> flashs, String emptyMessage) {
    if (flashs.isEmpty) {
      return Center(
        child: Container(
          padding: const EdgeInsets.all(24),
          margin: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.flash_off,
                size: 64,
                color: Colors.grey[400],
              ),
              const SizedBox(height: 16),
              Text(
                emptyMessage,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey,
                ),
              ),
              const SizedBox(height: 8),
              const Text(
                'CrÃ©ez votre premier flash pour commencer',
                style: TextStyle(color: Colors.grey),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadFlashs,
      color: KipikTheme.rouge,
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: flashs.length,
        itemBuilder: (context, index) {
          final flash = flashs[index];
          return _buildFlashCard(flash);
        },
      ),
    );
  }

  Widget _buildFlashCard(Flash flash) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: InkWell(
        onTap: () => _navigateToFlashDetail(flash),
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // Image
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  flash.imageUrl,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return Container(
                      width: 80,
                      height: 80,
                      color: Colors.grey[300],
                      child: const Icon(Icons.broken_image),
                    );
                  },
                ),
              ),
              
              const SizedBox(width: 16),
              
              // Informations
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Titre et prix
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            flash.title,
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        Text(
                          '${flash.effectivePrice.toStringAsFixed(0)}â‚¬',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: KipikTheme.rouge,
                          ),
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 4),
                    
                    // Style et taille
                    Text(
                      '${flash.style} â€¢ ${flash.size}',
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                    ),
                    
                    const SizedBox(height: 8),
                    
                    // Badges et statistiques
                    Row(
                      children: [
                        // Badge statut
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: _getStatusColor(flash.status).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(4),
                            border: Border.all(
                              color: _getStatusColor(flash.status).withOpacity(0.3),
                            ),
                          ),
                          child: Text(
                            flash.status.displayName,
                            style: TextStyle(
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                              color: _getStatusColor(flash.status),
                            ),
                          ),
                        ),
                        
                        // Badge Flash Minute
                        if (flash.isMinuteFlash) ...[
                          const SizedBox(width: 4),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                            decoration: BoxDecoration(
                              color: Colors.orange.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(4),
                              border: Border.all(color: Colors.orange.withOpacity(0.3)),
                            ),
                            child: const Text(
                              'MINUTE',
                              style: TextStyle(
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                color: Colors.orange,
                              ),
                            ),
                          ),
                        ],
                        
                        const Spacer(),
                        
                        // Statistiques
                        Row(
                          children: [
                            Icon(Icons.visibility, size: 14, color: Colors.grey[500]),
                            const SizedBox(width: 2),
                            Text('${flash.views}', style: const TextStyle(fontSize: 12)),
                            const SizedBox(width: 8),
                            Icon(Icons.favorite, size: 14, color: Colors.grey[500]),
                            const SizedBox(width: 2),
                            Text('${flash.likes}', style: const TextStyle(fontSize: 12)),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              
              // Actions
              PopupMenuButton<String>(
                onSelected: (action) => _handleFlashAction(action, flash),
                itemBuilder: (context) => [
                  const PopupMenuItem(
                    value: 'view',
                    child: Row(
                      children: [
                        Icon(Icons.visibility),
                        SizedBox(width: 8),
                        Text('Voir'),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'edit',
                    child: Row(
                      children: [
                        Icon(Icons.edit),
                        SizedBox(width: 8),
                        Text('Modifier'),
                      ],
                    ),
                  ),
                  if (flash.status == FlashStatus.published)
                    const PopupMenuItem(
                      value: 'minute',
                      child: Row(
                        children: [
                          Icon(Icons.flash_on, color: Colors.orange),
                          SizedBox(width: 8),
                          Text('Flash Minute'),
                        ],
                      ),
                    ),
                  const PopupMenuItem(
                    value: 'delete',
                    child: Row(
                      children: [
                        Icon(Icons.delete, color: Colors.red),
                        SizedBox(width: 8),
                        Text('Supprimer'),
                      ],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Color _getStatusColor(FlashStatus status) {
    switch (status) {
      case FlashStatus.published:
        return Colors.green;
      case FlashStatus.reserved:
        return Colors.orange;
      case FlashStatus.booked:
        return Colors.blue;
      case FlashStatus.completed:
        return Colors.purple;
      case FlashStatus.withdrawn:
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  void _handleFlashAction(String action, Flash flash) {
    switch (action) {
      case 'view':
        _navigateToFlashDetail(flash);
        break;
      case 'edit':
        _showInfoSnackBar('Modification flash - BientÃ´t disponible');
        break;
      case 'minute':
        _showInfoSnackBar('CrÃ©ation Flash Minute - Semaine 5');
        break;
      case 'delete':
        _deleteFlash(flash);
        break;
    }
  }

  void _navigateToFlashDetail(Flash flash) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => FlashDetailPage(flash: flash),
      ),
    );
  }

  void _navigateToPublishFlash() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const PublierFlashPage(),
      ),
    ).then((_) {
      // Recharger la liste aprÃ¨s publication
      _loadFlashs();
    });
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        duration: const Duration(seconds: 2),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\publier_flash_page.dart

// lib/pages/pro/flashs/publier_flash_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../theme/kipik_theme.dart';
import '../../../services/flash/flash_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/flash/flash.dart';
import '../../../widgets/common/app_bars/custom_app_bar_particulier.dart';

class PublierFlashPage extends StatefulWidget {
  const PublierFlashPage({Key? key}) : super(key: key);

  @override
  State<PublierFlashPage> createState() => _PublierFlashPageState();
}

class _PublierFlashPageState extends State<PublierFlashPage> {
  final _formKey = GlobalKey<FormState>();
  final FlashService _flashService = FlashService.instance;
  
  // Controllers
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _priceController = TextEditingController();
  final _sizeController = TextEditingController();
  final _sizeDescriptionController = TextEditingController();
  final _priceNoteController = TextEditingController();
  
  // Form data
  String _selectedStyle = 'RÃ©alisme';
  List<String> _selectedBodyPlacements = [];
  List<String> _selectedColors = [];
  List<String> _tags = [];
  String _imageUrl = '';
  List<String> _additionalImages = [];
  List<DateTime> _availableTimeSlots = [];
  FlashType _flashType = FlashType.standard;
  
  // UI State
  bool _isPublishing = false;
  bool _isImageUploading = false;
  
  // Options
  final List<String> _styles = [
    'RÃ©alisme', 'Japonais', 'GÃ©omÃ©trique', 'Minimaliste', 'Traditionnel', 
    'Old School', 'BiomÃ©canique', 'Aquarelle', 'Lettering', 'Tribal'
  ];
  
  final List<String> _bodyPlacements = [
    'Poignet', 'Avant-bras', 'Bras', 'Ã‰paule', 'Dos', 'Poitrine', 
    'Cuisse', 'Jambe', 'Cheville', 'Nuque', 'Ventre', 'CÃ´tes'
  ];
  
  final List<String> _colors = [
    'Noir', 'Couleur', 'Noir et Gris', 'Rouge', 'Bleu', 'Vert', 
    'Violet', 'Orange', 'Jaune', 'Rose'
  ];

  @override
  void initState() {
    super.initState();
    _generateDemoTimeSlots();
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _priceController.dispose();
    _sizeController.dispose();
    _sizeDescriptionController.dispose();
    _priceNoteController.dispose();
    super.dispose();
  }

  void _generateDemoTimeSlots() {
    final now = DateTime.now();
    _availableTimeSlots = [
      now.add(const Duration(days: 3)),
      now.add(const Duration(days: 7)),
      now.add(const Duration(days: 10)),
      now.add(const Duration(days: 14)),
    ];
  }

  Future<void> _selectImage() async {
    setState(() {
      _isImageUploading = true;
    });
    
    // Simuler upload d'image
    await Future.delayed(const Duration(seconds: 2));
    
    // Image de dÃ©monstration alÃ©atoire
    final imageId = DateTime.now().millisecondsSinceEpoch;
    setState(() {
      _imageUrl = 'https://picsum.photos/seed/flash_$imageId/400/600';
      _isImageUploading = false;
    });
    
    _showSuccessSnackBar('Image ajoutÃ©e avec succÃ¨s !');
  }

  Future<void> _addAdditionalImage() async {
    setState(() {
      _isImageUploading = true;
    });
    
    await Future.delayed(const Duration(seconds: 1));
    
    final imageId = DateTime.now().millisecondsSinceEpoch;
    setState(() {
      _additionalImages.add('https://picsum.photos/seed/extra_$imageId/400/600');
      _isImageUploading = false;
    });
  }

  void _addTag(String tag) {
    if (tag.isNotEmpty && !_tags.contains(tag)) {
      setState(() {
        _tags.add(tag);
      });
    }
  }

  void _removeTag(String tag) {
    setState(() {
      _tags.remove(tag);
    });
  }

  Future<void> _publishFlash() async {
    if (!_formKey.currentState!.validate()) return;
    
    if (_imageUrl.isEmpty) {
      _showErrorSnackBar('Veuillez ajouter une image principale');
      return;
    }
    
    if (_selectedBodyPlacements.isEmpty) {
      _showErrorSnackBar('Veuillez sÃ©lectionner au moins un emplacement');
      return;
    }
    
    if (_selectedColors.isEmpty) {
      _showErrorSnackBar('Veuillez sÃ©lectionner au moins une couleur');
      return;
    }

    setState(() {
      _isPublishing = true;
    });

    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) {
        throw Exception('Utilisateur non connectÃ©');
      }

      final flash = Flash(
        id: '', // Sera gÃ©nÃ©rÃ© par le service
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        imageUrl: _imageUrl,
        additionalImages: _additionalImages,
        tattooArtistId: currentUser.uid,
        tattooArtistName: currentUser.name ?? 'Tatoueur',
        studioName: 'Mon Studio', // TODO: RÃ©cupÃ©rer depuis profil
        style: _selectedStyle,
        size: _sizeController.text.trim(),
        sizeDescription: _sizeDescriptionController.text.trim(),
        price: double.parse(_priceController.text),
        priceNote: _priceNoteController.text.trim(),
        bodyPlacements: _selectedBodyPlacements,
        colors: _selectedColors,
        tags: _tags,
        availableTimeSlots: _availableTimeSlots,
        flashType: _flashType,
        status: FlashStatus.published,
        latitude: 48.8566, // TODO: GÃ©olocalisation rÃ©elle
        longitude: 2.3522,
        city: 'Paris',
        country: 'France',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await _flashService.createFlash(flash);
      
      _showSuccessSnackBar('Flash publiÃ© avec succÃ¨s !');
      
      // Retourner Ã  la page prÃ©cÃ©dente aprÃ¨s un dÃ©lai
      await Future.delayed(const Duration(seconds: 1));
      if (mounted) {
        Navigator.of(context).pop();
      }
      
    } catch (e) {
      _showErrorSnackBar('Erreur lors de la publication : $e');
    } finally {
      setState(() {
        _isPublishing = false;
      });
    }
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'Publier un Flash',
        showBackButton: true,
      ),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          // Content
          SafeArea(
            child: Form(
              key: _formKey,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Header avec info
                    _buildHeader(),
                    
                    const SizedBox(height: 24),
                    
                    // Image principale
                    _buildImageSection(),
                    
                    const SizedBox(height: 24),
                    
                    // Informations de base
                    _buildBasicInfoSection(),
                    
                    const SizedBox(height: 24),
                    
                    // Style et emplacements
                    _buildStyleAndPlacementSection(),
                    
                    const SizedBox(height: 24),
                    
                    // Prix et taille
                    _buildPriceAndSizeSection(),
                    
                    const SizedBox(height: 24),
                    
                    // Tags
                    _buildTagsSection(),
                    
                    const SizedBox(height: 24),
                    
                    // Type de flash
                    _buildFlashTypeSection(),
                    
                    const SizedBox(height: 32),
                    
                    // Bouton publier
                    _buildPublishButton(),
                    
                    const SizedBox(height: 24),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Icon(
            Icons.flash_on,
            color: KipikTheme.rouge,
            size: 32,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Nouveau Flash',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: KipikTheme.rouge,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  'Partagez votre crÃ©ation avec la communautÃ©',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImageSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.image, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              const Text(
                'Image principale *',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Image principale
          GestureDetector(
            onTap: _isImageUploading ? null : _selectImage,
            child: Container(
              height: 200,
              width: double.infinity,
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.grey[300]!),
              ),
              child: _isImageUploading
                  ? const Center(
                      child: CircularProgressIndicator(),
                    )
                  : _imageUrl.isNotEmpty
                      ? Stack(
                          children: [
                            ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.network(
                                _imageUrl,
                                width: double.infinity,
                                height: double.infinity,
                                fit: BoxFit.cover,
                              ),
                            ),
                            Positioned(
                              top: 8,
                              right: 8,
                              child: GestureDetector(
                                onTap: () => setState(() => _imageUrl = ''),
                                child: Container(
                                  padding: const EdgeInsets.all(4),
                                  decoration: const BoxDecoration(
                                    color: Colors.red,
                                    shape: BoxShape.circle,
                                  ),
                                  child: const Icon(
                                    Icons.close,
                                    color: Colors.white,
                                    size: 16,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        )
                      : Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.add_photo_alternate,
                              size: 48,
                              color: Colors.grey[400],
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Ajouter une image',
                              style: TextStyle(
                                color: Colors.grey[600],
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Images supplÃ©mentaires
          Row(
            children: [
              Text(
                'Images supplÃ©mentaires (${_additionalImages.length}/3)',
                style: const TextStyle(fontWeight: FontWeight.w500),
              ),
              const Spacer(),
              if (_additionalImages.length < 3)
                TextButton.icon(
                  onPressed: _isImageUploading ? null : _addAdditionalImage,
                  icon: const Icon(Icons.add),
                  label: const Text('Ajouter'),
                ),
            ],
          ),
          
          if (_additionalImages.isNotEmpty) ...[
            const SizedBox(height: 8),
            SizedBox(
              height: 80,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: _additionalImages.length,
                itemBuilder: (context, index) {
                  return Container(
                    margin: const EdgeInsets.only(right: 8),
                    child: Stack(
                      children: [
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: Image.network(
                            _additionalImages[index],
                            width: 80,
                            height: 80,
                            fit: BoxFit.cover,
                          ),
                        ),
                        Positioned(
                          top: 2,
                          right: 2,
                          child: GestureDetector(
                            onTap: () => setState(() => _additionalImages.removeAt(index)),
                            child: Container(
                              padding: const EdgeInsets.all(2),
                              decoration: const BoxDecoration(
                                color: Colors.red,
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(
                                Icons.close,
                                color: Colors.white,
                                size: 12,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildBasicInfoSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.info_outline, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              const Text(
                'Informations de base',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Titre
          TextFormField(
            controller: _titleController,
            decoration: const InputDecoration(
              labelText: 'Titre du flash *',
              hintText: 'Ex: Rose minimaliste',
              border: OutlineInputBorder(),
            ),
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'Le titre est obligatoire';
              }
              return null;
            },
          ),
          
          const SizedBox(height: 16),
          
          // Description
          TextFormField(
            controller: _descriptionController,
            decoration: const InputDecoration(
              labelText: 'Description *',
              hintText: 'DÃ©crivez votre flash...',
              border: OutlineInputBorder(),
            ),
            maxLines: 3,
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'La description est obligatoire';
              }
              return null;
            },
          ),
        ],
      ),
    );
  }

  Widget _buildStyleAndPlacementSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.style, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              const Text(
                'Style et emplacements',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Style
          DropdownButtonFormField<String>(
            value: _selectedStyle,
            decoration: const InputDecoration(
              labelText: 'Style *',
              border: OutlineInputBorder(),
            ),
            items: _styles.map((style) {
              return DropdownMenuItem(
                value: style,
                child: Text(style),
              );
            }).toList(),
            onChanged: (value) {
              setState(() {
                _selectedStyle = value!;
              });
            },
          ),
          
          const SizedBox(height: 16),
          
          // Emplacements
          const Text(
            'Emplacements recommandÃ©s *',
            style: TextStyle(fontWeight: FontWeight.w500),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: _bodyPlacements.map((placement) {
              final isSelected = _selectedBodyPlacements.contains(placement);
              return FilterChip(
                label: Text(placement),
                selected: isSelected,
                onSelected: (selected) {
                  setState(() {
                    if (selected) {
                      _selectedBodyPlacements.add(placement);
                    } else {
                      _selectedBodyPlacements.remove(placement);
                    }
                  });
                },
                selectedColor: KipikTheme.rouge.withOpacity(0.3),
                checkmarkColor: KipikTheme.rouge,
              );
            }).toList(),
          ),
          
          const SizedBox(height: 16),
          
          // Couleurs
          const Text(
            'Couleurs *',
            style: TextStyle(fontWeight: FontWeight.w500),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: _colors.map((color) {
              final isSelected = _selectedColors.contains(color);
              return FilterChip(
                label: Text(color),
                selected: isSelected,
                onSelected: (selected) {
                  setState(() {
                    if (selected) {
                      _selectedColors.add(color);
                    } else {
                      _selectedColors.remove(color);
                    }
                  });
                },
                selectedColor: KipikTheme.rouge.withOpacity(0.3),
                checkmarkColor: KipikTheme.rouge,
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildPriceAndSizeSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.euro, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              const Text(
                'Prix et dimensions',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          Row(
            children: [
              // Prix
              Expanded(
                child: TextFormField(
                  controller: _priceController,
                  decoration: const InputDecoration(
                    labelText: 'Prix (â‚¬) *',
                    hintText: '150',
                    border: OutlineInputBorder(),
                    suffixText: 'â‚¬',
                  ),
                  keyboardType: TextInputType.number,
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'^\d+\.?\d{0,2}')),
                  ],
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Prix obligatoire';
                    }
                    final price = double.tryParse(value);
                    if (price == null || price <= 0) {
                      return 'Prix invalide';
                    }
                    return null;
                  },
                ),
              ),
              
              const SizedBox(width: 16),
              
              // Taille
              Expanded(
                child: TextFormField(
                  controller: _sizeController,
                  decoration: const InputDecoration(
                    labelText: 'Taille *',
                    hintText: '8x6cm',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Taille obligatoire';
                    }
                    return null;
                  },
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Description taille
          TextFormField(
            controller: _sizeDescriptionController,
            decoration: const InputDecoration(
              labelText: 'Description de la taille',
              hintText: 'Parfait pour poignet ou cheville',
              border: OutlineInputBorder(),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Note prix
          TextFormField(
            controller: _priceNoteController,
            decoration: const InputDecoration(
              labelText: 'Note sur le prix',
              hintText: 'Prix final selon adaptation',
              border: OutlineInputBorder(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTagsSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.tag, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              const Text(
                'Tags',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Input tag
          Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    hintText: 'Ajouter un tag...',
                    border: OutlineInputBorder(),
                  ),
                  onSubmitted: (value) {
                    _addTag(value.trim());
                  },
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Tags sÃ©lectionnÃ©s
          if (_tags.isNotEmpty) ...[
            const Text(
              'Tags ajoutÃ©s:',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: _tags.map((tag) {
                return Chip(
                  label: Text('#$tag'),
                  onDeleted: () => _removeTag(tag),
                  deleteIconColor: KipikTheme.rouge,
                );
              }).toList(),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildFlashTypeSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.category, color: KipikTheme.rouge),
              const SizedBox(width: 8),
              const Text(
                'Type de flash',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          ...FlashType.values.map((type) {
            return RadioListTile<FlashType>(
              title: Text(type.displayName),
              subtitle: Text(type.description),
              value: type,
              groupValue: _flashType,
              onChanged: (value) {
                setState(() {
                  _flashType = value!;
                });
              },
              activeColor: KipikTheme.rouge,
            );
          }),
        ],
      ),
    );
  }

  Widget _buildPublishButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isPublishing ? null : _publishFlash,
        style: ElevatedButton.styleFrom(
          backgroundColor: KipikTheme.rouge,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isPublishing
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  ),
                  SizedBox(width: 12),
                  Text(
                    'Publication en cours...',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              )
            : const Text(
                'Publier le Flash',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\flashs\rdv_validation_page.dart

// lib/pages/pro/flashs/rdv_validation_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import '../../../theme/kipik_theme.dart';
import '../../../models/flash/flash_booking.dart';
import '../../../models/flash/flash.dart';
import '../../../models/flash/flash_booking_status.dart'; // âœ… Import explicite
import '../../../services/flash/flash_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../shared/booking/booking_chat_page.dart';

/// Page professionnelle sophistiquÃ©e de validation des RDV flash
class RdvValidationPage extends StatefulWidget {
  const RdvValidationPage({Key? key}) : super(key: key);

  @override
  State<RdvValidationPage> createState() => _RdvValidationPageState();
}

class _RdvValidationPageState extends State<RdvValidationPage> 
    with TickerProviderStateMixin {
  
  late TabController _tabController;
  late AnimationController _pulseController;
  late AnimationController _notificationController;
  late Animation<double> _pulseAnimation;
  late Animation<double> _notificationAnimation;
  
  bool _isLoading = true;
  bool _isRefreshing = false;
  Timer? _autoRefreshTimer;
  Timer? _notificationTimer;
  
  // DonnÃ©es et cache
  List<FlashBooking> _allBookings = [];
  List<FlashBooking> _pendingBookings = [];
  List<FlashBooking> _todayBookings = [];
  List<FlashBooking> _upcomingBookings = [];
  Map<String, Flash> _flashsCache = {};
  Map<String, Map<String, dynamic>> _clientsCache = {};
  
  // Stats analytics
  int _totalEarningsToday = 0;
  int _totalBookingsToday = 0;
  int _pendingCount = 0;
  int _urgentCount = 0;

  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _loadData();
    _startTimers();
  }

  void _initializeControllers() {
    _tabController = TabController(length: 3, vsync: this);
    
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);
    
    _notificationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    )..repeat(reverse: true);
    
    _pulseAnimation = Tween<double>(begin: 0.95, end: 1.05).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    _notificationAnimation = Tween<double>(begin: 0.8, end: 1.2).animate(
      CurvedAnimation(parent: _notificationController, curve: Curves.elasticOut),
    );
  }

  void _startTimers() {
    // Auto-refresh toutes les 30 secondes
    _autoRefreshTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      if (mounted) _refreshData();
    });
    
    // VÃ©rification notifications urgence toutes les 10 secondes
    _notificationTimer = Timer.periodic(const Duration(seconds: 10), (_) {
      if (mounted) _checkUrgentBookings();
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _pulseController.dispose();
    _notificationController.dispose();
    _autoRefreshTimer?.cancel();
    _notificationTimer?.cancel();
    super.dispose();
  }

  Future<void> _loadData() async {
    if (!mounted) return;
    
    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) return;

      // Charger les rÃ©servations du tatoueur
      final bookings = await FlashService.instance.getBookingsByArtist(currentUser['uid']);
      
      // Charger les dÃ©tails en parallÃ¨le
      await Future.wait([
        _loadFlashDetails(bookings),
        _loadClientDetails(bookings),
      ]);
      
      if (!mounted) return;
      
      setState(() {
        _allBookings = bookings;
        _categorizeBookings();
        _calculateAnalytics();
        _isLoading = false;
      });
    } catch (e) {
      if (mounted) {
        setState(() => _isLoading = false);
        _showErrorSnackBar('Erreur: ${e.toString()}');
      }
    }
  }

  Future<void> _loadFlashDetails(List<FlashBooking> bookings) async {
    final futures = bookings.map((booking) async {
      if (!_flashsCache.containsKey(booking.flashId)) {
        try {
          final flash = await FlashService.instance.getFlashById(booking.flashId);
          _flashsCache[booking.flashId] = flash;
        } catch (e) {
          print('Erreur chargement flash ${booking.flashId}: $e');
        }
      }
    });
    
    await Future.wait(futures);
  }

  Future<void> _loadClientDetails(List<FlashBooking> bookings) async {
    final futures = bookings.map((booking) async {
      if (!_clientsCache.containsKey(booking.clientId)) {
        try {
          // Simuler les donnÃ©es client (remplacer par votre service)
          _clientsCache[booking.clientId] = {
            'name': 'Client ${booking.clientId.substring(0, 8)}',
            'email': 'client@example.com',
            'phone': booking.clientPhone,
            'avatar': _generateClientAvatar(booking.clientId),
            'rating': (3.5 + (booking.clientId.hashCode % 3)).toDouble(),
            'totalBookings': 2 + (booking.clientId.hashCode % 8),
            'isVerified': booking.clientId.hashCode % 3 == 0,
            'lastBooking': DateTime.now().subtract(Duration(days: booking.clientId.hashCode % 90)),
          };
        } catch (e) {
          print('Erreur chargement client ${booking.clientId}: $e');
        }
      }
    });
    
    await Future.wait(futures);
  }

  String _generateClientAvatar(String clientId) {
    final colors = ['FF6B6B', '4ECDC4', '45B7D1', '96CEB4', 'FFEAA7', 'DDA0DD'];
    final colorIndex = clientId.hashCode % colors.length;
    final initials = 'C${clientId.substring(0, 1).toUpperCase()}';
    return 'https://ui-avatars.com/api/?name=$initials&background=${colors[colorIndex]}&color=fff&size=128';
  }

  void _categorizeBookings() {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final tomorrow = today.add(const Duration(days: 1));
    
    _pendingBookings = _allBookings
        .where((b) => b.status == FlashBookingStatus.pending)
        .toList()
      ..sort((a, b) => a.createdAt.compareTo(b.createdAt));
    
    _todayBookings = _allBookings
        .where((b) => b.status == FlashBookingStatus.confirmed && 
                     b.requestedDate.isAfter(today) && 
                     b.requestedDate.isBefore(tomorrow))
        .toList()
      ..sort((a, b) => a.requestedDate.compareTo(b.requestedDate));
    
    _upcomingBookings = _allBookings
        .where((b) => b.status == FlashBookingStatus.confirmed && 
                     b.requestedDate.isAfter(tomorrow))
        .toList()
      ..sort((a, b) => a.requestedDate.compareTo(b.requestedDate));
  }

  void _calculateAnalytics() {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final tomorrow = today.add(const Duration(days: 1));
    
    _totalEarningsToday = _allBookings
        .where((b) => b.requestedDate.isAfter(today) && 
                     b.requestedDate.isBefore(tomorrow) &&
                     (b.status == FlashBookingStatus.confirmed || 
                      b.status == FlashBookingStatus.completed))
        .fold(0, (sum, b) => sum + b.totalPrice.toInt());
    
    _totalBookingsToday = _todayBookings.length;
    _pendingCount = _pendingBookings.length;
    
    // Calcul urgence (RDV dans moins de 2h)
    _urgentCount = _allBookings
        .where((b) => b.status == FlashBookingStatus.confirmed && 
                     b.requestedDate.difference(now).inHours <= 2 &&
                     b.requestedDate.isAfter(now))
        .length;
  }

  void _checkUrgentBookings() {
    if (_urgentCount > 0) {
      HapticFeedback.mediumImpact();
    }
  }

  Future<void> _refreshData() async {
    if (_isRefreshing) return;
    
    setState(() => _isRefreshing = true);
    await _loadData();
    if (mounted) {
      setState(() => _isRefreshing = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Gestion RDV',
        subtitle: _urgentCount > 0 ? '$_urgentCount RDV urgent(s)!' : 'Dashboard professionnel',
        showBackButton: true,
        showNotificationIcon: _pendingCount > 0,
        notificationCount: _pendingCount,
        onNotificationPressed: () => _tabController.animateTo(0),
        useProStyle: true, // âœ… Active le style Pro
        actions: [
          IconButton(
            onPressed: _refreshData,
            icon: AnimatedRotation(
              turns: _isRefreshing ? 1 : 0,
              duration: const Duration(milliseconds: 500),
              child: Icon(
                Icons.refresh,
                color: _isRefreshing ? KipikTheme.rouge : Colors.white,
              ),
            ),
          ),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert, color: Colors.white),
            color: const Color(0xFF1A1A1A),
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'notification_settings',
                child: Row(
                  children: [
                    Icon(Icons.notifications_outlined, color: Colors.blue),
                    SizedBox(width: 8),
                    Text('Notifications', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'batch_accept',
                child: Row(
                  children: [
                    Icon(Icons.done_all, color: Colors.green),
                    SizedBox(width: 8),
                    Text('Accepter tout', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'analytics',
                child: Row(
                  children: [
                    Icon(Icons.analytics, color: Colors.blue),
                    SizedBox(width: 8),
                    Text('Analytics', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'export',
                child: Row(
                  children: [
                    Icon(Icons.download, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Exporter', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
            ],
            onSelected: _handleMenuAction,
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildContent(),
      floatingActionButton: _buildFloatingActions(),
    );
  }

  PreferredSizeWidget _buildProfessionalAppBar() {
    return AppBar(
      backgroundColor: const Color(0xFF1A1A1A),
      elevation: 0,
      leading: IconButton(
        onPressed: () => Navigator.pop(context),
        icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
      ),
      title: Row(
        children: [
          AnimatedBuilder(
            animation: _urgentCount > 0 ? _notificationAnimation : _pulseAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: _urgentCount > 0 ? _notificationAnimation.value : _pulseAnimation.value,
                child: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: _urgentCount > 0 
                          ? [Colors.red, Colors.red.withOpacity(0.7)]
                          : [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.7)],
                    ),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    _urgentCount > 0 ? Icons.notifications_active : Icons.business_center,
                    color: Colors.white,
                    size: 20,
                  ),
                ),
              );
            },
          ),
          const SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Gestion RDV',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                _urgentCount > 0 ? '$_urgentCount RDV urgent(s)!' : 'Dashboard professionnel',
                style: TextStyle(
                  color: _urgentCount > 0 ? Colors.red : Colors.grey,
                  fontSize: 12,
                  fontWeight: _urgentCount > 0 ? FontWeight.bold : FontWeight.normal,
                ),
              ),
            ],
          ),
        ],
      ),
      actions: [
        if (_pendingCount > 0)
          AnimatedBuilder(
            animation: _pulseAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: _pulseAnimation.value,
                child: Stack(
                  children: [
                    IconButton(
                      onPressed: () => _tabController.animateTo(0),
                      icon: const Icon(Icons.pending_actions, color: Colors.orange),
                    ),
                    Positioned(
                      right: 6,
                      top: 6,
                      child: Container(
                        padding: const EdgeInsets.all(2),
                        decoration: const BoxDecoration(
                          color: Colors.red,
                          shape: BoxShape.circle,
                        ),
                        constraints: const BoxConstraints(
                          minWidth: 16,
                          minHeight: 16,
                        ),
                        child: Text(
                          '$_pendingCount',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            },
          ),
        IconButton(
          onPressed: _refreshData,
          icon: AnimatedRotation(
            turns: _isRefreshing ? 1 : 0,
            duration: const Duration(milliseconds: 500),
            child: Icon(
              Icons.refresh,
              color: _isRefreshing ? KipikTheme.rouge : Colors.white,
            ),
          ),
        ),
        PopupMenuButton<String>(
          icon: const Icon(Icons.more_vert, color: Colors.white),
          color: const Color(0xFF1A1A1A),
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'notification_settings',
              child: Row(
                children: [
                  Icon(Icons.notifications_outlined, color: Colors.blue),
                  SizedBox(width: 8),
                  Text('Notifications', style: TextStyle(color: Colors.white)),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'batch_accept',
              child: Row(
                children: [
                  Icon(Icons.done_all, color: Colors.green),
                  SizedBox(width: 8),
                  Text('Accepter tout', style: TextStyle(color: Colors.white)),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'analytics',
              child: Row(
                children: [
                  Icon(Icons.analytics, color: Colors.blue),
                  SizedBox(width: 8),
                  Text('Analytics', style: TextStyle(color: Colors.white)),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'export',
              child: Row(
                children: [
                  Icon(Icons.download, color: Colors.white),
                  SizedBox(width: 8),
                  Text('Exporter', style: TextStyle(color: Colors.white)),
                ],
              ),
            ),
          ],
          onSelected: _handleMenuAction,
        ),
      ],
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'notification_settings':
        _showNotificationSettings();
        break;
      case 'batch_accept':
        _batchAcceptBookings();
        break;
      case 'analytics':
        _showAnalytics();
        break;
      case 'export':
        _exportData();
        break;
    }
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement des RDV...',
            style: TextStyle(color: Colors.grey, fontSize: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        _buildAnalyticsDashboard(),
        _buildAdvancedTabBar(),
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: [
              _buildPendingBookingsTab(),
              _buildTodayBookingsTab(),
              _buildUpcomingBookingsTab(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildAnalyticsDashboard() {
    return Container(
      margin: const EdgeInsets.all(16),
      child: Card(
        color: const Color(0xFF1A1A1A),
        elevation: 8,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                KipikTheme.rouge.withOpacity(0.1),
                Colors.transparent,
              ],
            ),
          ),
          child: Column(
            children: [
              Row(
                children: [
                  Icon(Icons.dashboard, color: KipikTheme.rouge, size: 20),
                  const SizedBox(width: 8),
                  const Text(
                    'Analytics Temps RÃ©el',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.circle, color: Colors.green, size: 8),
                        const SizedBox(width: 4),
                        const Text(
                          'Live',
                          style: TextStyle(color: Colors.green, fontSize: 10),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: _buildAnalyticsCard(
                      'Gains Aujourd\'hui',
                      '$_totalEarningsTodayâ‚¬',
                      Icons.euro,
                      Colors.green,
                      trend: '+12%',
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildAnalyticsCard(
                      'RDV Aujourd\'hui',
                      '$_totalBookingsToday',
                      Icons.today,
                      Colors.blue,
                      trend: '+3',
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildAnalyticsCard(
                      'En Attente',
                      '$_pendingCount',
                      Icons.schedule,
                      Colors.orange,
                      isUrgent: _pendingCount > 5,
                    ),
                  ),
                ],
              ),
              if (_urgentCount > 0) ...[
                const SizedBox(height: 16),
                _buildUrgentAlert(),
              ],
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAnalyticsCard(
    String label,
    String value,
    IconData icon,
    Color color, {
    String? trend,
    bool isUrgent = false,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: isUrgent ? Colors.red.withOpacity(0.1) : color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isUrgent ? Colors.red.withOpacity(0.3) : color.withOpacity(0.3),
        ),
      ),
      child: Column(
        children: [
          AnimatedBuilder(
            animation: isUrgent ? _notificationAnimation : _pulseAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: isUrgent ? _notificationAnimation.value : 1.0,
                child: Icon(
                  icon,
                  color: isUrgent ? Colors.red : color,
                  size: 24,
                ),
              );
            },
          ),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              color: isUrgent ? Colors.red : color,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              color: Colors.grey.shade400,
              fontSize: 10,
            ),
            textAlign: TextAlign.center,
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
          if (trend != null) ...[
            const SizedBox(height: 4),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                trend,
                style: const TextStyle(
                  color: Colors.green,
                  fontSize: 8,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildUrgentAlert() {
    return AnimatedBuilder(
      animation: _notificationAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _notificationAnimation.value,
          child: Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.red.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.red.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.warning, color: Colors.red, size: 20),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'RDV Urgents !',
                        style: const TextStyle(
                          color: Colors.red,
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        '$_urgentCount RDV dans moins de 2h',
                        style: TextStyle(
                          color: Colors.red.withOpacity(0.8),
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton(
                  onPressed: () => _tabController.animateTo(1),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  ),
                  child: const Text('Voir', style: TextStyle(fontSize: 12)),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildAdvancedTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: TabBar(
        controller: _tabController,
        indicator: BoxDecoration(
          gradient: LinearGradient(
            colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        indicatorSize: TabBarIndicatorSize.tab,
        dividerColor: Colors.transparent,
        labelColor: Colors.white,
        unselectedLabelColor: Colors.grey.shade400,
        labelStyle: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
        padding: const EdgeInsets.all(4),
        tabs: [
          _buildAdvancedTab(
            'En attente',
            _pendingBookings.length,
            Icons.schedule,
            Colors.orange,
            isUrgent: _pendingCount > 5,
          ),
          _buildAdvancedTab(
            'Aujourd\'hui',
            _todayBookings.length,
            Icons.today,
            Colors.blue,
            isUrgent: _urgentCount > 0,
          ),
          _buildAdvancedTab(
            'Ã€ venir',
            _upcomingBookings.length,
            Icons.upcoming,
            Colors.green,
          ),
        ],
      ),
    );
  }

  Widget _buildAdvancedTab(
    String label,
    int count,
    IconData icon,
    Color color, {
    bool isUrgent = false,
  }) {
    return Tab(
      child: AnimatedBuilder(
        animation: isUrgent ? _notificationAnimation : _pulseAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: isUrgent ? 0.9 + (_notificationAnimation.value * 0.1) : 1.0,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Stack(
                  children: [
                    Icon(icon, size: 16),
                    if (isUrgent)
                      Positioned(
                        right: -2,
                        top: -2,
                        child: Container(
                          width: 8,
                          height: 8,
                          decoration: const BoxDecoration(
                            color: Colors.red,
                            shape: BoxShape.circle,
                          ),
                        ),
                      ),
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  '$label ($count)',
                  style: TextStyle(
                    color: isUrgent ? Colors.red : null,
                    fontWeight: isUrgent ? FontWeight.bold : null,
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildPendingBookingsTab() {
    if (_pendingBookings.isEmpty) {
      return _buildEmptyState(
        'Aucune demande en attente',
        'Toutes les demandes ont Ã©tÃ© traitÃ©es !',
        Icons.check_circle,
        Colors.green,
      );
    }

    return Column(
      children: [
        if (_pendingBookings.length > 1) _buildBatchActions(),
        Expanded(
          child: RefreshIndicator(
            onRefresh: _refreshData,
            color: KipikTheme.rouge,
            backgroundColor: const Color(0xFF1A1A1A),
            child: ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: _pendingBookings.length,
              itemBuilder: (context, index) {
                final booking = _pendingBookings[index];
                final flash = _flashsCache[booking.flashId];
                final client = _clientsCache[booking.clientId];
                return _buildPendingBookingCard(booking, flash, client);
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildBatchActions() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Row(
        children: [
          Icon(Icons.done_all, color: Colors.green, size: 20),
          const SizedBox(width: 8),
          const Text(
            'Actions groupÃ©es',
            style: TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
          const Spacer(),
          ElevatedButton.icon(
            onPressed: _batchAcceptBookings,
            icon: const Icon(Icons.check, size: 16),
            label: const Text('Tout accepter'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTodayBookingsTab() {
    if (_todayBookings.isEmpty) {
      return _buildEmptyState(
        'Aucun RDV aujourd\'hui',
        'Profitez de votre journÃ©e libre !',
        Icons.free_breakfast,
        Colors.blue,
      );
    }

    return RefreshIndicator(
      onRefresh: _refreshData,
      color: KipikTheme.rouge,
      backgroundColor: const Color(0xFF1A1A1A),
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _todayBookings.length,
        itemBuilder: (context, index) {
          final booking = _todayBookings[index];
          final flash = _flashsCache[booking.flashId];
          final client = _clientsCache[booking.clientId];
          final isUrgent = _isUrgentBooking(booking);
          return _buildConfirmedBookingCard(booking, flash, client, isUrgent: isUrgent);
        },
      ),
    );
  }

  Widget _buildUpcomingBookingsTab() {
    if (_upcomingBookings.isEmpty) {
      return _buildEmptyState(
        'Aucun RDV Ã  venir',
        'Votre planning est libre pour les prochains jours',
        Icons.event_available,
        Colors.green,
      );
    }

    return RefreshIndicator(
      onRefresh: _refreshData,
      color: KipikTheme.rouge,
      backgroundColor: const Color(0xFF1A1A1A),
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _upcomingBookings.length,
        itemBuilder: (context, index) {
          final booking = _upcomingBookings[index];
          final flash = _flashsCache[booking.flashId];
          final client = _clientsCache[booking.clientId];
          return _buildConfirmedBookingCard(booking, flash, client);
        },
      ),
    );
  }

  Widget _buildEmptyState(String title, String subtitle, IconData icon, Color color) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [color.withOpacity(0.2), Colors.transparent],
                ),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, size: 60, color: color.withOpacity(0.6)),
            ),
            const SizedBox(height: 24),
            Text(
              title,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              subtitle,
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 16,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPendingBookingCard(
    FlashBooking booking,
    Flash? flash,
    Map<String, dynamic>? client,
  ) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Card(
        color: const Color(0xFF1A1A1A),
        elevation: 8,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.orange.withOpacity(0.05),
                Colors.transparent,
              ],
            ),
          ),
          child: Column(
            children: [
              _buildCardHeader(booking, Colors.orange, 'NOUVELLE DEMANDE'),
              _buildCardContent(booking, flash, client),
              _buildPendingActions(booking),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildConfirmedBookingCard(
    FlashBooking booking,
    Flash? flash,
    Map<String, dynamic>? client, {
    bool isUrgent = false,
  }) {
    final color = isUrgent ? Colors.red : Colors.green;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: AnimatedBuilder(
        animation: isUrgent ? _notificationAnimation : _pulseAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: isUrgent ? 0.98 + (_notificationAnimation.value * 0.02) : 1.0,
            child: Card(
              color: const Color(0xFF1A1A1A),
              elevation: isUrgent ? 12 : 8,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(16),
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      color.withOpacity(0.05),
                      Colors.transparent,
                    ],
                  ),
                  border: isUrgent ? Border.all(color: Colors.red.withOpacity(0.3)) : null,
                ),
                child: Column(
                  children: [
                    _buildCardHeader(
                      booking,
                      color,
                      isUrgent ? 'URGENT - DANS ${_getTimeUntilBooking(booking)}' : 'CONFIRMÃ‰',
                    ),
                    _buildCardContent(booking, flash, client),
                    _buildConfirmedActions(booking, isUrgent: isUrgent),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildCardHeader(FlashBooking booking, Color color, String status) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(16),
          topRight: Radius.circular(16),
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: color.withOpacity(0.2),
              shape: BoxShape.circle,
            ),
            child: Icon(
              booking.status == FlashBookingStatus.pending ? Icons.schedule : Icons.check_circle,
              color: color,
              size: 16,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  status,
                  style: TextStyle(
                    color: color,
                    fontWeight: FontWeight.bold,
                    fontSize: 12,
                  ),
                ),
                Text(
                  'RDV #${booking.id.substring(0, 8)}',
                  style: TextStyle(
                    color: Colors.grey.shade400,
                    fontSize: 11,
                  ),
                ),
              ],
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(
                _formatDate(booking.requestedDate),
                style: TextStyle(
                  color: Colors.grey.shade400,
                  fontSize: 12,
                ),
              ),
              Text(
                booking.timeSlot,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCardContent(
    FlashBooking booking,
    Flash? flash,
    Map<String, dynamic>? client,
  ) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Infos flash
          Row(
            children: [
              _buildFlashImage(flash),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      flash?.title ?? 'Flash supprimÃ©',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    if (flash != null) ...[
                      Row(
                        children: [
                          Icon(Icons.straighten, size: 14, color: Colors.grey.shade400),
                          const SizedBox(width: 4),
                          Text(
                            flash.size,
                            style: TextStyle(
                              color: Colors.grey.shade400,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ],
                ),
              ),
              _buildPriceColumn(booking),
            ],
          ),
          
          const SizedBox(height: 16),
          const Divider(color: Color(0xFF2A2A2A)),
          const SizedBox(height: 16),
          
          // Infos client enrichies
          _buildClientInfo(client, booking),
          
          if (booking.clientNotes.isNotEmpty) ...[
            const SizedBox(height: 12),
            _buildNotesSection(booking.clientNotes),
          ],
        ],
      ),
    );
  }

  Widget _buildFlashImage(Flash? flash) {
    return Container(
      width: 70,
      height: 70,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: flash?.imageUrl != null
            ? Image.network(
                flash!.imageUrl,
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) => _buildPlaceholderImage(),
              )
            : _buildPlaceholderImage(),
      ),
    );
  }

  Widget _buildPlaceholderImage() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            const Color(0xFF2A2A2A),
            const Color(0xFF1A1A1A),
          ],
        ),
      ),
      child: Icon(
        Icons.image,
        color: Colors.grey.shade600,
        size: 30,
      ),
    );
  }

  Widget _buildPriceColumn(FlashBooking booking) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.end,
      children: [
        Text(
          '${booking.totalPrice.toInt()}â‚¬',
          style: TextStyle(
            color: KipikTheme.rouge,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        if (booking.depositAmount > 0) ...[
          const SizedBox(height: 4),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              '${booking.depositAmount.toInt()}â‚¬ reÃ§u',
              style: const TextStyle(
                color: Colors.green,
                fontSize: 10,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildClientInfo(Map<String, dynamic>? client, FlashBooking booking) {
    if (client == null) {
      return const Text(
        'Informations client non disponibles',
        style: TextStyle(color: Colors.grey),
      );
    }

    return Row(
      children: [
        Stack(
          children: [
            CircleAvatar(
              radius: 25,
              backgroundImage: NetworkImage(client['avatar']),
              backgroundColor: KipikTheme.rouge,
            ),
            if (client['isVerified'] == true)
              Positioned(
                right: 0,
                bottom: 0,
                child: Container(
                  padding: const EdgeInsets.all(2),
                  decoration: const BoxDecoration(
                    color: Color(0xFF1A1A1A),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.verified,
                    color: Colors.blue,
                    size: 16,
                  ),
                ),
              ),
          ],
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Text(
                    client['name'],
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  if (client['isVerified'] == true) ...[
                    const SizedBox(width: 8),
                    const Icon(Icons.verified, color: Colors.blue, size: 16),
                  ],
                ],
              ),
              const SizedBox(height: 4),
              Row(
                children: [
                  ...List.generate(5, (index) {
                    final rating = client['rating'] as double;
                    return Icon(
                      index < rating.floor() ? Icons.star : Icons.star_border,
                      color: Colors.amber,
                      size: 12,
                    );
                  }),
                  const SizedBox(width: 8),
                  Text(
                    '${client['rating']} â€¢ ${client['totalBookings']} RDV',
                    style: TextStyle(
                      color: Colors.grey.shade400,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 4),
              Row(
                children: [
                  Icon(Icons.phone, size: 14, color: Colors.grey.shade400),
                  const SizedBox(width: 4),
                  Text(
                    booking.clientPhone.isNotEmpty ? booking.clientPhone : 'Non renseignÃ©',
                    style: TextStyle(
                      color: Colors.grey.shade400,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
        Column(
          children: [
            IconButton(
              onPressed: () => _callClient(booking.clientPhone),
              icon: const Icon(Icons.phone, color: Colors.green),
              style: IconButton.styleFrom(
                backgroundColor: Colors.green.withOpacity(0.1),
                foregroundColor: Colors.green,
              ),
            ),
            IconButton(
              onPressed: () => _openChat(booking),
              icon: const Icon(Icons.chat),
              style: IconButton.styleFrom(
                backgroundColor: KipikTheme.rouge.withOpacity(0.1),
                foregroundColor: KipikTheme.rouge,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildNotesSection(String notes) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.note, size: 16, color: Colors.grey.shade400),
              const SizedBox(width: 8),
              Text(
                'Notes du client',
                style: TextStyle(
                  color: Colors.grey.shade400,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            notes,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 14,
              fontStyle: FontStyle.italic,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPendingActions(FlashBooking booking) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Row(
            children: [
              Expanded(
                child: _buildActionButton(
                  onPressed: () => _rejectBooking(booking),
                  icon: Icons.close,
                  label: 'Refuser',
                  color: Colors.red,
                  isOutlined: true,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                flex: 2,
                child: _buildActionButton(
                  onPressed: () => _acceptBooking(booking),
                  icon: Icons.check,
                  label: 'Accepter',
                  color: Colors.green,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: _buildActionButton(
                  onPressed: () => _openChat(booking),
                  icon: Icons.chat_outlined,
                  label: 'Discuter',
                  color: KipikTheme.rouge,
                  isOutlined: true,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildActionButton(
                  onPressed: () => _viewBookingDetails(booking),
                  icon: Icons.info_outline,
                  label: 'DÃ©tails',
                  color: Colors.blue,
                  isOutlined: true,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildConfirmedActions(FlashBooking booking, {bool isUrgent = false}) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Row(
            children: [
              Expanded(
                child: _buildActionButton(
                  onPressed: () => _openChat(booking),
                  icon: Icons.chat,
                  label: 'Chat',
                  color: KipikTheme.rouge,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildActionButton(
                  onPressed: () => _markAsCompleted(booking),
                  icon: Icons.done,
                  label: 'TerminÃ©',
                  color: Colors.green,
                  isOutlined: true,
                ),
              ),
            ],
          ),
          if (isUrgent) ...[
            const SizedBox(height: 12),
            _buildUrgentInfo(booking),
          ],
        ],
      ),
    );
  }

  Widget _buildUrgentInfo(FlashBooking booking) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.red.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(Icons.access_time, color: Colors.red, size: 16),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              'RDV dans ${_getTimeUntilBooking(booking)} - PrÃ©parez-vous !',
              style: const TextStyle(
                color: Colors.red,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton({
    required VoidCallback onPressed,
    required IconData icon,
    required String label,
    required Color color,
    bool isOutlined = false,
  }) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon, size: 16),
      label: Text(label),
      style: ElevatedButton.styleFrom(
        backgroundColor: isOutlined ? Colors.transparent : color,
        foregroundColor: isOutlined ? color : Colors.white,
        side: isOutlined ? BorderSide(color: color) : null,
        padding: const EdgeInsets.symmetric(vertical: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  Widget _buildFloatingActions() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (_pendingCount > 0)
          FloatingActionButton(
            onPressed: _quickAcceptAll,
            backgroundColor: Colors.green,
            heroTag: 'quick_accept',
            child: AnimatedBuilder(
              animation: _pulseAnimation,
              builder: (context, child) {
                return Transform.scale(
                  scale: _pulseAnimation.value,
                  child: Stack(
                    children: [
                      const Icon(Icons.done_all, color: Colors.white),
                      Positioned(
                        right: -2,
                        top: -2,
                        child: Container(
                          padding: const EdgeInsets.all(2),
                          decoration: const BoxDecoration(
                            color: Colors.red,
                            shape: BoxShape.circle,
                          ),
                          constraints: const BoxConstraints(
                            minWidth: 16,
                            minHeight: 16,
                          ),
                          child: Text(
                            '$_pendingCount',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        if (_pendingCount > 0) const SizedBox(height: 16),
        FloatingActionButton.extended(
          onPressed: () => Navigator.pushNamed(context, '/flash/create'),
          backgroundColor: KipikTheme.rouge,
          icon: const Icon(Icons.add, color: Colors.white),
          label: const Text(
            'Nouveau Flash',
            style: TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ],
    );
  }

  // Helper methods
  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  bool _isUrgentBooking(FlashBooking booking) {
    return booking.requestedDate.difference(DateTime.now()).inHours <= 2 &&
           booking.requestedDate.isAfter(DateTime.now());
  }

  String _getTimeUntilBooking(FlashBooking booking) {
    final diff = booking.requestedDate.difference(DateTime.now());
    if (diff.inHours > 0) {
      return '${diff.inHours}h${diff.inMinutes % 60}min';
    } else {
      return '${diff.inMinutes}min';
    }
  }

  // Action methods
  Future<void> _acceptBooking(FlashBooking booking) async {
    try {
      await FlashService.instance.updateBookingStatus(
        booking.id,
        FlashBookingStatus.confirmed,
      );
      await _refreshData();
      _showSuccessSnackBar('RDV acceptÃ© avec succÃ¨s !');
      HapticFeedback.mediumImpact();
    } catch (e) {
      _showErrorSnackBar('Erreur: ${e.toString()}');
    }
  }

  Future<void> _rejectBooking(FlashBooking booking) async {
    final confirmed = await _showConfirmationDialog(
      title: 'Refuser le RDV',
      message: 'Le client sera automatiquement remboursÃ©. Cette action est irrÃ©versible.',
      confirmText: 'Oui, refuser',
      isDestructive: true,
    );

    if (confirmed == true) {
      try {
        await FlashService.instance.updateBookingStatus(
          booking.id,
          FlashBookingStatus.rejected,
        );
        await _refreshData();
        _showSuccessSnackBar('RDV refusÃ© - Remboursement en cours');
        HapticFeedback.lightImpact();
      } catch (e) {
        _showErrorSnackBar('Erreur: ${e.toString()}');
      }
    }
  }

  Future<void> _markAsCompleted(FlashBooking booking) async {
    final confirmed = await _showConfirmationDialog(
      title: 'Marquer comme terminÃ©',
      message: 'Le RDV sera marquÃ© comme terminÃ© et le paiement final sera traitÃ©.',
      confirmText: 'Confirmer',
    );

    if (confirmed == true) {
      try {
        await FlashService.instance.updateBookingStatus(
          booking.id,
          FlashBookingStatus.completed,
        );
        await _refreshData();
        _showSuccessSnackBar('RDV marquÃ© comme terminÃ© !');
        HapticFeedback.heavyImpact();
      } catch (e) {
        _showErrorSnackBar('Erreur: ${e.toString()}');
      }
    }
  }

  void _openChat(FlashBooking booking) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => BookingChatPage(booking: booking),
      ),
    );
  }

  void _viewBookingDetails(FlashBooking booking) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _buildDetailsBottomSheet(booking),
    );
  }

  void _callClient(String phone) {
    if (phone.isNotEmpty) {
      _showInfoSnackBar('Appel vers $phone');
    } else {
      _showErrorSnackBar('NumÃ©ro de tÃ©lÃ©phone non disponible');
    }
  }

  void _showNotificationSettings() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text(
          'ParamÃ¨tres de notifications',
          style: TextStyle(color: Colors.white),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SwitchListTile(
              title: const Text(
                'Notifications push',
                style: TextStyle(color: Colors.white),
              ),
              subtitle: const Text(
                'Recevoir les nouvelles demandes',
                style: TextStyle(color: Colors.grey),
              ),
              value: true,
              onChanged: (value) {
                // Logique de notification
              },
              activeColor: KipikTheme.rouge,
            ),
            SwitchListTile(
              title: const Text(
                'Rappels RDV',
                style: TextStyle(color: Colors.white),
              ),
              subtitle: const Text(
                'Rappel 1h avant le RDV',
                style: TextStyle(color: Colors.grey),
              ),
              value: true,
              onChanged: (value) {
                // Logique de rappel
              },
              activeColor: KipikTheme.rouge,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Fermer',
              style: TextStyle(color: KipikTheme.rouge),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _batchAcceptBookings() async {
    if (_pendingBookings.isEmpty) return;

    final confirmed = await _showConfirmationDialog(
      title: 'Accepter tous les RDV',
      message: 'ÃŠtes-vous sÃ»r de vouloir accepter les ${_pendingBookings.length} demandes en attente ?',
      confirmText: 'Tout accepter',
    );

    if (confirmed == true) {
      try {
        final futures = _pendingBookings.map((booking) =>
          FlashService.instance.updateBookingStatus(
            booking.id,
            FlashBookingStatus.confirmed,
          )
        );
        
        await Future.wait(futures);
        await _refreshData();
        _showSuccessSnackBar('${_pendingBookings.length} RDV acceptÃ©s !');
        HapticFeedback.heavyImpact();
      } catch (e) {
        _showErrorSnackBar('Erreur: ${e.toString()}');
      }
    }
  }

  void _quickAcceptAll() {
    _batchAcceptBookings();
  }

  void _showAnalytics() {
    _showInfoSnackBar('Analytics dÃ©taillÃ©es - BientÃ´t disponible');
  }

  void _exportData() {
    _showInfoSnackBar('Export des donnÃ©es - BientÃ´t disponible');
  }

  Widget _buildDetailsBottomSheet(FlashBooking booking) {
    final flash = _flashsCache[booking.flashId];
    final client = _clientsCache[booking.clientId];

    return DraggableScrollableSheet(
      initialChildSize: 0.8,
      maxChildSize: 0.95,
      minChildSize: 0.5,
      builder: (context, scrollController) {
        return Container(
          decoration: const BoxDecoration(
            color: Color(0xFF1A1A1A),
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              Container(
                margin: const EdgeInsets.symmetric(vertical: 12),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey.shade600,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(20),
                child: Row(
                  children: [
                    const Text(
                      'DÃ©tails du RDV',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: SingleChildScrollView(
                  controller: scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 20),
                  child: Column(
                    children: [
                      if (flash != null) _buildFlashDetailsCard(flash),
                      const SizedBox(height: 20),
                      if (client != null) _buildClientDetailsCard(client),
                      const SizedBox(height: 20),
                      _buildBookingDetailsCard(booking),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildFlashDetailsCard(Flash flash) {
    return _buildDetailCard(
      'Flash tatouÃ©',
      KipikTheme.rouge,
      [
        _buildDetailRow('Titre', flash.title),
        _buildDetailRow('Description', flash.description),
        _buildDetailRow('Taille', flash.size),
        _buildDetailRow('Prix', '${flash.price.toInt()}â‚¬'),
      ],
    );
  }

  Widget _buildClientDetailsCard(Map<String, dynamic> client) {
    return _buildDetailCard(
      'Informations client',
      Colors.blue,
      [
        _buildDetailRow('Nom', client['name']),
        _buildDetailRow('Email', client['email']),
        _buildDetailRow('TÃ©lÃ©phone', client['phone'] ?? 'Non renseignÃ©'),
        _buildDetailRow('Note', '${client['rating']}/5'),
        _buildDetailRow('RDV total', '${client['totalBookings']}'),
        _buildDetailRow('Statut', client['isVerified'] ? 'VÃ©rifiÃ© âœ“' : 'Non vÃ©rifiÃ©'),
      ],
    );
  }

  Widget _buildBookingDetailsCard(FlashBooking booking) {
    return _buildDetailCard(
      'DÃ©tails de la rÃ©servation',
      Colors.green,
      [
        _buildDetailRow('ID', '#${booking.id.substring(0, 8)}'),
        _buildDetailRow('Date', _formatDate(booking.requestedDate)),
        _buildDetailRow('Heure', booking.timeSlot),
        _buildDetailRow('Statut', booking.status.displayText),
        _buildDetailRow('Prix total', '${booking.totalPrice.toInt()}â‚¬'),
        _buildDetailRow('Acompte', '${booking.depositAmount.toInt()}â‚¬'),
        _buildDetailRow('Reste Ã  payer', '${(booking.totalPrice - booking.depositAmount).toInt()}â‚¬'),
        if (booking.clientNotes.isNotEmpty)
          _buildDetailRow('Notes', booking.clientNotes),
        _buildDetailRow('CrÃ©Ã© le', _formatDateTime(booking.createdAt)),
        _buildDetailRow('ModifiÃ© le', _formatDateTime(booking.updatedAt)),
      ],
    );
  }

  Widget _buildDetailCard(String title, Color color, List<Widget> details) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              color: color,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          ...details,
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _formatDateTime(DateTime date) {
    return '${date.day}/${date.month}/${date.year} Ã  ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }

  Future<bool?> _showConfirmationDialog({
    required String title,
    required String message,
    required String confirmText,
    bool isDestructive = false,
  }) {
    return showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: Text(title, style: const TextStyle(color: Colors.white)),
        content: Text(message, style: const TextStyle(color: Colors.white)),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(
              foregroundColor: isDestructive ? Colors.red : KipikTheme.rouge,
            ),
            child: Text(confirmText),
          ),
        ],
      ),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 4),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 2),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\suppliers\order_history_page.dart

// Fichier: pages/pro/suppliers/order_history_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/services/supplier/supplier_service.dart';
import 'package:intl/intl.dart';

class OrderHistoryPage extends StatefulWidget {
  final String supplierId;

  const OrderHistoryPage({Key? key, required this.supplierId}) : super(key: key);

  @override
  _OrderHistoryPageState createState() => _OrderHistoryPageState();
}

class _OrderHistoryPageState extends State<OrderHistoryPage> {
  final SupplierService _supplierService = SupplierService();
  List<Map<String, dynamic>> _orders = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadOrders();
  }

  Future<void> _loadOrders() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final orders = await _supplierService.getOrderHistory(widget.supplierId);
      setState(() {
        _orders = orders;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erreur lors du chargement des commandes: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Historique des commandes'),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _orders.isEmpty
              ? const Center(child: Text('Aucune commande trouvÃ©e'))
              : ListView.builder(
                  itemCount: _orders.length,
                  itemBuilder: (context, index) {
                    final order = _orders[index];
                    final date = DateTime.parse(order['date']);
                    final formatter = DateFormat('dd/MM/yyyy');
                    final formattedDate = formatter.format(date);

                    return Card(
                      margin: const EdgeInsets.symmetric(
                        horizontal: 16.0,
                        vertical: 8.0,
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  order['orderId'],
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                  ),
                                ),
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 8,
                                    vertical: 4,
                                  ),
                                  decoration: BoxDecoration(
                                    color: _getStatusColor(order['status']),
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Text(
                                    _getStatusLabel(order['status']),
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 12,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 12),
                            Text('Date: $formattedDate'),
                            const SizedBox(height: 8),
                            Text(
                              'Montant: ${order['amount'].toStringAsFixed(2)} â‚¬',
                              style: const TextStyle(fontWeight: FontWeight.bold),
                            ),
                            const Divider(height: 24),
                            const Text(
                              'Articles',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                              ),
                            ),
                            const SizedBox(height: 8),
                            ...List.generate(
                              (order['items'] as List).length,
                              (itemIndex) {
                                final item = order['items'][itemIndex];
                                return Padding(
                                  padding: const EdgeInsets.only(bottom: 4.0),
                                  child: Row(
                                    children: [
                                      Text('${item['quantity']} x '),
                                      Expanded(child: Text(item['name'])),
                                      Text('${item['price'].toStringAsFixed(2)} â‚¬'),
                                    ],
                                  ),
                                );
                              },
                            ),
                            if (order['appliedBenefits'] != null) ...[
                              const Divider(height: 24),
                              const Text(
                                'Avantages appliquÃ©s',
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 14,
                                ),
                              ),
                              const SizedBox(height: 8),
                              _buildBenefitRow(
                                label: 'Remise',
                                value: '${order['appliedBenefits']['discount'].toStringAsFixed(2)} â‚¬',
                                percentage: order['appliedBenefits']['discountPercentage'] != null
                                    ? '(${order['appliedBenefits']['discountPercentage']}%)'
                                    : null,
                                iconData: Icons.percent,
                                iconColor: Colors.green,
                              ),
                              if (order['appliedBenefits']['cashback'] != null &&
                                  order['appliedBenefits']['cashback'] > 0) ...[
                                const SizedBox(height: 4),
                                _buildBenefitRow(
                                  label: 'Cashback',
                                  value: '${order['appliedBenefits']['cashback'].toStringAsFixed(2)} â‚¬',
                                  percentage: order['appliedBenefits']['cashbackPercentage'] != null
                                      ? '(${order['appliedBenefits']['cashbackPercentage']}%)'
                                      : null,
                                  iconData: Icons.savings,
                                  iconColor: Colors.amber,
                                ),
                              ],
                              if (order['appliedBenefits']['hasFreeShipping'] == true) ...[
                                const SizedBox(height: 4),
                                _buildBenefitRow(
                                  label: 'Livraison gratuite',
                                  value: 'Incluse',
                                  iconData: Icons.local_shipping,
                                  iconColor: Colors.blue,
                                ),
                              ],
                            ],
                          ],
                        ),
                      ),
                    );
                  },
                ),
    );
  }

  Widget _buildBenefitRow({
    required String label,
    required String value,
    String? percentage,
    required IconData iconData,
    required Color iconColor,
  }) {
    return Row(
      children: [
        Icon(iconData, size: 16, color: iconColor),
        const SizedBox(width: 8),
        Text(label),
        const Spacer(),
        Text(
          value,
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        if (percentage != null) ...[
          const SizedBox(width: 4),
          Text(
            percentage,
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 12,
            ),
          ),
        ],
      ],
    );
  }

  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'delivered':
        return Colors.green;
      case 'shipped':
        return Colors.blue;
      case 'processing':
        return Colors.orange;
      case 'cancelled':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  String _getStatusLabel(String status) {
    switch (status.toLowerCase()) {
      case 'delivered':
        return 'LivrÃ©';
      case 'shipped':
        return 'ExpÃ©diÃ©';
      case 'processing':
        return 'En traitement';
      case 'cancelled':
        return 'AnnulÃ©';
      default:
        return status.toUpperCase();
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\suppliers\suppliers_list_page.dart

// lib/pages/pro/suppliers/suppliers_list_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/models/supplier_model.dart';
import 'package:kipik_v5/models/category.dart' as CategoryModel;
import 'package:kipik_v5/services/supplier/supplier_service.dart'; // âœ… CORRIGÃ‰
import 'package:kipik_v5/core/database_manager.dart'; // âœ… AJOUTÃ‰ pour mode dÃ©mo
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/pages/pro/suppliers/supplier_detail_page.dart';

class SuppliersListPage extends StatefulWidget {
  const SuppliersListPage({Key? key}) : super(key: key);

  @override
  _SuppliersListPageState createState() => _SuppliersListPageState();
}

class _SuppliersListPageState extends State<SuppliersListPage> {
  // âœ… CORRIGÃ‰ : Utilisation directe de SupplierService
  final SupplierService _supplierService = SupplierService();
  
  List<SupplierModel> _suppliers = [];
  List<CategoryModel.Category> _categories = [];
  String _selectedCategoryId = 'all';
  bool _showOnlyFavorites = false;
  bool _showOnlyPartners = true;
  bool _isLoading = true;
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // Charger les catÃ©gories d'abord
      final categories = await _supplierService.getSupplierCategories();
      
      // âœ… CORRIGÃ‰ : Ajouter la catÃ©gorie "Tous" en premier avec tous les paramÃ¨tres requis
      final allCategories = [
        CategoryModel.Category(
          id: 'all',
          name: 'Tous',
          description: 'Tous les fournisseurs',
          iconData: Icons.all_inclusive,
          itemCount: 0, // Sera mis Ã  jour aprÃ¨s
          createdAt: DateTime.now(), // âœ… AJOUTÃ‰
          updatedAt: DateTime.now(), // âœ… AJOUTÃ‰
        ),
        ...categories,
      ];

      // Charger les fournisseurs
      final suppliers = await _supplierService.getSuppliers(
        categoryId: _selectedCategoryId == 'all' ? null : _selectedCategoryId,
        favoritesOnly: _showOnlyFavorites,
        partnersOnly: _showOnlyPartners,
        query: _searchQuery.isEmpty ? null : _searchQuery,
        onlyActive: true,
        onlyVerified: true,
      );

      // Mettre Ã  jour le compteur pour "Tous"
      allCategories[0] = allCategories[0].copyWith(itemCount: suppliers.length);

      setState(() {
        _categories = allCategories;
        _suppliers = suppliers;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              DatabaseManager.instance.isDemoMode 
                  ? 'Erreur lors du chargement des fournisseurs de dÃ©monstration: $e'
                  : 'Erreur lors du chargement des fournisseurs: $e'
            ),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        );
      }
    }
  }

  void _filterSuppliers() {
    _loadData();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DatabaseManager.instance.isDemoMode ? const Color(0xFF0A0A0A) : null,
      appBar: AppBar(
        backgroundColor: DatabaseManager.instance.isDemoMode ? Colors.transparent : null,
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Fournisseurs partenaires',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                color: Colors.white,
              ),
            ),
            // âœ… Indicateur mode dÃ©mo
            if (DatabaseManager.instance.isDemoMode) ...[
              const SizedBox(width: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(6),
                ),
                child: const Text(
                  'DÃ‰MO',
                  style: TextStyle(
                    color: Colors.orange,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ],
        ),
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          IconButton(
            icon: const Icon(Icons.search, color: Colors.white),
            onPressed: () {
              showSearch(
                context: context,
                delegate: SupplierSearchDelegate(
                  (query) {
                    setState(() {
                      _searchQuery = query;
                    });
                    _filterSuppliers();
                  },
                ),
              );
            },
          ),
          IconButton(
            icon: Icon(
              _showOnlyFavorites ? Icons.favorite : Icons.favorite_border,
              color: _showOnlyFavorites ? KipikTheme.rouge : Colors.white,
            ),
            onPressed: () {
              setState(() {
                _showOnlyFavorites = !_showOnlyFavorites;
              });
              _filterSuppliers();
            },
          ),
        ],
      ),
      body: SafeArea(
        child: Column(
          children: [
            // âœ… Section filtres amÃ©liorÃ©e
            Container(
              color: DatabaseManager.instance.isDemoMode 
                  ? Colors.grey[900] 
                  : Colors.grey[50],
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Titre avec compteur
                  Row(
                    children: [
                      Text(
                        'Filtrer par catÃ©gorie',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                          color: DatabaseManager.instance.isDemoMode 
                              ? Colors.white 
                              : Colors.black87,
                        ),
                      ),
                      const Spacer(),
                      if (_suppliers.isNotEmpty) ...[
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: KipikTheme.rouge.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            '${_suppliers.length} fournisseur${_suppliers.length > 1 ? 's' : ''}',
                            style: TextStyle(
                              color: KipikTheme.rouge,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ],
                  ),
                  
                  const SizedBox(height: 12),
                  
                  // Filtres de catÃ©gories
                  SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      children: _categories.map((category) {
                        final isSelected = category.id == _selectedCategoryId;
                        return Padding(
                          padding: const EdgeInsets.only(right: 8.0),
                          child: FilterChip(
                            label: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                if (category.iconData != null) ...[
                                  Icon(
                                    category.iconData,
                                    size: 16,
                                    color: isSelected ? Colors.white : Colors.grey[600],
                                  ),
                                  const SizedBox(width: 4),
                                ],
                                Text(category.name),
                                if (category.itemCount > 0) ...[
                                  const SizedBox(width: 4),
                                  Container(
                                    padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 1),
                                    decoration: BoxDecoration(
                                      color: isSelected ? Colors.white.withOpacity(0.3) : Colors.grey[300],
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: Text(
                                      '${category.itemCount}',
                                      style: TextStyle(
                                        fontSize: 11,
                                        color: isSelected ? Colors.white : Colors.grey[700],
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ],
                            ),
                            selected: isSelected,
                            onSelected: (selected) {
                              setState(() {
                                _selectedCategoryId = category.id;
                              });
                              _filterSuppliers();
                            },
                            backgroundColor: DatabaseManager.instance.isDemoMode 
                                ? Colors.grey[800] 
                                : Colors.grey[100],
                            selectedColor: KipikTheme.rouge,
                            checkmarkColor: Colors.white,
                            labelStyle: TextStyle(
                              color: isSelected 
                                  ? Colors.white 
                                  : (DatabaseManager.instance.isDemoMode ? Colors.white70 : Colors.grey[800]),
                              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ),
                  
                  // Toggle partenaires
                  SwitchListTile(
                    title: Text(
                      'Afficher uniquement les partenaires',
                      style: TextStyle(
                        color: DatabaseManager.instance.isDemoMode 
                            ? Colors.white 
                            : Colors.black87,
                      ),
                    ),
                    value: _showOnlyPartners,
                    activeColor: KipikTheme.rouge,
                    onChanged: (value) {
                      setState(() {
                        _showOnlyPartners = value;
                      });
                      _filterSuppliers();
                    },
                    dense: true,
                    contentPadding: EdgeInsets.zero,
                  ),
                  
                  // âœ… Info mode dÃ©mo
                  if (DatabaseManager.instance.isDemoMode) ...[
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.orange.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.orange.withOpacity(0.3)),
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.science, color: Colors.orange, size: 16),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'ðŸŽ­ Mode ${DatabaseManager.instance.activeDatabaseConfig.name} - Fournisseurs de dÃ©monstration',
                              style: const TextStyle(
                                color: Colors.orange,
                                fontSize: 12,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              ),
            ),
            
            // Liste des fournisseurs
            Expanded(
              child: _isLoading
                  ? _buildLoadingState()
                  : _suppliers.isEmpty
                      ? _buildEmptyState()
                      : RefreshIndicator(
                          onRefresh: _loadData,
                          color: KipikTheme.rouge,
                          child: ListView.builder(
                            padding: const EdgeInsets.all(8),
                            itemCount: _suppliers.length,
                            itemBuilder: (context, index) {
                              final supplier = _suppliers[index];
                              return SupplierListItem(
                                supplier: supplier,
                                onTap: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => SupplierDetailPage(supplierId: supplier.id),
                                    ),
                                  ).then((_) => _loadData());
                                },
                                onFavoriteToggle: () async {
                                  await _supplierService.toggleFavorite(supplier.id);
                                  _loadData();
                                },
                              );
                            },
                          ),
                        ),
            ),
          ],
        ),
      ),
    );
  }

  /// âœ… Ã‰tat de chargement
  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const CircularProgressIndicator(color: Colors.white),
          const SizedBox(height: 16),
          Text(
            DatabaseManager.instance.isDemoMode 
                ? 'Chargement des fournisseurs de dÃ©monstration...'
                : 'Chargement des fournisseurs...',
            style: TextStyle(
              color: DatabaseManager.instance.isDemoMode 
                  ? Colors.white.withOpacity(0.7)
                  : Colors.grey[600],
              fontFamily: 'Roboto',
            ),
          ),
        ],
      ),
    );
  }

  /// âœ… Ã‰tat vide
  Widget _buildEmptyState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.search_off,
              size: 64,
              color: DatabaseManager.instance.isDemoMode 
                  ? Colors.white.withOpacity(0.3)
                  : Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Aucun fournisseur trouvÃ©',
              style: TextStyle(
                fontSize: 18,
                fontFamily: 'PermanentMarker',
                color: DatabaseManager.instance.isDemoMode 
                    ? Colors.white
                    : Colors.grey[600],
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              DatabaseManager.instance.isDemoMode 
                  ? 'Essayez de modifier vos filtres ou rechargez les donnÃ©es de dÃ©monstration'
                  : 'Essayez de modifier vos filtres',
              style: TextStyle(
                fontSize: 14,
                color: DatabaseManager.instance.isDemoMode 
                    ? Colors.white.withOpacity(0.7)
                    : Colors.grey[500],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _loadData,
              icon: const Icon(Icons.refresh),
              label: const Text('Actualiser'),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class SupplierListItem extends StatelessWidget {
  final SupplierModel supplier;
  final VoidCallback onTap;
  final VoidCallback onFavoriteToggle;

  const SupplierListItem({
    Key? key,
    required this.supplier,
    required this.onTap,
    required this.onFavoriteToggle,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 0, vertical: 6.0),
      elevation: isDemoMode ? 8 : 2,
      color: isDemoMode ? Colors.grey[850] : Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: supplier.isPartner
            ? BorderSide(
                color: KipikTheme.rouge.withOpacity(0.3),
                width: 1,
              )
            : BorderSide.none,
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(16),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              Row(
                children: [
                  // Avatar/Logo
                  Container(
                    width: 56,
                    height: 56,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: isDemoMode ? Colors.grey[700] : Colors.grey[100],
                      image: supplier.logoUrl != null
                          ? DecorationImage(
                              image: NetworkImage(supplier.logoUrl!),
                              fit: BoxFit.cover,
                              onError: (error, stackTrace) {},
                            )
                          : null,
                    ),
                    child: supplier.logoUrl == null
                        ? Text(
                            supplier.name.isNotEmpty ? supplier.name[0].toUpperCase() : '?',
                            style: TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: isDemoMode ? Colors.white : Colors.grey[600],
                            ),
                          )
                        : null,
                  ),
                  const SizedBox(width: 16),
                  
                  // Informations principales
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Nom et badges
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                supplier.name,
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 18,
                                  fontFamily: 'PermanentMarker',
                                  color: isDemoMode ? Colors.white : Colors.black87,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                            if (supplier.isPartner) ...[
                              const SizedBox(width: 8),
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                decoration: BoxDecoration(
                                  color: KipikTheme.rouge,
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: const Text(
                                  'Partenaire',
                                  style: TextStyle(
                                    fontSize: 11,
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ],
                            if (isDemoMode) ...[
                              const SizedBox(width: 4),
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                decoration: BoxDecoration(
                                  color: Colors.orange.withOpacity(0.2),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: const Text(
                                  'DÃ‰MO',
                                  style: TextStyle(
                                    fontSize: 9,
                                    color: Colors.orange,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ],
                          ],
                        ),
                        
                        // Note - âœ… CORRIGÃ‰ : Gestion du null
                        const SizedBox(height: 6),
                        Row(
                          children: [
                            const Icon(
                              Icons.star,
                              color: Colors.amber,
                              size: 16,
                            ),
                            const SizedBox(width: 4),
                            Text(
                              (supplier.rating ?? 0.0).toStringAsFixed(1), // âœ… CORRIGÃ‰
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: isDemoMode ? Colors.white : Colors.black87,
                              ),
                            ),
                            if (supplier.verified) ...[
                              const SizedBox(width: 8),
                              const Icon(
                                Icons.verified,
                                color: Colors.blue,
                                size: 16,
                              ),
                              const SizedBox(width: 2),
                              const Text(
                                'VÃ©rifiÃ©',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: Colors.blue,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ],
                        ),
                      ],
                    ),
                  ),
                  
                  // Bouton favori
                  IconButton(
                    icon: Icon(
                      supplier.isFavorite ? Icons.favorite : Icons.favorite_border,
                      color: supplier.isFavorite ? KipikTheme.rouge : (isDemoMode ? Colors.white54 : Colors.grey[400]),
                    ),
                    onPressed: onFavoriteToggle,
                    constraints: const BoxConstraints(
                      minWidth: 32,
                      minHeight: 32,
                    ),
                    padding: EdgeInsets.zero,
                  ),
                ],
              ),
              
              // Description
              if (supplier.description != null && supplier.description!.isNotEmpty) ...[
                const SizedBox(height: 12),
                Text(
                  supplier.description!,
                  style: TextStyle(
                    fontSize: 14,
                    color: isDemoMode ? Colors.white70 : Colors.grey[600],
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
              
              // CatÃ©gories et avantages
              const SizedBox(height: 12),
              Row(
                children: [
                  // CatÃ©gories
                  Expanded(
                    child: Wrap(
                      spacing: 6,
                      runSpacing: 4,
                      children: supplier.categories.take(2).map((category) =>
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: isDemoMode ? Colors.grey[700] : Colors.grey[200],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            category,
                            style: TextStyle(
                              fontSize: 11,
                              fontWeight: FontWeight.w500,
                              color: isDemoMode ? Colors.white : Colors.black87,
                            ),
                          ),
                        ),
                      ).toList(),
                    ),
                  ),
                  
                  // Avantages principaux
                  if (supplier.isPartner && supplier.benefits != null && supplier.benefits!.isNotEmpty) ...[
                    Row(
                      children: supplier.benefits!.take(2).map((benefit) {
                        final iconData = _getIconFromName(benefit.iconName);
                        return Padding(
                          padding: const EdgeInsets.only(left: 8),
                          child: Tooltip(
                            message: benefit.description,
                            child: Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                              decoration: BoxDecoration(
                                color: KipikTheme.rouge.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(
                                    iconData,
                                    size: 12,
                                    color: KipikTheme.rouge,
                                  ),
                                  const SizedBox(width: 4),
                                  Text(
                                    _getBenefitShortText(benefit),
                                    style: TextStyle(
                                      fontSize: 10,
                                      color: KipikTheme.rouge,
                                      fontWeight: FontWeight.w600,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  IconData _getIconFromName(String iconName) {
    switch (iconName) {
      case 'percent':
        return Icons.percent;
      case 'local_shipping':
        return Icons.local_shipping;
      case 'savings':
        return Icons.savings;
      case 'trending_up':
        return Icons.trending_up;
      case 'loyalty':
        return Icons.loyalty;
      case 'stars':
        return Icons.stars;
      case 'card_giftcard':
        return Icons.card_giftcard;
      default:
        return Icons.local_offer;
    }
  }

  String _getBenefitShortText(PartnershipBenefit benefit) {
    switch (benefit.type) {
      case BenefitType.discount:
        return '${(benefit.value ?? 0.0).toStringAsFixed(0)}% off'; // âœ… CORRIGÃ‰
      case BenefitType.cashback:
        return '${(benefit.value ?? 0.0).toStringAsFixed(0)}% back'; // âœ… CORRIGÃ‰
      case BenefitType.freeShipping:
        return 'Livraison gratuite';
      case BenefitType.loyalty:
        return 'FidÃ©litÃ©';
      case BenefitType.exclusiveAccess:
        return 'Exclusif';
      case BenefitType.gift:
        return 'Cadeau';
      default:
        return benefit.title.length > 15 
            ? '${benefit.title.substring(0, 12)}...' 
            : benefit.title;
    }
  }
}

class SupplierSearchDelegate extends SearchDelegate<String> {
  final Function(String) onSearch;

  SupplierSearchDelegate(this.onSearch);

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: const Icon(Icons.clear),
        onPressed: () {
          query = '';
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () {
        close(context, '');
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    onSearch(query);
    close(context, query);
    return Container();
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final isDemoMode = DatabaseManager.instance.isDemoMode;
    
    final suggestions = [
      'Machines',
      'Encres',
      'Aiguilles',
      'HygiÃ¨ne',
      'Mobilier',
      'Accessoires',
      'Consommables',
    ];

    final filteredSuggestions = suggestions
        .where((suggestion) => suggestion.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Container(
      color: isDemoMode ? const Color(0xFF0A0A0A) : Colors.white,
      child: ListView(
        children: [
          if (query.isNotEmpty)
            ListTile(
              leading: const Icon(Icons.search),
              title: Text(
                'Rechercher "$query"',
                style: TextStyle(
                  color: isDemoMode ? Colors.white : Colors.black87,
                ),
              ),
              onTap: () {
                onSearch(query);
                close(context, query);
              },
            ),
          ...filteredSuggestions.map((suggestion) => ListTile(
            leading: const Icon(Icons.category),
            title: Text(
              suggestion,
              style: TextStyle(
                color: isDemoMode ? Colors.white : Colors.black87,
              ),
            ),
            onTap: () {
              query = suggestion;
              onSearch(query);
              close(context, query);
            },
          )),
          if (isDemoMode && query.isEmpty) ...[
            const Divider(),
            Padding(
              padding: const EdgeInsets.all(16),
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.science, color: Colors.orange, size: 20),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'ðŸŽ­ Mode ${DatabaseManager.instance.activeDatabaseConfig.name}\nRecherchez parmi les fournisseurs de dÃ©monstration',
                        style: const TextStyle(
                          color: Colors.orange,
                          fontSize: 12,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\suppliers\supplier_detail_page.dart

// Fichier: pages/pro/suppliers/supplier_detail_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:kipik_v5/models/supplier_model.dart';
import 'package:kipik_v5/services/supplier/supplier_service.dart';
import 'package:url_launcher/url_launcher.dart';

class SupplierDetailPage extends StatefulWidget {
  final String supplierId;

  const SupplierDetailPage({Key? key, required this.supplierId}) : super(key: key);

  @override
  _SupplierDetailPageState createState() => _SupplierDetailPageState();
}

class _SupplierDetailPageState extends State<SupplierDetailPage> with SingleTickerProviderStateMixin {
  final SupplierService _supplierService = SupplierService();
  SupplierModel? _supplier;
  bool _isLoading = true;
  Map<String, dynamic>? _savingsSummary;
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadSupplier();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadSupplier() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final suppliers = await _supplierService.getSuppliers();
      final supplier = suppliers.firstWhere((s) => s.id == widget.supplierId);
      final savingsSummary = await _supplierService.getSavingsSummary(widget.supplierId);

      setState(() {
        _supplier = supplier;
        _savingsSummary = savingsSummary;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erreur lors du chargement du fournisseur: $e')),
      );
    }
  }

  Future<void> _launchURL(String url) async {
    final uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Impossible d\'ouvrir: $url')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(title: const Text('DÃ©tail du fournisseur')),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    if (_supplier == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('DÃ©tail du fournisseur')),
        body: const Center(child: Text('Fournisseur non trouvÃ©')),
      );
    }

    return Scaffold(
      body: NestedScrollView(
        headerSliverBuilder: (context, innerBoxIsScrolled) {
          return [
            SliverAppBar(
              expandedHeight: 200.0,
              floating: false,
              pinned: true,
              flexibleSpace: FlexibleSpaceBar(
                title: Text(_supplier!.name),
                background: _supplier!.coverImageUrl != null
                    ? Image.network(
                        _supplier!.coverImageUrl!,
                        fit: BoxFit.cover,
                      )
                    : Container(
                        color: Colors.grey[300],
                        child: Center(
                          child: _supplier!.logoUrl != null
                              ? Image.network(
                                  _supplier!.logoUrl!,
                                  width: 100,
                                  height: 100,
                                )
                              : Icon(
                                  Icons.business,
                                  size: 80,
                                  color: Colors.grey[600],
                                ),
                        ),
                      ),
              ),
              actions: [
                IconButton(
                  icon: Icon(
                    _supplier!.isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: _supplier!.isFavorite ? Colors.red : null,
                  ),
                  onPressed: () async {
                    await _supplierService.toggleFavorite(_supplier!.id);
                    _loadSupplier(); // Recharger
                  },
                ),
              ],
            ),
            SliverPersistentHeader(
              delegate: _SliverAppBarDelegate(
                TabBar(
                  controller: _tabController,
                  labelColor: Theme.of(context).primaryColor,
                  unselectedLabelColor: Colors.grey,
                  tabs: const [
                    Tab(text: 'INFORMATIONS'),
                    Tab(text: 'AVANTAGES'),
                    Tab(text: 'Ã‰CONOMIES'),
                  ],
                ),
              ),
              pinned: true,
            ),
          ];
        },
        body: TabBarView(
          controller: _tabController,
          children: [
            _buildInformationTab(),
            _buildBenefitsTab(),
            _buildSavingsTab(),
          ],
        ),
      ),
      bottomNavigationBar: _supplier!.isPartner
          ? BottomAppBar(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () {
                          if (_supplier!.website != null) {
                            _launchURL(_supplier!.website!);
                          } else {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(content: Text('Aucun site web disponible')),
                            );
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.grey[200],
                          foregroundColor: Colors.black,
                        ),
                        child: const Text('VISITER LE SITE'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () {
                          showModalBottomSheet(
                            context: context,
                            isScrollControlled: true,
                            builder: (context) => _OrderFormBottomSheet(
                              supplier: _supplier!,
                            ),
                          );
                        },
                        child: const Text('COMMANDER'),
                      ),
                    ),
                  ],
                ),
              ),
            )
          : null,
    );
  }

  Widget _buildInformationTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (_supplier!.description != null) ...[
            const Text(
              'Ã€ propos',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(_supplier!.description!),
            const SizedBox(height: 16),
          ],
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'CoordonnÃ©es',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  if (_supplier!.address != null) ...[
                    ListTile(
                      leading: const Icon(Icons.location_on),
                      title: Text(_supplier!.formattedAddress),
                      onTap: () {
                        final mapUrl = 'https://www.google.com/maps/search/?api=1&query=${Uri.encodeComponent(_supplier!.formattedAddress)}';
                        _launchURL(mapUrl);
                      },
                      contentPadding: EdgeInsets.zero,
                    ),
                  ],
                  if (_supplier!.phone != null) ...[
                    ListTile(
                      leading: const Icon(Icons.phone),
                      title: Text(_supplier!.phone!),
                      onTap: () {
                        _launchURL('tel:${_supplier!.phone}');
                      },
                      contentPadding: EdgeInsets.zero,
                    ),
                  ],
                  if (_supplier!.email != null) ...[
                    ListTile(
                      leading: const Icon(Icons.email),
                      title: Text(_supplier!.email!),
                      onTap: () {
                        _launchURL('mailto:${_supplier!.email}');
                      },
                      contentPadding: EdgeInsets.zero,
                    ),
                  ],
                  if (_supplier!.website != null) ...[
                    ListTile(
                      leading: const Icon(Icons.language),
                      title: Text(_supplier!.website!),
                      onTap: () {
                        _launchURL(_supplier!.website!);
                      },
                      contentPadding: EdgeInsets.zero,
                    ),
                  ],
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'CatÃ©gories',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8.0,
            runSpacing: 8.0,
            children: _supplier!.categories.map((category) {
              return Chip(
                label: Text(category),
                backgroundColor: Colors.grey[200],
              );
            }).toList(),
          ),
          if (_supplier!.tags != null && _supplier!.tags!.isNotEmpty) ...[
            const SizedBox(height: 16),
            const Text(
              'Tags',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8.0,
              runSpacing: 8.0,
              children: _supplier!.tags!.map((tag) {
                return Chip(
                  label: Text(tag),
                  backgroundColor: Colors.blue[100],
                );
              }).toList(),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildBenefitsTab() {
    if (!_supplier!.isPartner) {
      return const Center(
        child: Text('Ce fournisseur n\'est pas un partenaire Kipik.'),
      );
    }

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (_supplier!.partnershipDescription != null) ...[
            Text(
              _supplier!.partnershipDescription!,
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 24),
          ],
          if (_supplier!.promoCode != null) ...[
            const Text(
              'Code promo',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Card(
              color: Colors.blue[50],
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Code Ã  utiliser sur le site',
                          style: TextStyle(fontSize: 12),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          _supplier!.promoCode!,
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 1.5,
                          ),
                        ),
                      ],
                    ),
                    ElevatedButton(
                      onPressed: () {
                        Clipboard.setData(ClipboardData(text: _supplier!.promoCode!));
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Code promo copiÃ© dans le presse-papier')),
                        );
                      },
                      child: const Text('COPIER'),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
          ],
          if (_supplier!.benefits != null && _supplier!.benefits!.isNotEmpty) ...[
            const Text(
              'Avantages exclusifs',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ...(_supplier!.benefits!.map((benefit) {
              IconData iconData;
              Color iconColor;
              
              switch (benefit.type) {
                case BenefitType.discount:
                  iconData = Icons.percent;
                  iconColor = Colors.green;
                  break;
                case BenefitType.cashback:
                  iconData = Icons.savings;
                  iconColor = Colors.amber;
                  break;
                case BenefitType.freeShipping:
                  iconData = Icons.local_shipping;
                  iconColor = Colors.blue;
                  break;
                case BenefitType.loyalty:
                  iconData = Icons.loyalty;
                  iconColor = Colors.purple;
                  break;
                case BenefitType.exclusiveAccess:
                  iconData = Icons.stars;
                  iconColor = Colors.orange;
                  break;
                default:
                  iconData = Icons.tag;
                  iconColor = Colors.grey;
              }
              
              return Card(
                margin: const EdgeInsets.only(bottom: 12.0),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(iconData, color: iconColor, size: 32),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              benefit.title,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(benefit.description),
                            if (benefit.thresholdDescription != null) ...[
                              const SizedBox(height: 4),
                              Text(
                                benefit.thresholdDescription!,
                                style: TextStyle(
                                  fontSize: 12,
                                  color: Colors.grey[600],
                                  fontStyle: FontStyle.italic,
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }).toList()),
          ],
          if (_supplier!.currentPromotions != null && 
              _supplier!.currentPromotions!.isNotEmpty &&
              _supplier!.currentPromotions!.any((p) => p.isActive)) ...[
            const SizedBox(height: 24),
            const Text(
              'Promotions en cours',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ...(_supplier!.currentPromotions!
                .where((p) => p.isActive)
                .map((promo) {
              return Card(
                color: Colors.orange[50],
                margin: const EdgeInsets.only(bottom: 12.0),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.local_offer, color: Colors.orange),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              promo.title,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(promo.description),
                      if (promo.conditions != null) ...[
                        const SizedBox(height: 4),
                        Text(
                          'Conditions: ${promo.conditions}',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                      const SizedBox(height: 8),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Valable jusqu\'au ${promo.endDate.day}/${promo.endDate.month}/${promo.endDate.year}',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey[600],
                            ),
                          ),
                          if (promo.promoCode != null)
                            Chip(
                              label: Text(
                                promo.promoCode!,
                                style: const TextStyle(fontWeight: FontWeight.bold),
                              ),
                              backgroundColor: Colors.orange[100],
                            ),
                        ],
                      ),
                    ],
                  ),
                ),
              );
            }).toList()),
          ],
        ],
      ),
    );
  }

  Widget _buildSavingsTab() {
    if (!_supplier!.isPartner) {
      return const Center(
        child: Text('Ce fournisseur n\'est pas un partenaire Kipik.'),
      );
    }

    if (_savingsSummary == null) {
      return const Center(
        child: Text('Aucune donnÃ©e d\'Ã©conomies disponible.'),
      );
    }

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Card(
            color: Colors.green[50],
            child: Padding(
              padding: const EdgeInsets.all(20.0),
              child: Column(
                children: [
                  const Text(
                    'Total des Ã©conomies rÃ©alisÃ©es',
                    style: TextStyle(fontSize: 14),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '${_savingsSummary!['totalSavings'].toStringAsFixed(2)} â‚¬',
                    style: const TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      color: Colors.green,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Soit ${_savingsSummary!['savingsPercentage'].toStringAsFixed(1)}% d\'Ã©conomies sur vos achats',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'DÃ©tail de vos Ã©conomies',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          _buildSavingCard(
            title: 'Remises obtenues',
            amount: _savingsSummary!['savedThroughDiscounts'],
            icon: Icons.percent,
            color: Colors.green,
          ),
          const SizedBox(height: 12),
          _buildSavingCard(
            title: 'Cashback gagnÃ©',
            amount: _savingsSummary!['earnedCashback'],
            icon: Icons.savings,
            color: Colors.amber,
          ),
          const SizedBox(height: 12),
          _buildSavingCard(
            title: 'Frais de livraison Ã©conomisÃ©s',
            amount: _savingsSummary!['savedOnShipping'],
            icon: Icons.local_shipping,
            color: Colors.blue,
          ),
          const SizedBox(height: 24),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'RÃ©sumÃ© de vos achats',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 16),
                  _buildInfoRow(
                    label: 'Nombre de commandes',
                    value: '${_savingsSummary!['totalOrders']}',
                  ),
                  const SizedBox(height: 8),
                  _buildInfoRow(
                    label: 'Montant total dÃ©pensÃ©',
                    value: '${_savingsSummary!['totalSpent'].toStringAsFixed(2)} â‚¬',
                  ),
                  const SizedBox(height: 8),
                  _buildInfoRow(
                    label: 'Montant rÃ©el (aprÃ¨s Ã©conomies)',
                    value: '${(_savingsSummary!['totalSpent'] - _savingsSummary!['totalSavings']).toStringAsFixed(2)} â‚¬',
                    isBold: true,
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () {
              Navigator.pushNamed(
                context, 
                '/pro/suppliers/orders/${_supplier!.id}',
              );
            },
            style: ElevatedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
            ),
            child: const Text('VOIR L\'HISTORIQUE DES COMMANDES'),
          ),
        ],
      ),
    );
  }

  Widget _buildSavingCard({
    required String title,
    required double amount,
    required IconData icon,
    required Color color,
  }) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: color.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, color: color),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                title,
                style: const TextStyle(fontSize: 16),
              ),
            ),
            Text(
              '${amount.toStringAsFixed(2)} â‚¬',
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow({
    required String label,
    required String value,
    bool isBold = false,
  }) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: TextStyle(
            color: Colors.grey[600],
          ),
        ),
        Text(
          value,
          style: TextStyle(
            fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
          ),
        ),
      ],
    );
  }
}

// Widget OrderFormBottomSheet intÃ©grÃ©
class _OrderFormBottomSheet extends StatefulWidget {
  final SupplierModel supplier;

  const _OrderFormBottomSheet({
    Key? key,
    required this.supplier,
  }) : super(key: key);

  @override
  __OrderFormBottomSheetState createState() => __OrderFormBottomSheetState();
}

class __OrderFormBottomSheetState extends State<_OrderFormBottomSheet> {
  final TextEditingController _promoController = TextEditingController();
  final TextEditingController _notesController = TextEditingController();
  bool _isSubmitting = false;
  bool _promoApplied = false;
  
  // Simuler un panier
  final List<Map<String, dynamic>> _cartItems = [
    {
      'id': 'prod1',
      'name': 'Machine Sol Nova',
      'price': 349.99,
      'quantity': 1,
    },
    {
      'id': 'prod2',
      'name': 'Cartouches 9RL (lot de 20)',
      'price': 39.99,
      'quantity': 2,
    },
    {
      'id': 'prod3',
      'name': 'Grip jetable (lot de 5)',
      'price': 14.50,
      'quantity': 1,
    },
  ];
  
  double get _subtotal => _cartItems.fold(
    0,
    (sum, item) => sum + (item['price'] * item['quantity']),
  );
  
  double get _discountAmount => _promoApplied ? _subtotal * 0.15 : 0;
  double get _shippingCost => _subtotal > 200 || _promoApplied ? 0 : 9.99;
  double get _totalAmount => _subtotal - _discountAmount + _shippingCost;
  double get _cashback => _totalAmount * (_promoApplied ? 0.03 : 0);

  @override
  void initState() {
    super.initState();
    if (widget.supplier.promoCode != null) {
      _promoController.text = widget.supplier.promoCode!;
    }
  }

  @override
  void dispose() {
    _promoController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _applyPromoCode() {
    // Simuler l'application d'un code promo
    if (_promoController.text.isNotEmpty) {
      setState(() {
        _promoApplied = true;
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Code promo appliquÃ© avec succÃ¨s !'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  Future<void> _submitOrder() async {
    setState(() {
      _isSubmitting = true;
    });
    
    try {
      // Simuler l'envoi de la commande
      await Future.delayed(const Duration(seconds: 1));
      
      final orderData = {
        'items': _cartItems,
        'subtotal': _subtotal,
        'discount': _discountAmount,
        'shipping': _shippingCost,
        'totalAmount': _totalAmount,
        'notes': _notesController.text,
        'promoCode': _promoApplied ? _promoController.text : null,
      };
      
      final result = await SupplierService().placeOrder(
        widget.supplier.id,
        orderData,
      );
      
      // Fermer la bottom sheet
      Navigator.pop(context);
      
      // Afficher une confirmation
      _showOrderConfirmation(result);
    } catch (e) {
      setState(() {
        _isSubmitting = false;
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erreur: $e')),
      );
    }
  }

  void _showOrderConfirmation(Map<String, dynamic> orderResult) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Commande confirmÃ©e !'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              Icons.check_circle,
              color: Colors.green,
              size: 64,
            ),
            const SizedBox(height: 16),
            Text(
              'Commande ${orderResult['orderId']} passÃ©e avec succÃ¨s',
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              'Livraison estimÃ©e le ${orderResult['estimatedDelivery'].substring(0, 10)}',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[700],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            Text(
              'Vous avez Ã©conomisÃ© ${orderResult['appliedBenefits']['discount'].toStringAsFixed(2)} â‚¬ grÃ¢ce Ã  vos avantages partenaires !',
              style: const TextStyle(
                fontSize: 14,
                color: Colors.green,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            if (orderResult['appliedBenefits']['cashback'] > 0) ...[
              const SizedBox(height: 8),
              Text(
                '${orderResult['appliedBenefits']['cashback'].toStringAsFixed(2)} â‚¬ de cashback ont Ã©tÃ© crÃ©ditÃ©s sur votre compte',
                style: const TextStyle(
                  fontSize: 14,
                  color: Colors.orange,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: const Text('Fermer'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            // En-tÃªte
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Votre commande',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
            
            const SizedBox(height: 20),
            
            // Liste des articles
            ...List.generate(_cartItems.length, (index) {
              final item = _cartItems[index];
              return Padding(
                padding: const EdgeInsets.only(bottom: 12),
                child: Row(
                  children: [
                    Container(
                      width: 48,
                      height: 48,
                      decoration: BoxDecoration(
                        color: Colors.grey[200],
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(
                        Icons.shopping_bag,
                        color: Colors.grey,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            item['name'],
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            '${item['price'].toStringAsFixed(2)} â‚¬',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[700],
                            ),
                          ),
                        ],
                      ),
                    ),
                    Row(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.remove_circle_outline),
                          onPressed: () {
                            setState(() {
                              if (item['quantity'] > 1) {
                                item['quantity']--;
                              } else {
                                _cartItems.removeAt(index);
                              }
                            });
                          },
                        ),
                        Text(
                          '${item['quantity']}',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.add_circle_outline),
                          onPressed: () {
                            setState(() {
                              item['quantity']++;
                            });
                          },
                        ),
                      ],
                    ),
                  ],
                ),
              );
            }),
            
            const Divider(),
            
            // Code promo
            const Text(
              'Code promo',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _promoController,
                    decoration: InputDecoration(
                      hintText: 'Entrez votre code promo',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      filled: true,
                      fillColor: Colors.grey[100],
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 8,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: _promoApplied ? null : _applyPromoCode,
                  child: Text(_promoApplied ? 'AppliquÃ©' : 'Appliquer'),
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // Notes de commande
            const Text(
              'Notes pour la commande (optionnel)',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _notesController,
              decoration: InputDecoration(
                hintText: 'Instructions spÃ©ciales, etc.',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                filled: true,
                fillColor: Colors.grey[100],
                contentPadding: const EdgeInsets.all(16),
              ),
              maxLines: 2,
            ),
            
            const SizedBox(height: 24),
            
            // RÃ©sumÃ© de la commande
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text('Sous-total'),
                      Text('${_subtotal.toStringAsFixed(2)} â‚¬'),
                    ],
                  ),
                  if (_promoApplied) ...[
                    const SizedBox(height: 8),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          'Remise partenaire (15%)',
                          style: TextStyle(
                            color: Colors.green,
                          ),
                        ),
                        Text(
                          '- ${_discountAmount.toStringAsFixed(2)} â‚¬',
                          style: const TextStyle(
                            color: Colors.green,
                          ),
                        ),
                      ],
                    ),
                  ],
                  const SizedBox(height: 8),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Frais de livraison',
                        style: TextStyle(
                          color: _shippingCost == 0 ? Colors.green : null,
                        ),
                      ),
                      Text(
                        _shippingCost == 0
                            ? 'Gratuit'
                            : '${_shippingCost.toStringAsFixed(2)} â‚¬',
                        style: TextStyle(
                          color: _shippingCost == 0 ? Colors.green : null,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  const Divider(),
                  const SizedBox(height: 8),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Total',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        '${_totalAmount.toStringAsFixed(2)} â‚¬',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  if (_cashback > 0) ...[
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.orange.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(
                          color: Colors.orange.withOpacity(0.3),
                        ),
                      ),
                      child: Row(
                        children: [
                          const Icon(
                            Icons.savings,
                            color: Colors.orange,
                            size: 20,
                          ),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'Vous recevrez ${_cashback.toStringAsFixed(2)} â‚¬ de cashback sur votre compte Kipik',
                              style: const TextStyle(
                                fontSize: 12,
                                color: Colors.orange,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              ),
            ),
            
            const SizedBox(height: 24),
            
            // Bouton de commande
            SizedBox(
              width: double.infinity,
              height: 50,
              child: ElevatedButton(
                onPressed: _isSubmitting ? null : _submitOrder,
                child: _isSubmitting
                    ? const CircularProgressIndicator(color: Colors.white)
                    : const Text(
                        'Confirmer la commande',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
              ),
            ),
            
            const SizedBox(height: 8),
            
            // Termes et conditions
            Center(
              child: TextButton(
                onPressed: () {
                  // Naviguer vers les termes et conditions
                },
                child: const Text(
                  'En passant commande, vous acceptez nos termes et conditions',
                  style: TextStyle(
                    fontSize: 12,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  final TabBar tabBar;

  _SliverAppBarDelegate(this.tabBar);

  @override
  double get minExtent => tabBar.preferredSize.height;
  @override
  double get maxExtent => tabBar.preferredSize.height;

  @override
  Widget build(
    BuildContext context,
    double shrinkOffset,
    bool overlapsContent,
  ) {
    return Container(
      color: Colors.white,
      child: tabBar,
    );
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return false;
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\pro\suppliers\supplier_model.dart

// supplier_model.dart

class SupplierModel {
  final String id;
  final String name;
  final String description;
  final String logoUrl;
  final String website;
  final String email;
  final String phone;
  final String address;
  final List<String> categories;
  final bool isFavorite;
  final double? rating;
  final List<String>? tags;
  
  // Nouveaux champs pour les partenariats
  final bool isPartner;
  final List<PartnershipBenefit>? benefits;
  final String? partnershipDescription;
  final String? promoCode;
  final DateTime? partnershipExpiryDate;
  final String? partnerLogoUrl;
  final int? cashbackPercentage;
  final bool? hasExclusiveAccess;
  final List<SupplierPromotion>? currentPromotions;

  final DateTime createdAt;
  final DateTime updatedAt;

  SupplierModel({
    required this.id,
    required this.name,
    required this.description,
    required this.logoUrl,
    required this.website,
    required this.email,
    required this.phone,
    required this.address,
    required this.categories,
    required this.isFavorite,
    this.rating,
    this.tags,
    
    // Nouveaux champs pour les partenariats
    this.isPartner = false,
    this.benefits,
    this.partnershipDescription,
    this.promoCode,
    this.partnershipExpiryDate,
    this.partnerLogoUrl,
    this.cashbackPercentage,
    this.hasExclusiveAccess,
    this.currentPromotions,

    required this.createdAt,
    required this.updatedAt,
  });

  factory SupplierModel.fromJson(Map<String, dynamic> json) {
    return SupplierModel(
      id: json['id'],
      name: json['name'],
      description: json['description'],
      logoUrl: json['logoUrl'],
      website: json['website'],
      email: json['email'],
      phone: json['phone'],
      address: json['address'],
      categories: List<String>.from(json['categories']),
      isFavorite: json['isFavorite'],
      rating: json['rating'],
      tags: json['tags'] != null ? List<String>.from(json['tags']) : null,
      
      // Nouveaux champs pour les partenariats
      isPartner: json['isPartner'] ?? false,
      benefits: json['benefits'] != null
          ? List<PartnershipBenefit>.from(
              json['benefits'].map((x) => PartnershipBenefit.fromJson(x)))
          : null,
      partnershipDescription: json['partnershipDescription'],
      promoCode: json['promoCode'],
      partnershipExpiryDate: json['partnershipExpiryDate'] != null
          ? DateTime.parse(json['partnershipExpiryDate'])
          : null,
      partnerLogoUrl: json['partnerLogoUrl'],
      cashbackPercentage: json['cashbackPercentage'],
      hasExclusiveAccess: json['hasExclusiveAccess'],
      currentPromotions: json['currentPromotions'] != null
          ? List<SupplierPromotion>.from(
              json['currentPromotions'].map((x) => SupplierPromotion.fromJson(x)))
          : null,

      createdAt: DateTime.parse(json['createdAt']),
      updatedAt: DateTime.parse(json['updatedAt']),
    );
  }
}

// ModÃ¨le pour les avantages partenaires
class PartnershipBenefit {
  final String id;
  final String title;
  final String description;
  final BenefitType type;
  final double value; // Pourcentage, montant, etc.
  final String? thresholdDescription; // Ex: "Ã€ partir de 100â‚¬ d'achat"
  final bool isUnlimited;
  final DateTime? expiryDate;
  final String? iconName;

  PartnershipBenefit({
    required this.id,
    required this.title,
    required this.description,
    required this.type,
    required this.value,
    this.thresholdDescription,
    this.isUnlimited = false,
    this.expiryDate,
    this.iconName,
  });

  factory PartnershipBenefit.fromJson(Map<String, dynamic> json) {
    return PartnershipBenefit(
      id: json['id'],
      title: json['title'],
      description: json['description'],
      type: BenefitTypeExtension.fromString(json['type']),
      value: json['value'],
      thresholdDescription: json['thresholdDescription'],
      isUnlimited: json['isUnlimited'] ?? false,
      expiryDate: json['expiryDate'] != null
          ? DateTime.parse(json['expiryDate'])
          : null,
      iconName: json['iconName'],
    );
  }
}

// Types d'avantages
enum BenefitType {
  discount,    // Remise directe sur les achats
  cashback,    // Remise en argent aprÃ¨s achat
  loyalty,     // Points de fidÃ©litÃ©
  freeShipping, // Livraison gratuite
  exclusiveAccess, // AccÃ¨s Ã  des produits exclusifs
  gift,        // Cadeau Ã  partir d'un certain montant
  other        // Autre type d'avantage
}

// Extension pour faciliter la conversion string <-> enum
extension BenefitTypeExtension on BenefitType {
  static BenefitType fromString(String value) {
    return BenefitType.values.firstWhere(
      (type) => type.toString().split('.').last == value,
      orElse: () => BenefitType.other,
    );
  }

  String get displayName {
    switch (this) {
      case BenefitType.discount:
        return 'Remise';
      case BenefitType.cashback:
        return 'Cashback';
      case BenefitType.loyalty:
        return 'Points fidÃ©litÃ©';
      case BenefitType.freeShipping:
        return 'Livraison gratuite';
      case BenefitType.exclusiveAccess:
        return 'AccÃ¨s exclusif';
      case BenefitType.gift:
        return 'Cadeau';
      case BenefitType.other:
        return 'Autre avantage';
    }
  }
}

// ModÃ¨le pour les promotions temporaires
class SupplierPromotion {
  final String id;
  final String title;
  final String description;
  final DateTime startDate;
  final DateTime endDate;
  final String? imageUrl;
  final String? promoCode;
  final double discountValue;
  final bool isPercentage;
  final String? conditions;

  SupplierPromotion({
    required this.id,
    required this.title,
    required this.description,
    required this.startDate,
    required this.endDate,
    this.imageUrl,
    this.promoCode,
    required this.discountValue,
    required this.isPercentage,
    this.conditions,
  });

  factory SupplierPromotion.fromJson(Map<String, dynamic> json) {
    return SupplierPromotion(
      id: json['id'],
      title: json['title'],
      description: json['description'],
      startDate: DateTime.parse(json['startDate']),
      endDate: DateTime.parse(json['endDate']),
      imageUrl: json['imageUrl'],
      promoCode: json['promoCode'],
      discountValue: json['discountValue'],
      isPercentage: json['isPercentage'],
      conditions: json['conditions'],
    );
  }

  bool get isActive {
    final now = DateTime.now();
    return now.isAfter(startDate) && now.isBefore(endDate);
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\booking\booking_chat_page.dart

// lib/pages/shared/booking/booking_chat_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:math';
import '../../../theme/kipik_theme.dart';
import '../../../models/flash/flash_booking.dart';
import '../../../models/flash/flash_booking_status.dart';
import '../../../models/flash/flash.dart';
import '../../../services/flash/flash_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';

/// Page de chat sophistiquÃ©e dÃ©diÃ©e pour un booking de flash
class BookingChatPage extends StatefulWidget {
  final FlashBooking booking;

  const BookingChatPage({
    Key? key,
    required this.booking,
  }) : super(key: key);

  @override
  State<BookingChatPage> createState() => _BookingChatPageState();
}

class _BookingChatPageState extends State<BookingChatPage> with TickerProviderStateMixin {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  late AnimationController _typingAnimationController;
  late AnimationController _statusAnimationController;
  
  bool _isLoading = true;
  bool _isSending = false;
  bool _isTyping = false;
  Flash? _flash;
  List<ChatMessage> _messages = [];
  Timer? _typingTimer;
  
  late String _currentUserId;
  late bool _isClient;
  late String _otherUserName;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeChat();
  }

  void _initializeAnimations() {
    _typingAnimationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    )..repeat();
    
    _statusAnimationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    _typingAnimationController.dispose();
    _statusAnimationController.dispose();
    _typingTimer?.cancel();
    super.dispose();
  }

  Future<void> _initializeChat() async {
    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) return;

      _currentUserId = currentUser['uid'] ?? '';
      _isClient = _currentUserId == widget.booking.clientId;

      // Charger les dÃ©tails du flash
      _flash = await FlashService.instance.getFlashById(widget.booking.flashId);
      
      // DÃ©terminer le nom de l'autre utilisateur
      _otherUserName = _isClient 
          ? (_flash?.tattooArtistName ?? 'Tatoueur')
          : 'Client';
      
      // Charger les messages (simulÃ©s pour la dÃ©mo)
      _messages = _generateEnhancedMessages();
      
      setState(() => _isLoading = false);
      
      // Auto-scroll vers le bas
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _scrollToBottom();
      });

      // Simuler activitÃ© de frappe occasionnelle
      _startTypingSimulation();
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorSnackBar('Erreur: ${e.toString()}');
    }
  }

  void _startTypingSimulation() {
    Timer.periodic(const Duration(seconds: 15), (timer) {
      if (mounted && Random().nextBool()) {
        _simulateOtherUserTyping();
      }
    });
  }

  void _simulateOtherUserTyping() {
    setState(() => _isTyping = true);
    
    Timer(Duration(seconds: 2 + Random().nextInt(3)), () {
      if (mounted) {
        setState(() => _isTyping = false);
        
        // Parfois ajouter un message automatique
        if (Random().nextDouble() < 0.3) {
          _addAutomaticMessage();
        }
      }
    });
  }

  void _addAutomaticMessage() {
    final autoMessages = _isClient ? [
      "J'ai regardÃ© votre profil, votre style me plaÃ®t beaucoup !",
      "Pouvez-vous me dire si vous avez des crÃ©neaux plus tÃ´t ?",
      "Ce flash sera parfait pour l'emplacement choisi ðŸ‘Œ",
    ] : [
      "Parfait ! J'ai hÃ¢te de rÃ©aliser ce flash avec vous",
      "N'hÃ©sitez pas si vous avez des questions",
      "Pensez Ã  bien hydrater votre peau avant le RDV ðŸ’§",
    ];

    final randomMessage = autoMessages[Random().nextInt(autoMessages.length)];
    
    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      senderId: _isClient ? widget.booking.tattooArtistId : widget.booking.clientId,
      senderName: _otherUserName,
      message: randomMessage,
      timestamp: DateTime.now(),
      messageType: MessageType.text,
    );

    setState(() {
      _messages.add(newMessage);
    });
    
    _scrollToBottom();
  }

  List<ChatMessage> _generateEnhancedMessages() {
    final now = DateTime.now();
    final messages = <ChatMessage>[
      ChatMessage(
        id: '1',
        senderId: 'system',
        senderName: 'SystÃ¨me',
        message: 'Chat ouvert pour votre rÃ©servation de flash "${_flash?.title ?? 'Flash'}"',
        timestamp: now.subtract(const Duration(hours: 2)),
        messageType: MessageType.system,
      ),
    ];

    if (_isClient) {
      messages.addAll([
        ChatMessage(
          id: '2',
          senderId: widget.booking.tattooArtistId,
          senderName: _flash?.tattooArtistName ?? 'Tatoueur',
          message: 'Salut ! J\'ai bien reÃ§u votre demande pour le ${widget.booking.requestedDate.day}/${widget.booking.requestedDate.month} Ã  ${widget.booking.timeSlot}. Je confirme votre crÃ©neau ! ðŸŽ¨',
          timestamp: now.subtract(const Duration(hours: 1, minutes: 30)),
          messageType: MessageType.text,
        ),
        ChatMessage(
          id: '3',
          senderId: widget.booking.clientId,
          senderName: 'Vous',
          message: 'Parfait ! J\'ai hÃ¢te de faire ce tatouage. Y a-t-il des prÃ©parations spÃ©ciales Ã  prÃ©voir ?',
          timestamp: now.subtract(const Duration(hours: 1)),
          messageType: MessageType.text,
        ),
        ChatMessage(
          id: '4',
          senderId: widget.booking.tattooArtistId,
          senderName: _flash?.tattooArtistName ?? 'Tatoueur',
          message: 'Pensez Ã  bien vous hydrater la peau les jours prÃ©cÃ©dents et Ã©vitez l\'alcool 24h avant. On se voit bientÃ´t ! ðŸŽ¨',
          timestamp: now.subtract(const Duration(minutes: 30)),
          messageType: MessageType.text,
        ),
        if (widget.booking.status == FlashBookingStatus.confirmed)
          ChatMessage(
            id: '5',
            senderId: 'system',
            senderName: 'SystÃ¨me',
            message: 'RDV confirmÃ© pour le ${widget.booking.requestedDate.day}/${widget.booking.requestedDate.month} Ã  ${widget.booking.timeSlot} âœ…',
            timestamp: now.subtract(const Duration(minutes: 15)),
            messageType: MessageType.confirmation,
          ),
      ]);
    } else {
      messages.addAll([
        ChatMessage(
          id: '2',
          senderId: widget.booking.clientId,
          senderName: 'Client',
          message: 'Bonjour ! Je suis trÃ¨s intÃ©ressÃ© par votre flash. Serait-il possible d\'avoir plus de dÃ©tails ?',
          timestamp: now.subtract(const Duration(hours: 1, minutes: 30)),
          messageType: MessageType.text,
        ),
        ChatMessage(
          id: '3',
          senderId: widget.booking.tattooArtistId,
          senderName: 'Vous',
          message: 'Bien sÃ»r ! Ce flash fait environ ${_flash?.size ?? '8x6cm'} et serait parfait pour l\'emplacement que vous avez choisi. Le style ${_flash?.style ?? 'minimaliste'} se marie bien avec ce design.',
          timestamp: now.subtract(const Duration(hours: 1)),
          messageType: MessageType.text,
        ),
      ]);
    }

    return messages;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'Chat RDV',
        subtitle: '${_otherUserName} â€¢ ${widget.booking.status.displayText}',
        showBackButton: true,
        showNotificationIcon: false,
        useProStyle: true,
        actions: [
          IconButton(
            onPressed: _showBookingDetails,
            icon: const Icon(Icons.info_outline, color: Colors.white),
          ),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert, color: Colors.white),
            color: const Color(0xFF1A1A1A),
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'share_location',
                child: Row(
                  children: [
                    Icon(Icons.location_on, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Partager position', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'send_image',
                child: Row(
                  children: [
                    Icon(Icons.photo_camera, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Envoyer photo', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'call',
                child: Row(
                  children: [
                    Icon(Icons.phone, color: Colors.white),
                    SizedBox(width: 8),
                    Text('Appeler', style: TextStyle(color: Colors.white)),
                  ],
                ),
              ),
            ],
            onSelected: _handleMenuAction,
          ),
        ],
      ),
      body: _isLoading ? _buildLoadingState() : _buildChatContent(),
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'share_location':
        _shareLocation();
        break;
      case 'send_image':
        _sendImage();
        break;
      case 'call':
        _makeCall();
        break;
    }
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement du chat...',
            style: TextStyle(
              color: Colors.grey,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChatContent() {
    return Column(
      children: [
        _buildBookingHeader(),
        Expanded(
          child: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  const Color(0xFF0A0A0A),
                  const Color(0xFF0A0A0A).withOpacity(0.95),
                ],
              ),
            ),
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              itemCount: _messages.length + (_isTyping ? 1 : 0),
              itemBuilder: (context, index) {
                if (index == _messages.length && _isTyping) {
                  return _buildTypingIndicator();
                }
                final message = _messages[index];
                return _buildEnhancedMessageBubble(message);
              },
            ),
          ),
        ),
        _buildEnhancedMessageInput(),
      ],
    );
  }

  Widget _buildBookingHeader() {
    if (_flash == null) return const SizedBox.shrink();

    return Container(
      margin: const EdgeInsets.all(16),
      child: Card(
        color: const Color(0xFF1A1A1A),
        elevation: 8,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                KipikTheme.rouge.withOpacity(0.1),
                Colors.transparent,
              ],
            ),
          ),
          child: Row(
            children: [
              Stack(
                children: [
                  ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: Image.network(
                      _flash!.imageUrl,
                      width: 60,
                      height: 60,
                      fit: BoxFit.cover,
                      errorBuilder: (_, __, ___) => _buildPlaceholderImage(),
                    ),
                  ),
                  Positioned(
                    top: 4,
                    right: 4,
                    child: Container(
                      padding: const EdgeInsets.all(2),
                      decoration: BoxDecoration(
                        color: _getStatusColor(widget.booking.status),
                        shape: BoxShape.circle,
                      ),
                      child: Icon(
                        _getStatusIcon(widget.booking.status),
                        color: Colors.white,
                        size: 12,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _flash!.title,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Row(
                      children: [
                        Icon(
                          _getStatusIcon(widget.booking.status),
                          color: _getStatusColor(widget.booking.status),
                          size: 14,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          _getStatusText(widget.booking.status),
                          style: TextStyle(
                            color: _getStatusColor(widget.booking.status),
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${widget.booking.requestedDate.day}/${widget.booking.requestedDate.month} Ã  ${widget.booking.timeSlot}',
                      style: TextStyle(
                        color: Colors.grey.shade400,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    '${widget.booking.totalPrice.toInt()}â‚¬',
                    style: TextStyle(
                      color: KipikTheme.rouge,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  if (widget.booking.depositAmount > 0)
                    Container(
                      margin: const EdgeInsets.only(top: 4),
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.green.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        '${widget.booking.depositAmount.toInt()}â‚¬ versÃ©',
                        style: const TextStyle(
                          color: Colors.green,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPlaceholderImage() {
    return Container(
      width: 60,
      height: 60,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            const Color(0xFF2A2A2A),
            const Color(0xFF1A1A1A),
          ],
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Icon(
        Icons.image,
        color: Colors.grey.shade600,
        size: 24,
      ),
    );
  }

  Widget _buildEnhancedMessageBubble(ChatMessage message) {
    final isMe = message.senderId == _currentUserId;
    final isSystem = message.messageType == MessageType.system;
    final isConfirmation = message.messageType == MessageType.confirmation;

    if (isSystem || isConfirmation) {
      return Container(
        margin: const EdgeInsets.symmetric(vertical: 8),
        child: Center(
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              color: isConfirmation 
                  ? Colors.green.withOpacity(0.2) 
                  : const Color(0xFF2A2A2A),
              borderRadius: BorderRadius.circular(16),
              border: isConfirmation 
                  ? Border.all(color: Colors.green.withOpacity(0.3)) 
                  : null,
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (isConfirmation) ...[
                  Icon(Icons.check_circle, color: Colors.green, size: 16),
                  const SizedBox(width: 8),
                ],
                Flexible(
                  child: Text(
                    message.message,
                    style: TextStyle(
                      color: isConfirmation ? Colors.green : Colors.grey.shade400,
                      fontSize: 12,
                      fontWeight: isConfirmation ? FontWeight.bold : FontWeight.normal,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: isMe ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          if (!isMe) ...[
            _buildMessageAvatar(message),
            const SizedBox(width: 8),
          ],
          Flexible(
            child: Column(
              crossAxisAlignment: isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              children: [
                Container(
                  constraints: BoxConstraints(
                    maxWidth: MediaQuery.of(context).size.width * 0.75,
                  ),
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  decoration: BoxDecoration(
                    gradient: isMe 
                        ? LinearGradient(
                            colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                          )
                        : null,
                    color: isMe ? null : const Color(0xFF1A1A1A),
                    borderRadius: BorderRadius.only(
                      topLeft: const Radius.circular(16),
                      topRight: const Radius.circular(16),
                      bottomLeft: Radius.circular(isMe ? 16 : 4),
                      bottomRight: Radius.circular(isMe ? 4 : 16),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: (isMe ? KipikTheme.rouge : Colors.black).withOpacity(0.3),
                        blurRadius: 8,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Text(
                    message.message,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                    ),
                  ),
                ),
                const SizedBox(height: 4),
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      _formatMessageTime(message.timestamp),
                      style: TextStyle(
                        color: Colors.grey.shade500,
                        fontSize: 10,
                      ),
                    ),
                    if (isMe) ...[
                      const SizedBox(width: 4),
                      Icon(
                        Icons.done_all,
                        color: Colors.grey.shade500,
                        size: 12,
                      ),
                    ],
                  ],
                ),
              ],
            ),
          ),
          if (isMe) ...[
            const SizedBox(width: 8),
            _buildMessageAvatar(message),
          ],
        ],
      ),
    );
  }

  Widget _buildMessageAvatar(ChatMessage message) {
    final isMe = message.senderId == _currentUserId;
    
    return CircleAvatar(
      radius: 16,
      backgroundColor: isMe ? Colors.blue : KipikTheme.rouge,
      child: Text(
        message.senderName[0].toUpperCase(),
        style: const TextStyle(
          color: Colors.white,
          fontSize: 12,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          CircleAvatar(
            radius: 16,
            backgroundColor: KipikTheme.rouge,
            child: Text(
              _otherUserName[0].toUpperCase(),
              style: const TextStyle(
                color: Colors.white,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          const SizedBox(width: 8),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: const Color(0xFF1A1A1A),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  '$_otherUserName est en train d\'Ã©crire',
                  style: TextStyle(
                    color: Colors.grey.shade400,
                    fontSize: 12,
                    fontStyle: FontStyle.italic,
                  ),
                ),
                const SizedBox(width: 8),
                AnimatedBuilder(
                  animation: _typingAnimationController,
                  builder: (context, child) {
                    return Row(
                      children: List.generate(3, (index) {
                        final delay = index * 0.3;
                        final animationValue = (_typingAnimationController.value + delay) % 1.0;
                        final opacity = animationValue < 0.5 ? animationValue * 2 : (1 - animationValue) * 2;
                        
                        return Container(
                          margin: const EdgeInsets.only(right: 2),
                          width: 4,
                          height: 4,
                          decoration: BoxDecoration(
                            color: KipikTheme.rouge.withOpacity(opacity),
                            shape: BoxShape.circle,
                          ),
                        );
                      }),
                    );
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEnhancedMessageInput() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        border: const Border(top: BorderSide(color: Color(0xFF2A2A2A))),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, -4),
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          children: [
            _buildAttachmentButton(),
            const SizedBox(width: 12),
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  color: const Color(0xFF0A0A0A),
                  borderRadius: BorderRadius.circular(24),
                  border: Border.all(color: const Color(0xFF2A2A2A)),
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _messageController,
                        style: const TextStyle(color: Colors.white),
                        maxLines: null,
                        textCapitalization: TextCapitalization.sentences,
                        decoration: InputDecoration(
                          hintText: 'Ã‰crivez votre message...',
                          hintStyle: TextStyle(color: Colors.grey.shade600),
                          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          border: InputBorder.none,
                        ),
                        onChanged: _onMessageChanged,
                      ),
                    ),
                    _buildEmojiButton(),
                  ],
                ),
              ),
            ),
            const SizedBox(width: 12),
            _buildSendButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildAttachmentButton() {
    return Container(
      decoration: BoxDecoration(
        color: const Color(0xFF2A2A2A),
        shape: BoxShape.circle,
      ),
      child: IconButton(
        onPressed: _showAttachmentOptions,
        icon: const Icon(Icons.add, color: Colors.white),
        constraints: const BoxConstraints(minWidth: 40, minHeight: 40),
      ),
    );
  }

  Widget _buildEmojiButton() {
    return IconButton(
      onPressed: _showEmojiPicker,
      icon: Icon(
        Icons.emoji_emotions_outlined,
        color: Colors.grey.shade400,
      ),
    );
  }

  Widget _buildSendButton() {
    final hasText = _messageController.text.trim().isNotEmpty;
    
    return AnimatedContainer(
      duration: const Duration(milliseconds: 200),
      decoration: BoxDecoration(
        gradient: hasText 
            ? LinearGradient(
                colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
              )
            : null,
        color: hasText ? null : const Color(0xFF2A2A2A),
        shape: BoxShape.circle,
      ),
      child: IconButton(
        onPressed: hasText && !_isSending ? _sendMessage : null,
        icon: _isSending
            ? SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              )
            : Icon(
                hasText ? Icons.send : Icons.mic,
                color: Colors.white,
              ),
        constraints: const BoxConstraints(minWidth: 40, minHeight: 40),
      ),
    );
  }

  void _onMessageChanged(String text) {
    // Simuler notification de frappe (throttled)
    _typingTimer?.cancel();
    _typingTimer = Timer(const Duration(milliseconds: 500), () {
      // Ici on enverrait une notification de frappe en vrai
    });
  }

  Future<void> _sendMessage() async {
    final messageText = _messageController.text.trim();
    if (messageText.isEmpty) return;

    setState(() => _isSending = true);

    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) return;

      final newMessage = ChatMessage(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        senderId: _currentUserId,
        senderName: 'Vous',
        message: messageText,
        timestamp: DateTime.now(),
        messageType: MessageType.text,
      );

      setState(() {
        _messages.add(newMessage);
        _messageController.clear();
      });

      _scrollToBottom();

      // Simuler envoi avec dÃ©lai rÃ©aliste
      await Future.delayed(const Duration(milliseconds: 800));

      HapticFeedback.lightImpact();
    } catch (e) {
      _showErrorSnackBar('Erreur: ${e.toString()}');
    } finally {
      setState(() => _isSending = false);
    }
  }

  void _scrollToBottom() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }

  void _showAttachmentOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Color(0xFF1A1A1A),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              margin: const EdgeInsets.symmetric(vertical: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.shade600,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const Padding(
              padding: EdgeInsets.all(20),
              child: Text(
                'Envoyer',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            GridView.count(
              shrinkWrap: true,
              crossAxisCount: 3,
              padding: const EdgeInsets.symmetric(horizontal: 20),
              children: [
                _buildAttachmentOption(Icons.photo_camera, 'Photo', _sendImage),
                _buildAttachmentOption(Icons.location_on, 'Position', _shareLocation),
                _buildAttachmentOption(Icons.description, 'Document', _sendDocument),
              ],
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildAttachmentOption(IconData icon, String label, VoidCallback onTap) {
    return GestureDetector(
      onTap: () {
        Navigator.pop(context);
        onTap();
      },
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.2),
              shape: BoxShape.circle,
            ),
            child: Icon(icon, color: KipikTheme.rouge, size: 30),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }

  void _showEmojiPicker() {
    _showInfoSnackBar('Picker emoji - BientÃ´t disponible');
  }

  void _showBookingDetails() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _buildBookingDetailsSheet(),
    );
  }

  Widget _buildBookingDetailsSheet() {
    return DraggableScrollableSheet(
      initialChildSize: 0.7,
      maxChildSize: 0.9,
      minChildSize: 0.5,
      builder: (context, scrollController) {
        return Container(
          decoration: const BoxDecoration(
            color: Color(0xFF1A1A1A),
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              Container(
                margin: const EdgeInsets.symmetric(vertical: 12),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey.shade600,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(20),
                child: Row(
                  children: [
                    const Text(
                      'DÃ©tails de la rÃ©servation',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: SingleChildScrollView(
                  controller: scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 20),
                  child: Column(
                    children: [
                      if (_flash != null) _buildFlashCard(),
                      const SizedBox(height: 20),
                      _buildBookingInfoCard(),
                      const SizedBox(height: 20),
                      _buildContactInfoCard(),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildFlashCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.network(
              _flash!.imageUrl,
              width: 80,
              height: 80,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => _buildPlaceholderImage(),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  _flash!.title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _flash!.tattooArtistName,
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 14,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '${widget.booking.totalPrice.toInt()}â‚¬',
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBookingInfoCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Informations RDV',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          _buildInfoRow('Date', '${widget.booking.requestedDate.day}/${widget.booking.requestedDate.month}/${widget.booking.requestedDate.year}'),
          _buildInfoRow('Heure', widget.booking.timeSlot),
          _buildInfoRow('Statut', _getStatusText(widget.booking.status)),
          _buildInfoRow('Acompte versÃ©', '${widget.booking.depositAmount.toInt()}â‚¬'),
          _buildInfoRow('Reste Ã  payer', '${(widget.booking.totalPrice - widget.booking.depositAmount).toInt()}â‚¬'),
          if (widget.booking.clientNotes.isNotEmpty)
            _buildInfoRow('Notes', widget.booking.clientNotes),
        ],
      ),
    );
  }

  Widget _buildContactInfoCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0A0A0A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Contact',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          if (widget.booking.clientPhone.isNotEmpty)
            _buildInfoRow('TÃ©lÃ©phone', widget.booking.clientPhone),
          _buildInfoRow('Chat', 'Disponible 24h/24'),
          _buildInfoRow('RÃ©ponse moyenne', '< 2h'),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // âœ… Helper methods CORRIGÃ‰S avec tous les statuts
  Color _getStatusColor(FlashBookingStatus status) {
    switch (status) {
      case FlashBookingStatus.pending:
        return Colors.orange;
      case FlashBookingStatus.quoteSent: // âœ… AjoutÃ©
        return Colors.blue;
      case FlashBookingStatus.depositPaid: // âœ… AjoutÃ©
        return Colors.purple;
      case FlashBookingStatus.confirmed:
        return Colors.green;
      case FlashBookingStatus.completed:
        return Colors.blue;
      case FlashBookingStatus.cancelled:
      case FlashBookingStatus.rejected:
        return Colors.red;
      case FlashBookingStatus.expired: // âœ… AjoutÃ©
        return Colors.grey;
    }
  }

  IconData _getStatusIcon(FlashBookingStatus status) {
    switch (status) {
      case FlashBookingStatus.pending:
        return Icons.schedule;
      case FlashBookingStatus.quoteSent: // âœ… AjoutÃ©
        return Icons.description;
      case FlashBookingStatus.depositPaid: // âœ… AjoutÃ©
        return Icons.payment;
      case FlashBookingStatus.confirmed:
        return Icons.check_circle;
      case FlashBookingStatus.completed:
        return Icons.done_all;
      case FlashBookingStatus.cancelled:
      case FlashBookingStatus.rejected:
        return Icons.cancel;
      case FlashBookingStatus.expired: // âœ… AjoutÃ©
        return Icons.timer_off;
    }
  }

  String _getStatusText(FlashBookingStatus status) {
    return status.displayText;
  }

  String _formatMessageTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);

    if (difference.inDays > 0) {
      return '${timestamp.day}/${timestamp.month} ${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}';
    } else if (difference.inHours > 0) {
      return '${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}';
    } else {
      return 'Il y a ${difference.inMinutes}min';
    }
  }

  // Action methods
  void _shareLocation() {
    _showInfoSnackBar('Partage de position - BientÃ´t disponible');
  }

  void _sendImage() {
    _showInfoSnackBar('Envoi d\'image - BientÃ´t disponible');
  }

  void _sendDocument() {
    _showInfoSnackBar('Envoi de document - BientÃ´t disponible');
  }

  void _makeCall() {
    _showInfoSnackBar('Appel - BientÃ´t disponible');
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}

/// ModÃ¨le pour les messages de chat amÃ©liorÃ©
class ChatMessage {
  final String id;
  final String senderId;
  final String senderName;
  final String message;
  final DateTime timestamp;
  final MessageType messageType;

  ChatMessage({
    required this.id,
    required this.senderId,
    required this.senderName,
    required this.message,
    required this.timestamp,
    this.messageType = MessageType.text,
  });
}

enum MessageType {
  text,
  system,
  confirmation,
  image,
  location,
  document,
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\booking\booking_flow_page.dart

// lib/pages/shared/booking/booking_flow_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../theme/kipik_theme.dart';
import '../../../models/flash/flash.dart';
import '../../../models/flash/flash_booking.dart'; // âœ… Utilise votre modÃ¨le
import '../../../models/flash/flash_booking_status.dart'; // âœ… Import ajoutÃ©
import '../../../services/flash/flash_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart'; // âœ… Import correct

/// Page de workflow complet de rÃ©servation de flash (4 Ã©tapes)
class BookingFlowPage extends StatefulWidget {
  final Flash flash;
  final String? initialStep; // 'selection', 'validation', 'payment', 'confirmation'

  const BookingFlowPage({
    Key? key,
    required this.flash,
    this.initialStep,
  }) : super(key: key);

  @override
  State<BookingFlowPage> createState() => _BookingFlowPageState();
}

class _BookingFlowPageState extends State<BookingFlowPage> with TickerProviderStateMixin {
  late PageController _pageController;
  late AnimationController _progressController;
  late Animation<double> _progressAnimation;
  
  int _currentStep = 0;
  bool _isLoading = false;

  // DonnÃ©es du booking
  DateTime? _selectedDate;
  String? _selectedTimeSlot;
  String _notes = '';
  String _phone = '';
  FlashBooking? _pendingBooking;

  // Ã‰tapes du workflow
  final List<String> _stepTitles = [
    'SÃ©lection crÃ©neau',
    'Validation',
    'Paiement acompte',
    'Confirmation'
  ];

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _progressController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _progressAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _progressController, curve: Curves.easeInOut),
    );

    // Initialiser l'Ã©tape si spÃ©cifiÃ©e
    if (widget.initialStep != null) {
      switch (widget.initialStep) {
        case 'validation':
          _currentStep = 1;
          break;
        case 'payment':
          _currentStep = 2;
          break;
        case 'confirmation':
          _currentStep = 3;
          break;
        default:
          _currentStep = 0;
      }
      _updateProgress();
    }
  }

  @override
  void dispose() {
    _pageController.dispose();
    _progressController.dispose();
    super.dispose();
  }

  void _updateProgress() {
    _progressController.animateTo((_currentStep + 1) / _stepTitles.length);
  }

  Future<void> _nextStep() async {
    if (_currentStep < _stepTitles.length - 1) {
      setState(() => _currentStep++);
      _updateProgress();
      await _pageController.nextPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  Future<void> _previousStep() async {
    if (_currentStep > 0) {
      setState(() => _currentStep--);
      _updateProgress();
      await _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: 'RÃ©server "${widget.flash.title}"',
        showBackButton: true,
        useProStyle: false, // Style particulier pour les clients
      ),
      body: Column(
        children: [
          // Barre de progression
          _buildProgressBar(),
          
          // Contenu des Ã©tapes
          Expanded(
            child: PageView(
              controller: _pageController,
              physics: const NeverScrollableScrollPhysics(),
              children: [
                _buildSelectionStep(),
                _buildValidationStep(),
                _buildPaymentStep(),
                _buildConfirmationStep(),
              ],
            ),
          ),
          
          // Boutons navigation
          _buildNavigationButtons(),
        ],
      ),
    );
  }

  Widget _buildProgressBar() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: const BoxDecoration(
        color: Color(0xFF1A1A1A),
        border: Border(bottom: BorderSide(color: Color(0xFF2A2A2A))),
      ),
      child: Column(
        children: [
          // Titre Ã©tape courante
          Text(
            _stepTitles[_currentStep],
            style: const TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          
          // Barre de progression animÃ©e
          Container(
            height: 6,
            decoration: BoxDecoration(
              color: const Color(0xFF2A2A2A),
              borderRadius: BorderRadius.circular(3),
            ),
            child: AnimatedBuilder(
              animation: _progressAnimation,
              builder: (context, child) {
                return FractionallySizedBox(
                  alignment: Alignment.centerLeft,
                  widthFactor: _progressAnimation.value,
                  child: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                      ),
                      borderRadius: BorderRadius.circular(3),
                    ),
                  ),
                );
              },
            ),
          ),
          const SizedBox(height: 8),
          
          // Indicateurs Ã©tapes
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: List.generate(_stepTitles.length, (index) {
              final isCompleted = index < _currentStep;
              final isCurrent = index == _currentStep;
              
              return Container(
                width: 32,
                height: 32,
                decoration: BoxDecoration(
                  color: isCompleted || isCurrent 
                      ? KipikTheme.rouge 
                      : const Color(0xFF2A2A2A),
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: isCurrent ? Colors.white : Colors.transparent,
                    width: 2,
                  ),
                ),
                child: Center(
                  child: isCompleted 
                      ? const Icon(Icons.check, color: Colors.white, size: 16)
                      : Text(
                          '${index + 1}',
                          style: TextStyle(
                            color: isCompleted || isCurrent ? Colors.white : Colors.grey,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                ),
              );
            }),
          ),
        ],
      ),
    );
  }

  Widget _buildSelectionStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Flash preview
          _buildFlashPreview(),
          const SizedBox(height: 32),
          
          // SÃ©lection date
          _buildDateSelection(),
          const SizedBox(height: 24),
          
          // SÃ©lection crÃ©neau
          if (_selectedDate != null) _buildTimeSlotSelection(),
          const SizedBox(height: 24),
          
          // Notes optionnelles
          _buildNotesSection(),
        ],
      ),
    );
  }

  Widget _buildFlashPreview() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.network(
              widget.flash.imageUrl,
              width: 80,
              height: 80,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => Container(
                width: 80,
                height: 80,
                color: const Color(0xFF2A2A2A),
                child: const Icon(Icons.image, color: Colors.grey),
              ),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.flash.title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  widget.flash.tattooArtistName, // âœ… CorrigÃ© : tattooArtistName au lieu de artistName
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 14,
                  ),
                ),
                const SizedBox(height: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: KipikTheme.rouge.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Text(
                    '${widget.flash.price.toInt()}â‚¬', // âœ… Converti en int pour affichage
                    style: TextStyle(
                      color: KipikTheme.rouge,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDateSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'SÃ©lectionnez une date',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        Container(
          height: 100,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: 14, // 2 semaines
            itemBuilder: (context, index) {
              final date = DateTime.now().add(Duration(days: index + 1));
              final isSelected = _selectedDate?.day == date.day &&
                                _selectedDate?.month == date.month;
              
              return GestureDetector(
                onTap: () {
                  setState(() => _selectedDate = date);
                  HapticFeedback.lightImpact();
                },
                child: Container(
                  width: 80,
                  margin: const EdgeInsets.only(right: 12),
                  decoration: BoxDecoration(
                    color: isSelected ? KipikTheme.rouge : const Color(0xFF1A1A1A),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: isSelected ? KipikTheme.rouge : const Color(0xFF2A2A2A),
                    ),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        _getDayName(date.weekday),
                        style: TextStyle(
                          color: isSelected ? Colors.white : Colors.grey,
                          fontSize: 12,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${date.day}',
                        style: TextStyle(
                          color: isSelected ? Colors.white : Colors.white,
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        _getMonthName(date.month),
                        style: TextStyle(
                          color: isSelected ? Colors.white : Colors.grey,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildTimeSlotSelection() {
    final availableSlots = _generateTimeSlots();
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'CrÃ©neaux disponibles',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        Wrap(
          spacing: 12,
          runSpacing: 12,
          children: availableSlots.map((slot) {
            final isSelected = _selectedTimeSlot == slot;
            
            return GestureDetector(
              onTap: () {
                setState(() => _selectedTimeSlot = slot);
                HapticFeedback.lightImpact();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                decoration: BoxDecoration(
                  color: isSelected ? KipikTheme.rouge : const Color(0xFF1A1A1A),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: isSelected ? KipikTheme.rouge : const Color(0xFF2A2A2A),
                  ),
                ),
                child: Text(
                  slot,
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.white,
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildNotesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Notes (optionnel)',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        TextField(
          maxLines: 3,
          style: const TextStyle(color: Colors.white),
          decoration: InputDecoration(
            hintText: 'PrÃ©cisions, questions, demandes spÃ©ciales...',
            hintStyle: TextStyle(color: Colors.grey.shade600),
            filled: true,
            fillColor: const Color(0xFF1A1A1A),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFF2A2A2A)),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFF2A2A2A)),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: KipikTheme.rouge),
            ),
          ),
          onChanged: (value) => _notes = value,
        ),
      ],
    );
  }

  Widget _buildValidationStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'VÃ©rifiez votre demande',
            style: TextStyle(
              color: Colors.white,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 24),
          
          // RÃ©capitulatif
          _buildBookingSummary(),
          const SizedBox(height: 32),
          
          // Contact
          _buildContactSection(),
          const SizedBox(height: 32),
          
          // Conditions
          _buildTermsSection(),
        ],
      ),
    );
  }

  Widget _buildBookingSummary() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'RÃ©capitulatif',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          _buildSummaryRow('Flash', widget.flash.title),
          _buildSummaryRow('Artiste', widget.flash.tattooArtistName), // âœ… CorrigÃ©
          _buildSummaryRow('Date', _selectedDate != null 
              ? '${_selectedDate!.day}/${_selectedDate!.month}/${_selectedDate!.year}'
              : 'Non sÃ©lectionnÃ©e'),
          _buildSummaryRow('Heure', _selectedTimeSlot ?? 'Non sÃ©lectionnÃ©e'),
          _buildSummaryRow('Prix', '${widget.flash.price.toInt()}â‚¬'),
          if (_notes.isNotEmpty) _buildSummaryRow('Notes', _notes),
          const Divider(color: Color(0xFF2A2A2A)),
          _buildSummaryRow('Acompte Ã  verser', '${(widget.flash.price * 0.3).toInt()}â‚¬',
              isHighlighted: true),
        ],
      ),
    );
  }

  Widget _buildSummaryRow(String label, String value, {bool isHighlighted = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: isHighlighted ? KipikTheme.rouge : Colors.white,
                fontSize: 14,
                fontWeight: isHighlighted ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContactSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'NumÃ©ro de tÃ©lÃ©phone',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        TextField(
          keyboardType: TextInputType.phone,
          style: const TextStyle(color: Colors.white),
          decoration: InputDecoration(
            hintText: '+33 6 12 34 56 78',
            hintStyle: TextStyle(color: Colors.grey.shade600),
            filled: true,
            fillColor: const Color(0xFF1A1A1A),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFF2A2A2A)),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFF2A2A2A)),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: KipikTheme.rouge),
            ),
          ),
          onChanged: (value) => _phone = value,
        ),
      ],
    );
  }

  Widget _buildTermsSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.info_outline, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              Text(
                'Conditions importantes',
                style: TextStyle(
                  color: KipikTheme.rouge,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          const Text(
            'â€¢ L\'acompte de 30% sera dÃ©bitÃ© immÃ©diatement\n'
            'â€¢ Le tatoueur a 24h pour confirmer votre demande\n'
            'â€¢ En cas de refus, vous serez remboursÃ© intÃ©gralement\n'
            'â€¢ Annulation possible jusqu\'Ã  48h avant le RDV',
            style: TextStyle(
              color: Colors.white,
              fontSize: 14,
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPaymentStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          const Text(
            'Paiement de l\'acompte',
            style: TextStyle(
              color: Colors.white,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 32),
          
          // Montant
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFF1A1A1A),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: KipikTheme.rouge),
            ),
            child: Column(
              children: [
                Text(
                  'Acompte Ã  verser',
                  style: TextStyle(
                    color: Colors.grey.shade400,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '${(widget.flash.price * 0.3).toInt()}â‚¬', // âœ… Acompte en int
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 48,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  'sur ${widget.flash.price.toInt()}â‚¬ total', // âœ… Total en int
                  style: TextStyle(
                    color: Colors.grey.shade400,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 32),
          
          // Moyens de paiement
          _buildPaymentMethods(),
        ],
      ),
    );
  }

  Widget _buildPaymentMethods() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Moyen de paiement',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        
        // Carte bancaire
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: const Color(0xFF1A1A1A),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: KipikTheme.rouge),
          ),
          child: Row(
            children: [
              Icon(Icons.credit_card, color: KipikTheme.rouge),
              const SizedBox(width: 12),
              const Expanded(
                child: Text(
                  'Carte bancaire',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              const Icon(Icons.check_circle, color: Colors.green),
            ],
          ),
        ),
        const SizedBox(height: 24),
        
        // SÃ©curitÃ©
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: const Color(0xFF1A1A1A),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            children: [
              Icon(Icons.security, color: Colors.green, size: 20),
              const SizedBox(width: 8),
              const Expanded(
                child: Text(
                  'Paiement sÃ©curisÃ© par Stripe',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildConfirmationStep() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 120,
            height: 120,
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.2),
              shape: BoxShape.circle,
            ),
            child: const Icon(
              Icons.check_circle,
              color: Colors.green,
              size: 80,
            ),
          ),
          const SizedBox(height: 32),
          
          const Text(
            'Demande envoyÃ©e !',
            style: TextStyle(
              color: Colors.white,
              fontSize: 28,
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          
          Text(
            'Votre demande de rÃ©servation a Ã©tÃ© transmise Ã  ${widget.flash.tattooArtistName}.', // âœ… CorrigÃ©
            style: TextStyle(
              color: Colors.grey.shade400,
              fontSize: 16,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 32),
          
          // Prochaines Ã©tapes
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: const Color(0xFF1A1A1A),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Prochaines Ã©tapes :',
                  style: TextStyle(
                    color: KipikTheme.rouge,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                _buildStepItem('1', 'Le tatoueur valide votre demande (24h max)'),
                _buildStepItem('2', 'Vous recevrez une notification de confirmation'),
                _buildStepItem('3', 'Un chat s\'ouvrira pour Ã©changer avant le RDV'),
              ],
            ),
          ),
          const SizedBox(height: 32),
          
          // Actions
          Row(
            children: [
              Expanded(
                child: ElevatedButton(
                  onPressed: () => Navigator.pushReplacementNamed(context, '/mes-rdv-flashs'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: KipikTheme.rouge,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Text(
                    'Voir mes RDV',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: OutlinedButton(
                  onPressed: () => Navigator.of(context).popUntil((route) => route.isFirst),
                  style: OutlinedButton.styleFrom(
                    side: BorderSide(color: KipikTheme.rouge),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: Text(
                    'Accueil',
                    style: TextStyle(
                      color: KipikTheme.rouge,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStepItem(String number, String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: 24,
            height: 24,
            decoration: BoxDecoration(
              color: KipikTheme.rouge,
              shape: BoxShape.circle,
            ),
            child: Center(
              child: Text(
                number,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              text,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationButtons() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: const BoxDecoration(
        color: Color(0xFF1A1A1A),
        border: Border(top: BorderSide(color: Color(0xFF2A2A2A))),
      ),
      child: Row(
        children: [
          if (_currentStep > 0 && _currentStep < 3)
            Expanded(
              child: OutlinedButton(
                onPressed: _previousStep,
                style: OutlinedButton.styleFrom(
                  side: BorderSide(color: Colors.grey.shade600),
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: const Text(
                  'Retour',
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ),
          if (_currentStep > 0 && _currentStep < 3) const SizedBox(width: 16),
          Expanded(
            child: ElevatedButton(
              onPressed: _getNextAction(),
              style: ElevatedButton.styleFrom(
                backgroundColor: KipikTheme.rouge,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: _isLoading
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2,
                      ),
                    )
                  : Text(
                      _getNextButtonText(),
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
            ),
          ),
        ],
      ),
    );
  }

  VoidCallback? _getNextAction() {
    if (_isLoading) return null;
    
    switch (_currentStep) {
      case 0:
        return _canProceedFromSelection() ? _handleSelectionComplete : null;
      case 1:
        return _canProceedFromValidation() ? _handleValidationComplete : null;
      case 2:
        return _handlePaymentComplete;
      case 3:
        return null; // DerniÃ¨re Ã©tape, pas de bouton suivant
      default:
        return null;
    }
  }

  String _getNextButtonText() {
    switch (_currentStep) {
      case 0:
        return 'Continuer';
      case 1:
        return 'ProcÃ©der au paiement';
      case 2:
        return 'Payer ${(widget.flash.price * 0.3).toInt()}â‚¬'; // âœ… Acompte en int
      case 3:
        return 'TerminÃ©';
      default:
        return 'Suivant';
    }
  }

  bool _canProceedFromSelection() {
    return _selectedDate != null && _selectedTimeSlot != null;
  }

  bool _canProceedFromValidation() {
    return _phone.isNotEmpty;
  }

  Future<void> _handleSelectionComplete() async {
    await _nextStep();
  }

  Future<void> _handleValidationComplete() async {
    await _nextStep();
  }

  Future<void> _handlePaymentComplete() async {
    setState(() => _isLoading = true);
    
    try {
      // CrÃ©er le booking avec votre modÃ¨le
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) throw Exception('Utilisateur non connectÃ©');
      
      final booking = FlashBooking(
        id: '',
        flashId: widget.flash.id,
        clientId: currentUser['uid'] ?? '',
        tattooArtistId: widget.flash.tattooArtistId, // âœ… CorrigÃ©
        status: FlashBookingStatus.pending, // âœ… Utilise votre enum status
        requestedDate: DateTime(
          _selectedDate!.year,
          _selectedDate!.month,
          _selectedDate!.day,
          int.parse(_selectedTimeSlot!.split(':')[0]),
          int.parse(_selectedTimeSlot!.split(':')[1]),
        ),
        timeSlot: _selectedTimeSlot!,
        totalPrice: widget.flash.price,
        depositAmount: widget.flash.price * 0.3,
        clientNotes: _notes,
        clientPhone: _phone,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      // Envoyer la demande
      await FlashService.instance.createBooking(booking);
      
      // ProcÃ©der au paiement (simulÃ© pour la dÃ©mo)
      await Future.delayed(const Duration(seconds: 2));
      
      await _nextStep();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erreur: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  List<String> _generateTimeSlots() {
    return [
      '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'
    ];
  }

  String _getDayName(int weekday) {
    const days = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
    return days[weekday - 1];
  }

  String _getMonthName(int month) {
    const months = [
      'Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun',
      'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'
    ];
    return months[month - 1];
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\booking\booking_settings_page.dart

// lib/pages/pro/booking/booking_settings_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../widgets/common/buttons/tattoo_assistant_button.dart';
import 'dart:math';

enum NotificationFrequency { immediate, hourly, daily, weekly }
enum DefaultView { day, week, month }
enum WorkingHours { full, custom, flexible }
enum ReminderTiming { minutes15, minutes30, hour1, hours2, hours24 }
enum CalendarSync { none, googleOnly, appleOnly, both }

class BookingSettingsPage extends StatefulWidget {
  const BookingSettingsPage({Key? key}) : super(key: key);

  @override
  State<BookingSettingsPage> createState() => _BookingSettingsPageState();
}

class _BookingSettingsPageState extends State<BookingSettingsPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _scaleController;
  late AnimationController _settingsController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _settingsAnimation;

  // Ã‰tats des paramÃ¨tres
  bool _notificationsEnabled = true;
  bool _emailNotifications = true;
  bool _pushNotifications = true;
  bool _smsNotifications = false;
  bool _clientReminders = true;
  bool _flashMinuteAlerts = true;
  bool _weekendWork = false;
  bool _autoConfirm = false;
  bool _doubleBookingPrevention = true;
  bool _calendarSync = true;
  bool _locationTracking = false;
  bool _advancedStats = true;
  bool _darkMode = false;
  bool _hapticFeedback = true;
  bool _soundNotifications = true;
  
  NotificationFrequency _notificationFrequency = NotificationFrequency.immediate;
  DefaultView _defaultView = DefaultView.day;
  WorkingHours _workingHours = WorkingHours.custom;
  ReminderTiming _clientReminderTiming = ReminderTiming.hours24;
  CalendarSync _calendarSyncType = CalendarSync.googleOnly;
  
  TimeOfDay _workStartTime = const TimeOfDay(hour: 9, minute: 0);
  TimeOfDay _workEndTime = const TimeOfDay(hour: 18, minute: 0);
  int _breakDuration = 60; // minutes
  int _defaultSlotDuration = 120; // minutes
  double _defaultPrice = 150.0;
  double _depositPercentage = 30.0;
  
  bool _isLoading = false;
  bool _hasChanges = false;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadSettings();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _scaleController.dispose();
    _settingsController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _settingsController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _scaleAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.elasticOut),
    );
    
    _settingsAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _settingsController, curve: Curves.easeInOut),
    );

    _slideController.forward();
    _scaleController.forward();
    _settingsController.forward();
  }

  Future<void> _loadSettings() async {
    // Simulation du chargement des paramÃ¨tres
    setState(() => _isLoading = true);
    
    await Future.delayed(const Duration(milliseconds: 800));
    
    setState(() => _isLoading = false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'ParamÃ¨tres Booking',
        subtitle: 'Personnalisation et notifications',
        showBackButton: true,
        useProStyle: true,
        actions: [
          if (_hasChanges)
            IconButton(
              onPressed: _saveSettings,
              icon: _isLoading 
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2,
                      ),
                    )
                  : const Icon(Icons.save, color: Colors.white),
              tooltip: 'Sauvegarder',
            ),
          IconButton(
            onPressed: _resetToDefaults,
            icon: const Icon(Icons.refresh, color: Colors.white),
            tooltip: 'RÃ©initialiser',
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _isLoading ? _buildLoadingView() : _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 4,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'Chargement des paramÃ¨tres...',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 16,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          const SizedBox(height: 8),
          _buildSettingsHeader(),
          const SizedBox(height: 16),
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  _buildNotificationsSection(),
                  const SizedBox(height: 16),
                  _buildScheduleSection(),
                  const SizedBox(height: 16),
                  _buildCalendarSection(),
                  const SizedBox(height: 16),
                  _buildDefaultsSection(),
                  const SizedBox(height: 16),
                  _buildAdvancedSection(),
                  const SizedBox(height: 16),
                  _buildAppearanceSection(),
                  const SizedBox(height: 32),
                  _buildActionButtons(),
                  const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSettingsHeader() {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              KipikTheme.rouge.withOpacity(0.9),
              KipikTheme.rouge.withOpacity(0.7),
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: KipikTheme.rouge.withOpacity(0.3),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Icon(
                Icons.settings_rounded,
                color: Colors.white,
                size: 32,
              ),
            ),
            const SizedBox(width: 20),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Configuration AvancÃ©e',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 20,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 4),
                  const Text(
                    'Personnalisez votre expÃ©rience booking',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      _buildQuickStat('Notifications', _notificationsEnabled ? 'ON' : 'OFF'),
                      const SizedBox(width: 16),
                      _buildQuickStat('Sync', _calendarSync ? 'ActivÃ©e' : 'DÃ©sactivÃ©e'),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickStat(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 10,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }

  Widget _buildNotificationsSection() {
    return _buildSettingsSection(
      title: 'Notifications',
      icon: Icons.notifications_outlined,
      child: Column(
        children: [
          // Switch principal notifications
          _buildSwitchTile(
            'Notifications activÃ©es',
            'Recevoir des alertes pour les RDV',
            _notificationsEnabled,
            (value) => setState(() {
              _notificationsEnabled = value;
              _markHasChanges();
            }),
            icon: Icons.notifications,
          ),
          
          if (_notificationsEnabled) ...[
            const SizedBox(height: 12),
            
            // Types de notifications
            _buildSwitchTile(
              'Notifications push',
              'Alertes sur l\'appareil',
              _pushNotifications,
              (value) => setState(() {
                _pushNotifications = value;
                _markHasChanges();
              }),
              icon: Icons.phone_android,
            ),
            
            _buildSwitchTile(
              'Notifications email',
              'Alertes par email',
              _emailNotifications,
              (value) => setState(() {
                _emailNotifications = value;
                _markHasChanges();
              }),
              icon: Icons.email,
            ),
            
            _buildSwitchTile(
              'Notifications SMS',
              'Alertes par SMS (Premium)',
              _smsNotifications,
              (value) => setState(() {
                _smsNotifications = value;
                _markHasChanges();
              }),
              icon: Icons.sms,
              isPremium: true,
            ),
            
            const SizedBox(height: 16),
            
            // FrÃ©quence notifications
            _buildDropdownTile(
              'FrÃ©quence des notifications',
              'Grouper les notifications',
              _notificationFrequency,
              NotificationFrequency.values,
              (value) => setState(() {
                _notificationFrequency = value;
                _markHasChanges();
              }),
              getLabel: _getNotificationFrequencyLabel,
            ),
            
            const SizedBox(height: 12),
            
            // Flash Minute alerts
            _buildSwitchTile(
              'Alertes Flash Minute',
              'Notifications pour crÃ©neaux libres',
              _flashMinuteAlerts,
              (value) => setState(() {
                _flashMinuteAlerts = value;
                _markHasChanges();
              }),
              icon: Icons.flash_on,
            ),
            
            // Rappels clients
            _buildSwitchTile(
              'Rappels clients automatiques',
              'Envoyer des rappels aux clients',
              _clientReminders,
              (value) => setState(() {
                _clientReminders = value;
                _markHasChanges();
              }),
              icon: Icons.schedule_send,
            ),
            
            if (_clientReminders) ...[
              const SizedBox(height: 12),
              _buildDropdownTile(
                'Timing des rappels',
                'DÃ©lai avant le RDV',
                _clientReminderTiming,
                ReminderTiming.values,
                (value) => setState(() {
                  _clientReminderTiming = value;
                  _markHasChanges();
                }),
                getLabel: _getReminderTimingLabel,
              ),
            ],
          ],
        ],
      ),
    );
  }

  Widget _buildScheduleSection() {
    return _buildSettingsSection(
      title: 'Planning & Horaires',
      icon: Icons.schedule_outlined,
      child: Column(
        children: [
          // Heures de travail
          _buildDropdownTile(
            'Heures de travail',
            'Configuration des crÃ©neaux',
            _workingHours,
            WorkingHours.values,
            (value) => setState(() {
              _workingHours = value;
              _markHasChanges();
            }),
            getLabel: _getWorkingHoursLabel,
          ),
          
          if (_workingHours == WorkingHours.custom) ...[
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: GestureDetector(
                    onTap: _selectWorkStartTime,
                    child: Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.grey.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.grey.withOpacity(0.3)),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'DÃ©but',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey[600],
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            _workStartTime.format(context),
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 16,
                              color: Colors.black87,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                
                const SizedBox(width: 12),
                
                Expanded(
                  child: GestureDetector(
                    onTap: _selectWorkEndTime,
                    child: Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.grey.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.grey.withOpacity(0.3)),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Fin',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey[600],
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            _workEndTime.format(context),
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 16,
                              color: Colors.black87,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // DurÃ©e de pause
            _buildSliderTile(
              'Pause dÃ©jeuner',
              'DurÃ©e en minutes',
              _breakDuration.toDouble(),
              0,
              120,
              (value) => setState(() {
                _breakDuration = value.round();
                _markHasChanges();
              }),
              suffix: 'min',
            ),
          ],
          
          const SizedBox(height: 16),
          
          // Weekend
          _buildSwitchTile(
            'Travail le weekend',
            'Autoriser les RDV samedi/dimanche',
            _weekendWork,
            (value) => setState(() {
              _weekendWork = value;
              _markHasChanges();
            }),
            icon: Icons.weekend,
          ),
          
          // PrÃ©vention double booking
          _buildSwitchTile(
            'PrÃ©vention double rÃ©servation',
            'EmpÃªcher les crÃ©neaux en conflit',
            _doubleBookingPrevention,
            (value) => setState(() {
              _doubleBookingPrevention = value;
              _markHasChanges();
            }),
            icon: Icons.block,
          ),
          
          // Auto-confirmation
          _buildSwitchTile(
            'Confirmation automatique',
            'Confirmer les RDV sans validation',
            _autoConfirm,
            (value) => setState(() {
              _autoConfirm = value;
              _markHasChanges();
            }),
            icon: Icons.check_circle,
          ),
        ],
      ),
    );
  }

  Widget _buildCalendarSection() {
    return _buildSettingsSection(
      title: 'Calendriers & Synchronisation',
      icon: Icons.calendar_today_outlined,
      child: Column(
        children: [
          // Sync principal
          _buildSwitchTile(
            'Synchronisation calendriers',
            'Synchroniser avec calendriers externes',
            _calendarSync,
            (value) => setState(() {
              _calendarSync = value;
              _markHasChanges();
            }),
            icon: Icons.sync,
          ),
          
          if (_calendarSync) ...[
            const SizedBox(height: 16),
            
            _buildDropdownTile(
              'Type de synchronisation',
              'Calendriers Ã  synchroniser',
              _calendarSyncType,
              CalendarSync.values,
              (value) => setState(() {
                _calendarSyncType = value;
                _markHasChanges();
              }),
              getLabel: _getCalendarSyncLabel,
            ),
            
            const SizedBox(height: 16),
            
            // Status sync
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.green.withOpacity(0.3)),
              ),
              child: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.green, size: 20),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Synchronisation active',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 14,
                            color: Colors.green,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          'DerniÃ¨re sync: ${_getLastSyncTime()}',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            color: Colors.black54,
                          ),
                        ),
                      ],
                    ),
                  ),
                  OutlinedButton(
                    onPressed: _manualSync,
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.green),
                      foregroundColor: Colors.green,
                    ),
                    child: const Text('Synchroniser'),
                  ),
                ],
              ),
            ),
          ],
          
          const SizedBox(height: 16),
          
          // Vue par dÃ©faut
          _buildDropdownTile(
            'Vue par dÃ©faut',
            'Vue affichÃ©e Ã  l\'ouverture',
            _defaultView,
            DefaultView.values,
            (value) => setState(() {
              _defaultView = value;
              _markHasChanges();
            }),
            getLabel: _getDefaultViewLabel,
          ),
        ],
      ),
    );
  }

  Widget _buildDefaultsSection() {
    return _buildSettingsSection(
      title: 'Valeurs par DÃ©faut',
      icon: Icons.settings_applications_outlined,
      child: Column(
        children: [
          // DurÃ©e crÃ©neau par dÃ©faut
          _buildSliderTile(
            'DurÃ©e de crÃ©neau par dÃ©faut',
            'Minutes par RDV',
            _defaultSlotDuration.toDouble(),
            30,
            300,
            (value) => setState(() {
              _defaultSlotDuration = value.round();
              _markHasChanges();
            }),
            suffix: 'min',
            step: 15,
          ),
          
          const SizedBox(height: 16),
          
          // Prix par dÃ©faut
          _buildSliderTile(
            'Prix par dÃ©faut',
            'Euros par session',
            _defaultPrice,
            50,
            500,
            (value) => setState(() {
              _defaultPrice = value;
              _markHasChanges();
            }),
            suffix: 'â‚¬',
            step: 10,
          ),
          
          const SizedBox(height: 16),
          
          // Pourcentage acompte
          _buildSliderTile(
            'Acompte par dÃ©faut',
            'Pourcentage du prix total',
            _depositPercentage,
            0,
            50,
            (value) => setState(() {
              _depositPercentage = value;
              _markHasChanges();
            }),
            suffix: '%',
            step: 5,
          ),
        ],
      ),
    );
  }

  Widget _buildAdvancedSection() {
    return _buildSettingsSection(
      title: 'FonctionnalitÃ©s AvancÃ©es',
      icon: Icons.extension_outlined,
      child: Column(
        children: [
          // Localisation
          _buildSwitchTile(
            'Suivi de localisation',
            'GÃ©olocalisation pour Guests/Conventions',
            _locationTracking,
            (value) => setState(() {
              _locationTracking = value;
              _markHasChanges();
            }),
            icon: Icons.location_on,
            isPremium: true,
          ),
          
          // Stats avancÃ©es
          _buildSwitchTile(
            'Statistiques avancÃ©es',
            'Analytics dÃ©taillÃ©es du planning',
            _advancedStats,
            (value) => setState(() {
              _advancedStats = value;
              _markHasChanges();
            }),
            icon: Icons.analytics,
            isPremium: true,
          ),
        ],
      ),
    );
  }

  Widget _buildAppearanceSection() {
    return _buildSettingsSection(
      title: 'Apparence & Interface',
      icon: Icons.palette_outlined,
      child: Column(
        children: [
          // Mode sombre
          _buildSwitchTile(
            'Mode sombre',
            'Interface sombre pour l\'agenda',
            _darkMode,
            (value) => setState(() {
              _darkMode = value;
              _markHasChanges();
            }),
            icon: Icons.dark_mode,
          ),
          
          // Feedback haptique
          _buildSwitchTile(
            'Retour haptique',
            'Vibrations lors des interactions',
            _hapticFeedback,
            (value) => setState(() {
              _hapticFeedback = value;
              _markHasChanges();
            }),
            icon: Icons.vibration,
          ),
          
          // Sons
          _buildSwitchTile(
            'Sons de notification',
            'Sons pour les alertes',
            _soundNotifications,
            (value) => setState(() {
              _soundNotifications = value;
              _markHasChanges();
            }),
            icon: Icons.volume_up,
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        // Bouton principal
        SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton.icon(
            onPressed: _hasChanges && !_isLoading ? _saveSettings : null,
            icon: _isLoading 
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : const Icon(Icons.save, size: 20),
            label: Text(
              _isLoading ? 'Sauvegarde...' : 'Sauvegarder les paramÃ¨tres',
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: _hasChanges ? KipikTheme.rouge : Colors.grey,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: _hasChanges ? 4 : 0,
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Actions secondaires
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _exportSettings,
                icon: const Icon(Icons.download, size: 18),
                label: const Text(
                  'Exporter',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey[600],
                  side: BorderSide(color: Colors.grey.withOpacity(0.5)),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
            
            const SizedBox(width: 12),
            
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _importSettings,
                icon: const Icon(Icons.upload, size: 18),
                label: const Text(
                  'Importer',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildSettingsSection({
    required String title,
    required IconData icon,
    required Widget child,
  }) {
    return FadeTransition(
      opacity: _settingsAnimation,
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: KipikTheme.rouge, size: 20),
                const SizedBox(width: 8),
                Text(
                  title,
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            child,
          ],
        ),
      ),
    );
  }

  Widget _buildSwitchTile(
    String title,
    String subtitle,
    bool value,
    ValueChanged<bool> onChanged, {
    IconData? icon,
    bool isPremium = false,
  }) {
    return ListTile(
      leading: icon != null 
          ? Icon(icon, color: KipikTheme.rouge, size: 20)
          : null,
      title: Row(
        children: [
          Expanded(
            child: Text(
              title,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
          ),
          if (isPremium)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: Colors.amber.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Text(
                'PRO',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 10,
                  color: Colors.amber,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
        ],
      ),
      subtitle: Text(
        subtitle,
        style: const TextStyle(
          fontFamily: 'Roboto',
          fontSize: 12,
          color: Colors.grey,
        ),
      ),
      trailing: Switch(
        value: value,
        activeColor: KipikTheme.rouge,
        onChanged: onChanged,
      ),
      contentPadding: EdgeInsets.zero,
    );
  }

  Widget _buildDropdownTile<T>(
    String title,
    String subtitle,
    T value,
    List<T> items,
    ValueChanged<T> onChanged, {
    required String Function(T) getLabel,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Colors.black87,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          subtitle,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.grey,
          ),
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<T>(
          value: value,
          decoration: InputDecoration(
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: Colors.grey.withOpacity(0.3)),
            ),
            filled: true,
            fillColor: Colors.grey.withOpacity(0.05),
          ),
          items: items.map((item) {
            return DropdownMenuItem<T>(
              value: item,
              child: Text(
                getLabel(item),
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                ),
              ),
            );
          }).toList(),
          onChanged: (newValue) {
            if (newValue != null) {
              onChanged(newValue);
            }
          },
        ),
      ],
    );
  }

  Widget _buildSliderTile(
    String title,
    String subtitle,
    double value,
    double min,
    double max,
    ValueChanged<double> onChanged, {
    String suffix = '',
    double step = 1,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                Text(
                  subtitle,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: KipikTheme.rouge.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                '${value.round()}$suffix',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: KipikTheme.rouge,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        SliderTheme(
          data: SliderTheme.of(context).copyWith(
            activeTrackColor: KipikTheme.rouge,
            inactiveTrackColor: KipikTheme.rouge.withOpacity(0.2),
            thumbColor: KipikTheme.rouge,
            overlayColor: KipikTheme.rouge.withOpacity(0.2),
          ),
          child: Slider(
            value: value,
            min: min,
            max: max,
            divisions: ((max - min) / step).round(),
            onChanged: (newValue) {
              onChanged(newValue);
              _markHasChanges();
            },
          ),
        ),
      ],
    );
  }

  // Actions
  Future<void> _saveSettings() async {
    setState(() => _isLoading = true);
    
    try {
      // Simulation de sauvegarde
      await Future.delayed(const Duration(seconds: 1));
      
      HapticFeedback.mediumImpact();
      
      setState(() {
        _hasChanges = false;
      });
      
      _showSuccessSnackBar('ParamÃ¨tres sauvegardÃ©s avec succÃ¨s');
      
    } catch (e) {
      _showErrorSnackBar('Erreur lors de la sauvegarde');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _resetToDefaults() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('RÃ©initialiser les paramÃ¨tres'),
        content: const Text('Voulez-vous vraiment restaurer les paramÃ¨tres par dÃ©faut ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _restoreDefaults();
            },
            style: ElevatedButton.styleFrom(backgroundColor: KipikTheme.rouge),
            child: const Text('RÃ©initialiser'),
          ),
        ],
      ),
    );
  }

  void _restoreDefaults() {
    setState(() {
      _notificationsEnabled = true;
      _emailNotifications = true;
      _pushNotifications = true;
      _smsNotifications = false;
      _clientReminders = true;
      _flashMinuteAlerts = true;
      _weekendWork = false;
      _autoConfirm = false;
      _doubleBookingPrevention = true;
      _calendarSync = true;
      _locationTracking = false;
      _advancedStats = true;
      _darkMode = false;
      _hapticFeedback = true;
      _soundNotifications = true;
      
      _notificationFrequency = NotificationFrequency.immediate;
      _defaultView = DefaultView.day;
      _workingHours = WorkingHours.custom;
      _clientReminderTiming = ReminderTiming.hours24;
      _calendarSyncType = CalendarSync.googleOnly;
      
      _workStartTime = const TimeOfDay(hour: 9, minute: 0);
      _workEndTime = const TimeOfDay(hour: 18, minute: 0);
      _breakDuration = 60;
      _defaultSlotDuration = 120;
      _defaultPrice = 150.0;
      _depositPercentage = 30.0;
      
      _markHasChanges();
    });
    
    _showSuccessSnackBar('ParamÃ¨tres par dÃ©faut restaurÃ©s');
  }

  void _selectWorkStartTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _workStartTime,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _workStartTime = picked;
        _markHasChanges();
      });
    }
  }

  void _selectWorkEndTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _workEndTime,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: KipikTheme.rouge,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _workEndTime = picked;
        _markHasChanges();
      });
    }
  }

  void _manualSync() {
    _showInfoSnackBar('Synchronisation en cours...');
  }

  void _exportSettings() {
    _showInfoSnackBar('Export des paramÃ¨tres - Ã€ implÃ©menter');
  }

  void _importSettings() {
    _showInfoSnackBar('Import des paramÃ¨tres - Ã€ implÃ©menter');
  }

  void _markHasChanges() {
    if (!_hasChanges) {
      setState(() => _hasChanges = true);
    }
  }

  // Helper methods
  String _getNotificationFrequencyLabel(NotificationFrequency frequency) {
    switch (frequency) {
      case NotificationFrequency.immediate:
        return 'ImmÃ©diate';
      case NotificationFrequency.hourly:
        return 'Horaire';
      case NotificationFrequency.daily:
        return 'Quotidienne';
      case NotificationFrequency.weekly:
        return 'Hebdomadaire';
    }
  }

  String _getWorkingHoursLabel(WorkingHours hours) {
    switch (hours) {
      case WorkingHours.full:
        return '24h/24 - 7j/7';
      case WorkingHours.custom:
        return 'PersonnalisÃ©es';
      case WorkingHours.flexible:
        return 'Flexibles';
    }
  }

  String _getReminderTimingLabel(ReminderTiming timing) {
    switch (timing) {
      case ReminderTiming.minutes15:
        return '15 minutes avant';
      case ReminderTiming.minutes30:
        return '30 minutes avant';
      case ReminderTiming.hour1:
        return '1 heure avant';
      case ReminderTiming.hours2:
        return '2 heures avant';
      case ReminderTiming.hours24:
        return '24 heures avant';
    }
  }

  String _getCalendarSyncLabel(CalendarSync sync) {
    switch (sync) {
      case CalendarSync.none:
        return 'Aucune';
      case CalendarSync.googleOnly:
        return 'Google Calendar seulement';
      case CalendarSync.appleOnly:
        return 'Apple Calendar seulement';
      case CalendarSync.both:
        return 'Google et Apple';
    }
  }

  String _getDefaultViewLabel(DefaultView view) {
    switch (view) {
      case DefaultView.day:
        return 'Vue jour';
      case DefaultView.week:
        return 'Vue semaine';
      case DefaultView.month:
        return 'Vue mois';
    }
  }

  String _getLastSyncTime() {
    final now = DateTime.now();
    return '${now.hour}:${now.minute.toString().padLeft(2, '0')}';
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\conventions\convention_home_page.dart

// lib/pages/pro/conventions/convention_home_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../theme/kipik_theme.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../widgets/common/buttons/tattoo_assistant_button.dart';

enum UserType { admin, organizer, customer, pro }
enum ViewMode { map, list, grid }
enum ConventionSize { small, medium, large, giant }
enum ConventionDuration { oneDay, twoDays, threeDays, weekend, week }

class ConventionHomePage extends StatefulWidget {
  final UserType userType;
  
  const ConventionHomePage({
    Key? key,
    this.userType = UserType.customer,
  }) : super(key: key);

  @override
  State<ConventionHomePage> createState() => _ConventionHomePageState();
}

class _ConventionHomePageState extends State<ConventionHomePage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _mapController;
  late AnimationController _filterController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _mapAnimation;
  late Animation<double> _filterAnimation;

  ViewMode _viewMode = ViewMode.map;
  bool _showFilters = false;
  bool _isLoading = false;
  String _searchQuery = '';
  
  // Filtres
  int _distanceRadius = 100; // km
  Set<int> _selectedMonths = {};
  Set<ConventionSize> _selectedSizes = {};
  Set<ConventionDuration> _selectedDurations = {};
  RangeValues _priceRange = const RangeValues(0, 1000);
  String _selectedRegion = 'Toutes';

  List<Map<String, dynamic>> _conventions = [];
  List<Map<String, dynamic>> _filteredConventions = [];

  final TextEditingController _searchController = TextEditingController();

  // Couleurs par mois
  final Map<int, Color> _monthColors = {
    1: const Color(0xFF6BB6FF), // Janvier - Bleu glacier
    2: const Color(0xFF9B59B6), // FÃ©vrier - Violet tendre
    3: const Color(0xFF2ECC71), // Mars - Vert printemps
    4: const Color(0xFFF8BBD9), // Avril - Rose poudrÃ©
    5: const Color(0xFFF1C40F), // Mai - Jaune soleil
    6: const Color(0xFFFF8C00), // Juin - Orange vif
    7: const Color(0xFFE74C3C), // Juillet - Rouge vibrant
    8: const Color(0xFFFF6347), // AoÃ»t - Orange brÃ»lÃ©
    9: const Color(0xFF8B4513), // Septembre - Marron automne
    10: const Color(0xFFFFB347), // Octobre - Jaune orangÃ©
    11: const Color(0xFFA0522D), // Novembre - Terre de Sienne
    12: const Color(0xFF708090), // DÃ©cembre - Bleu-gris
  };

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadConventions();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _mapController.dispose();
    _filterController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _mapController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _filterController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _mapAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _mapController, curve: Curves.elasticOut),
    );
    
    _filterAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _filterController, curve: Curves.easeOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 400), () {
      _mapController.forward();
    });
  }

  void _loadConventions() {
    setState(() => _isLoading = true);
    
    // Simulation de chargement des conventions
    Future.delayed(const Duration(seconds: 1), () {
      setState(() {
        _conventions = _generateSampleConventions();
        _filteredConventions = _conventions;
        _isLoading = false;
      });
      _applyFilters();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Conventions',
        subtitle: _getUserTypeSubtitle(),
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: Icon(
              _showFilters ? Icons.filter_list_off : Icons.filter_list,
              color: Colors.white,
            ),
            onPressed: _toggleFilters,
          ),
          if (widget.userType == UserType.organizer || widget.userType == UserType.admin)
            IconButton(
              icon: const Icon(Icons.add, color: Colors.white),
              onPressed: _createConvention,
            ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          if (widget.userType == UserType.customer || widget.userType == UserType.pro)
            FloatingActionButton(
              heroTag: "favorites",
              onPressed: _viewFavorites,
              backgroundColor: Colors.orange,
              child: const Icon(Icons.favorite, color: Colors.white),
            ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        const SizedBox(height: 8),
        _buildSearchAndControls(),
        if (_showFilters) ...[
          const SizedBox(height: 16),
          _buildFiltersSection(),
        ],
        const SizedBox(height: 16),
        _buildStatsHeader(),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: _isLoading ? _buildLoadingState() : _buildMainContent(),
          ),
        ),
      ],
    );
  }

  Widget _buildSearchAndControls() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        children: [
          // Barre de recherche
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              children: [
                Icon(Icons.search, color: KipikTheme.rouge),
                const SizedBox(width: 12),
                Expanded(
                  child: TextField(
                    controller: _searchController,
                    onChanged: (value) {
                      setState(() {
                        _searchQuery = value;
                      });
                      _applyFilters();
                    },
                    decoration: InputDecoration(
                      hintText: 'Rechercher une convention, ville...',
                      hintStyle: TextStyle(
                        fontFamily: 'Roboto',
                        color: Colors.grey[500],
                      ),
                      border: InputBorder.none,
                    ),
                  ),
                ),
                if (_searchQuery.isNotEmpty)
                  IconButton(
                    icon: const Icon(Icons.clear, color: Colors.grey),
                    onPressed: () {
                      _searchController.clear();
                      setState(() {
                        _searchQuery = '';
                      });
                      _applyFilters();
                    },
                  ),
              ],
            ),
          ),
          
          const SizedBox(height: 12),
          
          // ContrÃ´les de vue
          Container(
            padding: const EdgeInsets.all(4),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              children: ViewMode.values.map((mode) {
                final isSelected = _viewMode == mode;
                return Expanded(
                  child: GestureDetector(
                    onTap: () {
                      setState(() {
                        _viewMode = mode;
                      });
                      HapticFeedback.lightImpact();
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      decoration: BoxDecoration(
                        gradient: isSelected ? LinearGradient(
                          colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                        ) : null,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Column(
                        children: [
                          Icon(
                            _getViewModeIcon(mode),
                            color: isSelected ? Colors.white : Colors.grey[600],
                            size: 20,
                          ),
                          const SizedBox(height: 4),
                          Text(
                            _getViewModeLabel(mode),
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 11,
                              fontWeight: FontWeight.w600,
                              color: isSelected ? Colors.white : Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFiltersSection() {
    return AnimatedBuilder(
      animation: _filterAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _filterAnimation.value,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.95),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.tune, color: KipikTheme.rouge, size: 24),
                      const SizedBox(width: 12),
                      const Text(
                        'Filtres avancÃ©s',
                        style: TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 18,
                          color: Colors.black87,
                        ),
                      ),
                      const Spacer(),
                      TextButton(
                        onPressed: _resetFilters,
                        child: const Text(
                          'RÃ©initialiser',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            color: Colors.grey,
                          ),
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 20),
                  
                  // Distance
                  _buildFilterSlider(
                    'Distance',
                    'Rayon de $_distanceRadius km',
                    _distanceRadius.toDouble(),
                    0,
                    500,
                    (value) {
                      setState(() {
                        _distanceRadius = value.toInt();
                      });
                      _applyFilters();
                    },
                  ),
                  
                  const SizedBox(height: 20),
                  
                  // Mois
                  _buildMonthSelector(),
                  
                  const SizedBox(height: 20),
                  
                  // Taille des conventions
                  _buildSizeSelector(),
                  
                  const SizedBox(height: 20),
                  
                  // DurÃ©e des conventions
                  _buildDurationSelector(),
                  
                  const SizedBox(height: 20),
                  
                  // Budget stand (pour les pros)
                  if (widget.userType == UserType.pro)
                    _buildPriceRangeSlider(),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildFilterSlider(
    String title,
    String subtitle,
    double value,
    double min,
    double max,
    ValueChanged<double> onChanged,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        Slider(
          value: value,
          min: min,
          max: max,
          divisions: ((max - min) / 10).toInt(),
          activeColor: KipikTheme.rouge,
          label: subtitle,
          onChanged: onChanged,
        ),
        Text(
          subtitle,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildMonthSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Mois',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: List.generate(12, (index) {
            final month = index + 1;
            final isSelected = _selectedMonths.contains(month);
            final monthColor = _monthColors[month]!;
            
            return GestureDetector(
              onTap: () {
                setState(() {
                  if (isSelected) {
                    _selectedMonths.remove(month);
                  } else {
                    _selectedMonths.add(month);
                  }
                });
                _applyFilters();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: isSelected ? monthColor : monthColor.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: monthColor),
                ),
                child: Text(
                  _getMonthName(month),
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 11,
                    fontWeight: FontWeight.w600,
                    color: isSelected ? Colors.white : monthColor,
                  ),
                ),
              ),
            );
          }),
        ),
      ],
    );
  }

  Widget _buildSizeSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Taille de l\'Ã©vÃ©nement',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: ConventionSize.values.map((size) {
            final isSelected = _selectedSizes.contains(size);
            return GestureDetector(
              onTap: () {
                setState(() {
                  if (isSelected) {
                    _selectedSizes.remove(size);
                  } else {
                    _selectedSizes.add(size);
                  }
                });
                _applyFilters();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: isSelected ? KipikTheme.rouge : Colors.grey.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isSelected ? KipikTheme.rouge : Colors.grey.withOpacity(0.3),
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      _getSizeIcon(size),
                      size: 16,
                      color: isSelected ? Colors.white : Colors.grey[600],
                    ),
                    const SizedBox(width: 6),
                    Text(
                      _getSizeLabel(size),
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                        color: isSelected ? Colors.white : Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildDurationSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'DurÃ©e de l\'Ã©vÃ©nement',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: ConventionDuration.values.map((duration) {
            final isSelected = _selectedDurations.contains(duration);
            return GestureDetector(
              onTap: () {
                setState(() {
                  if (isSelected) {
                    _selectedDurations.remove(duration);
                  } else {
                    _selectedDurations.add(duration);
                  }
                });
                _applyFilters();
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: isSelected ? Colors.blue : Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isSelected ? Colors.blue : Colors.blue.withOpacity(0.3),
                  ),
                ),
                child: Text(
                  _getDurationLabel(duration),
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: isSelected ? Colors.white : Colors.blue,
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildPriceRangeSlider() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Budget stand',
          style: TextStyle(
            fontFamily: 'Roboto',
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        RangeSlider(
          values: _priceRange,
          min: 0,
          max: 2000,
          divisions: 20,
          activeColor: KipikTheme.rouge,
          labels: RangeLabels(
            '${_priceRange.start.toInt()}â‚¬',
            '${_priceRange.end.toInt()}â‚¬',
          ),
          onChanged: (values) {
            setState(() {
              _priceRange = values;
            });
            _applyFilters();
          },
        ),
        Text(
          'De ${_priceRange.start.toInt()}â‚¬ Ã  ${_priceRange.end.toInt()}â‚¬',
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildStatsHeader() {
    final totalConventions = _conventions.length;
    final filteredCount = _filteredConventions.length;
    final thisMonthCount = _filteredConventions
        .where((c) => c['month'] == DateTime.now().month)
        .length;

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.purple.withOpacity(0.8),
              Colors.blue.withOpacity(0.8),
            ],
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatItem('Total', '$totalConventions', Icons.event),
            _buildStatItem('TrouvÃ©es', '$filteredCount', Icons.search),
            _buildStatItem('Ce mois', '$thisMonthCount', Icons.calendar_today),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Chargement des conventions...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMainContent() {
    switch (_viewMode) {
      case ViewMode.map:
        return _buildMapView();
      case ViewMode.list:
        return _buildListView();
      case ViewMode.grid:
        return _buildGridView();
    }
  }

  Widget _buildMapView() {
    return AnimatedBuilder(
      animation: _mapAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _mapAnimation.value,
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(20),
              child: Stack(
                children: [
                  // Carte de France simulÃ©e
                  Container(
                    width: double.infinity,
                    height: double.infinity,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Colors.blue[50]!,
                          Colors.blue[100]!,
                        ],
                      ),
                    ),
                    child: const Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.map,
                            size: 64,
                            color: Colors.grey,
                          ),
                          SizedBox(height: 16),
                          Text(
                            'Carte interactive France',
                            style: TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 18,
                              color: Colors.grey,
                            ),
                          ),
                          Text(
                            'IntÃ©gration Google Maps',
                            style: TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 14,
                              color: Colors.grey,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  
                  // Points de conventions simulÃ©s
                  ..._generateMapPoints(),
                  
                  // LÃ©gende des couleurs
                  Positioned(
                    top: 20,
                    right: 20,
                    child: _buildMapLegend(),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildMapLegend() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'LÃ©gende',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 12,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),
          ...List.generate(4, (index) {
            final months = [
              [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]
            ];
            final seasonNames = ['Hiver', 'Printemps', 'Ã‰tÃ©', 'Automne'];
            final firstMonth = months[index][0];
            
            return Padding(
              padding: const EdgeInsets.only(bottom: 4),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    width: 12,
                    height: 12,
                    decoration: BoxDecoration(
                      color: _monthColors[firstMonth],
                      shape: BoxShape.circle,
                    ),
                  ),
                  const SizedBox(width: 6),
                  Text(
                    seasonNames[index],
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      color: Colors.black87,
                    ),
                  ),
                ],
              ),
            );
          }),
        ],
      ),
    );
  }

  List<Widget> _generateMapPoints() {
    // Positions simulÃ©es sur la carte de France
    final positions = [
      {'top': 0.3, 'left': 0.2}, // Nord
      {'top': 0.4, 'left': 0.7}, // Est
      {'top': 0.7, 'left': 0.3}, // Sud-Ouest
      {'top': 0.6, 'left': 0.8}, // Sud-Est
      {'top': 0.5, 'left': 0.5}, // Centre
    ];
    
    return positions.asMap().entries.map((entry) {
      final index = entry.key;
      final pos = entry.value;
      final convention = _filteredConventions.length > index 
          ? _filteredConventions[index] 
          : null;
      
      if (convention == null) return const SizedBox.shrink();
      
      final monthColor = _monthColors[convention['month']] ?? Colors.grey;
      
      return Positioned(
        top: MediaQuery.of(context).size.height * pos['top']! * 0.4,
        left: MediaQuery.of(context).size.width * pos['left']! * 0.6,
        child: GestureDetector(
          onTap: () => _viewConventionDetails(convention),
          child: Container(
            width: 24,
            height: 24,
            decoration: BoxDecoration(
              color: monthColor,
              shape: BoxShape.circle,
              border: Border.all(color: Colors.white, width: 2),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Center(
              child: Text(
                '${convention['participantCount'] ~/ 10}',
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 8,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        ),
      );
    }).toList();
  }

  Widget _buildListView() {
    if (_filteredConventions.isEmpty) {
      return _buildEmptyState();
    }

    return ListView.builder(
      itemCount: _filteredConventions.length,
      itemBuilder: (context, index) {
        return _buildConventionCard(_filteredConventions[index]);
      },
    );
  }

  Widget _buildGridView() {
    if (_filteredConventions.isEmpty) {
      return _buildEmptyState();
    }

    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 0.8,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: _filteredConventions.length,
      itemBuilder: (context, index) {
        return _buildConventionGridCard(_filteredConventions[index]);
      },
    );
  }

  Widget _buildConventionCard(Map<String, dynamic> convention) {
    final monthColor = _monthColors[convention['month']] ?? Colors.grey;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte avec couleur du mois
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [monthColor, monthColor.withOpacity(0.8)],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        convention['name'],
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${convention['city']} â€¢ ${convention['date']}',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    '${convention['participantCount']} tatoueurs',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Contenu
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  convention['description'],
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 13,
                    color: Colors.black54,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                
                const SizedBox(height: 12),
                
                Row(
                  children: [
                    Icon(Icons.schedule, color: KipikTheme.rouge, size: 16),
                    const SizedBox(width: 6),
                    Text(
                      '${convention['duration']} jours',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.grey,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Icon(Icons.euro, color: KipikTheme.rouge, size: 16),
                    const SizedBox(width: 6),
                    Text(
                      widget.userType == UserType.pro 
                          ? 'Stand: ${convention['standPrice']}â‚¬'
                          : 'EntrÃ©e: ${convention['ticketPrice']}â‚¬',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        color: Colors.grey,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                _buildConventionActions(convention),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConventionGridCard(Map<String, dynamic> convention) {
    final monthColor = _monthColors[convention['month']] ?? Colors.grey;
    
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-tÃªte compact
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [monthColor, monthColor.withOpacity(0.8)],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  convention['name'],
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 14,
                    color: Colors.white,
                  ),
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                ),
                const SizedBox(height: 4),
                Text(
                  convention['city'],
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
          
          // Contenu compact
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    convention['date'],
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                      color: Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '${convention['participantCount']} tatoueurs',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 11,
                      color: Colors.grey,
                    ),
                  ),
                  
                  const Spacer(),
                  
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () => _viewConventionDetails(convention),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: KipikTheme.rouge,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 8),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text(
                        'Voir',
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConventionActions(Map<String, dynamic> convention) {
    switch (widget.userType) {
      case UserType.customer:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _toggleFavorite(convention),
                icon: Icon(
                  convention['isFavorite'] ? Icons.favorite : Icons.favorite_border,
                  size: 16,
                ),
                label: const Text('Favoris'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.red,
                  side: const BorderSide(color: Colors.red),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _buyTicket(convention),
                icon: const Icon(Icons.confirmation_number, size: 16),
                label: const Text('Billet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case UserType.pro:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _contactOrganizer(convention),
                icon: const Icon(Icons.email, size: 16),
                label: const Text('Contact'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _requestStand(convention),
                icon: const Icon(Icons.store, size: 16),
                label: const Text('Stand'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KipikTheme.rouge,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case UserType.organizer:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _editConvention(convention),
                icon: const Icon(Icons.edit, size: 16),
                label: const Text('Modifier'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _manageConvention(convention),
                icon: const Icon(Icons.dashboard, size: 16),
                label: const Text('GÃ©rer'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.purple,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case UserType.admin:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _moderateConvention(convention),
                icon: const Icon(Icons.admin_panel_settings, size: 16),
                label: const Text('ModÃ©rer'),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.red,
                  side: const BorderSide(color: Colors.red),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _viewAnalytics(convention),
                icon: const Icon(Icons.analytics, size: 16),
                label: const Text('Stats'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.indigo,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
    }
  }

  Widget _buildEmptyState() {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(32),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.event_busy,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Aucune convention trouvÃ©e',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Essayez de modifier vos filtres ou votre recherche',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Actions
  void _toggleFilters() {
    setState(() {
      _showFilters = !_showFilters;
    });
    if (_showFilters) {
      _filterController.forward();
    } else {
      _filterController.reverse();
    }
  }

  void _resetFilters() {
    setState(() {
      _distanceRadius = 100;
      _selectedMonths.clear();
      _selectedSizes.clear();
      _selectedDurations.clear();
      _priceRange = const RangeValues(0, 1000);
      _selectedRegion = 'Toutes';
    });
    _applyFilters();
  }

  void _applyFilters() {
    setState(() {
      _filteredConventions = _conventions.where((convention) {
        // Recherche par nom/ville
        if (_searchQuery.isNotEmpty) {
          final query = _searchQuery.toLowerCase();
          if (!convention['name'].toLowerCase().contains(query) &&
              !convention['city'].toLowerCase().contains(query)) {
            return false;
          }
        }
        
        // Filtre par mois
        if (_selectedMonths.isNotEmpty) {
          if (!_selectedMonths.contains(convention['month'])) {
            return false;
          }
        }
        
        // Filtre par taille
        if (_selectedSizes.isNotEmpty) {
          if (!_selectedSizes.contains(convention['size'])) {
            return false;
          }
        }
        
        // Filtre par durÃ©e
        if (_selectedDurations.isNotEmpty) {
          if (!_selectedDurations.contains(convention['duration_enum'])) {
            return false;
          }
        }
        
        // Filtre par prix (pour les pros)
        if (widget.userType == UserType.pro) {
          final price = convention['standPrice'].toDouble();
          if (price < _priceRange.start || price > _priceRange.end) {
            return false;
          }
        }
        
        return true;
      }).toList();
    });
  }

  void _createConvention() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('CrÃ©ation de convention - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewFavorites() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Mes conventions favorites - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewConventionDetails(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Ouverture de ${convention['name']}'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _toggleFavorite(Map<String, dynamic> convention) {
    setState(() {
      convention['isFavorite'] = !convention['isFavorite'];
    });
    
    final message = convention['isFavorite'] 
        ? 'AjoutÃ© aux favoris' 
        : 'RetirÃ© des favoris';
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _buyTicket(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Achat billet ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _contactOrganizer(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Contact organisateur ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _requestStand(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Demande stand ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _editConvention(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Ã‰dition ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _manageConvention(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Gestion ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _moderateConvention(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('ModÃ©ration ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewAnalytics(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Analytics ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.indigo,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // Helper methods
  String _getUserTypeSubtitle() {
    switch (widget.userType) {
      case UserType.admin:
        return 'Administration';
      case UserType.organizer:
        return 'Organisateur';
      case UserType.customer:
        return 'DÃ©couvrir & RÃ©server';
      case UserType.pro:
        return 'Stands & Collaborations';
    }
  }

  IconData _getViewModeIcon(ViewMode mode) {
    switch (mode) {
      case ViewMode.map:
        return Icons.map;
      case ViewMode.list:
        return Icons.list;
      case ViewMode.grid:
        return Icons.grid_view;
    }
  }

  String _getViewModeLabel(ViewMode mode) {
    switch (mode) {
      case ViewMode.map:
        return 'Carte';
      case ViewMode.list:
        return 'Liste';
      case ViewMode.grid:
        return 'Grille';
    }
  }

  String _getMonthName(int month) {
    const months = ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Jun',
                   'Jul', 'AoÃ»', 'Sep', 'Oct', 'Nov', 'DÃ©c'];
    return months[month - 1];
  }

  IconData _getSizeIcon(ConventionSize size) {
    switch (size) {
      case ConventionSize.small:
        return Icons.group;
      case ConventionSize.medium:
        return Icons.groups;
      case ConventionSize.large:
        return Icons.groups_2;
      case ConventionSize.giant:
        return Icons.stadium;
    }
  }

  String _getSizeLabel(ConventionSize size) {
    switch (size) {
      case ConventionSize.small:
        return 'Petit (<30)';
      case ConventionSize.medium:
        return 'Moyen (30-100)';
      case ConventionSize.large:
        return 'Grand (100-200)';
      case ConventionSize.giant:
        return 'GÃ©ant (200+)';
    }
  }

  String _getDurationLabel(ConventionDuration duration) {
    switch (duration) {
      case ConventionDuration.oneDay:
        return '1 jour';
      case ConventionDuration.twoDays:
        return '2 jours';
      case ConventionDuration.threeDays:
        return '3 jours';
      case ConventionDuration.weekend:
        return 'Week-end';
      case ConventionDuration.week:
        return 'Semaine';
    }
  }

  ConventionSize _getConventionSize(int participantCount) {
    if (participantCount < 30) return ConventionSize.small;
    if (participantCount < 100) return ConventionSize.medium;
    if (participantCount < 200) return ConventionSize.large;
    return ConventionSize.giant;
  }

  ConventionDuration _getConventionDuration(int days) {
    switch (days) {
      case 1:
        return ConventionDuration.oneDay;
      case 2:
        return ConventionDuration.twoDays;
      case 3:
        return ConventionDuration.threeDays;
      case 7:
        return ConventionDuration.week;
      default:
        return ConventionDuration.weekend;
    }
  }

  List<Map<String, dynamic>> _generateSampleConventions() {
    return [
      {
        'id': '1',
        'name': 'Paris Tattoo Convention',
        'city': 'Paris',
        'date': '15-17 Mars 2025',
        'month': 3,
        'duration': 3,
        'duration_enum': ConventionDuration.threeDays,
        'participantCount': 150,
        'size': ConventionSize.large,
        'description': 'La plus grande convention de tatouage de France avec les meilleurs artistes internationaux.',
        'standPrice': 800,
        'ticketPrice': 25,
        'isFavorite': false,
        'organizerId': 'org1',
      },
      {
        'id': '2',
        'name': 'Lyon Ink Festival',
        'city': 'Lyon',
        'date': '5-6 Avril 2025',
        'month': 4,
        'duration': 2,
        'duration_enum': ConventionDuration.twoDays,
        'participantCount': 80,
        'size': ConventionSize.medium,
        'description': 'Festival intimiste axÃ© sur les styles traditionnels et neo-traditionnels.',
        'standPrice': 450,
        'ticketPrice': 15,
        'isFavorite': true,
        'organizerId': 'org2',
      },
      {
        'id': '3',
        'name': 'Marseille Tattoo Show',
        'city': 'Marseille',
        'date': '20-22 Juin 2025',
        'month': 6,
        'duration': 3,
        'duration_enum': ConventionDuration.threeDays,
        'participantCount': 200,
        'size': ConventionSize.giant,
        'description': 'Convention mÃ©diterranÃ©enne avec focus sur le rÃ©alisme et les portraits.',
        'standPrice': 600,
        'ticketPrice': 20,
        'isFavorite': false,
        'organizerId': 'org3',
      },
      {
        'id': '4',
        'name': 'Bordeaux Art & Ink',
        'city': 'Bordeaux',
        'date': '12 Juillet 2025',
        'month': 7,
        'duration': 1,
        'duration_enum': ConventionDuration.oneDay,
        'participantCount': 25,
        'size': ConventionSize.small,
        'description': 'JournÃ©e dÃ©couverte du tatouage artistique dans un cadre exceptionnel.',
        'standPrice': 200,
        'ticketPrice': 10,
        'isFavorite': false,
        'organizerId': 'org4',
      },
      {
        'id': '5',
        'name': 'Lille Tattoo Weekend',
        'city': 'Lille',
        'date': '15-16 Novembre 2025',
        'month': 11,
        'duration': 2,
        'duration_enum': ConventionDuration.weekend,
        'participantCount': 120,
        'size': ConventionSize.large,
        'description': 'Week-end tatouage dans le Nord avec les meilleurs artistes de la rÃ©gion.',
        'standPrice': 500,
        'ticketPrice': 18,
        'isFavorite': true,
        'organizerId': 'org5',
      },
    ];
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\conventions\convention_system\convention_detail_page.dart

// lib/pages/conventions/convention_detail_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/widgets/common/app_bars/custom_app_bar_kipik.dart';
import 'package:kipik_v5/widgets/common/drawers/drawer_factory.dart';
import 'package:kipik_v5/widgets/common/buttons/tattoo_assistant_button.dart';
import 'package:kipik_v5/models/convention.dart';
import 'package:kipik_v5/models/user_role.dart';
import 'package:kipik_v5/enums/convention_enums.dart';

// Pages "feature"
import 'package:kipik_v5/pages/conventions/convention_booking_page.dart';
import 'package:kipik_v5/pages/conventions/convention_tattooers_list_page.dart';

// Pages "shared convention system"
import 'package:kipik_v5/pages/shared/conventions/convention_system/interactive_convention_map.dart';
import 'package:kipik_v5/pages/shared/conventions/convention_system/convention_pro_management_page.dart';
import 'package:kipik_v5/pages/shared/conventions/convention_system/convention_stand_optimizer.dart';

class ConventionDetailPage extends StatefulWidget {
  final String conventionId;
  final UserRole? userRole;

  const ConventionDetailPage({
    Key? key,
    required this.conventionId,
    this.userRole,
  }) : super(key: key);

  @override
  State<ConventionDetailPage> createState() => _ConventionDetailPageState();
}

class _ConventionDetailPageState extends State<ConventionDetailPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _fadeController;
  late AnimationController _slideController;
  late AnimationController _cardController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _cardAnimation;
  
  Convention? _convention;
  UserRole _currentUserRole = UserRole.particulier;
  bool _isLoading = true;
  bool _isFavorite = false;

  @override
  void initState() {
    super.initState();
    _currentUserRole = widget.userRole ?? UserRole.particulier;
    _initializeAnimations();
    _loadConventionData();
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _slideController.dispose();
    _cardController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _cardController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fadeController, curve: Curves.easeInOut),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));

    _cardAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _cardController, curve: Curves.elasticOut),
    );

    _fadeController.forward();
    _slideController.forward();

    Future.delayed(const Duration(milliseconds: 300), () {
      _cardController.forward();
    });
  }

  void _loadConventionData() {
    // Simulation chargement donnÃ©es avec style KIPIK
    Future.delayed(const Duration(milliseconds: 1000), () {
      setState(() {
        _convention = Convention(
          id: widget.conventionId,
          title: 'Paris Tattoo Convention 2025',
          location: 'Paris Expo, Porte de Versailles, Hall 1',
          start: DateTime(2025, 8, 15),
          end: DateTime(2025, 8, 17),
          description: '''ðŸŽ¨ LA PLUS GRANDE CONVENTION TATTOO DE FRANCE !

Retrouvez plus de 300 artistes tatoueurs internationaux, des concours prestigieux, des dÃ©monstrations live et bien plus encore dans l'ambiance unique KIPIK.

Cette Ã©dition 2025 propose :
â€¢ ðŸ† Concours du meilleur tatouage par catÃ©gorie
â€¢ ðŸŽ“ Ateliers de formation pour dÃ©butants
â€¢ ðŸ’Ž Zone dÃ©diÃ©e aux piercings premium
â€¢ ðŸ› ï¸ Stands de matÃ©riel professionnel
â€¢ ðŸŽµ Concerts et animations live
â€¢ ðŸ”¥ Zone FLASH MINUTE exclusive''',
          imageUrl: 'https://example.com/paris-tattoo-2025.jpg',
          isOpen: true,
          isPremium: true,
          artists: ['Alex "Ink Master" Martin', 'Emma "Black Rose" Dubois', 'Marco "Neo Spirit" Silva', 'Sophie "Fine Line" Chen'],
          events: [
            'ðŸ† Concours Best of Show - Samedi 20h',
            'ðŸŽ“ Atelier dÃ©butant KIPIK - Dimanche 14h',
            'ðŸŽ¸ Concert punk rock - Samedi 22h',
            'ðŸ‘— DÃ©filÃ© de mode tatouÃ©e - Dimanche 18h',
            'âš¡ Flash Minute Battle - Dimanche 16h'
          ],
          proSpots: 85,
          merchandiseSpots: 25,
          dayTicketPrice: 25,
          weekendTicketPrice: 45,
          website: 'https://paristattooconvention.com',
        );
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: DrawerFactory.of(context),
      extendBodyBehindAppBar: true,
      appBar: CustomAppBarKipik(
        title: _convention?.title ?? 'Convention',
        subtitle: _getRoleDisplayName(_currentUserRole),
        showBackButton: true,
        showBurger: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.share, color: Colors.white),
            onPressed: _shareConvention,
          ),
          IconButton(
            icon: Icon(
              _isFavorite ? Icons.favorite : Icons.favorite_border, 
              color: _isFavorite ? KipikTheme.rouge : Colors.white,
            ),
            onPressed: _toggleFavorite,
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background KIPIK
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black,
                  Colors.grey.shade900,
                  Colors.black,
                ],
              ),
            ),
          ),

          // Pattern KIPIK subtil
          Positioned.fill(
            child: Opacity(
              opacity: 0.1,
              child: Image.asset(
                'assets/background_charbon.png',
                fit: BoxFit.cover,
                repeat: ImageRepeat.repeat,
              ),
            ),
          ),

          // Contenu principal
          _isLoading ? _buildLoadingKIPIK() : _buildMainContent(),
        ],
      ),
    );
  }

  Widget _buildLoadingKIPIK() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Logo/Animation KIPIK style
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: KipikTheme.rouge.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: CircularProgressIndicator(
              color: KipikTheme.rouge,
              strokeWidth: 3,
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            'CHARGEMENT CONVENTION',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.white,
              letterSpacing: 2,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'PrÃ©paration de l\'expÃ©rience KIPIK...',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              color: Colors.grey.shade400,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMainContent() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: SlideTransition(
        position: _slideAnimation,
        child: CustomScrollView(
          slivers: [
            _buildHeroSliver(),
            _buildContentSliver(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeroSliver() {
    return SliverAppBar(
      expandedHeight: 350,
      pinned: false,
      automaticallyImplyLeading: false,
      backgroundColor: Colors.transparent,
      flexibleSpace: FlexibleSpaceBar(
        background: Stack(
          fit: StackFit.expand,
          children: [
            // Image avec overlay KIPIK
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.transparent,
                    Colors.black.withOpacity(0.3),
                    Colors.black.withOpacity(0.8),
                  ],
                ),
              ),
              child: _convention?.imageUrl != null
                  ? Image.network(
                      _convention!.imageUrl,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) => Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              KipikTheme.rouge.withOpacity(0.3),
                              Colors.black,
                            ],
                          ),
                        ),
                        child: const Center(
                          child: Icon(Icons.event, size: 120, color: Colors.white30),
                        ),
                      ),
                    )
                  : Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            KipikTheme.rouge.withOpacity(0.3),
                            Colors.black,
                          ],
                        ),
                      ),
                      child: const Center(
                        child: Icon(Icons.event, size: 120, color: Colors.white30),
                      ),
                    ),
            ),
            
            // Overlay informations KIPIK
            Positioned(
              bottom: 30,
              left: 20,
              right: 20,
              child: AnimatedBuilder(
                animation: _cardAnimation,
                builder: (context, child) {
                  return Transform.translate(
                    offset: Offset(0, 50 * (1 - _cardAnimation.value)),
                    child: Opacity(
                      opacity: _cardAnimation.value,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Badge Premium KIPIK
                          if (_convention?.isPremium == true)
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
                                ),
                                borderRadius: BorderRadius.circular(25),
                                boxShadow: [
                                  BoxShadow(
                                    color: KipikTheme.rouge.withOpacity(0.4),
                                    blurRadius: 8,
                                    spreadRadius: 2,
                                  ),
                                ],
                              ),
                              child: const Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(Icons.star, color: Colors.white, size: 16),
                                  SizedBox(width: 6),
                                  Text(
                                    'PREMIUM KIPIK',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold,
                                      fontSize: 12,
                                      fontFamily: 'Roboto',
                                      letterSpacing: 1,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          
                          const SizedBox(height: 16),
                          
                          // Titre avec style KIPIK
                          Text(
                            _convention?.title ?? '',
                            style: const TextStyle(
                              fontFamily: 'PermanentMarker',
                              fontSize: 32,
                              color: Colors.white,
                              letterSpacing: 1,
                              shadows: [
                                Shadow(
                                  blurRadius: 15.0,
                                  color: Colors.black,
                                  offset: Offset(2, 2),
                                ),
                                Shadow(
                                  blurRadius: 25.0,
                                  color: Colors.black54,
                                  offset: Offset(4, 4),
                                ),
                              ],
                            ),
                          ),
                          
                          const SizedBox(height: 12),
                          
                          // Localisation avec icÃ´ne KIPIK
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            decoration: BoxDecoration(
                              color: Colors.black.withOpacity(0.6),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: KipikTheme.rouge.withOpacity(0.3)),
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(Icons.location_on, color: KipikTheme.rouge, size: 20),
                                const SizedBox(width: 8),
                                Flexible(
                                  child: Text(
                                    _convention?.location ?? '',
                                    style: const TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 16,
                                      color: Colors.white,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContentSliver() {
    return SliverToBoxAdapter(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildInfoCardsKIPIK(),
            const SizedBox(height: 32),
            _buildNavigationActions(),
            const SizedBox(height: 32),
            _buildDescriptionKIPIK(),
            const SizedBox(height: 32),
            _buildArtistsSectionKIPIK(),
            const SizedBox(height: 32),
            _buildEventsSectionKIPIK(),
            const SizedBox(height: 32),
            _buildActionButtonsKIPIK(),
            const SizedBox(height: 120), // Espace pour FAB
          ],
        ),
      ),
    );
  }

  Widget _buildInfoCardsKIPIK() {
    return AnimatedBuilder(
      animation: _cardAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _cardAnimation.value,
          child: Row(
            children: [
              Expanded(
                child: _buildInfoCardKIPIK(
                  icon: Icons.calendar_today,
                  title: 'DATES',
                  content: _formatDateRange(),
                  color: KipikTheme.rouge,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildInfoCardKIPIK(
                  icon: Icons.people,
                  title: 'STATUT',
                  content: _convention?.isOpen == true ? 'OUVERT' : 'FERMÃ‰',
                  color: _convention?.isOpen == true ? Colors.green : Colors.orange,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildInfoCardKIPIK(
                  icon: Icons.euro,
                  title: 'ENTRÃ‰E',
                  content: '${_convention?.dayTicketPrice ?? 0}â‚¬',
                  color: Colors.blue,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildInfoCardKIPIK({
    required IconData icon,
    required String title,
    required String content,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            color.withOpacity(0.1),
            Colors.black.withOpacity(0.8),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: color.withOpacity(0.3), width: 1),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.1),
            blurRadius: 8,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: color.withOpacity(0.2),
              shape: BoxShape.circle,
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          const SizedBox(height: 12),
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.white70,
              fontWeight: FontWeight.w600,
              letterSpacing: 1,
            ),
          ),
          const SizedBox(height: 6),
          Text(
            content,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: color,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationActions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.flash_on, color: KipikTheme.rouge, size: 24),
            const SizedBox(width: 12),
            const Text(
              'ACTIONS RAPIDES',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 22,
                color: Colors.white,
                letterSpacing: 1,
              ),
            ),
          ],
        ),
        const SizedBox(height: 20),
        
        // Actions selon le rÃ´le utilisateur avec style KIPIK
        if (_currentUserRole == UserRole.particulier) ...[
          _buildActionCardKIPIK(
            icon: Icons.calendar_month,
            title: 'RÃ‰SERVER UN CRÃ‰NEAU',
            subtitle: 'Prendre RDV avec un tatoueur premium',
            color: KipikTheme.rouge,
            onTap: () => _navigateToBooking(),
          ),
          const SizedBox(height: 16),
          _buildActionCardKIPIK(
            icon: Icons.map,
            title: 'PLAN INTERACTIF',
            subtitle: 'Explorer la convention en 3D',
            color: Colors.blue,
            onTap: () => _navigateToInteractiveMap(),
          ),
          const SizedBox(height: 16),
          _buildActionCardKIPIK(
            icon: Icons.people,
            title: 'ARTISTES PRÃ‰SENTS',
            subtitle: 'DÃ©couvrir tous les tatoueurs',
            color: Colors.purple,
            onTap: () => _navigateToTattooersList(),
          ),
        ],
        
        if (_currentUserRole == UserRole.tatoueur) ...[
          _buildActionCardKIPIK(
            icon: Icons.business_center,
            title: 'GESTION PRO',
            subtitle: 'GÃ©rer mes stands et rÃ©servations',
            color: KipikTheme.rouge,
            onTap: () => _navigateToProManagement(),
          ),
          const SizedBox(height: 16),
          _buildActionCardKIPIK(
            icon: Icons.map,
            title: 'MON STAND',
            subtitle: 'Mode tatoueur - GÃ©rer mon espace',
            color: Colors.blue,
            onTap: () => _navigateToInteractiveMap(),
          ),
        ],
        
        if (_currentUserRole == UserRole.organisateur || _currentUserRole == UserRole.admin) ...[
          _buildActionCardKIPIK(
            icon: Icons.tune,
            title: 'OPTIMISEUR STANDS',
            subtitle: 'Maximiser la rentabilitÃ©',
            color: Colors.green,
            onTap: () => _navigateToStandOptimizer(),
          ),
          const SizedBox(height: 16),
          _buildActionCardKIPIK(
            icon: Icons.admin_panel_settings,
            title: 'PANNEAU ADMIN',
            subtitle: 'ContrÃ´le total de la convention',
            color: KipikTheme.rouge,
            onTap: () => _navigateToProManagement(),
          ),
        ],
      ],
    );
  }

  Widget _buildActionCardKIPIK({
    required IconData icon,
    required String title,
    required String subtitle,
    required Color color,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: () {
        HapticFeedback.mediumImpact();
        onTap();
      },
      child: Container(
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              color.withOpacity(0.15),
              Colors.black.withOpacity(0.9),
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: color.withOpacity(0.4), width: 1),
          boxShadow: [
            BoxShadow(
              color: color.withOpacity(0.1),
              blurRadius: 12,
              spreadRadius: 2,
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [color.withOpacity(0.3), color.withOpacity(0.1)],
                ),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Icon(icon, color: color, size: 28),
            ),
            const SizedBox(width: 20),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                      color: Colors.white,
                      letterSpacing: 0.5,
                    ),
                  ),
                  const SizedBox(height: 6),
                  Text(
                    subtitle,
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
                ],
              ),
            ),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: color.withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                Icons.arrow_forward_ios,
                color: color,
                size: 18,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDescriptionKIPIK() {
    return AnimatedBuilder(
      animation: _cardAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, 30 * (1 - _cardAnimation.value)),
          child: Opacity(
            opacity: _cardAnimation.value,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info_outline, color: KipikTheme.rouge, size: 24),
                    const SizedBox(width: 12),
                    const Text(
                      'Ã€ PROPOS',
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 22,
                        color: Colors.white,
                        letterSpacing: 1,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Container(
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        Colors.black.withOpacity(0.8),
                        Colors.grey.shade900.withOpacity(0.9),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(color: KipikTheme.rouge.withOpacity(0.2)),
                  ),
                  child: Text(
                    _convention?.description ?? '',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 16,
                      color: Colors.white,
                      height: 1.6,
                      letterSpacing: 0.3,
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildArtistsSectionKIPIK() {
    if (_convention?.artists?.isEmpty ?? true) return const SizedBox.shrink();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.palette, color: KipikTheme.rouge, size: 24),
            const SizedBox(width: 12),
            const Text(
              'ARTISTES CONFIRMÃ‰S',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 22,
                color: Colors.white,
                letterSpacing: 1,
              ),
            ),
          ],
        ),
        const SizedBox(height: 20),
        Wrap(
          spacing: 12,
          runSpacing: 12,
          children: _convention!.artists!.map((artist) {
            return Container(
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    KipikTheme.rouge.withOpacity(0.2),
                    KipikTheme.rouge.withOpacity(0.05),
                  ],
                ),
                borderRadius: BorderRadius.circular(25),
                border: Border.all(color: KipikTheme.rouge.withOpacity(0.4)),
                boxShadow: [
                  BoxShadow(
                    color: KipikTheme.rouge.withOpacity(0.1),
                    blurRadius: 6,
                    spreadRadius: 1,
                  ),
                ],
              ),
              child: Text(
                artist,
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildEventsSectionKIPIK() {
    if (_convention?.events?.isEmpty ?? true) return const SizedBox.shrink();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.event_note, color: KipikTheme.rouge, size: 24),
            const SizedBox(width: 12),
            const Text(
              'Ã‰VÃ‰NEMENTS SPÃ‰CIAUX',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 22,
                color: Colors.white,
                letterSpacing: 1,
              ),
            ),
          ],
        ),
        const SizedBox(height: 20),
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.black.withOpacity(0.8),
                Colors.grey.shade900.withOpacity(0.9),
              ],
            ),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: KipikTheme.rouge.withOpacity(0.2)),
          ),
          child: Column(
            children: _convention!.events!.asMap().entries.map((entry) {
              int index = entry.key;
              String event = entry.value;
              bool isLast = index == _convention!.events!.length - 1;
              
              return Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  border: isLast ? null : Border(
                    bottom: BorderSide(color: Colors.grey.shade800, width: 1),
                  ),
                ),
                child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            KipikTheme.rouge.withOpacity(0.3),
                            KipikTheme.rouge.withOpacity(0.1),
                          ],
                        ),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Icon(Icons.event, color: KipikTheme.rouge, size: 20),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Text(
                        event,
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 15,
                          color: Colors.white,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
          ),
        ),
      ],
    );
  }

  Widget _buildActionButtonsKIPIK() {
    return Column(
      children: [
        if (_convention?.isOpen == true) ...[
          Container(
            width: double.infinity,
            height: 60,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
              ),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: KipikTheme.rouge.withOpacity(0.4),
                  blurRadius: 12,
                  spreadRadius: 2,
                ),
              ],
            ),
            child: ElevatedButton.icon(
              onPressed: _navigateToBooking,
              icon: const Icon(Icons.calendar_month, color: Colors.white, size: 24),
              label: const Text(
                'RÃ‰SERVER MAINTENANT',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 16,
                  color: Colors.white,
                  letterSpacing: 1,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.transparent,
                shadowColor: Colors.transparent,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              ),
            ),
          ),
          const SizedBox(height: 16),
        ],
        
        Container(
          width: double.infinity,
          height: 60,
          child: OutlinedButton.icon(
            onPressed: _openWebsite,
            icon: const Icon(Icons.language, size: 24),
            label: const Text(
              'SITE WEB OFFICIEL',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                letterSpacing: 0.5,
              ),
            ),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.white,
              side: BorderSide(color: Colors.white.withOpacity(0.5), width: 2),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
            ),
          ),
        ),
      ],
    );
  }

  // Navigation methods
  void _navigateToBooking() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ConventionBookingPage(
          conventionId: widget.conventionId,
        ),
      ),
    );
  }

  void _navigateToTattooersList() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ConventionTattooersListPage(
          conventionId: widget.conventionId,
        ),
      ),
    );
  }

  void _navigateToInteractiveMap() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => InteractiveConventionMap(
          conventionId: widget.conventionId,
          initialMode: _getModeForRole(),
          userType: _currentUserRole,
          currentUserId: 'current-user-id',
        ),
      ),
    );
  }

  void _navigateToProManagement() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ConventionProManagementPage(
          conventionId: widget.conventionId,  // âœ… ParamÃ¨tre ajoutÃ©
        ),
      ),
    );
  }

  void _navigateToStandOptimizer() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ConventionStandOptimizer(
          conventionId: widget.conventionId,  // âœ… CORRECTION ICI : Utilise widget.conventionId
          userType: _currentUserRole,
        ),
      ),
    );
  }

  MapMode _getModeForRole() {
    switch (_currentUserRole) {
      case UserRole.organisateur:
      case UserRole.admin:
        return MapMode.organizer;
      case UserRole.tatoueur:
        return MapMode.tattooer;
      default:
        return MapMode.visitor;
    }
  }

  void _shareConvention() {
    HapticFeedback.mediumImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.share, color: Colors.white),
            const SizedBox(width: 12),
            const Text(
              'Convention partagÃ©e !',
              style: TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
            ),
          ],
        ),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _toggleFavorite() {
    HapticFeedback.lightImpact();
    setState(() {
      _isFavorite = !_isFavorite;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(
              _isFavorite ? Icons.favorite : Icons.favorite_border,
              color: _isFavorite ? KipikTheme.rouge : Colors.white,
            ),
            const SizedBox(width: 12),
            Text(
              _isFavorite ? 'AjoutÃ© aux favoris !' : 'RetirÃ© des favoris',
              style: const TextStyle(fontFamily: 'Roboto', fontWeight: FontWeight.w600),
            ),
          ],
        ),
        backgroundColor: _isFavorite ? Colors.green : Colors.grey.shade700,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _openWebsite() {
    if (_convention?.website != null) {
      HapticFeedback.lightImpact();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.language, color: Colors.white),
              const SizedBox(width: 12),
              Text(
                'Ouverture de ${_convention!.website}',
                style: const TextStyle(fontFamily: 'Roboto'),
              ),
            ],
          ),
          backgroundColor: Colors.blue,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        ),
      );
    }
  }

  String _formatDateRange() {
    if (_convention == null) return '';
    final start = _convention!.start;
    final end = _convention!.end;
    return '${start.day}/${start.month} - ${end.day}/${end.month}';
  }

  String _getRoleDisplayName(UserRole role) {
    switch (role) {
      case UserRole.particulier:
        return 'Visiteur';
      case UserRole.tatoueur:
        return 'Tatoueur';
      case UserRole.organisateur:
        return 'Organisateur';
      case UserRole.admin:
        return 'Administrateur';
      case UserRole.client:
        return 'Client';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\conventions\convention_system\convention_layout_generator.dart

// lib/pages/shared/conventions/convention_system/convention_layout_generator.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';

enum LayoutElement { stage, bar, toilet, storage, foodTruck, entrance, exit, pillar, emergency }
enum StandType { tattoo, merchant }
enum ZoneType { premium, standard, discount, forbidden }

class LayoutPoint {
  final double x;
  final double y;
  final double width;
  final double height;
  final LayoutElement type;
  final String? label;
  final bool isFixed;
  
  LayoutPoint({
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    required this.type,
    this.label,
    this.isFixed = false,
  });
}

class StandSlot {
  final String id;
  final double x;
  final double y;
  final double width;
  final double height;
  final StandType type;
  final ZoneType zone;
  final double pricePerSqm;
  final bool isBooked;
  final String? bookedBy;
  
  StandSlot({
    required this.id,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    required this.type,
    required this.zone,
    required this.pricePerSqm,
    this.isBooked = false,
    this.bookedBy,
  });
  
  double get totalPrice => width * height * pricePerSqm;
  double get area => width * height;
}

class ConventionLayoutGenerator extends StatefulWidget {
  final Map<String, dynamic>? convention;
  
  const ConventionLayoutGenerator({
    Key? key,
    this.convention,
  }) : super(key: key);

  @override
  State<ConventionLayoutGenerator> createState() => _ConventionLayoutGeneratorState();
}

class _ConventionLayoutGeneratorState extends State<ConventionLayoutGenerator> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late Animation<Offset> _slideAnimation;

  int _currentStep = 0;
  bool _isGenerating = false;
  
  // Configuration salle
  double _roomWidth = 40.0;
  double _roomHeight = 30.0;
  bool _hasSecondRoom = false;
  double _secondRoomWidth = 20.0;
  double _secondRoomHeight = 15.0;
  
  // Contraintes sÃ©curitÃ©
  double _mainAlleyWidth = 3.0;
  double _secondaryAlleyWidth = 2.0;
  double _pmrAlleyWidth = 1.4;
  double _emergencyDistance = 15.0;
  
  // Configuration stands
  int _expectedTattooers = 45;
  int _expectedMerchants = 8;
  double _defaultDepth = 2.0;
  double _tattooRatio = 75.0;
  double _merchantRatio = 15.0;
  
  // Pricing
  double _basePricePerSqm = 80.0;
  double _premiumMultiplier = 1.5;
  double _discountMultiplier = 0.8;
  
  // Ã‰lÃ©ments placÃ©s
  List<LayoutPoint> _fixedElements = [];
  List<LayoutPoint> _forbiddenZones = [];
  List<StandSlot> _generatedStands = [];
  
  final PageController _pageController = PageController();

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeDefaultElements();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));

    _slideController.forward();
  }

  void _initializeDefaultElements() {
    // Ã‰lÃ©ments par dÃ©faut
    _fixedElements = [
      LayoutPoint(x: 35, y: 2, width: 6, height: 4, type: LayoutElement.stage, label: 'ScÃ¨ne principale'),
      LayoutPoint(x: 2, y: 2, width: 3, height: 2, type: LayoutElement.bar, label: 'Bar 1'),
      LayoutPoint(x: 35, y: 24, width: 3, height: 2, type: LayoutElement.bar, label: 'Bar 2'),
      LayoutPoint(x: 2, y: 26, width: 4, height: 2, type: LayoutElement.toilet, label: 'Sanitaires'),
    ];
    
    _forbiddenZones = [
      LayoutPoint(x: 0, y: 0, width: 40, height: 1, type: LayoutElement.entrance, label: 'Zone entrÃ©e'),
      LayoutPoint(x: 19, y: 29, width: 2, height: 1, type: LayoutElement.exit, label: 'Sortie secours'),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'GÃ©nÃ©rateur de Plan',
        subtitle: 'IA d\'optimisation convention',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.help_outline, color: Colors.white),
            onPressed: _showHelp,
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          if (_currentStep == 3)
            FloatingActionButton.extended(
              heroTag: "generate",
              onPressed: _isGenerating ? null : _generateLayout,
              backgroundColor: KipikTheme.rouge,
              icon: _isGenerating 
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2),
                    )
                  : const Icon(Icons.auto_awesome, color: Colors.white),
              label: Text(
                _isGenerating ? 'GÃ©nÃ©ration...' : 'GÃ©nÃ©rer Plan IA',
                style: const TextStyle(color: Colors.white, fontFamily: 'Roboto'),
              ),
            ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      children: [
        const SizedBox(height: 8),
        _buildProgressIndicator(),
        const SizedBox(height: 16),
        Expanded(
          child: PageView(
            controller: _pageController,
            onPageChanged: (index) {
              setState(() {
                _currentStep = index;
              });
            },
            children: [
              _buildRoomConfigurationStep(),
              _buildSafetyConstraintsStep(),
              _buildFixedElementsStep(),
              _buildStandConfigurationStep(),
              _buildGeneratedLayoutStep(),
            ],
          ),
        ),
        const SizedBox(height: 16),
        _buildNavigationButtons(),
        const SizedBox(height: 16),
      ],
    );
  }

  Widget _buildProgressIndicator() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          children: [
            Row(
              children: [
                Icon(Icons.auto_awesome, color: KipikTheme.rouge, size: 24),
                const SizedBox(width: 12),
                const Expanded(
                  child: Text(
                    'GÃ©nÃ©rateur IA Convention Layout',
                    style: TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                  ),
                ),
                Text(
                  '${_currentStep + 1}/5',
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            LinearProgressIndicator(
              value: (_currentStep + 1) / 5,
              backgroundColor: Colors.grey[300],
              valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
            ),
            
            const SizedBox(height: 8),
            
            Text(
              _getStepTitle(_currentStep),
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRoomConfigurationStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStepHeader(
            'Configuration des Salles',
            'DÃ©finissez les dimensions de votre espace',
            Icons.aspect_ratio,
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  // Salle principale
                  _buildConfigCard(
                    'Salle principale',
                    [
                      _buildSliderConfig(
                        'Largeur (m)',
                        _roomWidth,
                        10.0,
                        100.0,
                        (value) => setState(() => _roomWidth = value),
                      ),
                      _buildSliderConfig(
                        'Longueur (m)',
                        _roomHeight,
                        10.0,
                        80.0,
                        (value) => setState(() => _roomHeight = value),
                      ),
                      _buildInfoRow('Surface totale', '${(_roomWidth * _roomHeight).toInt()}mÂ²'),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Salle annexe
                  _buildConfigCard(
                    'Salle annexe (optionnel)',
                    [
                      _buildSwitchConfig(
                        'Ajouter une salle annexe',
                        _hasSecondRoom,
                        (value) => setState(() => _hasSecondRoom = value),
                      ),
                      if (_hasSecondRoom) ...[
                        _buildSliderConfig(
                          'Largeur annexe (m)',
                          _secondRoomWidth,
                          5.0,
                          50.0,
                          (value) => setState(() => _secondRoomWidth = value),
                        ),
                        _buildSliderConfig(
                          'Longueur annexe (m)',
                          _secondRoomHeight,
                          5.0,
                          40.0,
                          (value) => setState(() => _secondRoomHeight = value),
                        ),
                        _buildInfoRow('Surface annexe', '${(_secondRoomWidth * _secondRoomHeight).toInt()}mÂ²'),
                      ],
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // RÃ©sumÃ©
                  _buildSummaryCard(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSafetyConstraintsStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStepHeader(
            'Contraintes de SÃ©curitÃ©',
            'ParamÃ¨tres obligatoires et rÃ©glementaires',
            Icons.security,
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  _buildConfigCard(
                    'Largeurs d\'allÃ©es',
                    [
                      _buildSliderConfig(
                        'AllÃ©es principales (m)',
                        _mainAlleyWidth,
                        2.0,
                        5.0,
                        (value) => setState(() => _mainAlleyWidth = value),
                      ),
                      _buildSliderConfig(
                        'AllÃ©es secondaires (m)',
                        _secondaryAlleyWidth,
                        1.5,
                        3.0,
                        (value) => setState(() => _secondaryAlleyWidth = value),
                      ),
                      _buildSliderConfig(
                        'AccessibilitÃ© PMR (m)',
                        _pmrAlleyWidth,
                        1.4,
                        2.0,
                        (value) => setState(() => _pmrAlleyWidth = value),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  _buildConfigCard(
                    'SÃ©curitÃ© incendie',
                    [
                      _buildSliderConfig(
                        'Distance max sortie secours (m)',
                        _emergencyDistance,
                        10.0,
                        25.0,
                        (value) => setState(() => _emergencyDistance = value),
                      ),
                      _buildInfoRow('RÃ©glementation', 'ERP Type L'),
                      _buildInfoRow('CapacitÃ© max calculÃ©e', '${_calculateMaxCapacity()} personnes'),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  _buildWarningCard(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFixedElementsStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStepHeader(
            'Ã‰lÃ©ments Fixes',
            'Placez scÃ¨ne, bars, WC et zones interdites',
            Icons.widgets,
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  // Plan interactif simplifiÃ©
                  _buildMiniLayoutView(),
                  
                  const SizedBox(height: 16),
                  
                  _buildConfigCard(
                    'Ã‰lÃ©ments disponibles',
                    [
                      _buildElementButton('ScÃ¨ne', Icons.theater_comedy, LayoutElement.stage),
                      _buildElementButton('Bar', Icons.local_bar, LayoutElement.bar),
                      _buildElementButton('WC', Icons.wc, LayoutElement.toilet),
                      _buildElementButton('Stockage', Icons.inventory, LayoutElement.storage),
                      _buildElementButton('Zone interdite', Icons.block, LayoutElement.pillar),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  _buildFixedElementsList(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStandConfigurationStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStepHeader(
            'Configuration Stands',
            'ParamÃ¨tres pour la gÃ©nÃ©ration automatique',
            Icons.store,
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  _buildConfigCard(
                    'Nombre de stands',
                    [
                      _buildSliderConfig(
                        'Tatoueurs attendus',
                        _expectedTattooers.toDouble(),
                        10.0,
                        100.0,
                        (value) => setState(() => _expectedTattooers = value.toInt()),
                        isInteger: true,
                      ),
                      _buildSliderConfig(
                        'Stands marchands',
                        _expectedMerchants.toDouble(),
                        0.0,
                        20.0,
                        (value) => setState(() => _expectedMerchants = value.toInt()),
                        isInteger: true,
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  _buildConfigCard(
                    'Dimensions par dÃ©faut',
                    [
                      _buildSliderConfig(
                        'Profondeur stands (m)',
                        _defaultDepth,
                        1.5,
                        4.0,
                        (value) => setState(() => _defaultDepth = value),
                      ),
                      _buildInfoRow('Tailles proposÃ©es', '${_defaultDepth.toStringAsFixed(1)}x2m, ${_defaultDepth.toStringAsFixed(1)}x3m, ${_defaultDepth.toStringAsFixed(1)}x4m...'),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  _buildConfigCard(
                    'Tarification',
                    [
                      _buildSliderConfig(
                        'Prix de base (â‚¬/mÂ²)',
                        _basePricePerSqm,
                        50.0,
                        150.0,
                        (value) => setState(() => _basePricePerSqm = value),
                      ),
                      _buildSliderConfig(
                        'Multiplicateur premium',
                        _premiumMultiplier,
                        1.2,
                        2.0,
                        (value) => setState(() => _premiumMultiplier = value),
                      ),
                      _buildSliderConfig(
                        'Multiplicateur discount',
                        _discountMultiplier,
                        0.5,
                        0.9,
                        (value) => setState(() => _discountMultiplier = value),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  _buildRevenueProjection(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGeneratedLayoutStep() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStepHeader(
            'Plan GÃ©nÃ©rÃ©',
            'RÃ©sultat de l\'optimisation IA',
            Icons.auto_awesome,
          ),
          
          const SizedBox(height: 24),
          
          if (_generatedStands.isEmpty)
            _buildNoLayoutState()
          else
            Expanded(
              child: Column(
                children: [
                  _buildLayoutStats(),
                  const SizedBox(height: 16),
                  Expanded(
                    child: _buildFullLayoutView(),
                  ),
                  const SizedBox(height: 16),
                  _buildLayoutActions(),
                ],
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildStepHeader(String title, String subtitle, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: Colors.white, size: 24),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 18,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  subtitle,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConfigCard(String title, List<Widget> children) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 16),
          ...children,
        ],
      ),
    );
  }

  Widget _buildSliderConfig(String label, double value, double min, double max, Function(double) onChanged, {bool isInteger = false}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              label,
              style: const TextStyle(
                fontFamily: 'Roboto',
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: KipikTheme.rouge.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                isInteger ? value.toInt().toString() : value.toStringAsFixed(1),
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 14,
                  color: KipikTheme.rouge,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        SliderTheme(
          data: SliderTheme.of(context).copyWith(
            activeTrackColor: KipikTheme.rouge,
            inactiveTrackColor: Colors.grey[300],
            thumbColor: KipikTheme.rouge,
            overlayColor: KipikTheme.rouge.withOpacity(0.2),
          ),
          child: Slider(
            value: value,
            min: min,
            max: max,
            divisions: isInteger ? (max - min).toInt() : null,
            onChanged: onChanged,
          ),
        ),
        const SizedBox(height: 12),
      ],
    );
  }

  Widget _buildSwitchConfig(String label, bool value, Function(bool) onChanged) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
          Switch(
            value: value,
            onChanged: onChanged,
            activeColor: KipikTheme.rouge,
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryCard() {
    final totalArea = _roomWidth * _roomHeight + (_hasSecondRoom ? _secondRoomWidth * _secondRoomHeight : 0);
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.blue.shade400, Colors.blue.shade600],
        ),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: [
          const Row(
            children: [
              Icon(Icons.summarize, color: Colors.white, size: 20),
              SizedBox(width: 8),
              Text(
                'RÃ©sumÃ© de configuration',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 14,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          _buildSummaryRow('Surface totale', '${totalArea.toInt()}mÂ²'),
          _buildSummaryRow('CapacitÃ© estimÃ©e', '${(totalArea / 2.5).toInt()} personnes'),
          _buildSummaryRow('Stands potentiels', '${(totalArea * 0.6 / 6).toInt()} emplacements'),
        ],
      ),
    );
  }

  Widget _buildSummaryRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.white70,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWarningCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.orange.shade100,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.orange.shade300),
      ),
      child: Row(
        children: [
          Icon(Icons.warning, color: Colors.orange.shade700, size: 20),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              'Ces paramÃ¨tres respectent la rÃ©glementation ERP. Consultez votre SDIS local pour validation.',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.orange.shade700,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMiniLayoutView() {
    return Container(
      height: 200,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.gesture, size: 48, color: Colors.grey),
            SizedBox(height: 8),
            Text(
              'Plan interactif',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
            Text(
              'Drag & Drop pour placer les Ã©lÃ©ments',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildElementButton(String label, IconData icon, LayoutElement type) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: ElevatedButton.icon(
        onPressed: () => _addElement(type),
        icon: Icon(icon, size: 16),
        label: Text(
          label,
          style: const TextStyle(fontFamily: 'Roboto', fontSize: 12),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.blue.shade100,
          foregroundColor: Colors.blue.shade700,
          minimumSize: const Size(double.infinity, 36),
        ),
      ),
    );
  }

  Widget _buildFixedElementsList() {
    return _buildConfigCard(
      'Ã‰lÃ©ments placÃ©s (${_fixedElements.length + _forbiddenZones.length})',
      [
        ..._fixedElements.map((element) => _buildElementListItem(element, true)),
        ..._forbiddenZones.map((element) => _buildElementListItem(element, false)),
        if (_fixedElements.isEmpty && _forbiddenZones.isEmpty)
          const Text(
            'Aucun Ã©lÃ©ment placÃ©',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.grey,
              fontStyle: FontStyle.italic,
            ),
          ),
      ],
    );
  }

  Widget _buildElementListItem(LayoutPoint element, bool isFixed) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: isFixed ? Colors.green.shade50 : Colors.red.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: isFixed ? Colors.green.shade200 : Colors.red.shade200,
        ),
      ),
      child: Row(
        children: [
          Icon(
            _getElementIcon(element.type),
            size: 16,
            color: isFixed ? Colors.green.shade700 : Colors.red.shade700,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              element.label ?? _getElementLabel(element.type),
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: isFixed ? Colors.green.shade700 : Colors.red.shade700,
              ),
            ),
          ),
          Text(
            '${element.width.toInt()}x${element.height.toInt()}m',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 10,
              color: isFixed ? Colors.green.shade600 : Colors.red.shade600,
            ),
          ),
          const SizedBox(width: 8),
          GestureDetector(
            onTap: () => _removeElement(element, isFixed),
            child: Icon(
              Icons.delete,
              size: 16,
              color: Colors.grey.shade600,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRevenueProjection() {
    final projectedRevenue = _calculateProjectedRevenue();
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.green.shade400, Colors.green.shade600],
        ),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: [
          const Row(
            children: [
              Icon(Icons.euro, color: Colors.white, size: 20),
              SizedBox(width: 8),
              Text(
                'Projection de revenus',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 14,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          _buildRevenueRow('Revenus tatoueurs', '${projectedRevenue['tattoo']?.toInt() ?? 0}â‚¬'),
          _buildRevenueRow('Revenus marchands', '${projectedRevenue['merchant']?.toInt() ?? 0}â‚¬'),
          const Divider(color: Colors.white54),
          _buildRevenueRow('Total estimÃ©', '${projectedRevenue['total']?.toInt() ?? 0}â‚¬'),
          _buildRevenueRow('Commission Kipik (1%)', '${((projectedRevenue['total'] ?? 0) * 0.01).toInt()}â‚¬'),
        ],
      ),
    );
  }

  Widget _buildRevenueRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.white70,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNoLayoutState() {
    return Expanded(
      child: Center(
        child: Container(
          padding: const EdgeInsets.all(32),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.auto_awesome,
                size: 64,
                color: Colors.grey[400],
              ),
              const SizedBox(height: 16),
              Text(
                'Plan en attente de gÃ©nÃ©ration',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                'Cliquez sur "GÃ©nÃ©rer Plan IA" pour crÃ©er automatiquement l\'agencement optimal',
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.grey[500],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLayoutStats() {
    if (_generatedStands.isEmpty) return const SizedBox.shrink();
    
    final stats = _calculateLayoutStats();
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          const Text(
            'Statistiques du plan gÃ©nÃ©rÃ©',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(child: _buildStatItem('Stands', stats['totalStands']?.toString() ?? '0', Icons.store)),
              Expanded(child: _buildStatItem('Surface', '${stats['usedArea']?.toInt() ?? 0}mÂ²', Icons.square_foot)),
              Expanded(child: _buildStatItem('Revenus', '${stats['revenue']?.toInt() ?? 0}â‚¬', Icons.euro)),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: KipikTheme.rouge, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 16,
            color: KipikTheme.rouge,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 12,
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildFullLayoutView() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.map, size: 48, color: Colors.grey),
            SizedBox(height: 8),
            Text(
              'Plan de convention gÃ©nÃ©rÃ©',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
            Text(
              'Vue interactive avec stands optimisÃ©s',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLayoutActions() {
    return Row(
      children: [
        Expanded(
          child: OutlinedButton.icon(
            onPressed: _exportLayout,
            icon: const Icon(Icons.download, size: 16),
            label: const Text(
              'Exporter PDF',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.blue,
              side: const BorderSide(color: Colors.blue),
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: ElevatedButton.icon(
            onPressed: _optimizeLayout,
            icon: const Icon(Icons.tune, size: 16),
            label: const Text(
              'RÃ©optimiser',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: ElevatedButton.icon(
            onPressed: _publishLayout,
            icon: const Icon(Icons.publish, size: 16),
            label: const Text(
              'Publier',
              style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildNavigationButtons() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Row(
        children: [
          if (_currentStep > 0)
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _previousStep,
                icon: const Icon(Icons.arrow_back, size: 16),
                label: const Text(
                  'PrÃ©cÃ©dent',
                  style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                ),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.white,
                  side: const BorderSide(color: Colors.white),
                ),
              ),
            ),
          if (_currentStep > 0 && _currentStep < 4) const SizedBox(width: 12),
          if (_currentStep < 4)
            Expanded(
              child: ElevatedButton.icon(
                onPressed: _nextStep,
                icon: const Icon(Icons.arrow_forward, size: 16),
                label: const Text(
                  'Suivant',
                  style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: KipikTheme.rouge,
                ),
              ),
            ),
        ],
      ),
    );
  }

  // Helper methods
  String _getStepTitle(int step) {
    switch (step) {
      case 0: return 'Configuration des salles';
      case 1: return 'Contraintes de sÃ©curitÃ©';
      case 2: return 'Placement des Ã©lÃ©ments fixes';
      case 3: return 'ParamÃ¨tres des stands';
      case 4: return 'Plan gÃ©nÃ©rÃ© et optimisÃ©';
      default: return '';
    }
  }

  IconData _getElementIcon(LayoutElement type) {
    switch (type) {
      case LayoutElement.stage: return Icons.theater_comedy;
      case LayoutElement.bar: return Icons.local_bar;
      case LayoutElement.toilet: return Icons.wc;
      case LayoutElement.storage: return Icons.inventory;
      case LayoutElement.foodTruck: return Icons.local_shipping;
      case LayoutElement.entrance: return Icons.door_front_door;
      case LayoutElement.exit: return Icons.exit_to_app;
      case LayoutElement.pillar: return Icons.block;
      case LayoutElement.emergency: return Icons.emergency;
    }
  }

  String _getElementLabel(LayoutElement type) {
    switch (type) {
      case LayoutElement.stage: return 'ScÃ¨ne';
      case LayoutElement.bar: return 'Bar';
      case LayoutElement.toilet: return 'Sanitaires';
      case LayoutElement.storage: return 'Stockage';
      case LayoutElement.foodTruck: return 'Food Truck';
      case LayoutElement.entrance: return 'EntrÃ©e';
      case LayoutElement.exit: return 'Sortie';
      case LayoutElement.pillar: return 'Zone interdite';
      case LayoutElement.emergency: return 'Sortie secours';
    }
  }

  int _calculateMaxCapacity() {
    final totalArea = _roomWidth * _roomHeight + (_hasSecondRoom ? _secondRoomWidth * _secondRoomHeight : 0);
    return (totalArea / 2.5).toInt(); // 2.5mÂ² par personne (norme ERP)
  }

  Map<String, double> _calculateProjectedRevenue() {
    final totalArea = _roomWidth * _roomHeight + (_hasSecondRoom ? _secondRoomWidth * _secondRoomHeight : 0);
    final availableArea = totalArea * 0.6; // 60% pour stands
    
    final tattooArea = availableArea * (_tattooRatio / 100);
    final merchantArea = availableArea * (_merchantRatio / 100);
    
    final tattooRevenue = tattooArea * _basePricePerSqm;
    final merchantRevenue = merchantArea * _basePricePerSqm * 0.8; // Marchands moins chers
    
    return {
      'tattoo': tattooRevenue,
      'merchant': merchantRevenue,
      'total': tattooRevenue + merchantRevenue,
    };
  }

  Map<String, dynamic> _calculateLayoutStats() {
    if (_generatedStands.isEmpty) return {};
    
    final totalStands = _generatedStands.length;
    final usedArea = _generatedStands.fold(0.0, (sum, stand) => sum + stand.area);
    final revenue = _generatedStands.fold(0.0, (sum, stand) => sum + stand.totalPrice);
    
    return {
      'totalStands': totalStands,
      'usedArea': usedArea,
      'revenue': revenue,
    };
  }

  // Actions
  void _previousStep() {
    if (_currentStep > 0) {
      _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _nextStep() {
    if (_currentStep < 4) {
      _pageController.nextPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _showHelp() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Aide gÃ©nÃ©rateur de plan - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _addElement(LayoutElement type) {
    // Ajouter Ã©lÃ©ment par dÃ©faut
    final newElement = LayoutPoint(
      x: 10,
      y: 10,
      width: type == LayoutElement.stage ? 6 : 3,
      height: type == LayoutElement.stage ? 4 : 2,
      type: type,
      label: '${_getElementLabel(type)} ${_fixedElements.length + 1}',
    );
    
    setState(() {
      _fixedElements.add(newElement);
    });
    
    HapticFeedback.lightImpact();
  }

  void _removeElement(LayoutPoint element, bool isFixed) {
    setState(() {
      if (isFixed) {
        _fixedElements.remove(element);
      } else {
        _forbiddenZones.remove(element);
      }
    });
    
    HapticFeedback.lightImpact();
  }

  void _generateLayout() async {
    setState(() => _isGenerating = true);
    
    // Simulation gÃ©nÃ©ration IA
    await Future.delayed(const Duration(seconds: 3));
    
    // GÃ©nÃ©ration stands simulÃ©e
    final generatedStands = <StandSlot>[];
    
    for (int i = 0; i < _expectedTattooers; i++) {
      generatedStands.add(
        StandSlot(
          id: 'T${i + 1}',
          x: (i % 10) * 4.0 + 5,
          y: (i ~/ 10) * 3.0 + 8,
          width: _defaultDepth,
          height: 3.0,
          type: StandType.tattoo,
          zone: i < 15 ? ZoneType.premium : ZoneType.standard,
          pricePerSqm: i < 15 ? _basePricePerSqm * _premiumMultiplier : _basePricePerSqm,
        ),
      );
    }
    
    for (int i = 0; i < _expectedMerchants; i++) {
      generatedStands.add(
        StandSlot(
          id: 'M${i + 1}',
          x: 2.0,
          y: i * 3.0 + 8,
          width: 2.0,
          height: 2.0,
          type: StandType.merchant,
          zone: ZoneType.standard,
          pricePerSqm: _basePricePerSqm * 0.8,
        ),
      );
    }
    
    setState(() {
      _generatedStands = generatedStands;
      _isGenerating = false;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Plan gÃ©nÃ©rÃ© avec succÃ¨s ! ðŸŽ‰'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _exportLayout() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Export PDF du plan - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _optimizeLayout() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('RÃ©optimisation du plan - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _publishLayout() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Publication du plan - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\conventions\convention_system\convention_pro_management_page.dart

// lib/pages/shared/conventions/convention_system/convention_pro_management_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../../../services/features/premium_feature_guard.dart';
import '../../../../models/user_subscription.dart';

enum StandRequestStatus { draft, pending, negotiating, accepted, rejected, cancelled, active, completed }
enum PaymentStatus { pending, processing, paid, failed, refunded, cancelled }

class ConventionProManagementPage extends StatefulWidget {
  final String conventionId;  // âœ… ChangÃ© pour accepter conventionId comme les autres pages
  
  const ConventionProManagementPage({
    Key? key,
    required this.conventionId,  // âœ… Required comme dans les autres pages
  }) : super(key: key);

  @override
  State<ConventionProManagementPage> createState() => _ConventionProManagementPageState();
}

class _ConventionProManagementPageState extends State<ConventionProManagementPage> 
    with TickerProviderStateMixin {
  
  late AnimationController _slideController;
  late AnimationController _cardController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _cardAnimation;

  bool _isLoading = false;
  int _selectedTabIndex = 0;
  
  Map<String, dynamic>? _convention;  // âœ… DonnÃ©es convention chargÃ©es localement
  List<Map<String, dynamic>> _myStandRequests = [];
  List<Map<String, dynamic>> _availableConventions = [];
  Map<String, dynamic>? _activeLocationChange;
  
  final PageController _pageController = PageController();

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _loadConventionData();  // âœ… Charger les donnÃ©es de la convention
    _loadProData();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _cardController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _cardController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _cardAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _cardController, curve: Curves.elasticOut),
    );

    _slideController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      _cardController.forward();
    });
  }

  // âœ… Nouvelle mÃ©thode pour charger les donnÃ©es de la convention
  Future<void> _loadConventionData() async {
    // TODO: En production, charger depuis Firebase avec widget.conventionId
    // final doc = await FirebaseFirestore.instance
    //     .collection('conventions')
    //     .doc(widget.conventionId)
    //     .get();
    
    // Pour la dÃ©mo, donnÃ©es simulÃ©es
    setState(() {
      _convention = {
        'id': widget.conventionId,
        'name': 'Paris Tattoo Convention 2025',
        'location': 'Paris Expo, Porte de Versailles',
        'dates': '15-17 Mars 2025',
        'status': 'active',
      };
    });
  }

  void _loadProData() {
    setState(() => _isLoading = true);
    
    Future.delayed(const Duration(seconds: 1), () {
      setState(() {
        _myStandRequests = _generateStandRequests();
        _availableConventions = _generateAvailableConventions();
        _activeLocationChange = _generateActiveLocationChange();
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return PremiumFeatureGuard(
      requiredFeature: PremiumFeature.conventions,
      child: _buildScaffold(),
    );
  }

  Widget _buildScaffold() {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Gestion Conventions',
        subtitle: _convention?['name'] ?? 'Chargement...',  // âœ… Affiche le nom de la convention
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.notification_important, color: Colors.white),
            onPressed: _viewNotifications,
          ),
          IconButton(
            icon: const Icon(Icons.history, color: Colors.white),
            onPressed: _viewHistory,
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            heroTag: "newRequest",
            onPressed: _createNewStandRequest,
            backgroundColor: KipikTheme.rouge,
            child: const Icon(Icons.add_business, color: Colors.white),
          ),
          const SizedBox(height: 16),
          const TattooAssistantButton(),
        ],
      ),
      body: Stack(
        children: [
          // Background charbon
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: SlideTransition(
              position: _slideAnimation,
              child: _buildContent(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent() {
    if (_isLoading) {
      return _buildLoadingState();
    }

    return Column(
      children: [
        const SizedBox(height: 8),
        _buildLocationStatus(),
        const SizedBox(height: 16),
        _buildTabBar(),
        const SizedBox(height: 16),
        Expanded(
          child: PageView(
            controller: _pageController,
            onPageChanged: (index) {
              setState(() {
                _selectedTabIndex = index;
              });
            },
            children: [
              _buildMyRequestsTab(),
              _buildAvailableConventionsTab(),
              _buildStandManagementTab(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildLocationStatus() {
    if (_activeLocationChange == null) {
      return const SizedBox.shrink();
    }

    return AnimatedBuilder(
      animation: _cardAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _cardAnimation.value,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
                ),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.location_on,
                          color: Colors.white,
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'ðŸŽª Localisation temporaire active',
                              style: TextStyle(
                                fontFamily: 'PermanentMarker',
                                fontSize: 16,
                                color: Colors.white,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              _activeLocationChange!['conventionName'],
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 14,
                                color: Colors.white70,
                              ),
                            ),
                          ],
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Colors.green,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Text(
                          'ACTIF',
                          style: TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            const Icon(Icons.location_city, color: Colors.white70, size: 16),
                            const SizedBox(width: 8),
                            Text(
                              'Adresse actuelle: ${_activeLocationChange!['address']}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.white70,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            const Icon(Icons.schedule, color: Colors.white70, size: 16),
                            const SizedBox(width: 8),
                            Text(
                              'Fin: ${_activeLocationChange!['endDate']}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.white70,
                              ),
                            ),
                            const Spacer(),
                            const Icon(Icons.store, color: Colors.white70, size: 16),
                            const SizedBox(width: 4),
                            Text(
                              'Stand ${_activeLocationChange!['standNumber']}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 12),
                  
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: _viewLocationDetails,
                          icon: const Icon(Icons.info, size: 16),
                          label: const Text(
                            'DÃ©tails',
                            style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                          ),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.white,
                            side: const BorderSide(color: Colors.white),
                          ),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _manageLocationChange,
                          icon: const Icon(Icons.settings, size: 16),
                          label: const Text(
                            'GÃ©rer',
                            style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                          ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white,
                            foregroundColor: const Color(0xFF6366F1),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildTabBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: Container(
        padding: const EdgeInsets.all(4),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          children: [
            _buildTabItem(0, 'Mes demandes', Icons.request_page),
            _buildTabItem(1, 'Conventions', Icons.event),
            _buildTabItem(2, 'Stands actifs', Icons.store),
          ],
        ),
      ),
    );
  }

  Widget _buildTabItem(int index, String label, IconData icon) {
    final isSelected = _selectedTabIndex == index;
    
    return Expanded(
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedTabIndex = index;
          });
          _pageController.animateToPage(
            index,
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
          );
          HapticFeedback.lightImpact();
        },
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12),
          decoration: BoxDecoration(
            gradient: isSelected ? LinearGradient(
              colors: [KipikTheme.rouge, KipikTheme.rouge.withOpacity(0.8)],
            ) : null,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              Icon(
                icon,
                color: isSelected ? Colors.white : Colors.grey[600],
                size: 20,
              ),
              const SizedBox(height: 4),
              Text(
                label,
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 10,
                  fontWeight: FontWeight.w600,
                  color: isSelected ? Colors.white : Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMyRequestsTab() {
    if (_myStandRequests.isEmpty) {
      return _buildEmptyState(
        'Aucune demande de stand',
        'Commencez par rechercher des conventions qui vous intÃ©ressent',
        Icons.request_page,
      );
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: ListView.builder(
        itemCount: _myStandRequests.length,
        itemBuilder: (context, index) {
          return _buildStandRequestCard(_myStandRequests[index]);
        },
      ),
    );
  }

  Widget _buildStandRequestCard(Map<String, dynamic> request) {
    final status = StandRequestStatus.values[request['status']];
    final payment = PaymentStatus.values[request['paymentStatus'] ?? 0];
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // En-tÃªte demande
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        request['conventionName'],
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(Icons.location_on, color: Colors.grey, size: 14),
                          const SizedBox(width: 4),
                          Text(
                            request['city'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          const SizedBox(width: 12),
                          const Icon(Icons.calendar_today, color: Colors.grey, size: 14),
                          const SizedBox(width: 4),
                          Text(
                            request['date'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: _getStatusColor(status),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    _getStatusLabel(status),
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // DÃ©tails stand
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      const Icon(Icons.store, color: Colors.black87, size: 20),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Stand ${request['standType']} - ${request['standSize']}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                                color: Colors.black87,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                Text(
                                  '${request['price']}â‚¬',
                                  style: TextStyle(
                                    fontFamily: 'PermanentMarker',
                                    fontSize: 16,
                                    color: KipikTheme.rouge,
                                  ),
                                ),
                                const SizedBox(width: 8),
                                Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: _getPaymentColor(payment),
                                    borderRadius: BorderRadius.circular(6),
                                  ),
                                  child: Text(
                                    _getPaymentLabel(payment),
                                    style: const TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 9,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  
                  if (request['message'] != null) ...[
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.chat_bubble_outline, color: Colors.grey, size: 16),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              request['message'],
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                fontSize: 12,
                                color: Colors.grey,
                                fontStyle: FontStyle.italic,
                              ),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              ),
            ),
            
            const SizedBox(height: 12),
            
            // Actions selon statut
            _buildRequestActions(request, status, payment),
          ],
        ),
      ),
    );
  }

  Widget _buildRequestActions(Map<String, dynamic> request, StandRequestStatus status, PaymentStatus payment) {
    switch (status) {
      case StandRequestStatus.draft:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _editRequest(request),
                icon: const Icon(Icons.edit, size: 16),
                label: const Text('Modifier', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _sendRequest(request),
                icon: const Icon(Icons.send, size: 16),
                label: const Text('Envoyer', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case StandRequestStatus.pending:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _cancelRequest(request),
                icon: const Icon(Icons.cancel, size: 16),
                label: const Text('Annuler', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.red,
                  side: const BorderSide(color: Colors.red),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _viewRequestDetails(request),
                icon: const Icon(Icons.info, size: 16),
                label: const Text('DÃ©tails', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case StandRequestStatus.negotiating:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewNegotiation(request),
                icon: const Icon(Icons.forum, size: 16),
                label: const Text('NÃ©gociation', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _respondToNegotiation(request),
                icon: const Icon(Icons.reply, size: 16),
                label: const Text('RÃ©pondre', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      case StandRequestStatus.accepted:
        if (payment == PaymentStatus.pending) {
          return Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () => _payStand(request),
                  icon: const Icon(Icons.payment, size: 16),
                  label: const Text('Payer maintenant', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                ),
              ),
            ],
          );
        }
        return _buildActiveStandActions(request);
        
      case StandRequestStatus.active:
        return _buildActiveStandActions(request);
        
      case StandRequestStatus.completed:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _downloadInvoice(request),
                icon: const Icon(Icons.receipt, size: 16),
                label: const Text('Facture', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.blue,
                  side: const BorderSide(color: Colors.blue),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _rateConvention(request),
                icon: const Icon(Icons.star, size: 16),
                label: const Text('Noter', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.amber,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
          ],
        );
        
      default:
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _viewRequestDetails(request),
                icon: const Icon(Icons.info, size: 16),
                label: const Text('Voir dÃ©tails', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.grey,
                  side: const BorderSide(color: Colors.grey),
                ),
              ),
            ),
          ],
        );
    }
  }

  Widget _buildActiveStandActions(Map<String, dynamic> request) {
    return Row(
      children: [
        Expanded(
          child: OutlinedButton.icon(
            onPressed: () => _viewStandDetails(request),
            icon: const Icon(Icons.info, size: 16),
            label: const Text('DÃ©tails stand', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.blue,
              side: const BorderSide(color: Colors.blue),
            ),
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: ElevatedButton.icon(
            onPressed: () => _manageStand(request),
            icon: const Icon(Icons.settings, size: 16),
            label: const Text('GÃ©rer', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
            ),
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: ElevatedButton.icon(
            onPressed: () => _activateLocationChange(request),
            icon: const Icon(Icons.location_on, size: 16),
            label: const Text('Localiser', style: TextStyle(fontFamily: 'Roboto', fontSize: 12)),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.purple,
              foregroundColor: Colors.white,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildAvailableConventionsTab() {
    if (_availableConventions.isEmpty) {
      return _buildEmptyState(
        'Aucune convention disponible',
        'Les nouvelles conventions apparaÃ®tront ici',
        Icons.event,
      );
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: ListView.builder(
        itemCount: _availableConventions.length,
        itemBuilder: (context, index) {
          return _buildConventionCard(_availableConventions[index]);
        },
      ),
    );
  }

  Widget _buildConventionCard(Map<String, dynamic> convention) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        convention['name'],
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(Icons.location_on, color: Colors.grey, size: 14),
                          const SizedBox(width: 4),
                          Text(
                            convention['city'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                          const SizedBox(width: 12),
                          const Icon(Icons.calendar_today, color: Colors.grey, size: 14),
                          const SizedBox(width: 4),
                          Text(
                            convention['date'],
                            style: const TextStyle(
                              fontFamily: 'Roboto',
                              fontSize: 12,
                              color: Colors.grey,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: convention['standsAvailable'] > 0 ? Colors.green : Colors.red,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    '${convention['standsAvailable']} stands',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            Row(
              children: [
                Expanded(
                  child: _buildConventionStat(
                    Icons.people,
                    '${convention['expectedAttendees']}',
                    'Visiteurs',
                  ),
                ),
                Expanded(
                  child: _buildConventionStat(
                    Icons.euro,
                    'Ã€ partir de ${convention['minStandPrice']}â‚¬',
                    'Stand',
                  ),
                ),
                Expanded(
                  child: _buildConventionStat(
                    Icons.schedule,
                    '${convention['duration']} jours',
                    'DurÃ©e',
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => _viewConventionDetails(convention),
                    icon: const Icon(Icons.info, size: 16),
                    label: const Text(
                      'DÃ©tails',
                      style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                    ),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.blue,
                      side: const BorderSide(color: Colors.blue),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: convention['standsAvailable'] > 0 
                        ? () => _requestStand(convention)
                        : null,
                    icon: const Icon(Icons.store, size: 16),
                    label: const Text(
                      'Demander stand',
                      style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: convention['standsAvailable'] > 0 
                          ? KipikTheme.rouge 
                          : Colors.grey,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConventionStat(IconData icon, String value, String label) {
    return Column(
      children: [
        Icon(icon, color: Colors.grey[600], size: 20),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontFamily: 'PermanentMarker',
            fontSize: 12,
            color: Colors.black87,
          ),
          textAlign: TextAlign.center,
        ),
        Text(
          label,
          style: const TextStyle(
            fontFamily: 'Roboto',
            fontSize: 10,
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildStandManagementTab() {
    final activeStands = _myStandRequests.where(
      (request) => StandRequestStatus.values[request['status']] == StandRequestStatus.active
    ).toList();

    if (activeStands.isEmpty) {
      return _buildEmptyState(
        'Aucun stand actif',
        'Vos stands acceptÃ©s et payÃ©s apparaÃ®tront ici',
        Icons.store,
      );
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24),
      child: ListView.builder(
        itemCount: activeStands.length,
        itemBuilder: (context, index) {
          return _buildActiveStandCard(activeStands[index]);
        },
      ),
    );
  }

  Widget _buildActiveStandCard(Map<String, dynamic> stand) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.green.shade400, Colors.green.shade600],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Icon(
                    Icons.store,
                    color: Colors.white,
                    size: 24,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        stand['conventionName'],
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 16,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Stand ${stand['standNumber']} - ${stand['standSize']}',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 14,
                          color: Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    'ACTIF',
                    style: TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.green.shade600,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      const Icon(Icons.location_on, color: Colors.white70, size: 16),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          stand['address'],
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 12,
                            color: Colors.white70,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(Icons.schedule, color: Colors.white70, size: 16),
                      const SizedBox(width: 8),
                      Text(
                        '${stand['startDate']} - ${stand['endDate']}',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          color: Colors.white70,
                        ),
                      ),
                      const Spacer(),
                      Text(
                        '${stand['price']}â‚¬',
                        style: const TextStyle(
                          fontFamily: 'PermanentMarker',
                          fontSize: 14,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => _viewStandAnalytics(stand),
                    icon: const Icon(Icons.analytics, size: 16),
                    label: const Text(
                      'Analytics',
                      style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                    ),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.white,
                      side: const BorderSide(color: Colors.white),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _manageActiveStand(stand),
                    icon: const Icon(Icons.settings, size: 16),
                    label: const Text(
                      'GÃ©rer',
                      style: TextStyle(fontFamily: 'Roboto', fontSize: 12),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.green.shade600,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Chargement des donnÃ©es...',
            style: TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState(String title, String subtitle, IconData icon) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Container(
          padding: const EdgeInsets.all(32),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.95),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                icon,
                size: 64,
                color: Colors.grey[400],
              ),
              const SizedBox(height: 16),
              Text(
                title,
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 18,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                subtitle,
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 14,
                  color: Colors.grey[500],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper methods pour les couleurs et labels
  Color _getStatusColor(StandRequestStatus status) {
    switch (status) {
      case StandRequestStatus.draft:
        return Colors.grey;
      case StandRequestStatus.pending:
        return Colors.orange;
      case StandRequestStatus.negotiating:
        return Colors.blue;
      case StandRequestStatus.accepted:
        return Colors.green;
      case StandRequestStatus.rejected:
        return Colors.red;
      case StandRequestStatus.cancelled:
        return Colors.grey;
      case StandRequestStatus.active:
        return Colors.green;
      case StandRequestStatus.completed:
        return Colors.indigo;
    }
  }

  String _getStatusLabel(StandRequestStatus status) {
    switch (status) {
      case StandRequestStatus.draft:
        return 'BROUILLON';
      case StandRequestStatus.pending:
        return 'EN ATTENTE';
      case StandRequestStatus.negotiating:
        return 'NÃ‰GOCIATION';
      case StandRequestStatus.accepted:
        return 'ACCEPTÃ‰';
      case StandRequestStatus.rejected:
        return 'REFUSÃ‰';
      case StandRequestStatus.cancelled:
        return 'ANNULÃ‰';
      case StandRequestStatus.active:
        return 'ACTIF';
      case StandRequestStatus.completed:
        return 'TERMINÃ‰';
    }
  }

  Color _getPaymentColor(PaymentStatus status) {
    switch (status) {
      case PaymentStatus.pending:
        return Colors.orange;
      case PaymentStatus.processing:
        return Colors.blue;
      case PaymentStatus.paid:
        return Colors.green;
      case PaymentStatus.failed:
        return Colors.red;
      case PaymentStatus.refunded:
        return Colors.purple;
      case PaymentStatus.cancelled:
        return Colors.grey;
    }
  }

  String _getPaymentLabel(PaymentStatus status) {
    switch (status) {
      case PaymentStatus.pending:
        return 'En attente';
      case PaymentStatus.processing:
        return 'Traitement';
      case PaymentStatus.paid:
        return 'PayÃ©';
      case PaymentStatus.failed:
        return 'Ã‰chec';
      case PaymentStatus.refunded:
        return 'RemboursÃ©';
      case PaymentStatus.cancelled:
        return 'AnnulÃ©';
    }
  }

  // Actions
  void _viewNotifications() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Notifications conventions - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewHistory() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Historique demandes - Ã€ implÃ©menter'),
        backgroundColor: Colors.indigo,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _createNewStandRequest() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Nouvelle demande de stand pour convention ${widget.conventionId}'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewLocationDetails() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('DÃ©tails localisation - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _manageLocationChange() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Gestion changement localisation - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _editRequest(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Ã‰dition demande ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _sendRequest(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Envoi demande ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _cancelRequest(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Annulation demande ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewRequestDetails(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('DÃ©tails demande ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewNegotiation(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('NÃ©gociation ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _respondToNegotiation(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('RÃ©ponse nÃ©gociation ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _payStand(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Paiement stand ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _downloadInvoice(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('TÃ©lÃ©chargement facture ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _rateConvention(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Notation convention ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.amber,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewStandDetails(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('DÃ©tails stand ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _manageStand(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Gestion stand ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _activateLocationChange(Map<String, dynamic> request) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Activation localisation ${request['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewConventionDetails(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('DÃ©tails convention ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _requestStand(Map<String, dynamic> convention) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Demande stand ${convention['name']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _viewStandAnalytics(Map<String, dynamic> stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Analytics stand ${stand['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.indigo,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _manageActiveStand(Map<String, dynamic> stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Gestion stand actif ${stand['conventionName']} - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // DONNÃ‰ES DÃ‰MO/TEST UNIQUEMENT - En production, ces donnÃ©es viendront de Firebase
  List<Map<String, dynamic>> _generateStandRequests() {
    // âœ… Filtre pour ne montrer que les demandes liÃ©es Ã  cette convention
    return [
      {
        'id': '1',
        'conventionId': widget.conventionId,  // âœ… Lien avec la convention
        'conventionName': _convention?['name'] ?? 'Convention Tattoo Paris 2025',
        'city': 'Paris',
        'date': '15-17 Mars 2025',
        'status': StandRequestStatus.negotiating.index,
        'paymentStatus': PaymentStatus.pending.index,
        'standType': 'Premium',
        'standSize': '3x3m',
        'standNumber': 'A12',
        'price': 850,
        'message': 'SpÃ©cialisÃ© en rÃ©alisme, 8 ans d\'expÃ©rience',
        'address': 'Parc des Expositions, Paris',
        'startDate': '15 Mars 2025',
        'endDate': '17 Mars 2025',
      },
      {
        'id': '2',
        'conventionId': 'other-convention',  // âœ… Autre convention (ne sera pas affichÃ© si filtrÃ©)
        'conventionName': 'Lyon Ink Festival',
        'city': 'Lyon',
        'date': '22-24 Mars 2025',
        'status': StandRequestStatus.accepted.index,
        'paymentStatus': PaymentStatus.pending.index,
        'standType': 'Standard',
        'standSize': '2x2m',
        'standNumber': 'B07',
        'price': 450,
        'message': null,
        'address': 'Centre de CongrÃ¨s, Lyon',
        'startDate': '22 Mars 2025',
        'endDate': '24 Mars 2025',
      },
      {
        'id': '3',
        'conventionId': widget.conventionId,  // âœ… Lien avec la convention
        'conventionName': _convention?['name'] ?? 'Convention actuelle',
        'city': 'Paris',
        'date': '15-17 Mars 2025',
        'status': StandRequestStatus.active.index,
        'paymentStatus': PaymentStatus.paid.index,
        'standType': 'Premium',
        'standSize': '3x4m',
        'standNumber': 'C03',
        'price': 750,
        'message': 'Portfolio japonais traditionnel',
        'address': _convention?['location'] ?? 'Parc des Expositions',
        'startDate': '15 Mars 2025',
        'endDate': '17 Mars 2025',
      },
    ];
  }

  List<Map<String, dynamic>> _generateAvailableConventions() {
    return [
      {
        'id': '1',
        'name': 'Bordeaux Ink Meeting',
        'city': 'Bordeaux',
        'date': '12-14 Avril 2025',
        'standsAvailable': 15,
        'expectedAttendees': 2500,
        'minStandPrice': 400,
        'duration': 3,
        'description': 'Convention intimiste dans le Sud-Ouest',
      },
      {
        'id': '2',
        'name': 'Lille Tattoo Expo',
        'city': 'Lille',
        'date': '26-28 Avril 2025',
        'standsAvailable': 8,
        'expectedAttendees': 3000,
        'minStandPrice': 550,
        'duration': 3,
        'description': 'Grande convention du Nord',
      },
      {
        'id': '3',
        'name': 'Strasbourg Convention',
        'city': 'Strasbourg',
        'date': '10-12 Mai 2025',
        'standsAvailable': 0,
        'expectedAttendees': 1800,
        'minStandPrice': 380,
        'duration': 3,
        'description': 'Convention Est de la France',
      },
    ];
  }

  Map<String, dynamic>? _generateActiveLocationChange() {
    // âœ… Retourne uniquement si c'est liÃ© Ã  cette convention
    return {
      'conventionId': widget.conventionId,
      'conventionName': _convention?['name'] ?? 'Convention actuelle',
      'address': _convention?['location'] ?? 'Parc des Expositions',
      'standNumber': 'C03',
      'startDate': '15 Mars 2025',
      'endDate': '17 Mars 2025',
      'isActive': true,
    };
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\conventions\convention_system\convention_stand_optimizer.dart

// lib/pages/shared/conventions/convention_system/convention_stand_optimizer.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../../../models/user_subscription.dart';
import '../../../../models/user_role.dart';
import '../../../../services/features/premium_feature_guard.dart';
import 'dart:math' as math;

// ModÃ¨les pour l'optimiseur
class ConventionSpace {
  final String id;
  final String name;
  final SpaceType type;
  final double x;
  final double y;
  final double width;
  final double height;
  final List<FixedElement> elements;
  final List<StandLinear> linears;
  final SpaceConfiguration configuration;

  ConventionSpace({
    required this.id,
    required this.name,
    required this.type,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    this.elements = const [],
    this.linears = const [],
    required this.configuration,
  });

  double get totalArea => width * height;
  double get fixedElementsArea => elements.fold(0.0, (sum, el) => sum + (el.width * el.height));
  double get usableArea => totalArea - fixedElementsArea;
  double get standsArea => linears.fold(0.0, (sum, linear) => 
    sum + linear.stands.fold(0.0, (standSum, stand) => standSum + stand.area));
  double get optimizationRate => usableArea > 0 ? (standsArea / usableArea) * 100 : 0;
  double get totalRevenue => linears.fold(0.0, (sum, linear) => 
    sum + linear.stands.fold(0.0, (standSum, stand) => standSum + stand.totalPrice));
  int get totalStands => linears.fold(0, (sum, linear) => sum + linear.stands.length);

  ConventionSpace copyWith({
    String? id,
    String? name,
    SpaceType? type,
    double? x,
    double? y,
    double? width,
    double? height,
    List<FixedElement>? elements,
    List<StandLinear>? linears,
    SpaceConfiguration? configuration,
  }) {
    return ConventionSpace(
      id: id ?? this.id,
      name: name ?? this.name,
      type: type ?? this.type,
      x: x ?? this.x,
      y: y ?? this.y,
      width: width ?? this.width,
      height: height ?? this.height,
      elements: elements ?? this.elements,
      linears: linears ?? this.linears,
      configuration: configuration ?? this.configuration,
    );
  }
}

class FixedElement {
  final String id;
  final String name;
  final ElementType type;
  final double x;
  final double y;
  final double width;
  final double height;

  FixedElement({
    required this.id,
    required this.name,
    required this.type,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
  });
}

class StandLinear {
  final String id;
  final String name;
  final LinearType type;
  final double startX;
  final double startY;
  final double endX;
  final double endY;
  final double depth;
  final List<Stand> stands;

  StandLinear({
    required this.id,
    required this.name,
    required this.type,
    required this.startX,
    required this.startY,
    required this.endX,
    required this.endY,
    required this.depth,
    this.stands = const [],
  });

  double get length => math.sqrt(math.pow(endX - startX, 2) + math.pow(endY - startY, 2));

  StandLinear copyWith({
    String? id,
    String? name,
    LinearType? type,
    double? startX,
    double? startY,
    double? endX,
    double? endY,
    double? depth,
    List<Stand>? stands,
  }) {
    return StandLinear(
      id: id ?? this.id,
      name: name ?? this.name,
      type: type ?? this.type,
      startX: startX ?? this.startX,
      startY: startY ?? this.startY,
      endX: endX ?? this.endX,
      endY: endY ?? this.endY,
      depth: depth ?? this.depth,
      stands: stands ?? this.stands,
    );
  }
}

class Stand {
  final String id;
  final String name;
  final double x;
  final double y;
  final double width;
  final double depth;
  final double pricePerSqm;
  final LinearType type;
  final StandStatus status;

  Stand({
    required this.id,
    required this.name,
    required this.x,
    required this.y,
    required this.width,
    required this.depth,
    required this.pricePerSqm,
    required this.type,
    this.status = StandStatus.available,
  });

  double get area => width * depth;
  double get totalPrice => area * pricePerSqm;
}

class SpaceConfiguration {
  final double ceilingHeight;
  final bool accessiblePMR;
  final int emergencyExits;
  final bool allowCustomStandSelection;

  SpaceConfiguration({
    required this.ceilingHeight,
    required this.accessiblePMR,
    required this.emergencyExits,
    required this.allowCustomStandSelection,
  });
}

class GlobalConfiguration {
  final double standDepth;
  final double aisleWidth;
  final double secondaryAisleWidth;
  final double emergencyAisleWidth;
  final double pricePerSqmTattoo;
  final double pricePerSqmMerchant;

  GlobalConfiguration({
    this.standDepth = 3.0,
    this.aisleWidth = 2.0,
    this.secondaryAisleWidth = 1.5,
    this.emergencyAisleWidth = 3.0,
    this.pricePerSqmTattoo = 80.0,
    this.pricePerSqmMerchant = 60.0,
  });

  GlobalConfiguration copyWith({
    double? standDepth,
    double? aisleWidth,
    double? secondaryAisleWidth,
    double? emergencyAisleWidth,
    double? pricePerSqmTattoo,
    double? pricePerSqmMerchant,
  }) {
    return GlobalConfiguration(
      standDepth: standDepth ?? this.standDepth,
      aisleWidth: aisleWidth ?? this.aisleWidth,
      secondaryAisleWidth: secondaryAisleWidth ?? this.secondaryAisleWidth,
      emergencyAisleWidth: emergencyAisleWidth ?? this.emergencyAisleWidth,
      pricePerSqmTattoo: pricePerSqmTattoo ?? this.pricePerSqmTattoo,
      pricePerSqmMerchant: pricePerSqmMerchant ?? this.pricePerSqmMerchant,
    );
  }
}

// Enums
enum SpaceType { room, outdoor }
enum ElementType { entrance, stage, bar, wc, food, storage, pillar }
enum LinearType { tattoo, merchant, mixed }
enum StandStatus { available, reserved, occupied }

// Extensions pour les enums
extension SpaceTypeExtension on SpaceType {
  String get displayName {
    switch (this) {
      case SpaceType.room:
        return 'Salle';
      case SpaceType.outdoor:
        return 'ExtÃ©rieur';
    }
  }

  Color get color {
    switch (this) {
      case SpaceType.room:
        return Colors.grey.shade100;
      case SpaceType.outdoor:
        return Colors.green.shade100;
    }
  }

  Color get borderColor {
    switch (this) {
      case SpaceType.room:
        return Colors.grey.shade600;
      case SpaceType.outdoor:
        return Colors.green.shade600;
    }
  }
}

extension ElementTypeExtension on ElementType {
  String get displayName {
    switch (this) {
      case ElementType.entrance:
        return 'EntrÃ©e';
      case ElementType.stage:
        return 'ScÃ¨ne';
      case ElementType.bar:
        return 'Bar';
      case ElementType.wc:
        return 'WC';
      case ElementType.food:
        return 'Food Truck';
      case ElementType.storage:
        return 'Stockage';
      case ElementType.pillar:
        return 'Pilier';
    }
  }

  Color get color {
    switch (this) {
      case ElementType.entrance:
        return Colors.green;
      case ElementType.stage:
        return Colors.purple;
      case ElementType.bar:
        return Colors.orange;
      case ElementType.wc:
        return Colors.cyan;
      case ElementType.food:
        return Colors.deepOrange;
      case ElementType.storage:
        return Colors.grey;
      case ElementType.pillar:
        return Colors.blueGrey;
    }
  }

  String get icon {
    switch (this) {
      case ElementType.entrance:
        return 'ðŸšª';
      case ElementType.stage:
        return 'ðŸŽ­';
      case ElementType.bar:
        return 'ðŸº';
      case ElementType.wc:
        return 'ðŸš½';
      case ElementType.food:
        return 'ðŸšš';
      case ElementType.storage:
        return 'ðŸ“¦';
      case ElementType.pillar:
        return 'ðŸ›ï¸';
    }
  }

  Size get defaultSize {
    switch (this) {
      case ElementType.entrance:
        return const Size(80, 20);
      case ElementType.stage:
        return const Size(120, 60);
      case ElementType.bar:
        return const Size(60, 40);
      case ElementType.wc:
        return const Size(40, 40);
      case ElementType.food:
        return const Size(80, 40);
      case ElementType.storage:
        return const Size(60, 40);
      case ElementType.pillar:
        return const Size(20, 20);
    }
  }
}

extension LinearTypeExtension on LinearType {
  String get displayName {
    switch (this) {
      case LinearType.tattoo:
        return 'Tatoueurs';
      case LinearType.merchant:
        return 'Marchands';
      case LinearType.mixed:
        return 'Mixte';
    }
  }

  Color get color {
    switch (this) {
      case LinearType.tattoo:
        return Colors.red.shade600;
      case LinearType.merchant:
        return Colors.blue.shade600;
      case LinearType.mixed:
        return Colors.purple.shade600;
    }
  }
}

// Widget principal
class ConventionStandOptimizer extends StatefulWidget {
  final String conventionId;
  final UserRole userType;

  const ConventionStandOptimizer({
    Key? key,
    required this.conventionId,
    required this.userType,
  }) : super(key: key);

  @override
  State<ConventionStandOptimizer> createState() => _ConventionStandOptimizerState();
}

class _ConventionStandOptimizerState extends State<ConventionStandOptimizer> {
  List<ConventionSpace> _spaces = [];
  ConventionSpace? _selectedSpace;
  String _selectedTool = 'select';
  double _zoom = 1.0;
  GlobalConfiguration _globalConfig = GlobalConfiguration();

  final TransformationController _transformationController = TransformationController();

  @override
  void initState() {
    super.initState();
    _loadSampleData();
  }

  void _loadSampleData() {
    // Exemple de donnÃ©es pour la dÃ©mo
    setState(() {
      _spaces = [
        ConventionSpace(
          id: 'space-1',
          name: 'Salle Principale',
          type: SpaceType.room,
          x: 50,
          y: 50,
          width: 400,
          height: 300,
          configuration: SpaceConfiguration(
            ceilingHeight: 4.0,
            accessiblePMR: true,
            emergencyExits: 2,
            allowCustomStandSelection: true,
          ),
        ),
      ];
    });
  }

  // GÃ©nÃ©rer automatiquement les linÃ©aires optimaux
  void _generateOptimalLinears(String spaceId) {
    final spaceIndex = _spaces.indexWhere((s) => s.id == spaceId);
    if (spaceIndex == -1) return;

    final space = _spaces[spaceIndex];
    final newLinears = <StandLinear>[];

    // Zone utilisable aprÃ¨s allÃ©es
    final usableArea = Rect.fromLTWH(
      _globalConfig.aisleWidth,
      _globalConfig.aisleWidth,
      space.width - (_globalConfig.aisleWidth * 2),
      space.height - (_globalConfig.aisleWidth * 2),
    );

    // GÃ©nÃ©rer linÃ©aires horizontaux dos Ã  dos
    double currentY = usableArea.top + _globalConfig.standDepth;
    int linearCount = 0;

    while (currentY + _globalConfig.standDepth + _globalConfig.secondaryAisleWidth < usableArea.bottom) {
      // Ã‰viter les obstacles
      final hasCollision = space.elements.any((element) =>
          currentY < element.y + element.height && currentY + _globalConfig.standDepth > element.y);

      if (!hasCollision) {
        final linearType = LinearType.values[linearCount % LinearType.values.length];

        // LinÃ©aire face
        newLinears.add(StandLinear(
          id: 'linear-${linearCount}',
          name: '${linearType.displayName} ${(linearCount ~/ 2) + 1}',
          type: linearType,
          startX: usableArea.left,
          startY: currentY,
          endX: usableArea.right,
          endY: currentY,
          depth: _globalConfig.standDepth,
        ));

        // LinÃ©aire dos si espace suffisant
        if (currentY + (_globalConfig.standDepth * 2) + _globalConfig.secondaryAisleWidth < usableArea.bottom) {
          newLinears.add(StandLinear(
            id: 'linear-${linearCount + 1}',
            name: '${linearType.displayName} ${(linearCount ~/ 2) + 1} (Dos)',
            type: linearType,
            startX: usableArea.left,
            startY: currentY + _globalConfig.standDepth,
            endX: usableArea.right,
            endY: currentY + _globalConfig.standDepth,
            depth: _globalConfig.standDepth,
          ));
          linearCount += 2;
          currentY += (_globalConfig.standDepth * 2) + _globalConfig.secondaryAisleWidth;
        } else {
          linearCount++;
          currentY += _globalConfig.standDepth + _globalConfig.secondaryAisleWidth;
        }
      } else {
        currentY += _globalConfig.secondaryAisleWidth;
      }
    }

    setState(() {
      _spaces[spaceIndex] = space.copyWith(linears: newLinears);
    });

    HapticFeedback.mediumImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('${newLinears.length} linÃ©aires gÃ©nÃ©rÃ©s automatiquement'),
        backgroundColor: Colors.green,
      ),
    );
  }

  // GÃ©nÃ©rer les stands sur les linÃ©aires
  void _generateStands(String spaceId) {
    final spaceIndex = _spaces.indexWhere((s) => s.id == spaceId);
    if (spaceIndex == -1) return;

    final space = _spaces[spaceIndex];
    final updatedLinears = <StandLinear>[];

    for (final linear in space.linears) {
      if (linear.stands.isNotEmpty) {
        updatedLinears.add(linear);
        continue;
      }

      final stands = _generateStandardCuts(linear);
      updatedLinears.add(linear.copyWith(stands: stands));
    }

    setState(() {
      _spaces[spaceIndex] = space.copyWith(linears: updatedLinears);
    });

    HapticFeedback.mediumImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Stands gÃ©nÃ©rÃ©s sur tous les linÃ©aires'),
        backgroundColor: Colors.green,
      ),
    );
  }

  List<Stand> _generateStandardCuts(StandLinear linear) {
    const minStandWidth = 3.0;
    const maxStandWidth = 8.0;
    final stands = <Stand>[];
    double remainingLength = linear.length;
    double currentX = linear.startX;
    int position = 0;

    while (remainingLength >= minStandWidth) {
      double standWidth;
      if (remainingLength <= maxStandWidth) {
        standWidth = remainingLength;
      } else if (position % 3 == 0) {
        standWidth = math.min(maxStandWidth, remainingLength);
      } else if (position % 3 == 1) {
        standWidth = math.min(6.0, remainingLength);
      } else {
        standWidth = math.min(minStandWidth + 1, remainingLength);
      }

      final pricePerSqm = linear.type == LinearType.tattoo
          ? _globalConfig.pricePerSqmTattoo
          : _globalConfig.pricePerSqmMerchant;

      stands.add(Stand(
        id: '${linear.id}-stand-${position + 1}',
        name: '${linear.type == LinearType.tattoo ? 'T' : 'M'}${position + 1}',
        x: currentX,
        y: linear.startY,
        width: standWidth,
        depth: linear.depth,
        pricePerSqm: pricePerSqm,
        type: linear.type,
      ));

      currentX += standWidth;
      remainingLength -= standWidth;
      position++;
    }

    return stands;
  }

  @override
  Widget build(BuildContext context) {
    // Protection Premium pour organisateurs
    if (widget.userType == UserRole.organisateur) {
      return PremiumFeatureGuard(
        requiredFeature: PremiumFeature.conventions,
        child: _buildScaffold(),
      );
    }

    return _buildScaffold();
  }

  Widget _buildScaffold() {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: CustomAppBarKipik(
        title: 'Optimiseur Stands',
        subtitle: '${_spaces.fold(0, (sum, space) => sum + space.totalStands)} stands â€¢ ${_spaces.fold(0.0, (sum, space) => sum + space.totalRevenue).toStringAsFixed(0)}â‚¬',
        showBackButton: true,
        useProStyle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.save, color: Colors.white),
            onPressed: _saveConfiguration,
          ),
          IconButton(
            icon: const Icon(Icons.download, color: Colors.white),
            onPressed: _exportConfiguration,
          ),
        ],
      ),
      floatingActionButton: const TattooAssistantButton(),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),

          // Contenu principal
          SafeArea(
            child: Row(
              children: [
                // Sidebar Configuration
                _buildConfigurationSidebar(),

                // Canvas Principal
                Expanded(
                  child: _buildMainCanvas(),
                ),

                // Panel espace sÃ©lectionnÃ©
                if (_selectedSpace != null) _buildSpaceConfigPanel(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConfigurationSidebar() {
    return Container(
      width: 320,
      color: Colors.white,
      child: Column(
        children: [
          // Configuration globale
          _buildGlobalConfigSection(),

          // Outils
          _buildToolsSection(),

          // Liste des espaces
          Expanded(
            child: _buildSpacesList(),
          ),

          // Actions
          _buildActionsSection(),
        ],
      ),
    );
  }

  Widget _buildGlobalConfigSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        border: Border(bottom: BorderSide(color: Colors.grey, width: 0.5)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.settings, color: KipikTheme.rouge, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Configuration Globale',
                style: TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),

          // Profondeur stands
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Profondeur stands (m)',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(height: 4),
                    TextFormField(
                      initialValue: _globalConfig.standDepth.toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        border: OutlineInputBorder(),
                        contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                        isDense: true,
                      ),
                      style: const TextStyle(fontSize: 12),
                      onChanged: (value) {
                        final depth = double.tryParse(value);
                        if (depth != null && depth >= 2 && depth <= 6) {
                          setState(() {
                            _globalConfig = _globalConfig.copyWith(standDepth: depth);
                          });
                        }
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'AllÃ©es (m)',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(height: 4),
                    TextFormField(
                      initialValue: _globalConfig.aisleWidth.toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        border: OutlineInputBorder(),
                        contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                        isDense: true,
                      ),
                      style: const TextStyle(fontSize: 12),
                      onChanged: (value) {
                        final width = double.tryParse(value);
                        if (width != null && width >= 1.5 && width <= 4) {
                          setState(() {
                            _globalConfig = _globalConfig.copyWith(aisleWidth: width);
                          });
                        }
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          // Prix
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Prix Tatoueurs â‚¬/mÂ²',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(height: 4),
                    TextFormField(
                      initialValue: _globalConfig.pricePerSqmTattoo.toInt().toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        border: OutlineInputBorder(),
                        contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                        isDense: true,
                      ),
                      style: const TextStyle(fontSize: 12),
                      onChanged: (value) {
                        final price = double.tryParse(value);
                        if (price != null && price >= 50 && price <= 200) {
                          setState(() {
                            _globalConfig = _globalConfig.copyWith(pricePerSqmTattoo: price);
                          });
                        }
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Prix Marchands â‚¬/mÂ²',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(height: 4),
                    TextFormField(
                      initialValue: _globalConfig.pricePerSqmMerchant.toInt().toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        border: OutlineInputBorder(),
                        contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                        isDense: true,
                      ),
                      style: const TextStyle(fontSize: 12),
                      onChanged: (value) {
                        final price = double.tryParse(value);
                        if (price != null && price >= 30 && price <= 150) {
                          setState(() {
                            _globalConfig = _globalConfig.copyWith(pricePerSqmMerchant: price);
                          });
                        }
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildToolsSection() {
    final tools = [
      {'id': 'select', 'icon': Icons.pan_tool, 'label': 'SÃ©lectionner'},
      {'id': 'room', 'icon': Icons.crop_square, 'label': 'Salle'},
      {'id': 'outdoor', 'icon': Icons.circle_outlined, 'label': 'ExtÃ©rieur'},
      {'id': 'element', 'icon': Icons.add_box, 'label': 'Ã‰lÃ©ment'},
    ];

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        border: Border(bottom: BorderSide(color: Colors.grey, width: 0.5)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Outils',
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          GridView.count(
            crossAxisCount: 2,
            shrinkWrap: true,
            mainAxisSpacing: 8,
            crossAxisSpacing: 8,
            childAspectRatio: 1.5,
            children: tools.map((tool) {
              final isSelected = _selectedTool == tool['id'];
              return GestureDetector(
                onTap: () {
                  setState(() {
                    _selectedTool = tool['id'] as String;
                  });
                  HapticFeedback.lightImpact();
                },
                child: Container(
                  decoration: BoxDecoration(
                    color: isSelected ? KipikTheme.rouge.withOpacity(0.1) : Colors.grey.shade100,
                    border: Border.all(
                      color: isSelected ? KipikTheme.rouge : Colors.grey.shade300,
                      width: 2,
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        tool['icon'] as IconData,
                        color: isSelected ? KipikTheme.rouge : Colors.grey.shade600,
                        size: 20,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        tool['label'] as String,
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          fontWeight: FontWeight.w600,
                          color: isSelected ? KipikTheme.rouge : Colors.grey.shade600,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildSpacesList() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Espaces (${_spaces.length})',
                style: const TextStyle(
                  fontFamily: 'PermanentMarker',
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
              GestureDetector(
                onTap: _addNewSpace,
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: KipikTheme.rouge.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Icon(
                    Icons.add,
                    color: KipikTheme.rouge,
                    size: 16,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Expanded(
            child: ListView.builder(
              itemCount: _spaces.length,
              itemBuilder: (context, index) {
                final space = _spaces[index];
                final isSelected = _selectedSpace?.id == space.id;

                return Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: isSelected ? KipikTheme.rouge.withOpacity(0.1) : Colors.grey.shade50,
                    border: Border.all(
                      color: isSelected ? KipikTheme.rouge : Colors.grey.shade300,
                      width: isSelected ? 2 : 1,
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: GestureDetector(
                    onTap: () {
                      setState(() {
                        _selectedSpace = space;
                      });
                      HapticFeedback.lightImpact();
                    },
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Expanded(
                              child: Text(
                                space.name,
                                style: const TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 13,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            ),
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: space.optimizationRate >= 60
                                    ? Colors.green.shade100
                                    : space.optimizationRate >= 40
                                        ? Colors.orange.shade100
                                        : Colors.red.shade100,
                                borderRadius: BorderRadius.circular(4),
                              ),
                              child: Text(
                                '${space.optimizationRate.toStringAsFixed(1)}%',
                                style: TextStyle(
                                  fontFamily: 'Roboto',
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                  color: space.optimizationRate >= 60
                                      ? Colors.green.shade700
                                      : space.optimizationRate >= 40
                                          ? Colors.orange.shade700
                                          : Colors.red.shade700,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Surface: ${space.width.toInt()}Ã—${space.height.toInt()}m (${space.totalArea.toInt()}mÂ²)',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 11,
                            color: Colors.grey,
                          ),
                        ),
                        Text(
                          'LinÃ©aires: ${space.linears.length} â€¢ Stands: ${space.totalStands}',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 11,
                            color: Colors.grey,
                          ),
                        ),
                        Text(
                          'Revenus: ${space.totalRevenue.toStringAsFixed(0)}â‚¬',
                          style: const TextStyle(
                            fontFamily: 'Roboto',
                            fontSize: 11,
                            fontWeight: FontWeight.w600,
                            color: Colors.green,
                          ),
                        ),

                        if (isSelected) ...[
                          const SizedBox(height: 12),
                          Row(
                            children: [
                              Expanded(
                                child: ElevatedButton(
                                  onPressed: () => _generateOptimalLinears(space.id),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: KipikTheme.rouge,
                                    padding: const EdgeInsets.symmetric(vertical: 8),
                                  ),
                                  child: const Text(
                                    'Optimiser',
                                    style: TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 10,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                              const SizedBox(width: 8),
                              Expanded(
                                child: ElevatedButton(
                                  onPressed: () => _generateStands(space.id),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.green,
                                    padding: const EdgeInsets.symmetric(vertical: 8),
                                  ),
                                  child: const Text(
                                    'Stands',
                                    style: TextStyle(
                                      fontFamily: 'Roboto',
                                      fontSize: 10,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionsSection() {
    final totalRevenue = _spaces.fold(0.0, (sum, space) => sum + space.totalRevenue);
    final totalStands = _spaces.fold(0, (sum, space) => sum + space.totalStands);

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        border: Border(top: BorderSide(color: Colors.grey, width: 0.5)),
      ),
      child: Column(
        children: [
          // RÃ©sumÃ©
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.green.shade50,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'Total Revenus:',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    Text(
                      '${totalRevenue.toStringAsFixed(0)}â‚¬',
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'Total Stands:',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    Text(
                      totalStands.toString(),
                      style: const TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'Commission 1%:',
                      style: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    Text(
                      '${(totalRevenue * 0.01).toStringAsFixed(0)}â‚¬',
                      style: TextStyle(
                        fontFamily: 'PermanentMarker',
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: KipikTheme.rouge,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(height: 16),

          // Boutons d'action
          ElevatedButton.icon(
            onPressed: _exportConfiguration,
            icon: const Icon(Icons.download, size: 16),
            label: const Text(
              'Exporter Configuration',
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
              minimumSize: const Size.fromHeight(40),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMainCanvas() {
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Column(
          children: [
            // Toolbar canvas
            Container(
              height: 50,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              decoration: const BoxDecoration(
                color: Colors.grey,
                border: Border(bottom: BorderSide(color: Colors.grey, width: 0.5)),
              ),
              child: Row(
                children: [
                  // Zoom controls
                  IconButton(
                    onPressed: () {
                      setState(() {
                        _zoom = math.max(0.5, _zoom - 0.1);
                      });
                    },
                    icon: const Icon(Icons.zoom_out, size: 20),
                  ),
                  Text(
                    '${(_zoom * 100).toInt()}%',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      setState(() {
                        _zoom = math.min(2.0, _zoom + 0.1);
                      });
                    },
                    icon: const Icon(Icons.zoom_in, size: 20),
                  ),

                  const SizedBox(width: 16),
                  const VerticalDivider(),
                  const SizedBox(width: 16),

                  // Infos
                  Text(
                    '${_spaces.length} espaces â€¢ ${_spaces.fold(0, (sum, space) => sum + space.totalStands)} stands',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 12,
                      color: Colors.grey,
                    ),
                  ),

                  const Spacer(),

                  // Outil actuel
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      'Outil: $_selectedTool',
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 10,
                        color: Colors.grey,
                      ),
                    ),
                  ),
                ],
              ),
            ),

            // Canvas avec grille et espaces
            Expanded(
              child: InteractiveViewer(
                transformationController: _transformationController,
                minScale: 0.5,
                maxScale: 3.0,
                child: Container(
                  width: double.infinity,
                  height: double.infinity,
                  color: Colors.grey.shade100,
                  child: CustomPaint(
                    painter: ConventionCanvasPainter(
                      spaces: _spaces,
                      selectedSpace: _selectedSpace,
                      zoom: _zoom,
                    ),
                    child: const SizedBox.expand(),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSpaceConfigPanel() {
    if (_selectedSpace == null) return const SizedBox.shrink();

    return Container(
      width: 300,
      color: Colors.white,
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  _selectedSpace!.name,
                  style: const TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              IconButton(
                onPressed: () {
                  setState(() {
                    _selectedSpace = null;
                  });
                },
                icon: const Icon(Icons.close, size: 20),
              ),
            ],
          ),

          const SizedBox(height: 16),

          // Statistiques
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.grey.shade50,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Statistiques d\'optimisation',
                  style: TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 12),
                _buildStatRow('Surface totale:', '${_selectedSpace!.totalArea.toInt()}mÂ²'),
                _buildStatRow('Surface stands:', '${_selectedSpace!.standsArea.toStringAsFixed(1)}mÂ²'),
                _buildStatRow('Optimisation:', '${_selectedSpace!.optimizationRate.toStringAsFixed(1)}%'),
                _buildStatRow('Revenus totaux:', '${_selectedSpace!.totalRevenue.toStringAsFixed(0)}â‚¬'),
                _buildStatRow('â‚¬/mÂ² espace:', '${(_selectedSpace!.totalRevenue / _selectedSpace!.totalArea).toStringAsFixed(0)}â‚¬'),
              ],
            ),
          ),

          const SizedBox(height: 16),

          // Configuration
          const Text(
            'Configuration',
            style: TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),

          CheckboxListTile(
            title: const Text(
              'Tatoueurs choisissent leur emplacement',
              style: TextStyle(fontSize: 12),
            ),
            value: _selectedSpace!.configuration.allowCustomStandSelection,
            onChanged: (value) {
              if (value != null) {
                _updateSpaceConfiguration(
                  _selectedSpace!.configuration.copyWith(allowCustomStandSelection: value),
                );
              }
            },
            dense: true,
          ),

          const SizedBox(height: 16),

          // LinÃ©aires
          Text(
            'LinÃ©aires (${_selectedSpace!.linears.length})',
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),

          Expanded(
            child: ListView.builder(
              itemCount: _selectedSpace!.linears.length,
              itemBuilder: (context, index) {
                final linear = _selectedSpace!.linears[index];
                return Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: linear.type.color.withOpacity(0.1),
                    border: Border.all(color: linear.type.color.withOpacity(0.3)),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        linear.name,
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${linear.length.toStringAsFixed(1)}m Ã— ${linear.depth.toStringAsFixed(1)}m',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: Colors.grey,
                        ),
                      ),
                      Text(
                        '${linear.stands.length} stands',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: Colors.grey,
                        ),
                      ),
                      Text(
                        '${linear.stands.fold(0.0, (sum, stand) => sum + stand.totalPrice).toStringAsFixed(0)}â‚¬',
                        style: const TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          fontWeight: FontWeight.w600,
                          color: Colors.green,
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  void _updateSpaceConfiguration(SpaceConfiguration newConfig) {
    if (_selectedSpace == null) return;

    final spaceIndex = _spaces.indexWhere((s) => s.id == _selectedSpace!.id);
    if (spaceIndex == -1) return;

    setState(() {
      _spaces[spaceIndex] = _selectedSpace!.copyWith(configuration: newConfig);
      _selectedSpace = _spaces[spaceIndex];
    });
  }

  void _addNewSpace() {
    final newSpace = ConventionSpace(
      id: 'space-${DateTime.now().millisecondsSinceEpoch}',
      name: 'Nouvel Espace ${_spaces.length + 1}',
      type: SpaceType.room,
      x: 50.0 + (_spaces.length * 50),
      y: 50.0 + (_spaces.length * 50),
      width: 400,
      height: 300,
      configuration: SpaceConfiguration(
        ceilingHeight: 4.0,
        accessiblePMR: true,
        emergencyExits: 2,
        allowCustomStandSelection: true,
      ),
    );

    setState(() {
      _spaces.add(newSpace);
      _selectedSpace = newSpace;
    });

    HapticFeedback.mediumImpact();
  }

  void _saveConfiguration() {
    // TODO: ImplÃ©menter la sauvegarde Firebase
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Configuration sauvegardÃ©e'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _exportConfiguration() {
    // TODO: ImplÃ©menter l'export JSON/PDF
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Configuration exportÃ©e'),
        backgroundColor: Colors.blue,
      ),
    );
  }
}

// Custom Painter pour le canvas
class ConventionCanvasPainter extends CustomPainter {
  final List<ConventionSpace> spaces;
  final ConventionSpace? selectedSpace;
  final double zoom;

  ConventionCanvasPainter({
    required this.spaces,
    this.selectedSpace,
    required this.zoom,
  });

  @override
  void paint(Canvas canvas, Size size) {
    // Grille
    _drawGrid(canvas, size);

    // Espaces
    for (final space in spaces) {
      _drawSpace(canvas, space, space.id == selectedSpace?.id);
    }
  }

  void _drawGrid(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.grey.shade300
      ..strokeWidth = 0.5;

    const gridSize = 20.0;

    // Lignes verticales
    for (double x = 0; x < size.width; x += gridSize) {
      canvas.drawLine(
        Offset(x, 0),
        Offset(x, size.height),
        paint,
      );
    }

    // Lignes horizontales
    for (double y = 0; y < size.height; y += gridSize) {
      canvas.drawLine(
        Offset(0, y),
        Offset(size.width, y),
        paint,
      );
    }
  }

  void _drawSpace(Canvas canvas, ConventionSpace space, bool isSelected) {
    // Fond de l'espace
    final rect = Rect.fromLTWH(space.x, space.y, space.width, space.height);
    final paint = Paint()
      ..color = space.type.color
      ..style = PaintingStyle.fill;

    final borderPaint = Paint()
      ..color = isSelected ? Colors.blue : space.type.borderColor
      ..style = PaintingStyle.stroke
      ..strokeWidth = isSelected ? 3 : 2;

    if (space.type == SpaceType.outdoor) {
      canvas.drawOval(rect, paint);
      canvas.drawOval(rect, borderPaint);
    } else {
      canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(8)), paint);
      canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(8)), borderPaint);
    }

    // Ã‰lÃ©ments fixes
    for (final element in space.elements) {
      _drawElement(canvas, space, element);
    }

    // LinÃ©aires et stands
    for (final linear in space.linears) {
      _drawLinear(canvas, space, linear);
    }

    // Nom de l'espace
    _drawText(
      canvas,
      space.name,
      Offset(space.x + 8, space.y + 8),
      const TextStyle(
        fontFamily: 'PermanentMarker',
        fontSize: 12,
        fontWeight: FontWeight.bold,
        color: Colors.black87,
      ),
    );

    // Optimisation %
    _drawText(
      canvas,
      '${space.optimizationRate.toStringAsFixed(1)}%',
      Offset(space.x + space.width - 50, space.y + 8),
      TextStyle(
        fontFamily: 'Roboto',
        fontSize: 10,
        fontWeight: FontWeight.bold,
        color: space.optimizationRate >= 60 ? Colors.green : Colors.orange,
      ),
    );
  }

  void _drawElement(Canvas canvas, ConventionSpace space, FixedElement element) {
    final rect = Rect.fromLTWH(
      space.x + element.x,
      space.y + element.y,
      element.width,
      element.height,
    );

    final paint = Paint()
      ..color = element.type.color
      ..style = PaintingStyle.fill;

    final borderPaint = Paint()
      ..color = element.type.color.withOpacity(0.8)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 1;

    canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(4)), paint);
    canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(4)), borderPaint);

    // Nom de l'Ã©lÃ©ment
    _drawText(
      canvas,
      element.name,
      Offset(rect.center.dx - 20, rect.center.dy - 6),
      const TextStyle(
        fontFamily: 'Roboto',
        fontSize: 8,
        fontWeight: FontWeight.bold,
        color: Colors.white,
      ),
    );
  }

  void _drawLinear(Canvas canvas, ConventionSpace space, StandLinear linear) {
    // Ligne du linÃ©aire
    final start = Offset(space.x + linear.startX, space.y + linear.startY);
    final end = Offset(space.x + linear.endX, space.y + linear.endY);

    final paint = Paint()
      ..color = linear.type.color.withOpacity(0.3)
      ..strokeWidth = linear.depth;

    canvas.drawLine(start, end, paint);

    // Stands sur le linÃ©aire
    for (final stand in linear.stands) {
      _drawStand(canvas, space, stand);
    }
  }

  void _drawStand(Canvas canvas, ConventionSpace space, Stand stand) {
    final rect = Rect.fromLTWH(
      space.x + stand.x,
      space.y + stand.y,
      stand.width,
      stand.depth,
    );

    final paint = Paint()
      ..color = stand.type == LinearType.tattoo ? Colors.red.shade50 : Colors.blue.shade50
      ..style = PaintingStyle.fill;

    final borderPaint = Paint()
      ..color = stand.type == LinearType.tattoo ? Colors.red : Colors.blue
      ..style = PaintingStyle.stroke
      ..strokeWidth = 1;

    canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(2)), paint);
    canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(2)), borderPaint);

    // Nom + Prix du stand
    _drawText(
      canvas,
      stand.name,
      Offset(rect.center.dx - 10, rect.center.dy - 8),
      const TextStyle(
        fontFamily: 'Roboto',
        fontSize: 8,
        fontWeight: FontWeight.bold,
        color: Colors.black87,
      ),
    );

    _drawText(
      canvas,
      '${stand.totalPrice.toInt()}â‚¬',
      Offset(rect.center.dx - 10, rect.center.dy + 2),
      const TextStyle(
        fontFamily: 'Roboto',
        fontSize: 7,
        fontWeight: FontWeight.w600,
        color: Colors.green,
      ),
    );
  }

  void _drawText(Canvas canvas, String text, Offset position, TextStyle style) {
    final textPainter = TextPainter(
      text: TextSpan(text: text, style: style),
      textDirection: TextDirection.ltr,
    );
    textPainter.layout();
    textPainter.paint(canvas, position);
  }

  @override
  bool shouldRepaint(ConventionCanvasPainter oldDelegate) {
    return oldDelegate.spaces != spaces ||
           oldDelegate.selectedSpace != selectedSpace ||
           oldDelegate.zoom != zoom;
  }
}

// Extension pour SpaceConfiguration
extension SpaceConfigurationExtension on SpaceConfiguration {
  SpaceConfiguration copyWith({
    double? ceilingHeight,
    bool? accessiblePMR,
    int? emergencyExits,
    bool? allowCustomStandSelection,
  }) {
    return SpaceConfiguration(
      ceilingHeight: ceilingHeight ?? this.ceilingHeight,
      accessiblePMR: accessiblePMR ?? this.accessiblePMR,
      emergencyExits: emergencyExits ?? this.emergencyExits,
      allowCustomStandSelection: allowCustomStandSelection ?? this.allowCustomStandSelection,
    );
  }
}




//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\conventions\convention_system\interactive_convention_map.dart

// lib/pages/shared/conventions/convention_system/interactive_convention_map.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../theme/kipik_theme.dart';
import '../../../../widgets/common/app_bars/custom_app_bar_kipik.dart';
import '../../../../widgets/common/drawers/custom_drawer_kipik.dart';
import '../../../../widgets/common/buttons/tattoo_assistant_button.dart';
import '../../../../models/user_subscription.dart';
import '../../../../models/user_role.dart';

import '../../../../enums/convention_enums.dart';
import '../../../../enums/tattoo_style.dart';

class StandInfo {
  final String id;
  final double x;
  final double y;
  final double width;
  final double height;
  final double pricePerSqm;
  final StandStatus status;
  final String? tattooerId;
  final String? tattouerName;
  final List<TattooStyle> styles;
  final String? profileImage;
  final double rating;
  final List<String> availableSlots;
  final int waitingTime;
  final bool isHighTraffic;
  
  StandInfo({
    required this.id,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    required this.pricePerSqm,
    required this.status,
    this.tattooerId,
    this.tattouerName,
    this.styles = const [],
    this.profileImage,
    this.rating = 0.0,
    this.availableSlots = const [],
    this.waitingTime = 0,
    this.isHighTraffic = false,
  });
  
  double get totalPrice => width * height * pricePerSqm;
  double get area => width * height;
  bool get isAvailable => status == StandStatus.available;
  bool get hasSlots => availableSlots.isNotEmpty;
}

class InteractiveConventionMap extends StatefulWidget {
  final String conventionId;
  final MapMode initialMode;
  final UserRole userType;
  final String? currentUserId;
  
  const InteractiveConventionMap({
    Key? key,
    required this.conventionId,
    required this.initialMode,
    required this.userType,
    this.currentUserId,
  }) : super(key: key);

  @override
  State<InteractiveConventionMap> createState() => _InteractiveConventionMapState();
}

class _InteractiveConventionMapState extends State<InteractiveConventionMap> 
    with TickerProviderStateMixin {
  
  late AnimationController _zoomController;
  late AnimationController _searchAnimController;
  late Animation<double> _zoomAnimation;
  late Animation<double> _searchAnimation;
  
  MapMode _currentMode = MapMode.visitor;
  double _mapScale = 1.0;
  Offset _mapOffset = Offset.zero;
  
  // Recherche et filtres
  final TextEditingController _searchTextController = TextEditingController();
  List<TattooStyle> _selectedStyles = [];
  bool _showOnlyAvailable = false;
  String _searchQuery = '';
  
  // Stands et donnÃ©es
  List<StandInfo> _allStands = [];
  List<StandInfo> _filteredStands = [];
  StandInfo? _selectedStand;
  List<String> _favoriteStands = [];
  
  // Mode tatoueur
  StandInfo? _myStand;
  List<StandInfo> _nearbyStands = [];
  
  // Navigation
  bool _showOptimalPath = false;
  List<String> _pathStands = [];

  @override
  void initState() {
    super.initState();
    _currentMode = widget.initialMode;
    _initializeAnimations();
    _loadConventionData();
    _setupSearchListener();
  }

  @override
  void dispose() {
    _zoomController.dispose();
    _searchAnimController.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _zoomController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _searchAnimController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _zoomAnimation = Tween<double>(begin: 1.0, end: 1.5).animate(
      CurvedAnimation(parent: _zoomController, curve: Curves.easeInOut),
    );
    
    _searchAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _searchAnimController, curve: Curves.easeOutCubic),
    );
  }

  void _setupSearchListener() {
    _searchTextController.addListener(() {
      setState(() {
        _searchQuery = _searchTextController.text.toLowerCase();
      });
      _filterStands();
    });
  }

  void _loadConventionData() {
    // Simulation des donnÃ©es de convention
    _allStands = _generateSampleStands();
    _filteredStands = List.from(_allStands);
    
    if (_currentMode == MapMode.tattooer && widget.currentUserId != null) {
      _myStand = _allStands.firstWhere(
        (stand) => stand.tattooerId == widget.currentUserId,
        orElse: () => _allStands.first,
      );
      _findNearbyStands();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      endDrawer: const CustomDrawerKipik(),
      appBar: _buildAppBar(),
      floatingActionButton: _buildFloatingActions(),
      body: Stack(
        children: [
          // Background
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          // Contenu principal
          SafeArea(
            child: Column(
              children: [
                _buildModeSelector(),
                _buildSearchAndFilters(),
                Expanded(
                  child: _buildInteractiveMap(),
                ),
              ],
            ),
          ),
          
          // Overlays
          if (_selectedStand != null) _buildStandDetails(),
          if (_showOptimalPath) _buildPathOverlay(),
        ],
      ),
    );
  }

  CustomAppBarKipik _buildAppBar() {
    String title;
    String subtitle;
    
    switch (_currentMode) {
      case MapMode.organizer:
        title = 'Gestion Convention';
        subtitle = 'Vue organisateur';
        break;
      case MapMode.tattooer:
        title = 'Mon Emplacement';
        subtitle = 'Vue tatoueur';
        break;
      case MapMode.visitor:
        title = 'Plan Interactif';
        subtitle = 'Explorez la convention';
        break;
    }
    
    return CustomAppBarKipik(
      title: title,
      subtitle: subtitle,
      showBackButton: true,
      useProStyle: _currentMode != MapMode.visitor,
      actions: [
        IconButton(
          icon: const Icon(Icons.my_location, color: Colors.white),
          onPressed: _centerOnUserLocation,
        ),
        if (_currentMode == MapMode.visitor)
          IconButton(
            icon: Icon(
              _favoriteStands.isNotEmpty ? Icons.favorite : Icons.favorite_border,
              color: Colors.white,
            ),
            onPressed: _showFavorites,
          ),
      ],
    );
  }

  Widget _buildModeSelector() {
    if (_currentMode == MapMode.organizer && widget.userType != UserRole.admin) {
      return const SizedBox.shrink();
    }
    
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          if (widget.userType == UserRole.admin)
            _buildModeButton('Organisateur', MapMode.organizer, Icons.admin_panel_settings),
          if (widget.userType == UserRole.tatoueur)
            _buildModeButton('Mon Stand', MapMode.tattooer, Icons.store),
          _buildModeButton('Visiteur', MapMode.visitor, Icons.explore),
        ],
      ),
    );
  }

  Widget _buildModeButton(String label, MapMode mode, IconData icon) {
    final isSelected = _currentMode == mode;
    
    return Expanded(
      child: GestureDetector(
        onTap: () => _switchMode(mode),
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
          decoration: BoxDecoration(
            color: isSelected ? KipikTheme.rouge : Colors.transparent,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                icon,
                size: 16,
                color: isSelected ? Colors.white : Colors.grey[600],
              ),
              const SizedBox(width: 4),
              Text(
                label,
                style: TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: isSelected ? Colors.white : Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSearchAndFilters() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Column(
        children: [
          // Barre de recherche
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.95),
              borderRadius: BorderRadius.circular(25),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              children: [
                Icon(Icons.search, color: Colors.grey[600], size: 20),
                const SizedBox(width: 12),
                Expanded(
                  child: TextField(
                    controller: _searchTextController,
                    decoration: InputDecoration(
                      hintText: _getSearchHint(),
                      border: InputBorder.none,
                      hintStyle: TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 14,
                        color: Colors.grey[500],
                      ),
                    ),
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 14,
                    ),
                  ),
                ),
                if (_searchQuery.isNotEmpty)
                  GestureDetector(
                    onTap: _clearSearch,
                    child: Icon(Icons.clear, color: Colors.grey[600], size: 20),
                  ),
              ],
            ),
          ),
          
          const SizedBox(height: 12),
          
          // Filtres
          if (_currentMode == MapMode.visitor) _buildFilters(),
          if (_currentMode == MapMode.tattooer) _buildTattouerControls(),
          if (_currentMode == MapMode.organizer) _buildOrganizerControls(),
        ],
      ),
    );
  }

  Widget _buildFilters() {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(
        children: [
          _buildFilterChip(
            'Disponible',
            _showOnlyAvailable,
            Icons.check_circle,
            () => setState(() => _showOnlyAvailable = !_showOnlyAvailable),
          ),
          const SizedBox(width: 8),
          ..._buildStyleFilters(),
          const SizedBox(width: 8),
          _buildFilterChip(
            'Favoris',
            _favoriteStands.isNotEmpty,
            Icons.favorite,
            _showFavorites,
            color: Colors.pink,
          ),
        ],
      ),
    );
  }

  Widget _buildTattouerControls() {
    return Row(
      children: [
        Expanded(
          child: _buildControlButton(
            'Mon Stand',
            Icons.my_location,
            () => _focusOnMyStand(),
            KipikTheme.rouge,
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: _buildControlButton(
            'Concurrence',
            Icons.groups,
            () => _showCompetitionAnalysis(),
            Colors.orange,
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: _buildControlButton(
            'Analytics',
            Icons.analytics,
            () => _showMyAnalytics(),
            Colors.blue,
          ),
        ),
      ],
    );
  }

  Widget _buildOrganizerControls() {
    return Row(
      children: [
        Expanded(
          child: _buildControlButton(
            'Vue Globale',
            Icons.view_module,
            () => _showGlobalView(),
            KipikTheme.rouge,
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: _buildControlButton(
            'Revenus',
            Icons.euro,
            () => _showRevenueAnalytics(),
            Colors.green,
          ),
        ),
        const SizedBox(width: 8),
        Expanded(
          child: _buildControlButton(
            'Optimiser',
            Icons.tune,
            () => _optimizeLayout(),
            Colors.purple,
          ),
        ),
      ],
    );
  }

  Widget _buildInteractiveMap() {
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(20),
        child: GestureDetector(
          onTap: () => setState(() => _selectedStand = null),
          onScaleUpdate: _handleMapGesture,
          child: Stack(
            children: [
              // Plan de la convention
              Transform(
                transform: Matrix4.identity()
                  ..scale(_mapScale)
                  ..translate(_mapOffset.dx, _mapOffset.dy),
                child: _buildMapLayout(),
              ),
              
              // LÃ©gende
              Positioned(
                top: 16,
                right: 16,
                child: _buildMapLegend(),
              ),
              
              // Zoom controls
              Positioned(
                bottom: 16,
                right: 16,
                child: _buildZoomControls(),
              ),
              
              // Path indicator
              if (_showOptimalPath)
                Positioned(
                  bottom: 16,
                  left: 16,
                  child: _buildPathIndicator(),
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMapLayout() {
    return Container(
      width: 400,
      height: 300,
      color: Colors.grey[100],
      child: Stack(
        children: [
          // Structure de base
          _buildRoomStructure(),
          
          // Stands
          ..._filteredStands.map((stand) => _buildStandWidget(stand)),
          
          // Ã‰lÃ©ments fixes
          _buildFixedElements(),
          
          // Indicateurs spÃ©ciaux
          if (_currentMode == MapMode.tattooer && _myStand != null)
            _buildMyStandIndicator(),
          
          // Chemin optimal
          if (_showOptimalPath) _buildOptimalPath(),
        ],
      ),
    );
  }

  Widget _buildStandWidget(StandInfo stand) {
    final isSelected = _selectedStand?.id == stand.id;
    final isHighlighted = _isStandHighlighted(stand);
    final isFavorite = _favoriteStands.contains(stand.id);
    
    return Positioned(
      left: stand.x,
      top: stand.y,
      child: GestureDetector(
        onTap: () => _selectStand(stand),
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          width: stand.width * 10, // Scale factor
          height: stand.height * 10,
          decoration: BoxDecoration(
            color: _getStandColor(stand),
            border: Border.all(
              color: isSelected ? KipikTheme.rouge : Colors.grey[400]!,
              width: isSelected ? 3 : 1,
            ),
            borderRadius: BorderRadius.circular(8),
            boxShadow: isSelected || isHighlighted ? [
              BoxShadow(
                color: KipikTheme.rouge.withOpacity(0.3),
                blurRadius: 8,
                spreadRadius: 2,
              ),
            ] : null,
          ),
          child: Stack(
            children: [
              // ID du stand
              Positioned(
                top: 2,
                left: 4,
                child: Text(
                  stand.id,
                  style: const TextStyle(
                    fontFamily: 'Roboto',
                    fontSize: 8,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
              ),
              
              // Avatar tatoueur
              if (stand.tattouerName != null)
                Positioned(
                  bottom: 4,
                  right: 4,
                  child: CircleAvatar(
                    radius: 8,
                    backgroundColor: KipikTheme.rouge.withOpacity(0.2),
                    child: const Icon(Icons.person, size: 10, color: Colors.black54),
                  ),
                ),
              
              // Indicateur favori
              if (isFavorite)
                const Positioned(
                  top: 2,
                  right: 2,
                  child: Icon(Icons.favorite, size: 8, color: Colors.pink),
                ),
              
              // Indicateur disponibilitÃ©
              if (stand.hasSlots)
                Positioned(
                  bottom: 2,
                  left: 2,
                  child: Container(
                    width: 6,
                    height: 6,
                    decoration: const BoxDecoration(
                      color: Colors.green,
                      shape: BoxShape.circle,
                    ),
                  ),
                ),
              
              // Temps d'attente
              if (stand.waitingTime > 0)
                Positioned(
                  bottom: 2,
                  left: 12,
                  child: Text(
                    '${stand.waitingTime}min',
                    style: const TextStyle(
                      fontFamily: 'Roboto',
                      fontSize: 6,
                      color: Colors.orange,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStandDetails() {
    if (_selectedStand == null) return const SizedBox.shrink();
    
    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: Container(
        margin: const EdgeInsets.all(16),
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 16,
              offset: const Offset(0, -4),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildStandDetailHeader(),
            const SizedBox(height: 16),
            _buildStandDetailContent(),
            const SizedBox(height: 16),
            _buildStandDetailActions(),
          ],
        ),
      ),
    );
  }

  Widget _buildStandDetailHeader() {
    final stand = _selectedStand!;
    
    return Row(
      children: [
        // Avatar
        CircleAvatar(
          radius: 25,
          backgroundColor: KipikTheme.rouge.withOpacity(0.2),
          child: const Icon(Icons.person, color: Colors.black54, size: 30),
        ),
        
        const SizedBox(width: 12),
        
        // Infos principales
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Text(
                    stand.tattouerName ?? 'Stand ${stand.id}',
                    style: const TextStyle(
                      fontFamily: 'PermanentMarker',
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                  ),
                  const SizedBox(width: 8),
                  if (stand.rating > 0) ...[
                    Icon(Icons.star, size: 16, color: Colors.amber[600]),
                    Text(
                      stand.rating.toStringAsFixed(1),
                      style: const TextStyle(
                        fontFamily: 'Roboto',
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ],
              ),
              const SizedBox(height: 4),
              Text(
                'Stand ${stand.id} â€¢ ${stand.area.toInt()}mÂ² â€¢ ${stand.totalPrice.toInt()}â‚¬',
                style: const TextStyle(
                  fontFamily: 'Roboto',
                  fontSize: 12,
                  color: Colors.grey,
                ),
              ),
              if (stand.styles.isNotEmpty) ...[
                const SizedBox(height: 4),
                Wrap(
                  spacing: 4,
                  children: stand.styles.take(3).map((style) => 
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: KipikTheme.rouge.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Text(
                        style.displayName,
                        style: TextStyle(
                          fontFamily: 'Roboto',
                          fontSize: 10,
                          color: KipikTheme.rouge,
                        ),
                      ),
                    ),
                  ).toList(),
                ),
              ],
            ],
          ),
        ),
        
        // Actions rapides
        Column(
          children: [
            GestureDetector(
              onTap: () => _toggleFavorite(stand.id),
              child: Icon(
                _favoriteStands.contains(stand.id) ? Icons.favorite : Icons.favorite_border,
                color: _favoriteStands.contains(stand.id) ? Colors.pink : Colors.grey,
                size: 24,
              ),
            ),
            const SizedBox(height: 8),
            GestureDetector(
              onTap: () => _shareStand(stand),
              child: const Icon(Icons.share, color: Colors.blue, size: 24),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildStandDetailContent() {
    final stand = _selectedStand!;
    
    return Column(
      children: [
        // Statut et disponibilitÃ©
        Row(
          children: [
            Expanded(
              child:               _buildDetailCard(
                'Statut',
                stand.status.displayName,
                stand.status.statusColor,
                Icons.circle,
              ),
            ),
            const SizedBox(width: 8),
            if (stand.waitingTime > 0)
              Expanded(
                child: _buildDetailCard(
                  'Attente',
                  '${stand.waitingTime} min',
                  Colors.orange,
                  Icons.timer,
                ),
              ),
            if (stand.hasSlots)
              Expanded(
                child: _buildDetailCard(
                  'CrÃ©neaux',
                  '${stand.availableSlots.length} libres',
                  Colors.green,
                  Icons.schedule,
                ),
              ),
          ],
        ),
        
        // Navigation
        if (_currentMode == MapMode.visitor) ...[
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: _buildDetailCard(
                  'Distance',
                  _calculateDistance(stand),
                  Colors.blue,
                  Icons.directions_walk,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildDetailCard(
                  'Flux',
                  stand.isHighTraffic ? 'Ã‰levÃ©' : 'Normal',
                  stand.isHighTraffic ? Colors.red : Colors.green,
                  Icons.people,
                ),
              ),
            ],
          ),
        ],
      ],
    );
  }

  Widget _buildStandDetailActions() {
    final stand = _selectedStand!;
    
    return Row(
      children: [
        // Action principale selon le mode
        Expanded(
          child: ElevatedButton.icon(
            onPressed: () => _primaryAction(stand),
            icon: Icon(_getPrimaryActionIcon(), size: 16),
            label: Text(
              _getPrimaryActionLabel(),
              style: const TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: KipikTheme.rouge,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ),
        
        const SizedBox(width: 8),
        
        // Action secondaire
        Expanded(
          child: OutlinedButton.icon(
            onPressed: () => _secondaryAction(stand),
            icon: Icon(_getSecondaryActionIcon(), size: 16),
            label: Text(
              _getSecondaryActionLabel(),
              style: const TextStyle(fontFamily: 'Roboto', fontSize: 12),
            ),
            style: OutlinedButton.styleFrom(
              foregroundColor: Colors.blue,
              side: const BorderSide(color: Colors.blue),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildFloatingActions() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        // Action contextuelle selon le mode
        if (_currentMode == MapMode.visitor && _favoriteStands.isNotEmpty)
          FloatingActionButton.extended(
            heroTag: "optimal_path",
            onPressed: _generateOptimalPath,
            backgroundColor: Colors.purple,
            icon: const Icon(Icons.route, color: Colors.white),
            label: const Text(
              'Parcours Optimal',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
        
        if (_currentMode == MapMode.tattooer)
          FloatingActionButton.extended(
            heroTag: "my_analytics",
            onPressed: _showMyAnalytics,
            backgroundColor: Colors.blue,
            icon: const Icon(Icons.analytics, color: Colors.white),
            label: const Text(
              'Mes Stats',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
        
        if (_currentMode == MapMode.organizer)
          FloatingActionButton.extended(
            heroTag: "optimize",
            onPressed: _optimizeLayout,
            backgroundColor: Colors.green,
            icon: const Icon(Icons.auto_awesome, color: Colors.white),
            label: const Text(
              'Optimiser',
              style: TextStyle(color: Colors.white, fontFamily: 'Roboto'),
            ),
          ),
        
        const SizedBox(height: 16),
        const TattooAssistantButton(),
      ],
    );
  }

  // Helper methods pour les widgets
  Widget _buildFilterChip(String label, bool isSelected, IconData icon, VoidCallback onTap, {Color? color}) {
    return GestureDetector(
      onTap: onTap,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isSelected ? (color ?? KipikTheme.rouge) : Colors.white,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected ? (color ?? KipikTheme.rouge) : Colors.grey[300]!,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 14,
              color: isSelected ? Colors.white : Colors.grey[600],
            ),
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: isSelected ? Colors.white : Colors.grey[600],
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildControlButton(String label, IconData icon, VoidCallback onTap, Color color) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: color.withOpacity(0.3)),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                fontFamily: 'Roboto',
                fontSize: 12,
                color: color,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailCard(String label, String value, Color color, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, size: 16, color: color),
          const SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'PermanentMarker',
              fontSize: 12,
              color: color,
            ),
          ),
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 10,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRoomStructure() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey[400]!, width: 2),
      ),
      child: Stack(
        children: [
          // EntrÃ©e
          Positioned(
            top: 0,
            left: 150,
            child: Container(
              width: 100,
              height: 10,
              color: Colors.green[200],
              child: const Center(
                child: Text(
                  'ENTRÃ‰E',
                  style: TextStyle(fontSize: 8, fontWeight: FontWeight.bold),
                ),
              ),
            ),
          ),
          
          // ScÃ¨ne
          Positioned(
            bottom: 20,
            left: 150,
            child: Container(
              width: 100,
              height: 40,
              color: Colors.purple[200],
              child: const Center(
                child: Text(
                  'SCÃˆNE',
                  style: TextStyle(fontSize: 10, fontWeight: FontWeight.bold),
                ),
              ),
            ),
          ),
          
          // Bars
          Positioned(
            top: 20,
            left: 20,
            child: Container(
              width: 30,
              height: 20,
              color: Colors.orange[200],
              child: const Center(
                child: Text(
                  'BAR',
                  style: TextStyle(fontSize: 6, fontWeight: FontWeight.bold),
                ),
              ),
            ),
          ),
          
          Positioned(
            top: 20,
            right: 20,
            child: Container(
              width: 30,
              height: 20,
              color: Colors.orange[200],
              child: const Center(
                child: Text(
                  'BAR',
                  style: TextStyle(fontSize: 6, fontWeight: FontWeight.bold),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFixedElements() {
    return const SizedBox.shrink();
  }

  Widget _buildMyStandIndicator() {
    if (_myStand == null) return const SizedBox.shrink();
    
    return Positioned(
      left: _myStand!.x - 5,
      top: _myStand!.y - 5,
      child: Container(
        width: (_myStand!.width * 10) + 10,
        height: (_myStand!.height * 10) + 10,
        decoration: BoxDecoration(
          border: Border.all(color: Colors.blue, width: 3),
          borderRadius: BorderRadius.circular(12),
        ),
        child: const Center(
          child: Icon(Icons.star, color: Colors.blue, size: 16),
        ),
      ),
    );
  }

  Widget _buildOptimalPath() {
    return const SizedBox.shrink(); // Ã€ implÃ©menter avec CustomPainter
  }

  Widget _buildMapLegend() {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildLegendItem('Disponible', StandStatus.available.statusColor),
          _buildLegendItem('OccupÃ©', StandStatus.occupied.statusColor),
          _buildLegendItem('RÃ©servÃ©', StandStatus.booked.statusColor),
          if (_currentMode == MapMode.tattooer)
            _buildLegendItem('Mon stand', Colors.blue),
        ],
      ),
    );
  }

  Widget _buildLegendItem(String label, Color color) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 12,
            height: 12,
            decoration: BoxDecoration(
              color: color,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(width: 6),
          Text(
            label,
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 10,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildZoomControls() {
    return Column(
      children: [
        FloatingActionButton(
          heroTag: "zoom_in",
          mini: true,
          onPressed: _zoomIn,
          backgroundColor: Colors.white,
          child: const Icon(Icons.zoom_in, color: Colors.black54),
        ),
        const SizedBox(height: 8),
        FloatingActionButton(
          heroTag: "zoom_out",
          mini: true,
          onPressed: _zoomOut,
          backgroundColor: Colors.white,
          child: const Icon(Icons.zoom_out, color: Colors.black54),
        ),
      ],
    );
  }

  Widget _buildPathIndicator() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.purple.withOpacity(0.9),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          const Icon(Icons.route, color: Colors.white, size: 16),
          const SizedBox(width: 8),
          Text(
            'Parcours: ${_pathStands.length} stands',
            style: const TextStyle(
              fontFamily: 'Roboto',
              fontSize: 12,
              color: Colors.white,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(width: 8),
          GestureDetector(
            onTap: () => setState(() => _showOptimalPath = false),
            child: const Icon(Icons.close, color: Colors.white, size: 16),
          ),
        ],
      ),
    );
  }

  Widget _buildPathOverlay() {
    return const SizedBox.shrink(); // Overlay pour le chemin optimal
  }

  List<Widget> _buildStyleFilters() {
    return TattooStyle.values.map((style) => 
      Padding(
        padding: const EdgeInsets.only(right: 8),
        child: _buildFilterChip(
          style.displayName,
          _selectedStyles.contains(style),
          style.iconData,
          () => _toggleStyleFilter(style),
        ),
      ),
    ).toList();
  }

  // MÃ©thodes utilitaires
  List<StandInfo> _generateSampleStands() {
    return List.generate(30, (index) {
      final random = index % 4;
      return StandInfo(
        id: 'S${index + 1}',
        x: (index % 8) * 45.0 + 20,
        y: (index ~/ 8) * 35.0 + 60,
        width: 4,
        height: 3,
        pricePerSqm: 80 + (random * 10),
        status: StandStatus.values[random],
        tattooerId: random == 0 ? 'user_$index' : null,
        tattouerName: random == 0 ? 'Tatoueur ${index + 1}' : null,
        styles: random == 0 ? [TattooStyle.values[index % TattooStyle.values.length]] : [],
        rating: random == 0 ? 4.0 + (index % 10) * 0.1 : 0,
        availableSlots: random == 0 ? ['14h00', '16h00'] : [],
        waitingTime: random == 1 ? 15 + (index % 20) : 0,
        isHighTraffic: index % 5 == 0,
      );
    });
  }

  String _getSearchHint() {
    switch (_currentMode) {
      case MapMode.organizer:
        return 'Rechercher un stand, tatoueur...';
      case MapMode.tattooer:
        return 'Rechercher un concurrent, style...';
      case MapMode.visitor:
        return 'Rechercher un tatoueur, style...';
    }
  }

  Color _getStandColor(StandInfo stand) {
    return stand.status.statusColor.withOpacity(0.7); // Ajout opacitÃ© pour lisibilitÃ©
  }

  String getStatusLabel(StandStatus status) {
    return status.displayName; // Utilise l'extension
  }

  Color getStatusColor(StandStatus status) {
    return status.statusColor; // Utilise l'extension
  }

  String _getStyleLabel(TattooStyle style) {
    switch (style) {
      case TattooStyle.realism:
        return 'RÃ©alisme';
      case TattooStyle.japanese:
        return 'Japonais';
      case TattooStyle.geometric:
        return 'GÃ©omÃ©trique';
      case TattooStyle.traditional:
        return 'Traditionnel';
      case TattooStyle.blackwork:
        return 'Blackwork';
      case TattooStyle.watercolor:
        return 'Aquarelle';
      case TattooStyle.tribal:
        return 'Tribal';
      case TattooStyle.minimalist:
        return 'Minimaliste';
    }
  }

  IconData _getStyleIcon(TattooStyle style) {
    switch (style) {
      case TattooStyle.realism:
        return Icons.photo;
      case TattooStyle.japanese:
        return Icons.nature;
      case TattooStyle.geometric:
        return Icons.category;
      case TattooStyle.traditional:
        return Icons.flag;
      case TattooStyle.blackwork:
        return Icons.brush;
      case TattooStyle.watercolor:
        return Icons.palette;
      case TattooStyle.tribal:
        return Icons.waves;
      case TattooStyle.minimalist:
        return Icons.minimize;
    }
  }

  String _calculateDistance(StandInfo stand) {
    // Simulation calcul distance
    final distance = (stand.x / 10).round();
    return '${distance}m';
  }

  bool _isStandHighlighted(StandInfo stand) {
    if (_searchQuery.isEmpty) return false;
    
    return stand.tattouerName?.toLowerCase().contains(_searchQuery) == true ||
           stand.id.toLowerCase().contains(_searchQuery) ||
           stand.styles.any((style) => style.displayName.toLowerCase().contains(_searchQuery));
  }

  IconData _getPrimaryActionIcon() {
    switch (_currentMode) {
      case MapMode.organizer:
        return Icons.settings;
      case MapMode.tattooer:
        return Icons.analytics;
      case MapMode.visitor:
        return Icons.schedule;
    }
  }

  String _getPrimaryActionLabel() {
    switch (_currentMode) {
      case MapMode.organizer:
        return 'GÃ©rer';
      case MapMode.tattooer:
        return 'Analyser';
      case MapMode.visitor:
        return 'RÃ©server';
    }
  }

  IconData _getSecondaryActionIcon() {
    switch (_currentMode) {
      case MapMode.organizer:
        return Icons.euro;
      case MapMode.tattooer:
        return Icons.directions;
      case MapMode.visitor:
        return Icons.info;
    }
  }

  String _getSecondaryActionLabel() {
    switch (_currentMode) {
      case MapMode.organizer:
        return 'Revenus';
      case MapMode.tattooer:
        return 'ItinÃ©raire';
      case MapMode.visitor:
        return 'Portfolio';
    }
  }

  // MÃ©thodes d'action
  void _switchMode(MapMode mode) {
    setState(() {
      _currentMode = mode;
      _selectedStand = null;
    });
    
    if (mode == MapMode.tattooer) {
      _findNearbyStands();
    }
    
    _filterStands();
    HapticFeedback.selectionClick();
  }

  void _filterStands() {
    setState(() {
      _filteredStands = _allStands.where((stand) {
        // Filtre par recherche
        if (_searchQuery.isNotEmpty) {
          final matchesSearch = stand.tattouerName?.toLowerCase().contains(_searchQuery) == true ||
                               stand.id.toLowerCase().contains(_searchQuery) ||
                               stand.styles.any((style) => _getStyleLabel(style).toLowerCase().contains(_searchQuery));
          if (!matchesSearch) return false;
        }
        
        // Filtre par disponibilitÃ©
        if (_showOnlyAvailable && !stand.isAvailable) return false;
        
        // Filtre par styles
        if (_selectedStyles.isNotEmpty) {
          final hasMatchingStyle = stand.styles.any((style) => _selectedStyles.contains(style));
          if (!hasMatchingStyle) return false;
        }
        
        return true;
      }).toList();
    });
  }

  void _clearSearch() {
    _searchTextController.clear();
    _filterStands();
  }

  void _toggleStyleFilter(TattooStyle style) {
    setState(() {
      if (_selectedStyles.contains(style)) {
        _selectedStyles.remove(style);
      } else {
        _selectedStyles.add(style);
      }
    });
    _filterStands();
  }

  void _selectStand(StandInfo stand) {
    setState(() {
      _selectedStand = stand;
    });
    HapticFeedback.lightImpact();
  }

  void _toggleFavorite(String standId) {
    setState(() {
      if (_favoriteStands.contains(standId)) {
        _favoriteStands.remove(standId);
      } else {
        _favoriteStands.add(standId);
      }
    });
    HapticFeedback.lightImpact();
  }

  void _centerOnUserLocation() {
    // Animation pour centrer sur la position utilisateur
    _zoomController.forward().then((_) => _zoomController.reverse());
  }

  void _showFavorites() {
    if (_favoriteStands.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Aucun favori pour le moment'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }
    
    setState(() {
      _filteredStands = _allStands.where((stand) => _favoriteStands.contains(stand.id)).toList();
    });
  }

  void _focusOnMyStand() {
    if (_myStand != null) {
      setState(() {
        _selectedStand = _myStand;
      });
    }
  }

  void _findNearbyStands() {
    if (_myStand != null) {
      _nearbyStands = _allStands.where((stand) {
        if (stand.id == _myStand!.id) return false;
        final distance = (stand.x - _myStand!.x).abs() + (stand.y - _myStand!.y).abs();
        return distance < 100; // Distance arbitraire
      }).toList();
    }
  }

  void _generateOptimalPath() {
    setState(() {
      _pathStands = List.from(_favoriteStands);
      _showOptimalPath = true;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Parcours optimal gÃ©nÃ©rÃ© pour ${_pathStands.length} stands'),
        backgroundColor: Colors.purple,
      ),
    );
  }

  void _handleMapGesture(ScaleUpdateDetails details) {
    setState(() {
      _mapScale = (_mapScale * details.scale).clamp(0.5, 3.0);
    });
  }

  void _zoomIn() {
    setState(() {
      _mapScale = (_mapScale * 1.2).clamp(0.5, 3.0);
    });
  }

  void _zoomOut() {
    setState(() {
      _mapScale = (_mapScale / 1.2).clamp(0.5, 3.0);
    });
  }

  void _primaryAction(StandInfo stand) {
    switch (_currentMode) {
      case MapMode.organizer:
        _manageStand(stand);
        break;
      case MapMode.tattooer:
        _analyzeStand(stand);
        break;
      case MapMode.visitor:
        _bookSlot(stand);
        break;
    }
  }

  void _secondaryAction(StandInfo stand) {
    switch (_currentMode) {
      case MapMode.organizer:
        _showStandRevenue(stand);
        break;
      case MapMode.tattooer:
        _getDirections(stand);
        break;
      case MapMode.visitor:
        _viewPortfolio(stand);
        break;
    }
  }

  void _shareStand(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Partage du stand ${stand.id} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  // Actions spÃ©cifiques par mode
  void _showCompetitionAnalysis() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Analyse concurrentielle - Ã€ implÃ©menter'),
        backgroundColor: Colors.orange,
      ),
    );
  }

  void _showMyAnalytics() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Mes analytics - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _showGlobalView() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Vue globale - Ã€ implÃ©menter'),
        backgroundColor: KipikTheme.rouge,
      ),
    );
  }

  void _showRevenueAnalytics() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Analytics revenus - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _optimizeLayout() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Optimisation layout - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
      ),
    );
  }

  void _manageStand(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Gestion stand ${stand.id} - Ã€ implÃ©menter'),
        backgroundColor: KipikTheme.rouge,
      ),
    );
  }

  void _analyzeStand(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Analyse stand ${stand.id} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _bookSlot(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('RÃ©servation stand ${stand.id} - Ã€ implÃ©menter'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _showStandRevenue(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Revenus stand ${stand.id}: ${stand.totalPrice.toInt()}â‚¬'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _getDirections(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('ItinÃ©raire vers ${stand.id} - Ã€ implÃ©menter'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _viewPortfolio(StandInfo stand) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Portfolio ${stand.tattouerName ?? stand.id} - Ã€ implÃ©menter'),
        backgroundColor: Colors.purple,
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\flashs\flash_detail_page.dart

// lib/pages/shared/flashs/flash_detail_page.dart

import 'package:flutter/material.dart';
import '../../../theme/kipik_theme.dart';
import '../../../models/flash/flash.dart';
import '../../../services/flash/flash_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/user_role.dart';
import '../../../widgets/common/app_bars/custom_app_bar_kipik.dart'; // âœ… Import correct
import '../booking/booking_flow_page.dart'; // âœ… Import pour la rÃ©servation

class FlashDetailPage extends StatefulWidget {
  final String? flashId;
  final Flash? flash;

  const FlashDetailPage({
    Key? key,
    this.flashId,
    this.flash,
  }) : super(key: key);

  @override
  State<FlashDetailPage> createState() => _FlashDetailPageState();
}

class _FlashDetailPageState extends State<FlashDetailPage> {
  final FlashService _flashService = FlashService.instance;
  final PageController _imagePageController = PageController();
  
  Flash? _flash;
  bool _isLoading = true;
  bool _isFavorite = false;
  bool _isProcessing = false;
  UserRole? _currentUserRole;
  int _currentImageIndex = 0;

  @override
  void initState() {
    super.initState();
    _initializeData();
  }

  @override
  void dispose() {
    _imagePageController.dispose();
    super.dispose();
  }

  Future<void> _initializeData() async {
    _getCurrentUserRole();
    
    if (widget.flash != null) {
      _flash = widget.flash;
      _isLoading = false;
      await _checkIfFavorite();
    } else if (widget.flashId != null) {
      await _loadFlash();
    }
    
    setState(() {});
  }

  void _getCurrentUserRole() {
    final currentUser = SecureAuthService.instance.currentUser;
    if (currentUser != null && currentUser.containsKey('role')) {
      final roleString = currentUser['role'] as String?;
      if (roleString == 'tatoueur') {
        _currentUserRole = UserRole.tatoueur;
      } else {
        _currentUserRole = UserRole.particulier;
      }
    }
  }

  Future<void> _loadFlash() async {
    try {
      final flash = await _flashService.getFlashById(widget.flashId!);
      setState(() {
        _flash = flash;
        _isLoading = false;
      });
      
      await _checkIfFavorite();
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      _showErrorSnackBar('Erreur lors du chargement du flash');
    }
  }

  Future<void> _checkIfFavorite() async {
    final currentUser = SecureAuthService.instance.currentUser;
    if (currentUser == null || _flash == null) return;

    try {
      // âœ… Simulation - remplacez par votre logique de favoris
      setState(() {
        _isFavorite = false; // Valeur par dÃ©faut
      });
    } catch (e) {
      // Ignore les erreurs de vÃ©rification favori
    }
  }

  Future<void> _toggleFavorite() async {
    final currentUser = SecureAuthService.instance.currentUser;
    if (currentUser == null || _flash == null) return;

    setState(() {
      _isProcessing = true;
    });

    try {
      // âœ… Simulation - remplacez par votre logique de favoris
      await Future.delayed(const Duration(milliseconds: 500));
      
      setState(() {
        _isFavorite = !_isFavorite;
        _isProcessing = false;
      });

      _showSuccessSnackBar(
        _isFavorite ? 'AjoutÃ© aux favoris' : 'RetirÃ© des favoris'
      );
    } catch (e) {
      setState(() {
        _isProcessing = false;
      });
      _showErrorSnackBar('Erreur lors de la mise Ã  jour');
    }
  }

  void _handleBooking() {
    if (_flash == null) return;

    if (_currentUserRole == UserRole.tatoueur) {
      _showContactDialog();
    } else {
      _startBookingFlow();
    }
  }

  void _showContactDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A1A),
        title: const Text(
          'Contacter l\'artiste',
          style: TextStyle(color: Colors.white),
        ),
        content: Text(
          'Voulez-vous contacter ${_flash!.tattooArtistName} pour une collaboration ?',
          style: const TextStyle(color: Colors.white),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _showInfoSnackBar('Contact artiste - BientÃ´t disponible');
            },
            style: ElevatedButton.styleFrom(backgroundColor: KipikTheme.rouge),
            child: const Text('Contacter', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _startBookingFlow() {
    if (!_isFlashBookable()) {
      _showErrorSnackBar('Ce flash n\'est plus disponible pour rÃ©servation');
      return;
    }

    // âœ… Navigation vers le flux de rÃ©servation
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => BookingFlowPage(flash: _flash!),
      ),
    );
  }

  bool _isFlashBookable() {
    if (_flash == null) return false;
    return _flash!.status == FlashStatus.published;
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        backgroundColor: const Color(0xFF0A0A0A),
        appBar: CustomAppBarKipik(
          title: 'Flash',
          showBackButton: true,
          useProStyle: false,
        ),
        body: Center(
          child: CircularProgressIndicator(
            color: KipikTheme.rouge,
          ),
        ),
      );
    }

    if (_flash == null) {
      return Scaffold(
        backgroundColor: const Color(0xFF0A0A0A),
        appBar: CustomAppBarKipik(
          title: 'Flash',
          showBackButton: true,
          useProStyle: false,
        ),
        body: const Center(
          child: Text(
            'Flash introuvable',
            style: TextStyle(color: Colors.white),
          ),
        ),
      );
    }

    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: CustomAppBarKipik(
        title: _flash!.title,
        showBackButton: true,
        useProStyle: false,
        actions: [
          // Bouton favori dans l'AppBar
          IconButton(
            onPressed: _isProcessing ? null : _toggleFavorite,
            icon: _isProcessing
                ? SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: KipikTheme.rouge,
                    ),
                  )
                : Icon(
                    _isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: _isFavorite ? KipikTheme.rouge : Colors.white,
                  ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Images
            _buildImageSection(),
            
            // Informations principales
            _buildMainInfoSection(),
            
            // DÃ©tails du flash
            _buildDetailsSection(),
            
            // Actions selon le rÃ´le
            _buildActionsSection(),
            
            const SizedBox(height: 100), // Espace pour FAB
          ],
        ),
      ),
      
      // Bouton d'action flottant
      floatingActionButton: _buildFloatingActionButton(),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }

  Widget _buildImageSection() {
    final allImages = [_flash!.imageUrl];
    // âœ… Ajout sÃ©curisÃ© des images additionnelles si elles existent
    if (_flash!.imageUrl.isNotEmpty) {
      // Simuler des images additionnelles pour la dÃ©mo
      allImages.addAll([
        _flash!.imageUrl, // Dupliquer pour la dÃ©mo
      ]);
    }
    
    return Container(
      height: 400,
      child: Stack(
        children: [
          PageView.builder(
            controller: _imagePageController,
            onPageChanged: (index) {
              setState(() {
                _currentImageIndex = index;
              });
            },
            itemCount: allImages.length,
            itemBuilder: (context, index) {
              return Image.network(
                allImages[index],
                width: double.infinity,
                height: 400,
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) => Container(
                  height: 400,
                  color: const Color(0xFF2A2A2A),
                  child: Icon(
                    Icons.image,
                    color: Colors.grey.shade600,
                    size: 80,
                  ),
                ),
              );
            },
          ),
          
          // Indicateurs de page
          if (allImages.length > 1)
            Positioned(
              bottom: 16,
              left: 0,
              right: 0,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(
                  allImages.length,
                  (index) => Container(
                    margin: const EdgeInsets.symmetric(horizontal: 2),
                    width: 8,
                    height: 8,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: index == _currentImageIndex 
                          ? Colors.white 
                          : Colors.white.withOpacity(0.5),
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildMainInfoSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header avec prix
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _flash!.title,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      _flash!.tattooArtistName,
                      style: TextStyle(
                        fontSize: 16,
                        color: KipikTheme.rouge,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    '${_flash!.price.toInt()}â‚¬', // âœ… Prix simplifiÃ©
                    style: TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.bold,
                      color: KipikTheme.rouge,
                    ),
                  ),
                ],
              ),
            ],
          ),
          
          const SizedBox(height: 20),
          
          // Badges de statut
          Wrap(
            spacing: 12,
            runSpacing: 8,
            children: [
              // Badge statut
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: _getStatusColor().withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: _getStatusColor().withOpacity(0.3)),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      _getStatusIcon(),
                      size: 14,
                      color: _getStatusColor(),
                    ),
                    const SizedBox(width: 6),
                    Text(
                      _getStatusText(),
                      style: TextStyle(
                        color: _getStatusColor(),
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              
              // Badge taille
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.blue.withOpacity(0.3)),
                ),
                child: Text(
                  _flash!.size,
                  style: const TextStyle(
                    color: Colors.blue,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              
              // Badge style
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: Colors.purple.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.purple.withOpacity(0.3)),
                ),
                child: Text(
                  _flash!.style,
                  style: const TextStyle(
                    color: Colors.purple,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 20),
          
          // Description
          if (_flash!.description.isNotEmpty)
            Text(
              _flash!.description,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
                height: 1.5,
              ),
            ),
        ],
      ),
    );
  }

  Color _getStatusColor() {
    switch (_flash!.status) {
      case FlashStatus.published:
        return Colors.green;
      case FlashStatus.reserved:
        return Colors.orange;
      case FlashStatus.booked:
        return Colors.blue;
      case FlashStatus.completed:
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  IconData _getStatusIcon() {
    switch (_flash!.status) {
      case FlashStatus.published:
        return Icons.check_circle;
      case FlashStatus.reserved:
        return Icons.schedule;
      case FlashStatus.booked:
        return Icons.event_busy;
      case FlashStatus.completed:
        return Icons.done_all;
      default:
        return Icons.help;
    }
  }

  String _getStatusText() {
    switch (_flash!.status) {
      case FlashStatus.published:
        return 'Disponible';
      case FlashStatus.reserved:
        return 'RÃ©servÃ©';
      case FlashStatus.booked:
        return 'RÃ©servÃ©';
      case FlashStatus.completed:
        return 'TerminÃ©';
      default:
        return 'Inconnu';
    }
  }

  Widget _buildDetailsSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: const Color(0xFF1A1A1A),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFF2A2A2A)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'DÃ©tails du flash',
            style: TextStyle(
              color: KipikTheme.rouge,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          
          const SizedBox(height: 20),
          
          // Taille
          _buildDetailRow(Icons.straighten, 'Taille', _flash!.size),
          
          // Style
          _buildDetailRow(Icons.style, 'Style', _flash!.style),
          
          // Studio
          _buildDetailRow(Icons.store, 'Studio', _flash!.studioName),
          
          // Localisation
          _buildDetailRow(Icons.location_on, 'Ville', _flash!.city),
          
          // Artiste
          _buildDetailRow(Icons.person, 'Artiste', _flash!.tattooArtistName),
        ],
      ),
    );
  }

  Widget _buildDetailRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, size: 20, color: Colors.grey.shade400),
          const SizedBox(width: 12),
          Text(
            '$label: ',
            style: TextStyle(
              color: Colors.grey.shade400,
              fontWeight: FontWeight.w500,
              fontSize: 14,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionsSection() {
    final currentUser = SecureAuthService.instance.currentUser;
    final isOwner = currentUser != null && 
                   _flash!.tattooArtistId == currentUser['uid'];
    
    if (_currentUserRole == UserRole.tatoueur && isOwner) {
      // Actions pour le propriÃ©taire du flash
      return Container(
        padding: const EdgeInsets.all(20),
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: const Color(0xFF1A1A1A),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(color: const Color(0xFF2A2A2A)),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Votre flash',
              style: TextStyle(
                color: KipikTheme.rouge,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              'Flash crÃ©Ã© avec succÃ¨s. Les statistiques de vues et rÃ©servations apparaÃ®tront ici.',
              style: TextStyle(
                color: Colors.grey.shade400,
                fontSize: 14,
              ),
            ),
          ],
        ),
      );
    }
    
    return const SizedBox.shrink();
  }

  Widget _buildFloatingActionButton() {
    final currentUser = SecureAuthService.instance.currentUser;
    final isOwner = currentUser != null && 
                   _flash!.tattooArtistId == currentUser['uid'];
    
    if (_currentUserRole == UserRole.tatoueur && isOwner) {
      // Bouton pour le propriÃ©taire
      return FloatingActionButton.extended(
        onPressed: () => _showInfoSnackBar('Gestion flash - BientÃ´t disponible'),
        backgroundColor: KipikTheme.rouge,
        icon: const Icon(Icons.edit, color: Colors.white),
        label: const Text(
          'GÃ©rer',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
      );
    } else {
      // Bouton pour les autres utilisateurs
      final isBookable = _isFlashBookable();
      
      return FloatingActionButton.extended(
        onPressed: isBookable ? _handleBooking : null,
        backgroundColor: isBookable ? KipikTheme.rouge : Colors.grey,
        icon: Icon(
          _currentUserRole == UserRole.tatoueur ? Icons.message : Icons.calendar_today,
          color: Colors.white,
        ),
        label: Text(
          _currentUserRole == UserRole.tatoueur ? 'Contacter' : 'RÃ©server',
          style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
      );
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\inspirations\detail_inspiration_page.dart

// lib/pages/shared/inspirations/detail_inspiration_page.dart

import 'package:flutter/material.dart';
import '../../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../../models/inspiration_post.dart';
import '../../../services/inspiration/firebase_inspiration_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/user_role.dart';
import '../../../models/comment.dart';
import '../../../theme/kipik_theme.dart';

class DetailInspirationPage extends StatefulWidget {
  final InspirationPost post;
  
  const DetailInspirationPage({
    Key? key,
    required this.post,
  }) : super(key: key);

  @override
  State<DetailInspirationPage> createState() => _DetailInspirationPageState();
}

class _DetailInspirationPageState extends State<DetailInspirationPage> {
  late InspirationPost _post;
  List<Comment> _comments = [];
  bool _isLoadingComments = false;
  final TextEditingController _commentController = TextEditingController();
  final FirebaseInspirationService _inspirationService = FirebaseInspirationService.instance;
  
  // âœ… NOUVEAU : DÃ©tection du rÃ´le utilisateur
  UserRole? _currentUserRole;
  
  @override
  void initState() {
    super.initState();
    _post = widget.post;
    _initializeUserRole();
    _loadComments();
  }
  
  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  /// âœ… NOUVEAU : Initialiser le rÃ´le utilisateur
  void _initializeUserRole() {
    final currentUser = SecureAuthService.instance.currentUser;
    _currentUserRole = currentUser?.role;
  }
  
  Future<void> _loadComments() async {
    setState(() {
      _isLoadingComments = true;
    });
    
    try {
      // âœ… NOUVEAU : Utiliser FirebaseInspirationService pour les commentaires
      // Pour l'instant, on utilise des commentaires de dÃ©mo
      // TODO: ImplÃ©menter getComments dans FirebaseInspirationService
      await Future.delayed(const Duration(milliseconds: 500)); // Simuler le chargement
      
      setState(() {
        _comments = _generateDemoComments();
        _isLoadingComments = false;
      });
    } catch (e) {
      setState(() {
        _isLoadingComments = false;
      });
      _showErrorSnackBar('Erreur lors du chargement des commentaires');
    }
  }

  /// âœ… TEMPORAIRE : GÃ©nÃ©rer des commentaires de dÃ©mo
  List<Comment> _generateDemoComments() {
    return [
      Comment(
        id: 'demo_comment_1',
        postId: _post.id,
        authorId: 'demo_user_1',
        authorName: 'Alex Martin',
        authorAvatar: 'https://picsum.photos/seed/user1/100/100',
        text: 'Magnifique travail ! Le style est vraiment unique.',
        createdAt: DateTime.now().subtract(const Duration(hours: 2)),
        updatedAt: DateTime.now().subtract(const Duration(hours: 2)),
      ),
      Comment(
        id: 'demo_comment_2',
        postId: _post.id,
        authorId: 'demo_user_2',
        authorName: 'Sophie Dubois',
        authorAvatar: 'https://picsum.photos/seed/user2/100/100',
        text: 'J\'adore les dÃ©tails, trÃ¨s inspirant pour mon prochain tatouage !',
        createdAt: DateTime.now().subtract(const Duration(minutes: 30)),
        updatedAt: DateTime.now().subtract(const Duration(minutes: 30)),
      ),
    ];
  }
  
  Future<void> _toggleFavorite() async {
    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) {
        _showErrorSnackBar('Vous devez Ãªtre connectÃ© pour ajouter aux favoris');
        return;
      }

      final newFavoriteStatus = await _inspirationService.toggleFavorite(
        inspirationId: _post.id,
        userId: currentUser.uid,
      );
      
      setState(() {
        _post = _post.copyWith(isFavorite: newFavoriteStatus);
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(newFavoriteStatus 
            ? 'AjoutÃ© aux favoris' 
            : 'RetirÃ© des favoris'),
          duration: const Duration(seconds: 2),
          backgroundColor: Colors.black87,
        ),
      );
    } catch (e) {
      _showErrorSnackBar('Erreur lors de la mise Ã  jour des favoris');
    }
  }
  
  Future<void> _addComment() async {
    if (_commentController.text.trim().isEmpty) return;
    
    try {
      // âœ… NOUVEAU : Ajouter commentaire avec FirebaseInspirationService
      // Pour l'instant, on simule l'ajout
      // TODO: ImplÃ©menter addComment dans FirebaseInspirationService
      
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) {
        _showErrorSnackBar('Vous devez Ãªtre connectÃ© pour commenter');
        return;
      }

      final newComment = Comment(
        id: 'demo_comment_${DateTime.now().millisecondsSinceEpoch}',
        postId: _post.id,
        authorId: currentUser.uid,
        authorName: currentUser.name ?? 'Utilisateur',
        authorAvatar: 'https://picsum.photos/seed/${currentUser.uid}/100/100',
        text: _commentController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      setState(() {
        _comments.add(newComment);
        _commentController.clear();
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Commentaire ajoutÃ© !'),
          duration: Duration(seconds: 2),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      _showErrorSnackBar('Erreur lors de l\'ajout du commentaire');
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// âœ… NOUVEAU : Actions spÃ©cifiques selon le rÃ´le
  void _handleRoleSpecificAction() {
    if (_currentUserRole == UserRole.tatoueur) {
      // Action pour tatoueur : Contacter pour collaboration, voir profil, etc.
      _showContactDialog();
    } else {
      // Action pour particulier : RÃ©server si c'est un flash, voir portfolio, etc.
      _showBookingDialog();
    }
  }

  void _showContactDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Contacter l\'artiste'),
        content: const Text('Voulez-vous contacter cet artiste pour une collaboration ou des informations ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // TODO: ImplÃ©menter contact entre tatoueurs
              _showInfoSnackBar('Contact artiste - BientÃ´t disponible');
            },
            style: ElevatedButton.styleFrom(backgroundColor: KipikTheme.rouge),
            child: const Text('Contacter', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _showBookingDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('RÃ©server ce tatouage'),
        content: const Text('Cette Å“uvre vous inspire ? Contactez l\'artiste pour rÃ©aliser un tatouage similaire.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // TODO: ImplÃ©menter systÃ¨me de rÃ©servation
              _showInfoSnackBar('RÃ©servation - BientÃ´t disponible');
            },
            style: ElevatedButton.styleFrom(backgroundColor: KipikTheme.rouge),
            child: const Text('RÃ©server', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        duration: const Duration(seconds: 2),
      ),
    );
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: 'DÃ©tail inspiration',
        showBackButton: true,
      ),
      body: Stack(
        children: [
          Image.asset(
            'assets/background_charbon.png',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          SafeArea(
            child: Column(
              children: [
                Expanded(
                  child: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Image principale
                        Hero(
                          tag: 'inspiration_${_post.id}',
                          child: AspectRatio(
                            aspectRatio: 1,
                            child: Image.network(
                              _post.imageUrl,
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                        
                        // Informations sur l'auteur et actions
                        Container(
                          padding: const EdgeInsets.all(16),
                          color: Colors.white,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Auteur et actions
                              Row(
                                children: [
                                  CircleAvatar(
                                    radius: 20,
                                    backgroundImage: NetworkImage(_post.authorAvatarUrl),
                                  ),
                                  const SizedBox(width: 12),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          _post.authorName,
                                          style: const TextStyle(
                                            fontWeight: FontWeight.bold,
                                            fontSize: 16,
                                          ),
                                        ),
                                        if (_post.isFromProfessional)
                                          Row(
                                            children: [
                                              Icon(
                                                Icons.verified,
                                                size: 14,
                                                color: KipikTheme.rouge,
                                              ),
                                              const SizedBox(width: 4),
                                              Text(
                                                'Professionnel',
                                                style: TextStyle(
                                                  fontSize: 12,
                                                  color: KipikTheme.rouge,
                                                ),
                                              ),
                                            ],
                                          ),
                                      ],
                                    ),
                                  ),
                                  IconButton(
                                    onPressed: _toggleFavorite,
                                    icon: Icon(
                                      _post.isFavorite ? Icons.favorite : Icons.favorite_border,
                                      color: _post.isFavorite ? KipikTheme.rouge : Colors.grey,
                                    ),
                                  ),
                                  IconButton(
                                    onPressed: () {
                                      // TODO: ImplÃ©menter partage
                                      _showInfoSnackBar('Partage - BientÃ´t disponible');
                                    },
                                    icon: const Icon(Icons.share, color: Colors.grey),
                                  ),
                                ],
                              ),
                              
                              const SizedBox(height: 16),
                              
                              // Description
                              if (_post.description.isNotEmpty)
                                Text(
                                  _post.description,
                                  style: const TextStyle(fontSize: 15),
                                ),
                              
                              const SizedBox(height: 8),
                              
                              // Hashtags
                              if (_post.tags.isNotEmpty)
                                Wrap(
                                  spacing: 8,
                                  children: _post.tags.map((tag) {
                                    return Text(
                                      '#$tag',
                                      style: TextStyle(
                                        color: KipikTheme.rouge,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    );
                                  }).toList(),
                                ),
                              
                              const SizedBox(height: 16),
                              
                              // Informations supplÃ©mentaires
                              if (_post.tattooPlacements.isNotEmpty || _post.tattooStyles.isNotEmpty)
                                Container(
                                  padding: const EdgeInsets.all(12),
                                  decoration: BoxDecoration(
                                    color: Colors.grey[100],
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      if (_post.tattooPlacements.isNotEmpty)
                                        Padding(
                                          padding: const EdgeInsets.only(bottom: 8),
                                          child: Row(
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: [
                                              const Icon(Icons.place, size: 18, color: Colors.grey),
                                              const SizedBox(width: 8),
                                              Expanded(
                                                child: Text(
                                                  'Emplacement: ${_post.tattooPlacements.join(", ")}',
                                                  style: const TextStyle(fontSize: 14),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      
                                      if (_post.tattooStyles.isNotEmpty)
                                        Row(
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            const Icon(Icons.style, size: 18, color: Colors.grey),
                                            const SizedBox(width: 8),
                                            Expanded(
                                              child: Text(
                                                'Style: ${_post.tattooStyles.join(", ")}',
                                                style: const TextStyle(fontSize: 14),
                                              ),
                                            ),
                                          ],
                                        ),
                                    ],
                                  ),
                                ),

                              // âœ… NOUVEAU : Bouton d'action selon le rÃ´le
                              const SizedBox(height: 16),
                              SizedBox(
                                width: double.infinity,
                                child: ElevatedButton(
                                  onPressed: _handleRoleSpecificAction,
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: KipikTheme.rouge,
                                    padding: const EdgeInsets.symmetric(vertical: 12),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                  ),
                                  child: Text(
                                    _currentUserRole == UserRole.tatoueur 
                                      ? 'Contacter l\'artiste' 
                                      : 'RÃ©server ce style',
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        
                        // SÃ©parateur
                        Container(
                          height: 8,
                          color: Colors.grey[200],
                        ),
                        
                        // Section commentaires
                        Container(
                          padding: const EdgeInsets.all(16),
                          color: Colors.white,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'Commentaires',
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 18,
                                ),
                              ),
                              
                              const SizedBox(height: 16),
                              
                              if (_isLoadingComments)
                                const Center(
                                  child: CircularProgressIndicator(
                                    valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                                  ),
                                )
                              else if (_comments.isEmpty)
                                const Center(
                                  child: Padding(
                                    padding: EdgeInsets.all(16),
                                    child: Text(
                                      'Soyez le premier Ã  commenter',
                                      style: TextStyle(
                                        color: Colors.grey,
                                        fontStyle: FontStyle.italic,
                                      ),
                                    ),
                                  ),
                                )
                              else
                                ListView.separated(
                                  shrinkWrap: true,
                                  physics: const NeverScrollableScrollPhysics(),
                                  itemCount: _comments.length,
                                  separatorBuilder: (_, __) => const Divider(),
                                  itemBuilder: (context, index) {
                                    final comment = _comments[index];
                                    return Padding(
                                      padding: const EdgeInsets.symmetric(vertical: 8),
                                      child: Row(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          CircleAvatar(
                                            radius: 16,
                                            backgroundImage: NetworkImage(comment.authorAvatar),
                                          ),
                                          const SizedBox(width: 12),
                                          Expanded(
                                            child: Column(
                                              crossAxisAlignment: CrossAxisAlignment.start,
                                              children: [
                                                Row(
                                                  children: [
                                                    Text(
                                                      comment.authorName,
                                                      style: const TextStyle(
                                                        fontWeight: FontWeight.bold,
                                                      ),
                                                    ),
                                                    const Spacer(),
                                                    Text(
                                                      _formatCommentDate(comment.createdAt),
                                                      style: const TextStyle(
                                                        fontSize: 12,
                                                        color: Colors.grey,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 4),
                                                Text(comment.text),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    );
                                  },
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                
                // Barre de commentaire
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  color: Colors.white,
                  child: Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _commentController,
                          decoration: const InputDecoration(
                            hintText: 'Ajouter un commentaire...',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.all(Radius.circular(24)),
                            ),
                            contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                          ),
                          maxLines: null,
                        ),
                      ),
                      const SizedBox(width: 8),
                      IconButton(
                        onPressed: _addComment,
                        icon: Icon(
                          Icons.send,
                          color: KipikTheme.rouge,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  String _formatCommentDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays > 7) {
      return '${date.day}/${date.month}/${date.year}';
    } else if (difference.inDays > 0) {
      return '${difference.inDays}j';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}min';
    } else {
      return 'Ã€ l\'instant';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\shared\inspirations\inspirations_page.dart

// lib/pages/shared/inspirations/inspirations_page.dart

import 'package:flutter/material.dart';
import 'dart:math';
import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';
import '../../../widgets/common/app_bars/custom_app_bar_particulier.dart';
import '../../../theme/kipik_theme.dart';
import '../../../models/inspiration_post.dart';
import '../../../services/inspiration/firebase_inspiration_service.dart';
import '../../../services/auth/secure_auth_service.dart';
import '../../../models/user_role.dart';
import 'detail_inspiration_page.dart';

class InspirationsPage extends StatefulWidget {
  const InspirationsPage({Key? key}) : super(key: key);

  @override
  State<InspirationsPage> createState() => _InspirationsPageState();
}

class _InspirationsPageState extends State<InspirationsPage> {
  final ScrollController _scrollController = ScrollController();
  bool _isLoading = false;
  List<InspirationPost> _posts = [];
  final FirebaseInspirationService _inspirationService = FirebaseInspirationService.instance;
  
  // âœ… NOUVEAU : DÃ©tection du rÃ´le utilisateur
  UserRole? _currentUserRole;
  
  // Filtres adaptÃ©s aux rÃ´les
  List<String> _categories = ['Tous', 'Clients', 'Professionnels', 'Dessins', 'RÃ©alisations'];
  String _selectedCategory = 'Tous';
  
  // Liste des images de fond disponibles
  final List<String> _backgroundImages = [
    'assets/background_charbon.png',
    'assets/background_tatoo1.png',
    'assets/background_tatoo2.png',
    'assets/background_tatoo3.png',
  ];
  
  late String _selectedBackground;

  @override
  void initState() {
    super.initState();
    _initializeUserRole();
    _loadPosts();
    
    // Pagination infinie
    _scrollController.addListener(() {
      if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent * 0.8 &&
          !_isLoading) {
        _loadMorePosts();
      }
    });
    
    // SÃ©lection alÃ©atoire de l'image de fond
    _selectedBackground = _backgroundImages[Random().nextInt(_backgroundImages.length)];
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  /// âœ… NOUVEAU : Initialiser le rÃ´le utilisateur
  void _initializeUserRole() {
    final currentUser = SecureAuthService.instance.currentUser;
    _currentUserRole = currentUser?.role;
    
    // Adapter les catÃ©gories selon le rÃ´le
    if (_currentUserRole == UserRole.tatoueur) {
      _categories = ['Tous', 'Mes Inspirations', 'Autres Artistes', 'Clients', 'Flashs'];
    } else {
      _categories = ['Tous', 'Professionnels', 'Flashs Disponibles', 'Styles', 'RÃ©alisations'];
    }
  }

  Future<void> _loadPosts() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      // âœ… NOUVEAU : Utiliser FirebaseInspirationService
      final inspirationsData = await _inspirationService.getInspirations(
        category: _selectedCategory == 'Tous' ? null : _selectedCategory,
        limit: 20,
      );
      
      // Convertir les donnÃ©es en InspirationPost
      final posts = inspirationsData.map((data) => _mapToInspirationPost(data)).toList();
      
      setState(() {
        _posts = posts;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      _showErrorSnackBar('Erreur lors du chargement des inspirations');
    }
  }

  Future<void> _loadMorePosts() async {
    if (_isLoading) return;
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      // Pour la pagination, on peut simuler en rÃ©cupÃ©rant plus d'inspirations
      final moreInspirationsData = await _inspirationService.getInspirations(
        category: _selectedCategory == 'Tous' ? null : _selectedCategory,
        limit: 10,
      );
      
      final morePosts = moreInspirationsData.map((data) => _mapToInspirationPost(data)).toList();
      
      setState(() {
        _posts.addAll(morePosts);
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// âœ… NOUVEAU : Mapper les donnÃ©es Firebase vers InspirationPost
  InspirationPost _mapToInspirationPost(Map<String, dynamic> data) {
    return InspirationPost.fromFirebaseData(data);
  }

  Future<void> _toggleFavorite(InspirationPost post) async {
    try {
      final currentUser = SecureAuthService.instance.currentUser;
      if (currentUser == null) return;

      final newFavoriteStatus = await _inspirationService.toggleFavorite(
        inspirationId: post.id,
        userId: currentUser.uid,
      );
      
      setState(() {
        final index = _posts.indexWhere((p) => p.id == post.id);
        if (index != -1) {
          _posts[index] = post.copyWith(isFavorite: newFavoriteStatus);
        }
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(newFavoriteStatus 
            ? 'AjoutÃ© aux favoris' 
            : 'RetirÃ© des favoris'),
          duration: const Duration(seconds: 2),
          backgroundColor: Colors.black87,
        ),
      );
    } catch (e) {
      _showErrorSnackBar('Erreur lors de la mise Ã  jour des favoris');
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// âœ… NOUVEAU : Navigation adaptÃ©e selon le rÃ´le
  void _navigateToAddInspiration() {
    if (_currentUserRole == UserRole.tatoueur) {
      // Naviguer vers la page de publication flash/inspiration pour tatoueurs
      // TODO: ImplÃ©menter dans les prochaines semaines
      _showInfoSnackBar('Publication flash/inspiration - BientÃ´t disponible');
    } else {
      // Pour les particuliers, peut-Ãªtre partager une rÃ©alisation
      _showInfoSnackBar('Partage inspiration - BientÃ´t disponible');
    }
  }

  void _showInfoSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: KipikTheme.rouge,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBarParticulier(
        title: _currentUserRole == UserRole.tatoueur ? 'Portfolio & Inspirations' : 'Inspirations',
        showBackButton: true,
        redirectToHome: true,
        showNotificationIcon: true,
      ),
      body: Stack(
        children: [
          // Fond alÃ©atoire
          Image.asset(
            _selectedBackground,
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          // Contenu principal
          Column(
            children: [
              // Barre de filtres par catÃ©gorie
              Container(
                height: 60,
                color: Colors.black.withOpacity(0.7),
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: _categories.length,
                  padding: const EdgeInsets.symmetric(horizontal: 12),
                  itemBuilder: (context, index) {
                    final category = _categories[index];
                    final isSelected = category == _selectedCategory;
                    
                    return Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 12),
                      child: ElevatedButton(
                        onPressed: () {
                          if (category != _selectedCategory) {
                            setState(() {
                              _selectedCategory = category;
                            });
                            _loadPosts();
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: isSelected 
                              ? KipikTheme.rouge
                              : Colors.white.withOpacity(0.2),
                          foregroundColor: Colors.white,
                          elevation: isSelected ? 4 : 0,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                        ),
                        child: Text(category),
                      ),
                    );
                  },
                ),
              ),
              
              // Grille d'images
              Expanded(
                child: _posts.isEmpty && !_isLoading
                    ? _buildEmptyState()
                    : RefreshIndicator(
                        onRefresh: _loadPosts,
                        color: KipikTheme.rouge,
                        child: MasonryGridView.count(
                          controller: _scrollController,
                          crossAxisCount: 2,
                          mainAxisSpacing: 8,
                          crossAxisSpacing: 8,
                          padding: const EdgeInsets.all(8),
                          itemCount: _posts.length + (_isLoading ? 1 : 0),
                          itemBuilder: (context, index) {
                            if (index == _posts.length) {
                              return const Center(
                                child: Padding(
                                  padding: EdgeInsets.all(16.0),
                                  child: CircularProgressIndicator(
                                    valueColor: AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                                  ),
                                ),
                              );
                            }
                            
                            final post = _posts[index];
                            return _buildInspirationCard(post);
                          },
                        ),
                      ),
              ),
            ],
          ),
        ],
      ),
      // âœ… NOUVEAU : Bouton adaptÃ© selon le rÃ´le
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToAddInspiration,
        backgroundColor: KipikTheme.rouge,
        child: Icon(
          _currentUserRole == UserRole.tatoueur ? Icons.add_a_photo : Icons.add,
          color: Colors.white,
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(24),
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.95),
          borderRadius: BorderRadius.circular(24),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.image_search,
              size: 64,
              color: Colors.grey[800],
            ),
            const SizedBox(height: 16),
            const Text(
              'Aucune inspiration trouvÃ©e',
              style: TextStyle(
                fontFamily: 'PermanentMarker',
                fontSize: 20,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _currentUserRole == UserRole.tatoueur 
                ? 'Publiez vos premiÃ¨res Å“uvres' 
                : 'Essayez une autre catÃ©gorie ou revenez plus tard',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 16,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInspirationCard(InspirationPost post) {
    final double cardHeight = 150 + (post.id.hashCode % 100);
    
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context, 
          MaterialPageRoute(
            builder: (_) => DetailInspirationPage(post: post),
          ),
        );
      },
      child: Card(
        clipBehavior: Clip.antiAlias,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(color: KipikTheme.rouge.withOpacity(0.3), width: 1),
        ),
        elevation: 4,
        child: Stack(
          children: [
            // Image
            SizedBox(
              height: cardHeight,
              width: double.infinity,
              child: Hero(
                tag: 'inspiration_${post.id}',
                child: Image.network(
                  post.imageUrl,
                  fit: BoxFit.cover,
                  loadingBuilder: (context, child, loadingProgress) {
                    if (loadingProgress == null) return child;
                    return Center(
                      child: CircularProgressIndicator(
                        value: loadingProgress.expectedTotalBytes != null
                            ? loadingProgress.cumulativeBytesLoaded / 
                              loadingProgress.expectedTotalBytes!
                            : null,
                        valueColor: const AlwaysStoppedAnimation<Color>(KipikTheme.rouge),
                      ),
                    );
                  },
                  errorBuilder: (context, error, stackTrace) {
                    return Container(
                      color: Colors.grey[300],
                      child: const Icon(
                        Icons.broken_image,
                        size: 48,
                        color: Colors.grey,
                      ),
                    );
                  },
                ),
              ),
            ),
            
            // Informations superposÃ©es
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.bottomCenter,
                    end: Alignment.topCenter,
                    colors: [
                      Colors.black.withOpacity(0.7),
                      Colors.transparent,
                    ],
                  ),
                ),
                child: Row(
                  children: [
                    CircleAvatar(
                      radius: 16,
                      backgroundImage: NetworkImage(post.authorAvatarUrl),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        post.authorName,
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 12,
                          fontFamily: 'PermanentMarker',
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            
            // Bouton favori
            Positioned(
              top: 8,
              right: 8,
              child: GestureDetector(
                onTap: () => _toggleFavorite(post),
                child: Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.5),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    post.isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: post.isFavorite ? KipikTheme.rouge : Colors.white,
                    size: 20,
                  ),
                ),
              ),
            ),
            
            // Badge "Pro" si c'est un professionnel
            if (post.isFromProfessional)
              Positioned(
                top: 8,
                left: 8,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: KipikTheme.rouge,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Text(
                    'PRO',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 10,
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\splash\combined_splash_screen.dart

// lib/pages/splash/combined_splash_screen.dart
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';
import 'package:kipik_v5/pages/auth/welcome_page.dart';
import 'package:vibration/vibration.dart';

class CombinedSplashScreen extends StatefulWidget {
  const CombinedSplashScreen({super.key});

  @override
  State<CombinedSplashScreen> createState() => _CombinedSplashScreenState();
}

class _CombinedSplashScreenState extends State<CombinedSplashScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late List<InkPoint> _inkPoints;
  final AudioPlayer _audioPlayer = AudioPlayer();
  bool _navigated = false;
  final Set<int> _vibratedPoints = {};
  late Timer _vibrationTimer;

  @override
  void initState() {
    super.initState();
    
    // GÃ©nÃ©rer les points d'encre
    _generateInkPoints();
    
    // DÃ©marrer l'audio
    _playSound();
    
    // Animation principale (4 secondes)
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 4),
    )..forward();
    
    // Timer pour vÃ©rifier les vibrations
    _vibrationTimer = Timer.periodic(const Duration(milliseconds: 100), (_) {
      _checkVibrationsForNewPoints();
    });
    
    // Navigation automatique Ã  la fin
    _controller.addStatusListener((status) {
      if (status == AnimationStatus.completed && !_navigated) {
        _navigateToWelcome();
      }
    });
  }
  
  void _generateInkPoints() {
    final random = Random();
    
    // CrÃ©er 5 points comme dans votre code original
    _inkPoints = List.generate(5, (index) {
      return InkPoint(
        position: Offset(
          random.nextDouble() * 2 - 0.5, // -0.5 Ã  1.5
          random.nextDouble() * 2 - 0.5, // -0.5 Ã  1.5
        ),
        // Ajouter des dÃ©lais variables pour les vibrations sÃ©quentielles
        delay: index * 0.15, // 0, 0.15, 0.3, 0.45, 0.6
      );
    });
  }
  
  // VÃ©rifie si de nouveaux points d'encre doivent dÃ©clencher une vibration
  void _checkVibrationsForNewPoints() {
    if (!mounted) return;
    
    final progress = _controller.value;
    for (int i = 0; i < _inkPoints.length; i++) {
      // Si ce point n'a pas encore vibrÃ© et si son dÃ©lai est dÃ©passÃ©
      if (!_vibratedPoints.contains(i) && progress >= _inkPoints[i].delay) {
        _vibratedPoints.add(i);
        _vibrateForPoint();
      }
    }
  }
  
  // Vibration pour un nouveau point d'encre
  Future<void> _vibrateForPoint() async {
    if (await Vibration.hasVibrator() ?? false) {
      Vibration.vibrate(duration: 50, amplitude: 80);
    }
  }

  Future<void> _playSound() async {
    try {
      await _audioPlayer.setAsset('assets/sounds/tattoo_machine.mp3');
      await _audioPlayer.setVolume(1.0);
      await _audioPlayer.play();
    } catch (e) {
      debugPrint('Erreur lecture son: $e');
    }
  }

  void _navigateToWelcome() {
    _navigated = true;
    _audioPlayer.stop();
    _vibrationTimer.cancel();
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(builder: (_) => const WelcomePage()),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    _audioPlayer.dispose();
    _vibrationTimer.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Animation d'encre
          AnimatedBuilder(
            animation: _controller,
            builder: (context, child) {
              return CustomPaint(
                painter: EnhancedInkPainter(
                  progress: _controller.value,
                  inkPoints: _inkPoints,
                ),
              );
            },
          ),
          
          // Logo et texte
          Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Image.asset(
                  'assets/logo_kipik.png',
                  width: MediaQuery.of(context).size.width * 0.7,
                  fit: BoxFit.contain,
                ),
                const SizedBox(height: 20),
                const Text(
                  "L'APPLICATION TATOUAGE",
                  style: TextStyle(
                    fontFamily: 'PermanentMarker',
                    fontSize: 32,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// Classe pour stocker un point d'encre avec son dÃ©lai
class InkPoint {
  final Offset position;
  final double delay;
  
  InkPoint({
    required this.position,
    this.delay = 0.0,
  });
}

// Painter amÃ©liorÃ© pour l'animation d'encre
class EnhancedInkPainter extends CustomPainter {
  final double progress;
  final List<InkPoint> inkPoints;
  
  EnhancedInkPainter({
    required this.progress,
    required this.inkPoints,
  });
  
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.fill;
    
    // Rayon maximum un peu plus grand pour s'assurer que tout l'Ã©cran est couvert
    final maxRadius = sqrt(size.width * size.width + size.height * size.height) * 1.2;
    
    // Dessiner chaque point d'encre
    for (var point in inkPoints) {
      // Calculer la progression ajustÃ©e en fonction du dÃ©lai
      final adjustedProgress = max(0.0, progress - point.delay) / (1.0 - point.delay);
      if (adjustedProgress <= 0) continue;
      
      // Position rÃ©elle sur l'Ã©cran
      final position = Offset(
        point.position.dx * size.width,
        point.position.dy * size.height,
      );
      
      // Rayon actuel avec une courbe d'easing pour un mouvement plus naturel
      final radius = maxRadius * _easeOutCubic(adjustedProgress);
      
      // Dessiner le cercle d'encre
      canvas.drawCircle(position, radius, paint);
    }
  }
  
  // Fonction d'easing pour un mouvement plus naturel
  double _easeOutCubic(double t) {
    return 1 - pow(1 - t, 3).toDouble();
  }
  
  @override
  bool shouldRepaint(EnhancedInkPainter oldDelegate) {
    return oldDelegate.progress != progress;
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\splash\index.dart

export 'splash_screen_fixe.dart';
export 'splash_screen_animated.dart';



//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\splash\splash_screen_animated.dart

// lib/pages/splash/splash_screen_animated.dart
import 'dart:math'; // AjoutÃ© pour avoir accÃ¨s Ã  pi
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';
import 'package:kipik_v5/pages/auth/welcome_page.dart';
import 'package:kipik_v5/widgets/logo_with_text.dart';
import 'package:vibration/vibration.dart';
import 'package:video_player/video_player.dart';

class SplashScreenAnimated extends StatefulWidget {
  const SplashScreenAnimated({super.key});

  @override
  State<SplashScreenAnimated> createState() => _SplashScreenAnimatedState();
}

class _SplashScreenAnimatedState extends State<SplashScreenAnimated> {
  late VideoPlayerController _videoController;
  final AudioPlayer _audioPlayer = AudioPlayer();
  bool _navigated = false;
  bool _videoInitialized = false;
  bool _initializationFailed = false;

  @override
  void initState() {
    super.initState();
    _initializeVideo();
    _triggerEffects(); // vibration + son
    
    // Augmenter le timer de secours Ã  10 secondes
    Future.delayed(const Duration(seconds: 10), () {
      if (mounted && !_navigated && !_videoInitialized) {
        debugPrint('Navigation forcÃ©e aprÃ¨s dÃ©lai dÃ©passÃ©');
        _navigateToHome();
      }
    });
  }

  Future<void> _initializeVideo() async {
    try {
      debugPrint('DÃ©but initialisation vidÃ©o');
      
      // Initialiser le contrÃ´leur vidÃ©o avec votre fichier MP4 existant
      _videoController = VideoPlayerController.asset('assets/videos/animation_background.mp4');
      
      // Ajouter un listener pour dÃ©tecter les erreurs
      _videoController.addListener(() {
        if (_videoController.value.hasError) {
          debugPrint('Erreur VideoPlayer: ${_videoController.value.errorDescription}');
          _handleVideoError();
        }
      });
      
      // Configurer la vidÃ©o
      await _videoController.initialize().catchError((error) {
        debugPrint('Erreur initialisation: $error');
        _handleVideoError();
        return null;
      });
      
      if (_videoController.value.isInitialized && mounted) {
        debugPrint('VidÃ©o initialisÃ©e avec succÃ¨s');
        _videoController.setLooping(true);
        _videoController.setVolume(0.0);
        _videoController.play();
        
        setState(() {
          _videoInitialized = true;
        });
        
        // Augmenter la durÃ©e Ã  7 secondes
        Future.delayed(const Duration(seconds: 7), () {
          if (mounted && !_navigated) {
            _navigateToHome();
          }
        });
      }
    } catch (e) {
      debugPrint('Exception lors de l\'initialisation de la vidÃ©o: $e');
      _handleVideoError();
    }
  }
  
  void _handleVideoError() {
    if (mounted && !_initializationFailed) {
      setState(() {
        _initializationFailed = true;
      });
      
      // Naviguer aprÃ¨s un court dÃ©lai en cas d'erreur
      Future.delayed(const Duration(milliseconds: 1500), () {
        if (mounted && !_navigated) {
          _navigateToHome();
        }
      });
    }
  }

  Future<void> _triggerEffects() async {
    // Vibration courte si supportÃ©e
    if (await Vibration.hasVibrator()) {
      Vibration.vibrate(duration: 100);
    }

    // Lecture du son
    try {
      await _audioPlayer.setAsset('assets/sounds/tattoo_machine.mp3');
      await _audioPlayer.setVolume(1.0);
      await _audioPlayer.play();
    } catch (e) {
      debugPrint('Erreur lecture son: $e');
    }
  }

  void _navigateToHome() {
    if (!_navigated) {
      _navigated = true;
      _audioPlayer.stop();
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => const WelcomePage()),
      );
    }
  }

  @override
  void dispose() {
    _videoController.dispose();
    _audioPlayer.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        fit: StackFit.expand,
        children: [
          // VidÃ©o en arriÃ¨re-plan ou animation de secours
          if (_videoInitialized)
            SizedBox.expand(
              child: FittedBox(
                fit: BoxFit.cover,
                child: SizedBox(
                  width: _videoController.value.size.width,
                  height: _videoController.value.size.height,
                  child: Transform(
                    // Combinaison de transformations pour effet miroir horizontal + haut/bas inversÃ©
                    alignment: Alignment.center,
                    transform: Matrix4.identity()
                      ..rotateY(pi) // Miroir horizontal (pi = 180 degrÃ©s)
                      ..rotateX(pi), // Inverser haut/bas (pi = 180 degrÃ©s)
                    child: VideoPlayer(_videoController),
                  ),
                ),
              ),
            )
          else if (_initializationFailed)
            Container(
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [Colors.black, Color(0xFF333333)],
                ),
              ),
            ),
          
          // Logo et texte (toujours blanc)
          const Center(
            child: LogoWithText(),
          ),
          
          // Indicateur de chargement
          if (!_videoInitialized && !_initializationFailed)
            const Center(
              child: CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            ),
        ],
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\splash\splash_screen_fixe.dart

// lib/pages/splash/splash_screen_fixe.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:kipik_v5/pages/splash/splash_screen_animated.dart';
import 'package:kipik_v5/widgets/logo_with_text.dart';

class SplashScreenFixe extends StatefulWidget {
  const SplashScreenFixe({Key? key}) : super(key: key);

  @override
  State<SplashScreenFixe> createState() => _SplashScreenFixeState();
}

class _SplashScreenFixeState extends State<SplashScreenFixe> {
  Timer? _timer;

  @override
  void initState() {
    super.initState();
    // Lance un timer de 3 secondes avant de passer Ã  l'Ã©cran animÃ©
    _timer = Timer(const Duration(seconds: 3), () {
      if (!mounted) return;
      Navigator.of(context).pushReplacement(
        PageRouteBuilder(
          pageBuilder: (_, __, ___) => const SplashScreenAnimated(),
          transitionsBuilder: (_, __, ___, child) => child,
          transitionDuration: Duration.zero,
        ),
      );
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Center(
          // Utilisation du widget commun
          child: const LogoWithText(textColor: Colors.black),
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\support\create_support_ticket_page.dart

// lib/pages/support/create_support_ticket_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/services/chat/chat_manager.dart';
import 'package:kipik_v5/pages/support/support_ticket_detail_page.dart';
import 'package:kipik_v5/models/support_ticket.dart';

class CreateSupportTicketPage extends StatefulWidget {
  final String userId;

  const CreateSupportTicketPage({
    Key? key,
    required this.userId,
  }) : super(key: key);

  @override
  State<CreateSupportTicketPage> createState() => _CreateSupportTicketPageState();
}

class _CreateSupportTicketPageState extends State<CreateSupportTicketPage> {
  final _formKey = GlobalKey<FormState>();
  final _subjectController = TextEditingController();
  final _messageController = TextEditingController();
  
  String _selectedCategory = 'question';
  bool _isCreating = false;

  final Map<String, String> _categories = {
    'question': 'Question gÃ©nÃ©rale',
    'bug': 'Bug / ProblÃ¨me technique',
    'account': 'ProblÃ¨me de compte',
    'payment': 'ProblÃ¨me de paiement',
    'suggestion': 'Suggestion d\'amÃ©lioration',
  };

  final Map<String, IconData> _categoryIcons = {
    'question': Icons.help_outline,
    'bug': Icons.bug_report_outlined,
    'account': Icons.account_circle_outlined,
    'payment': Icons.payment_outlined,
    'suggestion': Icons.lightbulb_outline,
  };

  @override
  void dispose() {
    _subjectController.dispose();
    _messageController.dispose();
    super.dispose();
  }

  Future<void> _createTicket() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isCreating = true);

    try {
      final ticketId = await ChatManager.createSupportTicket(
        userId: widget.userId,
        subject: _subjectController.text.trim(),
        category: _selectedCategory,
        message: _messageController.text.trim(),
      );

      if (mounted) {
        // Naviguer vers le dÃ©tail du ticket
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (_) => SupportTicketDetailPage(
              ticket: SupportTicket(
                id: ticketId,
                userId: widget.userId,
                subject: _subjectController.text.trim(),
                category: _selectedCategory,
                status: 'open',
                priority: _determinePriority(_selectedCategory),
                createdAt: DateTime.now(),
                updatedAt: DateTime.now(),
              ),
            ),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        setState(() => _isCreating = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur lors de la crÃ©ation du ticket: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  String _determinePriority(String category) {
    switch (category) {
      case 'payment':
      case 'account':
        return 'high';
      case 'bug':
        return 'medium';
      default:
        return 'low';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(Icons.arrow_back, color: Colors.white),
          ),
          onPressed: () => Navigator.pop(context),
        ),
        title: const Text(
          'Nouveau ticket de support',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontFamily: 'PermanentMarker',
          ),
        ),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            // En-tÃªte explicatif
            Container(
              padding: const EdgeInsets.all(20),
              margin: const EdgeInsets.only(bottom: 24),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: Colors.blue.withOpacity(0.2),
                  width: 1,
                ),
              ),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.blue,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Icon(
                      Icons.support_agent,
                      color: Colors.white,
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 16),
                  const Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Support Kipik',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        SizedBox(height: 4),
                        Text(
                          'Notre Ã©quipe vous rÃ©pondra dans les plus brefs dÃ©lais',
                          style: TextStyle(
                            color: Colors.white70,
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

            // SÃ©lection de catÃ©gorie
            const Text(
              'CatÃ©gorie du problÃ¨me',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 12),
            
            ...(_categories.entries.map((entry) {
              final isSelected = _selectedCategory == entry.key;
              return Container(
                margin: const EdgeInsets.only(bottom: 8),
                child: InkWell(
                  onTap: () => setState(() => _selectedCategory = entry.key),
                  borderRadius: BorderRadius.circular(12),
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: isSelected 
                          ? Colors.blue.withOpacity(0.2)
                          : Colors.white.withOpacity(0.05),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: isSelected 
                            ? Colors.blue
                            : Colors.white.withOpacity(0.1),
                        width: isSelected ? 2 : 1,
                      ),
                    ),
                    child: Row(
                      children: [
                        Icon(
                          _categoryIcons[entry.key],
                          color: isSelected ? Colors.blue : Colors.white70,
                          size: 20,
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: Text(
                            entry.value,
                            style: TextStyle(
                              color: isSelected ? Colors.blue : Colors.white,
                              fontSize: 14,
                              fontWeight: isSelected 
                                  ? FontWeight.w600 
                                  : FontWeight.w400,
                            ),
                          ),
                        ),
                        if (isSelected)
                          Icon(
                            Icons.check_circle,
                            color: Colors.blue,
                            size: 20,
                          ),
                      ],
                    ),
                  ),
                ),
              );
            }).toList()),

            const SizedBox(height: 24),

            // Sujet
            const Text(
              'Sujet',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 12),
            TextFormField(
              controller: _subjectController,
              style: const TextStyle(color: Colors.white),
              decoration: InputDecoration(
                hintText: 'RÃ©sumÃ© de votre problÃ¨me...',
                hintStyle: const TextStyle(color: Colors.white54),
                filled: true,
                fillColor: Colors.white.withOpacity(0.05),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide.none,
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: const BorderSide(color: Colors.blue, width: 2),
                ),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Veuillez saisir un sujet';
                }
                if (value.trim().length < 10) {
                  return 'Le sujet doit contenir au moins 10 caractÃ¨res';
                }
                return null;
              },
            ),

            const SizedBox(height: 24),

            // Description
            const Text(
              'Description dÃ©taillÃ©e',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 12),
            TextFormField(
              controller: _messageController,
              style: const TextStyle(color: Colors.white),
              maxLines: 6,
              decoration: InputDecoration(
                hintText: 'DÃ©crivez votre problÃ¨me en dÃ©tail...\n\nN\'hÃ©sitez pas Ã  inclure :\nâ€¢ Les Ã©tapes pour reproduire le problÃ¨me\nâ€¢ Ce que vous attendiez\nâ€¢ Ce qui s\'est passÃ© Ã  la place',
                hintStyle: const TextStyle(color: Colors.white54),
                filled: true,
                fillColor: Colors.white.withOpacity(0.05),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide.none,
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: const BorderSide(color: Colors.blue, width: 2),
                ),
                alignLabelWithHint: true,
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Veuillez dÃ©crire votre problÃ¨me';
                }
                if (value.trim().length < 20) {
                  return 'La description doit contenir au moins 20 caractÃ¨res';
                }
                return null;
              },
            ),

            const SizedBox(height: 32),

            // Bouton de crÃ©ation
            SizedBox(
              height: 50,
              child: ElevatedButton(
                onPressed: _isCreating ? null : _createTicket,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 2,
                ),
                child: _isCreating
                    ? const SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      )
                    : const Text(
                        'CrÃ©er le ticket de support',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
              ),
            ),

            const SizedBox(height: 16),

            // Info dÃ©lai de rÃ©ponse
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: Colors.green.withOpacity(0.2),
                  width: 1,
                ),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.schedule,
                    color: Colors.green,
                    size: 20,
                  ),
                  const SizedBox(width: 12),
                  const Expanded(
                    child: Text(
                      'DÃ©lai de rÃ©ponse habituel : 24-48h ouvrÃ©es',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\support\support_chat_page.dart

// lib/pages/support/support_chat_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/models/support_ticket.dart';
import 'package:kipik_v5/models/chat_message.dart';
import 'package:kipik_v5/services/chat/chat_manager.dart';
import 'package:kipik_v5/pages/support/support_ticket_detail_page.dart';
import 'package:kipik_v5/pages/support/create_support_ticket_page.dart';

class SupportChatPage extends StatefulWidget {
  final String userId;

  const SupportChatPage({
    Key? key,
    required this.userId,
  }) : super(key: key);

  @override
  State<SupportChatPage> createState() => _SupportChatPageState();
}

class _SupportChatPageState extends State<SupportChatPage> {
  List<SupportTicket> _tickets = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadTickets();
  }

  void _loadTickets() {
    setState(() => _isLoading = true);
    
    ChatManager.userSupportTickets(widget.userId).listen(
      (tickets) {
        if (mounted) {
          setState(() {
            _tickets = tickets;
            _isLoading = false;
          });
        }
      },
      onError: (error) {
        if (mounted) {
          setState(() => _isLoading = false);
          _showErrorSnackBar('Erreur de chargement des tickets');
        }
      },
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }

  void _createNewTicket() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => CreateSupportTicketPage(userId: widget.userId),
      ),
    );
  }

  void _openTicket(SupportTicket ticket) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => SupportTicketDetailPage(ticket: ticket),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(Icons.arrow_back, color: Colors.white),
          ),
          onPressed: () => Navigator.pop(context),
        ),
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Icon(
                Icons.support_agent,
                color: Colors.blue,
                size: 24,
              ),
            ),
            const SizedBox(width: 12),
            const Text(
              'Support Client',
              style: TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontFamily: 'PermanentMarker',
              ),
            ),
          ],
        ),
      ),
      body: _isLoading
          ? _buildLoadingView()
          : _tickets.isEmpty
              ? _buildEmptyView()
              : _buildTicketsList(),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: _createNewTicket,
        backgroundColor: Colors.blue,
        icon: const Icon(Icons.add, color: Colors.white),
        label: const Text(
          'Nouveau ticket',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    );
  }

  Widget _buildLoadingView() {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.1),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
              strokeWidth: 3,
            ),
            const SizedBox(height: 16),
            const Text(
              'Chargement de vos tickets...',
              style: TextStyle(
                color: Colors.white70,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyView() {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(32),
        margin: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Icon(
                Icons.support_agent,
                size: 48,
                color: Colors.blue,
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Aucun ticket de support',
              style: TextStyle(
                fontSize: 20,
                fontFamily: 'PermanentMarker',
                color: Color(0xFF111827),
              ),
            ),
            const SizedBox(height: 12),
            const Text(
              'Vous n\'avez pas encore de demande de support.\nCrÃ©ez un ticket si vous avez besoin d\'aide !',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 14,
                color: Color(0xFF6B7280),
                height: 1.5,
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _createNewTicket,
              icon: const Icon(Icons.add),
              label: const Text('CrÃ©er un ticket'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTicketsList() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _tickets.length,
      itemBuilder: (context, index) {
        return _buildTicketCard(_tickets[index]);
      },
    );
  }

  Widget _buildTicketCard(SupportTicket ticket) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: InkWell(
        onTap: () => _openTicket(ticket),
        borderRadius: BorderRadius.circular(16),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header avec statut et catÃ©gorie
              Row(
                children: [
                  // IcÃ´ne de catÃ©gorie
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: _getCategoryColor(ticket.category).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(
                      _getCategoryIcon(ticket.category),
                      color: _getCategoryColor(ticket.category),
                      size: 16,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          ticket.subject,
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Color(0xFF111827),
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                        Text(
                          ticket.categoryDisplay,
                          style: const TextStyle(
                            fontSize: 12,
                            color: Color(0xFF6B7280),
                          ),
                        ),
                      ],
                    ),
                  ),
                  // Badge de statut
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: _getStatusColor(ticket.status).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      ticket.statusDisplay,
                      style: TextStyle(
                        fontSize: 11,
                        fontWeight: FontWeight.w600,
                        color: _getStatusColor(ticket.status),
                      ),
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 12),
              
              // Informations du ticket
              Row(
                children: [
                  if (ticket.isHighPriority) ...[
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 6,
                        vertical: 2,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.red.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Text(
                        'PRIORITÃ‰ HAUTE',
                        style: TextStyle(
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                          color: Colors.red,
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                  ],
                  Text(
                    'CrÃ©Ã© ${_formatDate(ticket.createdAt)}',
                    style: const TextStyle(
                      fontSize: 12,
                      color: Color(0xFF9CA3AF),
                    ),
                  ),
                  const Spacer(),
                  const Icon(
                    Icons.arrow_forward_ios,
                    size: 14,
                    color: Color(0xFF9CA3AF),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Color _getCategoryColor(String category) {
    switch (category) {
      case 'bug':
        return Colors.red;
      case 'question':
        return Colors.blue;
      case 'suggestion':
        return Colors.green;
      case 'payment':
        return Colors.orange;
      case 'account':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  IconData _getCategoryIcon(String category) {
    switch (category) {
      case 'bug':
        return Icons.bug_report;
      case 'question':
        return Icons.help;
      case 'suggestion':
        return Icons.lightbulb;
      case 'payment':
        return Icons.payment;
      case 'account':
        return Icons.account_circle;
      default:
        return Icons.support;
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'open':
        return Colors.blue;
      case 'in_progress':
        return Colors.orange;
      case 'waiting_customer':
        return Colors.purple;
      case 'resolved':
        return Colors.green;
      case 'closed':
        return Colors.grey;
      default:
        return Colors.grey;
    }
  }

  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays == 0) {
      return 'aujourd\'hui';
    } else if (difference.inDays == 1) {
      return 'hier';
    } else if (difference.inDays < 7) {
      return 'il y a ${difference.inDays} jours';
    } else {
      return '${date.day}/${date.month}/${date.year}';
    }
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\support\support_ticket_detail_page.dart

// lib/pages/support/support_ticket_detail_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';
import 'package:kipik_v5/models/support_ticket.dart';
import 'package:kipik_v5/models/chat_message.dart';
import 'package:kipik_v5/services/chat/chat_manager.dart';

class SupportTicketDetailPage extends StatefulWidget {
  final SupportTicket ticket;

  const SupportTicketDetailPage({
    Key? key,
    required this.ticket,
  }) : super(key: key);

  @override
  State<SupportTicketDetailPage> createState() => _SupportTicketDetailPageState();
}

class _SupportTicketDetailPageState extends State<SupportTicketDetailPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  
  List<ChatMessage> _messages = [];
  bool _isLoading = true;
  bool _isSending = false;

  @override
  void initState() {
    super.initState();
    _loadMessages();
  }

  void _loadMessages() {
    setState(() => _isLoading = true);
    
    ChatManager.supportMessages(widget.ticket.id).listen(
      (messages) {
        if (mounted) {
          setState(() {
            _messages = messages;
            _isLoading = false;
          });
          _scrollToBottom();
        }
      },
      onError: (error) {
        if (mounted) {
          setState(() => _isLoading = false);
          _showErrorSnackBar('Erreur de chargement des messages');
        }
      },
    );
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  Future<void> _sendMessage() async {
    final text = _messageController.text.trim();
    if (text.isEmpty) return;

    setState(() => _isSending = true);
    _messageController.clear();

    final message = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: text,
      senderId: widget.ticket.userId,
      timestamp: DateTime.now(),
    );

    try {
      await ChatManager.sendSupportMessage(widget.ticket.id, message);
      _scrollToBottom();
    } catch (e) {
      _showErrorSnackBar('Erreur d\'envoi du message');
    } finally {
      setState(() => _isSending = false);
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }

  void _closeTicket() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Fermer le ticket'),
        content: const Text(
          'ÃŠtes-vous sÃ»r de vouloir fermer ce ticket ?\n\nVous ne pourrez plus ajouter de messages.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                await ChatManager.closeSupportTicket(widget.ticket.id);
                Navigator.pop(context); // Retour Ã  la liste
              } catch (e) {
                _showErrorSnackBar('Erreur lors de la fermeture');
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Fermer', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final canSendMessages = !widget.ticket.isClosed;

    return Scaffold(
      backgroundColor: const Color(0xFF0A0A0A),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(Icons.arrow_back, color: Colors.white),
          ),
          onPressed: () => Navigator.pop(context),
        ),
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              widget.ticket.subject,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
              overflow: TextOverflow.ellipsis,
            ),
            Text(
              'Ticket #${widget.ticket.id.substring(0, 8)}',
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 12,
              ),
            ),
          ],
        ),
        actions: [
          if (canSendMessages)
            IconButton(
              onPressed: _closeTicket,
              icon: const Icon(Icons.close, color: Colors.white70),
              tooltip: 'Fermer le ticket',
            ),
        ],
      ),
      body: Column(
        children: [
          // En-tÃªte avec infos du ticket
          _buildTicketHeader(),
          
          // Messages
          Expanded(
            child: _isLoading
                ? _buildLoadingView()
                : _buildMessagesList(),
          ),
          
          // Zone de saisie
          if (canSendMessages) _buildInputArea(),
        ],
      ),
    );
  }

  Widget _buildTicketHeader() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              // IcÃ´ne de catÃ©gorie
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: _getCategoryColor(widget.ticket.category).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  _getCategoryIcon(widget.ticket.category),
                  color: _getCategoryColor(widget.ticket.category),
                  size: 16,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  widget.ticket.categoryDisplay,
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                    color: Color(0xFF6B7280),
                  ),
                ),
              ),
              // Badge de statut
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: _getStatusColor(widget.ticket.status).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  widget.ticket.statusDisplay,
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: _getStatusColor(widget.ticket.status),
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          Row(
            children: [
              if (widget.ticket.isHighPriority) ...[
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.red.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Text(
                    'PRIORITÃ‰ HAUTE',
                    style: TextStyle(
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.red,
                    ),
                  ),
                ),
                const SizedBox(width: 8),
              ],
              Text(
                'CrÃ©Ã© le ${_formatDate(widget.ticket.createdAt)}',
                style: const TextStyle(
                  fontSize: 12,
                  color: Color(0xFF9CA3AF),
                ),
              ),
              if (widget.ticket.assignedToAgent != null) ...[
                const SizedBox(width: 16),
                const Icon(
                  Icons.person,
                  size: 12,
                  color: Color(0xFF9CA3AF),
                ),
                const SizedBox(width: 4),
                Text(
                  'AssignÃ© Ã  ${widget.ticket.assignedToAgent}',
                  style: const TextStyle(
                    fontSize: 12,
                    color: Color(0xFF9CA3AF),
                  ),
                ),
              ],
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingView() {
    return const Center(
      child: CircularProgressIndicator(
        valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
      ),
    );
  }

  Widget _buildMessagesList() {
    if (_messages.isEmpty) {
      return Center(
        child: Container(
          padding: const EdgeInsets.all(24),
          child: const Text(
            'Aucun message dans ce ticket',
            style: TextStyle(
              color: Colors.white70,
              fontSize: 16,
            ),
          ),
        ),
      );
    }

    return ListView.builder(
      controller: _scrollController,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: _messages.length,
      itemBuilder: (context, index) {
        return _buildMessageBubble(_messages[index]);
      },
    );
  }

  Widget _buildMessageBubble(ChatMessage message) {
    final isAgent = message.senderId.startsWith('agent_');
    final isUser = message.senderId == widget.ticket.userId;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (isAgent) ...[
            CircleAvatar(
              radius: 16,
              backgroundColor: Colors.blue,
              child: const Icon(Icons.support_agent, color: Colors.white, size: 16),
            ),
            const SizedBox(width: 12),
          ],
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isAgent
                    ? Colors.blue.withOpacity(0.1)
                    : isUser
                        ? KipikTheme.rouge
                        : Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(isAgent ? 8 : 20),
                  topRight: Radius.circular(isAgent ? 20 : 8),
                  bottomLeft: const Radius.circular(20),
                  bottomRight: const Radius.circular(20),
                ),
                border: isAgent
                    ? Border.all(color: Colors.blue.withOpacity(0.2))
                    : null,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (message.hasText)
                    Text(
                      message.text!,
                      style: TextStyle(
                        color: isAgent
                            ? Colors.blue[800]
                            : isUser
                                ? Colors.white
                                : Colors.black87,
                        fontSize: 15,
                        height: 1.4,
                      ),
                    ),
                  const SizedBox(height: 8),
                  Text(
                    message.timeDisplay,
                    style: TextStyle(
                      color: isAgent
                          ? Colors.blue.withOpacity(0.7)
                          : isUser
                              ? Colors.white70
                              : Colors.grey[600],
                      fontSize: 11,
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (isUser) ...[
            const SizedBox(width: 12),
            CircleAvatar(
              radius: 16,
              backgroundColor: KipikTheme.rouge,
              child: const Icon(Icons.person, color: Colors.white, size: 16),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'Ã‰crivez votre message...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(20),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: Colors.grey[100],
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 12,
                ),
              ),
              maxLines: null,
              textInputAction: TextInputAction.send,
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          const SizedBox(width: 12),
          FloatingActionButton(
            onPressed: _isSending ? null : _sendMessage,
            backgroundColor: Colors.blue,
            mini: true,
            child: _isSending
                ? const SizedBox(
                    width: 16,
                    height: 16,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  )
                : const Icon(Icons.send, color: Colors.white, size: 18),
          ),
        ],
      ),
    );
  }

  Color _getCategoryColor(String category) {
    switch (category) {
      case 'bug':
        return Colors.red;
      case 'question':
        return Colors.blue;
      case 'suggestion':
        return Colors.green;
      case 'payment':
        return Colors.orange;
      case 'account':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  IconData _getCategoryIcon(String category) {
    switch (category) {
      case 'bug':
        return Icons.bug_report;
      case 'question':
        return Icons.help;
      case 'suggestion':
        return Icons.lightbulb;
      case 'payment':
        return Icons.payment;
      case 'account':
        return Icons.account_circle;
      default:
        return Icons.support;
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'open':
        return Colors.blue;
      case 'in_progress':
        return Colors.orange;
      case 'waiting_customer':
        return Colors.purple;
      case 'resolved':
        return Colors.green;
      case 'closed':
        return Colors.grey;
      default:
        return Colors.grey;
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year} Ã  ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }
}


//// File: C:\Users\gaxat\KIPIK\kipik_v5\lib\pages\temp\first_setup_page.dart

// lib/pages/temp/first_setup_page.dart

import 'package:flutter/material.dart';
import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/pages/admin/admin_setup_page.dart';
import 'package:kipik_v5/theme/kipik_theme.dart';

class FirstSetupPage extends StatefulWidget {
  const FirstSetupPage({Key? key}) : super(key: key);

  @override
  State<FirstSetupPage> createState() => _FirstSetupPageState();
}

class _FirstSetupPageState extends State<FirstSetupPage> {
  bool _isLoading = true;
  bool _firstAdminExists = false;
  String _message = '';

  @override
  void initState() {
    super.initState();
    _checkFirstAdmin();
  }

  Future<void> _checkFirstAdmin() async {
    try {
      final exists = await SecureAuthService.instance.checkFirstAdminExists();
      setState(() {
        _firstAdminExists = exists;
        _isLoading = false;
        _message = exists 
            ? 'âœ… Application dÃ©jÃ  configurÃ©e'
            : 'ðŸ”§ Configuration initiale requise';
      });
    } catch (e) {
      setState(() {
        _firstAdminExists = false;
        _isLoading = false;
        _message = 'âš™ï¸ Configuration initiale disponible';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              KipikTheme.rouge.withOpacity(0.1),
              Colors.white,
            ],
          ),
        ),
        child: SafeArea(
          child: Center(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Logo KIPIK
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Image.asset(
                      'assets/logo_kipik.png',
                      width: 150,
                      height: 80,
                    ),
                  ),
                  const SizedBox(height: 32),
                  
                  // Titre
                  Text(
                    'KIPIK V5',
                    style: TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      color: KipikTheme.rouge,
                      fontFamily: 'PermanentMarker',
                    ),
                  ),
                  const SizedBox(height: 8),
                  
                  Text(
                    'Plateforme de gestion tatouage',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[600],
                      fontFamily: 'Roboto',
                    ),
                  ),
                  const SizedBox(height: 48),
                  
                  // Contenu selon l'Ã©tat
                  if (_isLoading) ...[
                    Container(
                      padding: const EdgeInsets.all(24),
                      child: Column(
                        children: [
                          CircularProgressIndicator(color: KipikTheme.rouge),
                          const SizedBox(height: 16),
                          Text(
                            'VÃ©rification de la configuration...',
                            style: TextStyle(color: Colors.grey[600]),
                          ),
                        ],
                      ),
                    ),
                  ] else if (_firstAdminExists) ...[
                    // Admin dÃ©jÃ  crÃ©Ã© - Redirection vers connexion
                    Container(
                      padding: const EdgeInsets.all(24),
                      decoration: BoxDecoration(
                        color: Colors.green[50],
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(color: Colors.green, width: 2),
                      ),
                      child: Column(
                        children: [
                          Icon(
                            Icons.check_circle,
                            size: 64,
                            color: Colors.green[700],
                          ),
                          const SizedBox(height: 16),
                          Text(
                            'Application configurÃ©e',
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                              color: Colors.green[700],
                              fontFamily: 'PermanentMarker',
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            'L\'administrateur principal a dÃ©jÃ  Ã©tÃ© crÃ©Ã©.\nVous pouvez maintenant vous connecter.',
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: Colors.green[600],
                              fontFamily: 'Roboto',
                            ),
                          ),
                          const SizedBox(height: 24),
                          ElevatedButton.icon(
                            onPressed: () => Navigator.of(context).pushReplacementNamed('/connexion'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green[700],
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            icon: const Icon(Icons.login),
                            label: const Text(
                              'Aller Ã  la connexion',
                              style: TextStyle(fontFamily: 'Roboto'),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ] else ...[
                    // Premier setup requis
                    Container(
                      padding: const EdgeInsets.all(24),
                      decoration: BoxDecoration(
                        color: Colors.amber[50],
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(color: Colors.amber, width: 2),
                      ),
                      child: Column(
                        children: [
                          Icon(
                            Icons.admin_panel_settings,
                            size: 64,
                            color: Colors.amber[700],
                          ),
                          const SizedBox(height: 16),
                          Text(
                            'Configuration initiale',
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                              color: Colors.amber[700],
                              fontFamily: 'PermanentMarker',
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            'CrÃ©ez votre compte super administrateur pour commencer Ã  utiliser KIPIK.',
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: Colors.amber[600],
                              fontFamily: 'Roboto',
                            ),
                          ),
                          const SizedBox(height: 16),
                          
                          // Informations importantes
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.orange[50],
                              borderRadius: BorderRadius.circular(8),
                              border: Border.all(color: Colors.orange[200]!),
                            ),
                            child: Column(
                              children: [
                                Row(
                                  children: [
                                    Icon(Icons.warning, color: Colors.orange[700], size: 20),
                                    const SizedBox(width: 8),
                                    Text(
                                      'Important',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        color: Colors.orange[700],
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  'â€¢ Cette configuration n\'est possible qu\'une seule fois\n'
                                  'â€¢ Vous serez le seul super administrateur\n'
                                  'â€¢ reCAPTCHA avec score 80% minimum requis\n'
                                  'â€¢ Conservez prÃ©cieusement vos identifiants',
                                  style: TextStyle(
                                    fontSize: 11,
                                    color: Colors.orange[600],
                                  ),
                                ),
                              ],
                            ),
                          ),
                          
                          const SizedBox(height: 24),
                          ElevatedButton.icon(
                            onPressed: () => Navigator.of(context).push(
                              MaterialPageRoute(
                                builder: (_) => const AdminSetupPage(),
                              ),
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: KipikTheme.rouge,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              elevation: 4,
                            ),
                            icon: const Icon(Icons.security),
                            label: const Text(
                              'Configurer le Super Admin',
                              style: TextStyle(
                                fontFamily: 'Roboto',
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                  
                  const SizedBox(height: 32),
                  
                  // Message de statut
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: _message.startsWith('âœ…')
                          ? Colors.green.withOpacity(0.1)
                          : _message.startsWith('ðŸ”§')
                              ? Colors.blue.withOpacity(0.1)
                              : Colors.orange.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      _message,
                      style: TextStyle(
                        color: _message.startsWith('âœ…')
                            ? Colors.green[700]
                            : _message.startsWith('ðŸ”§')
                                ? Colors.blue[700]
                                : Colors.orange[700],
                        fontSize: 12,
                        fontFamily: 'Roboto',
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                  
                  const SizedBox(height: 48),
                  
                  // Liens de navigation
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      TextButton.icon(
                        onPressed: () => Navigator.of(context).pushReplacementNamed('/welcome'),
                        icon: Icon(Icons.home, color: Colors.grey[600], size: 16),
                        label: Text(
                          'Accueil',
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontFamily: 'Roboto',
                            fontSize: 12,
                          ),
                        ),
                      ),
                      
                      if (_firstAdminExists) ...[
                        const SizedBox(width: 16),
                        TextButton.icon(
                          onPressed: () => Navigator.of(context).pushReplacementNamed('/connexion'),
                          icon: Icon(Icons.login, color: KipikTheme.rouge, size: 16),
                          label: Text(
                            'Connexion',
                            style: TextStyle(
                              color: KipikTheme.rouge,
                              fontFamily: 'Roboto',
                              fontSize: 12,
                            ),
                          ),
                        ),
                      ],
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}


