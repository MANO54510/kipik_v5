// lib/services/ai/ai_service_manager.dart

import 'dart:convert';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../../models/chat_message.dart';
import '../ai/interactive_ai_service.dart'; // ‚úÖ AJOUT√â

class AIServiceManager {
  // ‚úÖ MODIFI√â: Lecture depuis .env au lieu de constante
  static String get _openaiApiKey => dotenv.env['OPENAI_API_KEY'] ?? '';
  static const String _chatEndpoint = 'https://api.openai.com/v1/chat/completions';
  static const String _imageEndpoint = 'https://api.openai.com/v1/images/generations';
  
  // ‚úÖ V√©rification que la cl√© API est configur√©e
  static bool get isConfigured => _openaiApiKey.isNotEmpty;
  
  // üõ°Ô∏è PROTECTION BUDGET
  static const double MONTHLY_BUDGET_EUROS = 35.0;
  static const int MAX_REQUESTS_PER_USER_DAILY = 8;
  static const int MAX_IMAGES_PER_USER_MONTHLY = 3;
  static const double ESTIMATED_COST_PER_REQUEST = 0.05; // ‚Ç¨
  static const double ESTIMATED_COST_PER_IMAGE = 0.04; // ‚Ç¨

  // üé® PROMPTS SP√âCIALIS√âS TATOUAGE
  static const Map<String, String> _tattooPrompts = {
    'client': '''Tu es l'assistant expert Kipik, sp√©cialiste du tatouage pour les clients particuliers.

EXPERTISE : Styles de tatouage, conseils personnalis√©s, pr√©paration, soins, budget, choix d'artiste.

PERSONNALIT√â : Bienveillant, passionn√©, informatif, sans jugement.

NAVIGATION : Oriente activement les utilisateurs vers les services Kipik :
- "rechercher un tatoueur" pour trouver des artistes qualifi√©s
- "cr√©er un projet" pour organiser leur tatouage
- "voir la galerie" pour s'inspirer des r√©alisations
- "estimer le prix" pour calculer leur budget
- "guide du tatouage" pour apprendre les bonnes pratiques

CONSIGNES :
- Donne des conseils personnalis√©s et d√©taill√©s
- Explique les styles de tatouage (r√©alisme, traditionnel, n√©o-traditionnel, g√©om√©trique, etc.)
- Sugg√®re TOUJOURS des actions concr√®tes avec les services Kipik
- Aide √† pr√©parer les rendez-vous et choisir l'artiste
- Conseille sur les soins et la cicatrisation
- Utilise un ton amical et professionnel
- Maximum 200 mots par r√©ponse pour rester concis
- Termine souvent par une suggestion d'action''',

    'tatoueur': '''Tu es l'assistant Kipik pour les tatoueurs professionnels.

EXPERTISE : Techniques, mat√©riel, gestion client, business, hygi√®ne, r√©glementation.

CONSIGNES :
- Aide sur les techniques avanc√©es et nouveaut√©s
- Conseils business et gestion d'atelier
- R√©glementation et normes d'hygi√®ne
- Gestion client√®le et devis
- Formation et perfectionnement
- Ton professionnel entre coll√®gues
- Maximum 250 mots par r√©ponse''',

    'default': '''Tu es l'assistant Kipik, expert en tatouage.

Aide les utilisateurs avec leurs questions sur l'univers du tatouage : styles, conseils, techniques, soins.
Reste bienveillant et professionnel. Maximum 200 mots par r√©ponse.'''
  };

  /// üöÄ M√©thode principale pour obtenir une r√©ponse IA
  static Future<ChatMessage> getAIResponse(
    String prompt,
    String userId, {
    bool allowImageGeneration = false,
    String? contextPage,
  }) async {
    try {
      // ‚úÖ V√©rifier que la cl√© API est configur√©e
      if (!isConfigured) {
        throw Exception('Service IA non configur√©. Contactez l\'administrateur.');
      }

      // üõ°Ô∏è V√©rifications budget et quotas
      await _checkBudgetLimits(userId);
      await _checkUserQuotas(userId, allowImageGeneration);

      // üé® D√©tection si demande d'image
      if (allowImageGeneration && _isImageRequest(prompt)) {
        await _incrementImageUsage(userId);
        return await _generateImage(prompt, userId);
      } else {
        await _incrementChatUsage(userId);
        return await _generateText(prompt, userId, contextPage);
      }
    } catch (e) {
      return _createErrorMessage(e.toString());
    }
  }

  /// üí¨ G√©n√©ration de texte avec ChatGPT
  static Future<ChatMessage> _generateText(
    String prompt,
    String userId,
    String? contextPage,
  ) async {
    final systemPrompt = _getSystemPrompt(contextPage);

    final response = await http.post(
      Uri.parse(_chatEndpoint),
      headers: {
        'Content-Type': 'application/json; charset=utf-8', // ‚úÖ MODIFI√â: Encodage UTF-8 explicite
        'Authorization': 'Bearer $_openaiApiKey',
      },
      body: jsonEncode({
        'model': 'gpt-4o-mini', // Plus √©conomique que gpt-4o
        'messages': [
          {'role': 'system', 'content': systemPrompt},
          {'role': 'user', 'content': prompt},
        ],
        'max_tokens': 300, // Limite pour contr√¥ler les co√ªts
        'temperature': 0.7,
      }),
    );

    if (response.statusCode == 200) {
      // ‚úÖ MODIFI√â: D√©codage UTF-8 explicite
      final responseBody = utf8.decode(response.bodyBytes);
      final data = jsonDecode(responseBody);
      var content = data['choices'][0]['message']['content'] as String;
      
      // ‚úÖ AJOUT√â: Nettoyage des caract√®res d'√©chappement
      content = _cleanTextContent(content);
      
      // üìä Log des co√ªts
      await _logUsage('chat', userId, ESTIMATED_COST_PER_REQUEST);
      
      // ‚úÖ NOUVEAU: Enrichir la r√©ponse avec des actions interactives
      return InteractiveAIService.enhanceResponseWithActions(content, contextPage);
    } else {
      // ‚úÖ AM√âLIOR√â: Gestion d'erreurs plus d√©taill√©e
      final errorData = jsonDecode(response.body);
      final errorMessage = errorData['error']['message'] ?? 'Erreur API';
      throw Exception('Erreur OpenAI (${response.statusCode}): $errorMessage');
    }
  }

  /// üé® G√©n√©ration d'image avec DALL-E
  static Future<ChatMessage> _generateImage(String prompt, String userId) async {
    // Am√©liorer le prompt pour les tatouages
    final enhancedPrompt = _enhanceImagePrompt(prompt);

    final response = await http.post(
      Uri.parse(_imageEndpoint),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $_openaiApiKey',
      },
      body: jsonEncode({
        'model': 'dall-e-3',
        'prompt': enhancedPrompt,
        'n': 1,
        'size': '1024x1024',
        'quality': 'standard', // Plus √©conomique que 'hd'
        'style': 'natural',
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final imageUrl = data['data'][0]['url'] as String;
      
      // üìä Log des co√ªts
      await _logUsage('image', userId, ESTIMATED_COST_PER_IMAGE);
      
      return ChatMessage(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: "Voici une inspiration pour votre tatouage :",
        imageUrl: imageUrl,
        senderId: 'assistant',
        timestamp: DateTime.now(),
      );
    } else {
      // ‚úÖ AM√âLIOR√â: Gestion d'erreurs plus d√©taill√©e
      final errorData = jsonDecode(response.body);
      final errorMessage = errorData['error']['message'] ?? 'Erreur DALL-E';
      throw Exception('Erreur DALL-E (${response.statusCode}): $errorMessage');
    }
  }

  /// üîç D√©tection de demande d'image
  static bool _isImageRequest(String prompt) {
    final imageKeywords = [
      'dessine', 'design', 'image', 'photo', 'illustration',
      'montre', 'cr√©e', 'g√©n√®re', 'imagine', 'visualise',
      'tatouage', 'motif', 'tribal', 'fleur', 'animal'
    ];
    
    final lowerPrompt = prompt.toLowerCase();
    return imageKeywords.any((keyword) => lowerPrompt.contains(keyword));
  }

  /// üìù Prompt syst√®me selon le contexte
  static String _getSystemPrompt(String? contextPage) {
    switch (contextPage) {
      case 'client':
        return _tattooPrompts['client']!;
      case 'tatoueur':
      case 'devis':
      case 'agenda':
        return _tattooPrompts['tatoueur']!;
      default:
        return _tattooPrompts['default']!;
    }
  }

  /// ‚ú® Am√©lioration du prompt d'image pour tatouages
  static String _enhanceImagePrompt(String prompt) {
    return '''Create a tattoo design concept: $prompt. 
Style: Clean black and grey linework, suitable for tattooing, 
professional tattoo art style, detailed but not overcomplicated, 
suitable for skin application. High contrast, clear lines.''';
  }

  /// üßπ NOUVEAU: Nettoyage du contenu texte pour corriger l'encodage
  static String _cleanTextContent(String content) {
    // Remplacement des caract√®res mal encod√©s courants
    content = content
        .replaceAll(r'\u0027', "'")  // Apostrophe
        .replaceAll(r'\u00e9', '√©')  // √©
        .replaceAll(r'\u00e8', '√®')  // √®
        .replaceAll(r'\u00ea', '√™')  // √™
        .replaceAll(r'\u00e0', '√†')  // √†
        .replaceAll(r'\u00e7', '√ß')  // √ß
        .replaceAll(r'\u00f9', '√π')  // √π
        .replaceAll(r'\u00ee', '√Æ')  // √Æ
        .replaceAll(r'\u00f4', '√¥')  // √¥
        .replaceAll(r'\u00fb', '√ª')  // √ª
        .replaceAll(r'\u00ef', '√Ø')  // √Ø
        .replaceAll(r'\u00fc', '√º')  // √º
        .replaceAll(r'\u00c9', '√â')  // √â
        .replaceAll(r'\u00c0', '√Ä')  // √Ä
        .replaceAll(r'\u00c7', '√á')  // √á
        .replaceAll(r'\u2019', "'")  // Apostrophe courbe
        .replaceAll(r'\u2018', "'")  // Apostrophe ouvrante
        .replaceAll(r'\u201c', '"')  // Guillemet ouvrant
        .replaceAll(r'\u201d', '"')  // Guillemet fermant
        .replaceAll(r'\u2026', '...') // Points de suspension
        .replaceAll(r'\u2013', '‚Äì')  // Tiret demi-cadratin
        .replaceAll(r'\u2014', '‚Äî'); // Tiret cadratin
    
    // Nettoyage des s√©quences d'√©chappement restantes
    content = content.replaceAllMapped(
      RegExp(r'\\u([0-9a-fA-F]{4})'),
      (match) {
        try {
          final codePoint = int.parse(match.group(1)!, radix: 16);
          return String.fromCharCode(codePoint);
        } catch (e) {
          return match.group(0)!; // Retourner le texte original si erreur
        }
      },
    );
    
    return content;
  }

  /// üõ°Ô∏è V√©rification des limites budg√©taires
  static Future<void> _checkBudgetLimits(String userId) async {
    final prefs = await SharedPreferences.getInstance();
    final currentMonth = DateTime.now().month;
    final storedMonth = prefs.getInt('budget_month') ?? 0;
    
    // Reset mensuel automatique
    if (currentMonth != storedMonth) {
      await prefs.setDouble('monthly_spent', 0.0);
      await prefs.setInt('budget_month', currentMonth);
    }
    
    final monthlySpent = prefs.getDouble('monthly_spent') ?? 0.0;
    
    if (monthlySpent >= MONTHLY_BUDGET_EUROS) {
      throw Exception('Budget mensuel atteint (${MONTHLY_BUDGET_EUROS}‚Ç¨). R√©essayez le mois prochain.');
    }
  }

  /// üë§ V√©rification des quotas utilisateur
  static Future<void> _checkUserQuotas(String userId, bool isImageRequest) async {
    final prefs = await SharedPreferences.getInstance();
    final today = DateTime.now().toIso8601String().split('T')[0];
    
    // Quota quotidien de chat
    final dailyKey = 'daily_requests_${userId}_$today';
    final dailyRequests = prefs.getInt(dailyKey) ?? 0;
    
    if (dailyRequests >= MAX_REQUESTS_PER_USER_DAILY) {
      throw Exception('Limite quotidienne atteinte (${MAX_REQUESTS_PER_USER_DAILY} requ√™tes). Revenez demain !');
    }
    
    // Quota mensuel d'images
    if (isImageRequest) {
      final month = DateTime.now().toIso8601String().substring(0, 7);
      final monthlyImageKey = 'monthly_images_${userId}_$month';
      final monthlyImages = prefs.getInt(monthlyImageKey) ?? 0;
      
      if (monthlyImages >= MAX_IMAGES_PER_USER_MONTHLY) {
        throw Exception('Limite mensuelle d\'images atteinte (${MAX_IMAGES_PER_USER_MONTHLY}). Utilisez le chat pour des conseils !');
      }
    }
  }

  /// üìä Incr√©mentation usage chat
  static Future<void> _incrementChatUsage(String userId) async {
    final prefs = await SharedPreferences.getInstance();
    final today = DateTime.now().toIso8601String().split('T')[0];
    final dailyKey = 'daily_requests_${userId}_$today';
    final current = prefs.getInt(dailyKey) ?? 0;
    await prefs.setInt(dailyKey, current + 1);
  }

  /// üé® Incr√©mentation usage images
  static Future<void> _incrementImageUsage(String userId) async {
    final prefs = await SharedPreferences.getInstance();
    final month = DateTime.now().toIso8601String().substring(0, 7);
    final monthlyImageKey = 'monthly_images_${userId}_$month';
    final current = prefs.getInt(monthlyImageKey) ?? 0;
    await prefs.setInt(monthlyImageKey, current + 1);
  }

  /// üìà Log des co√ªts
  static Future<void> _logUsage(String type, String userId, double cost) async {
    final prefs = await SharedPreferences.getInstance();
    final currentSpent = prefs.getDouble('monthly_spent') ?? 0.0;
    await prefs.setDouble('monthly_spent', currentSpent + cost);
    
    // Log pour monitoring (en prod, envoyer √† votre analytics)
    if (kDebugMode) {
      print('üí∞ Usage IA: $type | User: $userId | Co√ªt: ${cost}‚Ç¨ | Total mois: ${(currentSpent + cost).toStringAsFixed(2)}‚Ç¨');
    }
  }

  /// ‚ùå Message d'erreur utilisateur-friendly
  static ChatMessage _createErrorMessage(String error) {
    String userMessage;
    
    if (error.contains('Service IA non configur√©')) {
      userMessage = "üîß Service en cours de configuration. Revenez bient√¥t !";
    } else if (error.contains('Budget mensuel')) {
      userMessage = "üí∞ Budget mensuel atteint ! L'IA reviendra le mois prochain. En attendant, contactez notre support pour une aide personnalis√©e.";
    } else if (error.contains('Limite quotidienne')) {
      userMessage = "‚è∞ Vous avez utilis√© toutes vos questions d'aujourd'hui ! Revenez demain pour continuer √† explorer l'univers du tatouage.";
    } else if (error.contains('Limite mensuelle d\'images')) {
      userMessage = "üé® Limite d'images atteinte ! Continuez √† me poser des questions pour des conseils tatouage.";
    } else if (error.contains('insufficient_quota')) {
      userMessage = "üí≥ Quota OpenAI d√©pass√©. L'administrateur doit recharger le compte.";
    } else {
      userMessage = "üòï Service temporairement indisponible. R√©essayez dans quelques instants !";
    }
    
    return ChatMessage(
      id: 'error_${DateTime.now().millisecondsSinceEpoch}',
      text: userMessage,
      senderId: 'assistant',
      timestamp: DateTime.now(),
    );
  }

  /// üìä Statistiques budget (pour ton dashboard admin)
  static Future<Map<String, dynamic>> getBudgetStats() async {
    final prefs = await SharedPreferences.getInstance();
    final monthlySpent = prefs.getDouble('monthly_spent') ?? 0.0;
    final remainingBudget = MONTHLY_BUDGET_EUROS - monthlySpent;
    
    return {
      'monthlyBudget': MONTHLY_BUDGET_EUROS,
      'spent': monthlySpent,
      'remaining': remainingBudget,
      'percentage': (monthlySpent / MONTHLY_BUDGET_EUROS * 100).round(),
      'configured': isConfigured,
    };
  }
}