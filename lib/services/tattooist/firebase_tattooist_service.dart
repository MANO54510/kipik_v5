// lib/services/tattooist/firebase_tattooist_service.dart

import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../core/firestore_helper.dart';
import '../../core/database_manager.dart';
import '../auth/secure_auth_service.dart';

/// Service de tatoueurs unifi√© (Production + D√©mo)
/// En mode d√©mo : utilise des profils de tatoueurs factices r√©alistes
/// En mode production : utilise Firebase Firestore r√©el
class FirebaseTattooistService {
  static FirebaseTattooistService? _instance;
  static FirebaseTattooistService get instance => _instance ??= FirebaseTattooistService._();
  FirebaseTattooistService._();

  final FirebaseFirestore _firestore = FirestoreHelper.instance;

  // ‚úÖ DONN√âES MOCK POUR LES D√âMOS
  final List<Map<String, dynamic>> _mockTattooists = [];
  final Map<String, Map<String, dynamic>> _mockProfiles = {};

  /// ‚úÖ M√âTHODE PRINCIPALE - D√©tection automatique du mode
  bool get _isDemoMode => DatabaseManager.instance.isDemoMode;

  /// ‚úÖ OBTENIR TATOUEURS (mode auto)
  Future<List<Map<String, dynamic>>> getTattooists({
    String? city,
    String? style,
    double? maxDistance,
    int limit = 20,
  }) async {
    if (_isDemoMode) {
      print('üé≠ Mode d√©mo - R√©cup√©ration tatoueurs factices');
      return await _getTattooistsMock(
        city: city,
        style: style,
        maxDistance: maxDistance,
        limit: limit,
      );
    } else {
      print('üè≠ Mode production - R√©cup√©ration tatoueurs r√©els');
      return await _getTattooistsFirebase(
        city: city,
        style: style,
        maxDistance: maxDistance,
        limit: limit,
      );
    }
  }

  /// ‚úÖ FIREBASE - Tatoueurs r√©els
  Future<List<Map<String, dynamic>>> _getTattooistsFirebase({
    String? city,
    String? style,
    double? maxDistance,
    int limit = 20,
  }) async {
    try {
      Query query = _firestore
          .collection('users')
          .where('role', isEqualTo: 'tattooist')
          .where('isActive', isEqualTo: true);

      if (city != null) {
        query = query.where('city', isEqualTo: city);
      }

      if (style != null) {
        query = query.where('specialties', arrayContains: style);
      }

      query = query.limit(limit);

      final snapshot = await query.get();
      
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        data['_source'] = 'firebase';
        return data;
      }).toList();
    } catch (e) {
      throw Exception('Erreur r√©cup√©ration tatoueurs Firebase: $e');
    }
  }

  /// ‚úÖ MOCK - Tatoueurs factices
  Future<List<Map<String, dynamic>>> _getTattooistsMock({
    String? city,
    String? style,
    double? maxDistance,
    int limit = 20,
  }) async {
    await Future.delayed(const Duration(milliseconds: 500)); // Simuler latence

    // G√©n√©rer les tatoueurs d√©mo si n√©cessaire
    if (_mockTattooists.isEmpty) {
      _generateMockTattooists();
    }

    // Filtrer selon les crit√®res
    var filteredTattooists = List<Map<String, dynamic>>.from(_mockTattooists);

    if (city != null && city.isNotEmpty) {
      filteredTattooists = filteredTattooists
          .where((t) => t['city'].toString().toLowerCase().contains(city.toLowerCase()))
          .toList();
    }

    if (style != null && style.isNotEmpty) {
      filteredTattooists = filteredTattooists
          .where((t) => (t['specialties'] as List<String>).any(
              (s) => s.toLowerCase().contains(style.toLowerCase())))
          .toList();
    }

    if (maxDistance != null) {
      // Simuler le filtrage par distance (tous les tatoueurs d√©mo sont "proches")
      filteredTattooists = filteredTattooists
          .where((t) => (t['distance'] as double) <= maxDistance)
          .toList();
    }

    // Limiter les r√©sultats
    if (filteredTattooists.length > limit) {
      filteredTattooists = filteredTattooists.take(limit).toList();
    }

    return filteredTattooists;
  }

  /// ‚úÖ OBTENIR PROFIL TATOUEUR (mode auto)
  Future<Map<String, dynamic>?> getTattooistProfile(String tattooistId) async {
    if (_isDemoMode) {
      return await _getTattooistProfileMock(tattooistId);
    } else {
      return await _getTattooistProfileFirebase(tattooistId);
    }
  }

  /// ‚úÖ FIREBASE - Profil r√©el
  Future<Map<String, dynamic>?> _getTattooistProfileFirebase(String tattooistId) async {
    try {
      final doc = await _firestore.collection('users').doc(tattooistId).get();
      
      if (!doc.exists) return null;
      
      final data = doc.data()!;
      data['id'] = doc.id;
      data['_source'] = 'firebase';
      return data;
    } catch (e) {
      print('Erreur r√©cup√©ration profil Firebase: $e');
      return null;
    }
  }

  /// ‚úÖ MOCK - Profil factice
  Future<Map<String, dynamic>?> _getTattooistProfileMock(String tattooistId) async {
    await Future.delayed(const Duration(milliseconds: 300));

    // G√©n√©rer les profils si n√©cessaire
    if (_mockProfiles.isEmpty) {
      _generateMockProfiles();
    }

    return _mockProfiles[tattooistId];
  }

  /// ‚úÖ METTRE √Ä JOUR PROFIL (mode auto)
  Future<void> updateTattooistProfile(Map<String, dynamic> profileData) async {
    if (_isDemoMode) {
      await _updateTattooistProfileMock(profileData);
    } else {
      await _updateTattooistProfileFirebase(profileData);
    }
  }

  /// ‚úÖ FIREBASE - Mise √† jour r√©elle
  Future<void> _updateTattooistProfileFirebase(Map<String, dynamic> profileData) async {
    try {
      final user = SecureAuthService.instance.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      final userId = user.uid;
      if (userId == null) throw Exception('ID utilisateur invalide');

      profileData['updatedAt'] = FieldValue.serverTimestamp();
      
      await _firestore.collection('users').doc(userId).update(profileData);
      print('‚úÖ Profil tatoueur mis √† jour Firebase: $userId');
    } catch (e) {
      throw Exception('Erreur mise √† jour profil Firebase: $e');
    }
  }

  /// ‚úÖ MOCK - Mise √† jour factice
  Future<void> _updateTattooistProfileMock(Map<String, dynamic> profileData) async {
    await Future.delayed(const Duration(milliseconds: 400));

    final user = SecureAuthService.instance.currentUser;
    if (user == null) throw Exception('[D√âMO] Utilisateur non connect√©');

    final userId = user.uid;
    if (userId == null) throw Exception('[D√âMO] ID utilisateur invalide');

    // Mettre √† jour le profil en m√©moire
    if (_mockProfiles.containsKey(userId)) {
      _mockProfiles[userId]!.addAll(profileData);
      _mockProfiles[userId]!['updatedAt'] = DateTime.now().toIso8601String();
    } else {
      // Cr√©er un nouveau profil
      _mockProfiles[userId] = {
        'id': userId,
        'role': 'tattooist',
        'isActive': true,
        'createdAt': DateTime.now().toIso8601String(),
        'updatedAt': DateTime.now().toIso8601String(),
        '_source': 'mock',
        '_demoData': true,
        ...profileData,
      };
    }

    print('‚úÖ Profil tatoueur d√©mo mis √† jour: $userId');
  }

  /// ‚úÖ OBTENIR TATOUEURS PAR PROXIMIT√â (mode auto)
  Future<List<Map<String, dynamic>>> getTattooistsByLocation({
    required double latitude,
    required double longitude,
    double radiusKm = 50.0,
    int limit = 10,
  }) async {
    if (_isDemoMode) {
      return await _getTattooistsByLocationMock(
        latitude: latitude,
        longitude: longitude,
        radiusKm: radiusKm,
        limit: limit,
      );
    } else {
      return await _getTattooistsByLocationFirebase(
        latitude: latitude,
        longitude: longitude,
        radiusKm: radiusKm,
        limit: limit,
      );
    }
  }

  /// ‚úÖ FIREBASE - Proximit√© r√©elle
  Future<List<Map<String, dynamic>>> _getTattooistsByLocationFirebase({
    required double latitude,
    required double longitude,
    double radiusKm = 50.0,
    int limit = 10,
  }) async {
    try {
      // Pour Firebase, on r√©cup√®re tous les tatoueurs actifs
      // La g√©olocalisation pr√©cise n√©cessiterait GeoFlutterFire ou similar
      final snapshot = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'tattooist')
          .where('isActive', isEqualTo: true)
          .limit(limit)
          .get();

      return snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        data['distance'] = Random().nextDouble() * radiusKm; // Distance simul√©e
        data['_source'] = 'firebase';
        return data;
      }).toList();
    } catch (e) {
      throw Exception('Erreur g√©olocalisation Firebase: $e');
    }
  }

  /// ‚úÖ MOCK - Proximit√© factice
  Future<List<Map<String, dynamic>>> _getTattooistsByLocationMock({
    required double latitude,
    required double longitude,
    double radiusKm = 50.0,
    int limit = 10,
  }) async {
    await Future.delayed(const Duration(milliseconds: 400));

    if (_mockTattooists.isEmpty) {
      _generateMockTattooists();
    }

    // Filtrer par rayon et trier par distance
    final nearbyTattooists = _mockTattooists
        .where((t) => (t['distance'] as double) <= radiusKm)
        .toList();

    nearbyTattooists.sort((a, b) => (a['distance'] as double).compareTo(b['distance'] as double));

    return nearbyTattooists.take(limit).toList();
  }

  /// ‚úÖ RECHERCHER TATOUEURS (mode auto)
  Future<List<Map<String, dynamic>>> searchTattooists({
    required String query,
    String? city,
    List<String>? styles,
    int limit = 20,
  }) async {
    if (_isDemoMode) {
      return await _searchTattooistsMock(
        query: query,
        city: city,
        styles: styles,
        limit: limit,
      );
    } else {
      return await _searchTattooistsFirebase(
        query: query,
        city: city,
        styles: styles,
        limit: limit,
      );
    }
  }

  /// ‚úÖ FIREBASE - Recherche r√©elle
  Future<List<Map<String, dynamic>>> _searchTattooistsFirebase({
    required String query,
    String? city,
    List<String>? styles,
    int limit = 20,
  }) async {
    try {
      Query baseQuery = _firestore
          .collection('users')
          .where('role', isEqualTo: 'tattooist')
          .where('isActive', isEqualTo: true);

      if (city != null) {
        baseQuery = baseQuery.where('city', isEqualTo: city);
      }

      baseQuery = baseQuery.limit(limit);

      final snapshot = await baseQuery.get();
      final results = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        data['_source'] = 'firebase';
        return data;
      }).toList();

      // Filtrer c√¥t√© client pour la recherche textuelle
      final queryLower = query.toLowerCase();
      return results.where((tattooist) {
        final name = (tattooist['name'] ?? '').toString().toLowerCase();
        final bio = (tattooist['bio'] ?? '').toString().toLowerCase();
        final specialties = (tattooist['specialties'] as List<dynamic>? ?? [])
            .map((s) => s.toString().toLowerCase()).toList();

        return name.contains(queryLower) ||
               bio.contains(queryLower) ||
               specialties.any((s) => s.contains(queryLower));
      }).toList();
    } catch (e) {
      throw Exception('Erreur recherche tatoueurs Firebase: $e');
    }
  }

  /// ‚úÖ MOCK - Recherche factice
  Future<List<Map<String, dynamic>>> _searchTattooistsMock({
    required String query,
    String? city,
    List<String>? styles,
    int limit = 20,
  }) async {
    await Future.delayed(const Duration(milliseconds: 350));

    if (_mockTattooists.isEmpty) {
      _generateMockTattooists();
    }

    var results = List<Map<String, dynamic>>.from(_mockTattooists);

    // Filtrer par recherche textuelle
    if (query.isNotEmpty) {
      final queryLower = query.toLowerCase();
      results = results.where((tattooist) {
        final name = tattooist['name'].toString().toLowerCase();
        final bio = (tattooist['bio'] ?? '').toString().toLowerCase();
        final specialties = (tattooist['specialties'] as List<String>)
            .map((s) => s.toLowerCase()).toList();

        return name.contains(queryLower) ||
               bio.contains(queryLower) ||
               specialties.any((s) => s.contains(queryLower));
      }).toList();
    }

    // Filtrer par ville
    if (city != null && city.isNotEmpty) {
      results = results.where((t) => 
          t['city'].toString().toLowerCase() == city.toLowerCase()).toList();
    }

    // Filtrer par styles
    if (styles != null && styles.isNotEmpty) {
      results = results.where((t) {
        final tattooistStyles = (t['specialties'] as List<String>)
            .map((s) => s.toLowerCase()).toList();
        return styles.any((style) => 
            tattooistStyles.contains(style.toLowerCase()));
      }).toList();
    }

    return results.take(limit).toList();
  }

  /// ‚úÖ OBTENIR TATOUEURS POPULAIRES (mode auto)
  Future<List<Map<String, dynamic>>> getPopularTattooists({int limit = 10}) async {
    if (_isDemoMode) {
      return await _getPopularTattooistsMock(limit: limit);
    } else {
      return await _getPopularTattooistsFirebase(limit: limit);
    }
  }

  /// ‚úÖ FIREBASE - Populaires r√©els
  Future<List<Map<String, dynamic>>> _getPopularTattooistsFirebase({int limit = 10}) async {
    try {
      final snapshot = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'tattooist')
          .where('isActive', isEqualTo: true)
          .orderBy('rating', descending: true)
          .limit(limit)
          .get();

      return snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        data['_source'] = 'firebase';
        return data;
      }).toList();
    } catch (e) {
      throw Exception('Erreur tatoueurs populaires Firebase: $e');
    }
  }

  /// ‚úÖ MOCK - Populaires factices
  Future<List<Map<String, dynamic>>> _getPopularTattooistsMock({int limit = 10}) async {
    await Future.delayed(const Duration(milliseconds: 300));

    if (_mockTattooists.isEmpty) {
      _generateMockTattooists();
    }

    // Trier par rating et prendre les meilleurs
    final popular = List<Map<String, dynamic>>.from(_mockTattooists);
    popular.sort((a, b) => (b['rating'] as double).compareTo(a['rating'] as double));

    return popular.take(limit).toList();
  }

  // ========================
  // ‚úÖ M√âTHODES DE FAVORIS
  // ========================

  /// ‚úÖ OBTENIR TATOUEURS FAVORIS
  Future<List<Map<String, dynamic>>> getFavoriteTattooists({
    required String userId,
    int limit = 50,
  }) async {
    try {
      if (DatabaseManager.instance.isDemoMode) {
        // Mode d√©mo - Simuler les favoris
        await Future.delayed(const Duration(milliseconds: 600));
        return _generateDemoFavoriteTattooists();
      }

      // Mode production - Firebase r√©el
      final favoritesSnapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('favoriteTattooists')
          .limit(limit)
          .get();

      if (favoritesSnapshot.docs.isEmpty) return [];

      // R√©cup√©rer les IDs des tatoueurs favoris
      final favoriteIds = favoritesSnapshot.docs.map((doc) => doc.id).toList();

      // R√©cup√©rer les d√©tails des tatoueurs
      final tattooistsData = <Map<String, dynamic>>[];
      
      for (final id in favoriteIds) {
        final tattooistDoc = await _firestore
            .collection('users')
            .doc(id)
            .get();
            
        if (tattooistDoc.exists) {
          final data = tattooistDoc.data()!;
          data['id'] = tattooistDoc.id;
          data['isFavorite'] = true;
          tattooistsData.add(data);
        }
      }

      return tattooistsData;
    } catch (e) {
      throw Exception('Erreur r√©cup√©ration tatoueurs favoris: $e');
    }
  }

  /// ‚úÖ TOGGLE FAVORI TATOUEUR
  Future<bool> toggleFavorite({
    required String tattooistId,
    required String userId,
  }) async {
    try {
      if (DatabaseManager.instance.isDemoMode) {
        // Mode d√©mo - Simulation
        await Future.delayed(const Duration(milliseconds: 300));
        print('üé≠ Toggle favori tatoueur simul√©: $tattooistId');
        return false; // Simuler la suppression du favori
      }

      // Mode production - Firebase r√©el
      final favoriteRef = _firestore
          .collection('users')
          .doc(userId)
          .collection('favoriteTattooists')
          .doc(tattooistId);

      final favoriteDoc = await favoriteRef.get();

      if (favoriteDoc.exists) {
        // Retirer des favoris
        await favoriteRef.delete();
        return false;
      } else {
        // Ajouter aux favoris
        await favoriteRef.set({
          'addedAt': FieldValue.serverTimestamp(),
          'tattooistId': tattooistId,
        });
        return true;
      }
    } catch (e) {
      throw Exception('Erreur toggle favori tatoueur: $e');
    }
  }

  /// ‚úÖ V√âRIFIER SI FAVORI
  Future<bool> isFavorite({
    required String tattooistId,
    required String userId,
  }) async {
    try {
      if (DatabaseManager.instance.isDemoMode) {
        return false; // En mode d√©mo, pas de favoris persistants
      }

      final favoriteDoc = await _firestore
          .collection('users')
          .doc(userId)
          .collection('favoriteTattooists')
          .doc(tattooistId)
          .get();

      return favoriteDoc.exists;
    } catch (e) {
      return false;
    }
  }

  /// ‚úÖ M√âTHODE DE DIAGNOSTIC
  Future<void> debugTattooistService() async {
    print('üîç Debug FirebaseTattooistService:');
    print('  - Mode d√©mo: $_isDemoMode');
    print('  - Base active: ${DatabaseManager.instance.activeDatabaseConfig.name}');

    if (_isDemoMode) {
      print('  - Tatoueurs mock g√©n√©r√©s: ${_mockTattooists.length}');
      print('  - Profils mock en cache: ${_mockProfiles.length}');
    }

    final tattooists = await getTattooists(limit: 5);
    print('  - Total tatoueurs r√©cup√©r√©s: ${tattooists.length}');

    if (tattooists.isNotEmpty) {
      final firstTattooist = tattooists.first;
      print('  - Premier tatoueur: ${firstTattooist['name']} (${firstTattooist['city']})');
      print('  - Rating: ${firstTattooist['rating']}/5');
      print('  - Sp√©cialit√©s: ${firstTattooist['specialties']}');
    }

    final currentUser = SecureAuthService.instance.currentUser;
    print('  - Utilisateur connect√©: ${currentUser != null ? 'Oui' : 'Non'}');
  }

  // ========================
  // M√âTHODES PRIV√âES - G√âN√âRATION DONN√âES D√âMO
  // ========================

  /// ‚úÖ G√âN√âRATION DONN√âES D√âMO FAVORIS
  List<Map<String, dynamic>> _generateDemoFavoriteTattooists() {
    final cities = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nancy'];
    final styles = ['R√©alisme', 'Japonais', 'G√©om√©trique', 'Minimaliste', 'Traditionnel', 'Aquarelle'];
    final names = ['Alex Ink', 'Maya Tattoo', 'Vincent Arts', 'Sarah Design', 'Lucas Black', 'Emma Style'];

    return List.generate(4, (i) {
      final city = cities[i % cities.length];
      final name = names[i % names.length];
      final selectedStyles = [styles[i % styles.length], styles[(i + 1) % styles.length]];

      return {
        'id': 'demo_fav_tattooist_$i',
        'name': '$name Favori',
        'email': '${name.toLowerCase().replaceAll(' ', '.')}@demo-fav.com',
        'role': 'tattooist',
        'isActive': true,
        'city': city,
        'address': '${Random().nextInt(200) + 1} Rue Favorite',
        'zipCode': '${Random().nextInt(90000) + 10000}',
        'phone': '+33 6 ${Random().nextInt(90) + 10} ${Random().nextInt(90) + 10} ${Random().nextInt(90) + 10} ${Random().nextInt(90) + 10}',
        'bio': '[D√âMO FAVORI] Tatoueur sp√©cialis√© en ${selectedStyles.join(', ')}. Artiste de talent ajout√© √† vos favoris.',
        'specialties': selectedStyles,
        'rating': (4.2 + (i * 0.2)).clamp(4.2, 4.9),
        'reviewCount': (i + 1) * 25 + 50,
        'experience': (i + 1) * 3 + 5,
        'hourlyRate': (90 + (i * 15)).toDouble(),
        'portfolioImages': [
          'https://picsum.photos/seed/fav_tattoo$i-1/400/600',
          'https://picsum.photos/seed/fav_tattoo$i-2/400/600',
        ],
        'profileImage': 'https://picsum.photos/seed/fav_profile$i/300/300',
        'verified': true,
        'distance': (i + 1) * 2.5,
        'isAvailable': true,
        'isFavorite': true,
        'studioName': '$name Studio Favori',
        'createdAt': DateTime.now().subtract(Duration(days: (i + 1) * 30)).toIso8601String(),
        'updatedAt': DateTime.now().subtract(Duration(days: i + 1)).toIso8601String(),
        '_source': 'demo_favorite',
      };
    });
  }

  void _generateMockTattooists() {
    final cities = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier'];
    final styles = ['Traditionnel', 'R√©alisme', 'Japonais', 'G√©om√©trique', 'Minimaliste', 'Old School', 'Biom√©canique', 'Aquarelle'];
    final names = ['Alex Ink', 'Maya Tattoo', 'Vincent Arts', 'Sarah Designs', 'Lucas Black', 'Emma Style', 'Th√©o Cr√©atif', 'L√©a Vision'];

    for (int i = 0; i < 12; i++) {
      final city = cities[Random().nextInt(cities.length)];
      final name = names[Random().nextInt(names.length)];
      final selectedStyles = <String>[];
      
      // Chaque tatoueur a 2-4 sp√©cialit√©s
      final numStyles = Random().nextInt(3) + 2;
      while (selectedStyles.length < numStyles) {
        final style = styles[Random().nextInt(styles.length)];
        if (!selectedStyles.contains(style)) {
          selectedStyles.add(style);
        }
      }

      _mockTattooists.add({
        'id': 'demo_tattooist_$i',
        'name': '$name ${i + 1}',
        'email': '${name.toLowerCase().replaceAll(' ', '.')}$i@demo.com',
        'role': 'tattooist',
        'isActive': true,
        'city': city,
        'address': '${Random().nextInt(200) + 1} Rue de l\'Art',
        'zipCode': '${Random().nextInt(90000) + 10000}',
        'phone': '+33 6 ${Random().nextInt(90) + 10} ${Random().nextInt(90) + 10} ${Random().nextInt(90) + 10} ${Random().nextInt(90) + 10}',
        'bio': '[D√âMO] Tatoueur passionn√© sp√©cialis√© en ${selectedStyles.join(', ')}. Plus de ${Random().nextInt(10) + 3} ans d\'exp√©rience.',
        'specialties': selectedStyles,
        'rating': (Random().nextDouble() * 1.5 + 3.5).clamp(3.5, 5.0), // Entre 3.5 et 5.0
        'reviewCount': Random().nextInt(150) + 20,
        'experience': Random().nextInt(15) + 3,
        'hourlyRate': (Random().nextInt(50) + 80).toDouble(), // 80-130‚Ç¨/h
        'portfolioImages': [
          'https://picsum.photos/seed/tattoo$i-1/400/600',
          'https://picsum.photos/seed/tattoo$i-2/400/600',
          'https://picsum.photos/seed/tattoo$i-3/400/600',
          'https://picsum.photos/seed/tattoo$i-4/400/600',
        ],
        'profileImage': 'https://picsum.photos/seed/profile$i/300/300',
        'verified': Random().nextBool(),
        'certifications': Random().nextBool() ? ['Hygi√®ne et Salubrit√©', 'Formation Professionnelle'] : [],
        'workingHours': {
          'monday': '09:00-18:00',
          'tuesday': '09:00-18:00',
          'wednesday': '09:00-18:00',
          'thursday': '09:00-18:00',
          'friday': '09:00-20:00',
          'saturday': '10:00-19:00',
          'sunday': 'Ferm√©',
        },
        'socialMedia': {
          'instagram': '@${name.toLowerCase().replaceAll(' ', '_')}_tattoo',
          'facebook': '$name Tattoo Studio',
        },
        'distance': Random().nextDouble() * 45 + 2, // 2-47 km
        'isAvailable': Random().nextBool(),
        'nextAvailableDate': DateTime.now().add(Duration(days: Random().nextInt(14) + 1)).toIso8601String(),
        'studioName': '$name Studio',
        'equipment': ['Machine rotative', 'Machine bobine', '√âquipement st√©rilis√©'],
        'languages': ['Fran√ßais', if (Random().nextBool()) 'Anglais', if (Random().nextBool()) 'Espagnol'],
        'createdAt': DateTime.now().subtract(Duration(days: Random().nextInt(365) + 30)).toIso8601String(),
        'updatedAt': DateTime.now().subtract(Duration(days: Random().nextInt(7))).toIso8601String(),
        '_source': 'mock',
        '_demoData': true,
      });
    }

    print('‚úÖ ${_mockTattooists.length} tatoueurs d√©mo g√©n√©r√©s');
  }

  void _generateMockProfiles() {
    for (final tattooist in _mockTattooists) {
      _mockProfiles[tattooist['id']] = Map<String, dynamic>.from(tattooist);
    }

    // Ajouter le profil de l'utilisateur connect√© s'il est tatoueur
    final currentUser = SecureAuthService.instance.currentUser;
    if (currentUser != null) {
      final userId = currentUser.uid;
      if (userId != null && !_mockProfiles.containsKey(userId)) {
        _mockProfiles[userId] = {
          'id': userId,
          'name': '[D√âMO] Votre Profil',
          'email': currentUser.email ?? 'demo@kipik.app',
          'role': 'tattooist',
          'isActive': true,
          'city': 'Paris',
          'bio': '[D√âMO] Votre profil de tatoueur professionnel. Personnalisez vos informations.',
          'specialties': ['Traditionnel', 'R√©alisme'],
          'rating': 4.2,
          'reviewCount': 15,
          'experience': 5,
          'hourlyRate': 100.0,
          'portfolioImages': [
            'https://picsum.photos/seed/demo-portfolio-1/400/600',
            'https://picsum.photos/seed/demo-portfolio-2/400/600',
          ],
          'profileImage': 'https://picsum.photos/seed/demo-profile/300/300',
          'verified': false,
          'createdAt': DateTime.now().subtract(const Duration(days: 30)).toIso8601String(),
          'updatedAt': DateTime.now().toIso8601String(),
          '_source': 'mock',
          '_demoData': true,
        };
      }
    }

    print('‚úÖ ${_mockProfiles.length} profils de tatoueurs g√©n√©r√©s');
  }
}