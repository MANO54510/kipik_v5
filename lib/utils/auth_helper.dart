// lib/utils/auth_helper.dart

import 'package:kipik_v5/services/auth/secure_auth_service.dart';
import 'package:kipik_v5/services/auth/captcha_manager.dart';
import 'package:kipik_v5/models/user_role.dart'; // ‚úÖ Import du vrai enum
import 'package:kipik_v5/locator.dart';

/// ‚úÖ INT√âGRATION reCAPTCHA: V√©rifie les cr√©dentials de mani√®re s√©curis√©e
Future<UserRole?> checkUserCredentialsSecure({
  required String email,
  required String password,
  CaptchaResult? captchaResult,
}) async {
  try {
    final captchaManager = locator<CaptchaManager>();
    
    // 1. V√©rifier si CAPTCHA est requis
    if (captchaManager.shouldShowCaptcha('login')) {
      if (captchaResult == null || !captchaResult.isValid) {
        throw Exception('CAPTCHA requis pour cette connexion');
      }
      
      // V√©rifier le score pour une connexion
      final requiredScore = captchaManager.getRequiredScoreForAction('login');
      if (captchaResult.score < requiredScore) {
        captchaManager.recordFailedAttempt('login');
        throw Exception('Score de s√©curit√© insuffisant');
      }
    }

    // 2. Connexion avec SecureAuthService
    final user = await SecureAuthService.instance.signInWithEmailAndPassword(
      email, 
      password, 
      captchaResult: captchaResult,
    );
    
    if (user != null) {
      // 3. Connexion r√©ussie - Reset des tentatives
      captchaManager.recordSuccessfulAttempt('login');
      
      // R√©cup√©rer le r√¥le depuis les donn√©es utilisateur
      final roleString = user['role']?.toString();
      return UserRoleExtension.fromString(roleString ?? 'client');
    }
    
    // 4. Connexion √©chou√©e
    captchaManager.recordFailedAttempt('login');
    return null;
    
  } catch (e) {
    print('Erreur lors de la v√©rification des cr√©dentials: $e');
    // Enregistrer l'√©chec pour la s√©curit√©
    locator<CaptchaManager>().recordFailedAttempt('login');
    rethrow;
  }
}

/// ‚úÖ R√âTROCOMPATIBILIT√â: Version originale sans CAPTCHA (pour la transition)
Future<UserRole?> checkUserCredentials(String email, String password) async {
  try {
    final user = await SecureAuthService.instance.signInWithEmailAndPassword(email, password);
    
    if (user != null) {
      final roleString = user['role']?.toString();
      return UserRoleExtension.fromString(roleString ?? 'client');
    }
    
    return null;
  } catch (e) {
    print('Erreur lors de la v√©rification des cr√©dentials: $e');
    return null;
  }
}

/// ‚úÖ INT√âGRATION reCAPTCHA: Cr√©ation de compte s√©curis√©e
Future<dynamic> createUserWithEmailAndPasswordSecure({
  required String email,
  required String password,
  required CaptchaResult captchaResult,
  String? displayName,
}) async {
  try {
    final captchaManager = CaptchaManager.instance;
    final requiredScore = captchaManager.getRequiredScoreForAction('signup');
    
    // 1. CAPTCHA obligatoire pour l'inscription
    if (!captchaResult.isValid || captchaResult.score < requiredScore) {
      throw Exception('V√©rification de s√©curit√© requise pour l\'inscription');
    }

    // 2. Cr√©ation du compte avec SecureAuthService
    final user = await SecureAuthService.instance.createUserWithEmailAndPassword(
      email: email,
      password: password,
      displayName: displayName,
      captchaResult: captchaResult,
    );

    if (user != null) {
      print('‚úÖ Compte cr√©√© avec s√©curit√© reCAPTCHA - Score: ${(captchaResult.score * 100).round()}%');
    }

    return user;
  } catch (e) {
    print('‚ùå Erreur cr√©ation compte s√©curis√©: $e');
    rethrow;
  }
}

/// ‚úÖ INT√âGRATION reCAPTCHA: Cr√©ation du premier admin avec s√©curit√© renforc√©e
Future<bool> createFirstAdminAccountSecure({
  required CaptchaResult captchaResult,
  String? customEmail,
  String? customPassword,
  String? customDisplayName,
}) async {
  try {
    // V√©rification reCAPTCHA renforc√©e pour admin
    if (!captchaResult.isValid || captchaResult.score < 0.8) {
      throw Exception('Score de s√©curit√© √©lev√© requis pour cr√©er un compte admin');
    }

    final email = customEmail ?? 'mano@kipik.ink';
    final password = customPassword ?? 'VotreMotDePasseSecurise123!';
    final displayName = customDisplayName ?? 'Mano Admin';

    final success = await SecureAuthService.instance.createFirstSuperAdmin(
      email: email,
      password: password,
      displayName: displayName,
      captchaResult: captchaResult,
    );
    
    if (success) {
      print('‚úÖ Super admin cr√©√© avec s√©curit√© renforc√©e !');
      print('üìß Email: $email');
      print('üîê Score s√©curit√©: ${(captchaResult.score * 100).round()}%');
      return true;
    } else {
      print('‚ùå Erreur lors de la cr√©ation du super admin');
      return false;
    }
  } catch (e) {
    print('‚ùå Erreur: $e');
    return false;
  }
}

/// Version originale sans CAPTCHA (pour compatibilit√©)
Future<bool> createFirstAdminAccount({
  String? customEmail,
  String? customPassword,
  String? customDisplayName,
}) async {
  try {
    // Cr√©er un CaptchaResult factice avec un score √©lev√© pour le dev
    final fakeCaptcha = CaptchaResult(
      isValid: true,
      score: 0.9,
      action: 'create_admin',
      requiredScore: 0.8,
      timestamp: DateTime.now(),
      token: 'dev_token',
    );

    return await createFirstAdminAccountSecure(
      captchaResult: fakeCaptcha,
      customEmail: customEmail,
      customPassword: customPassword,
      customDisplayName: customDisplayName,
    );
  } catch (e) {
    print('‚ùå Erreur: $e');
    return false;
  }
}

/// ‚úÖ NOUVEAUX HELPERS pour reCAPTCHA
class CaptchaAuthHelper {
  static CaptchaManager get _captchaManager => locator<CaptchaManager>();

  /// V√©rifier si CAPTCHA est requis pour une action
  static bool shouldShowCaptcha(String context) {
    return _captchaManager.shouldShowCaptcha(context);
  }

  /// Valider reCAPTCHA pour n'importe quelle action
  static Future<CaptchaResult> validateCaptcha(String action) {
    return _captchaManager.validateInvisibleCaptcha(action);
  }

  /// Obtenir le d√©lai de blocage restant
  static Duration? getLoginLockoutTime() {
    return _captchaManager.getRemainingLockout();
  }

  /// Obtenir les statistiques de s√©curit√© (pour admin)
  static SecurityStats getSecurityStats() {
    return _captchaManager.getSecurityStats();
  }

  /// R√©initialiser toutes les tentatives (admin uniquement)
  static void resetAllAttempts() {
    _captchaManager.resetAllAttempts();
  }

  /// Enregistrer une tentative √©chou√©e manuellement
  static void recordFailedAttempt(String context) {
    _captchaManager.recordFailedAttempt(context);
  }

  /// Enregistrer une connexion r√©ussie manuellement
  static void recordSuccessfulAttempt(String context) {
    _captchaManager.recordSuccessfulAttempt(context);
  }

  /// Obtenir le score minimum requis pour une action
  static double getRequiredScore(String action) {
    return _captchaManager.getRequiredScoreForAction(action);
  }

  /// Obtenir le niveau de s√©curit√© pour une action
  static SecurityLevel getSecurityLevel(String action) {
    return _captchaManager.getSecurityLevelForAction(action);
  }
}

/// Fonction pour cr√©er des comptes de test (avec s√©curit√©)
Future<void> createTestAccountsSecure({required CaptchaResult captchaResult}) async {
  // V√©rifier CAPTCHA pour cr√©ation de comptes de test
  if (!captchaResult.isValid || captchaResult.score < 0.7) {
    throw Exception('Score de s√©curit√© requis pour cr√©er des comptes de test');
  }

  final authService = SecureAuthService.instance;
  
  try {
    // Cr√©er un client de test
    await authService.createUserWithEmailAndPassword(
      email: 'client@kipik.ink',
      password: 'Client123!',
      displayName: 'Client Test',
      userRole: 'client',
      captchaResult: captchaResult,
    );
    
    // Cr√©er un tatoueur de test
    await authService.createUserWithEmailAndPassword(
      email: 'tatoueur@kipik.ink',
      password: 'Tatoueur123!',
      displayName: 'Tatoueur Test',
      userRole: 'tatoueur',
      captchaResult: captchaResult,
    );
    
    // Cr√©er un organisateur de test
    await authService.createUserWithEmailAndPassword(
      email: 'organisateur@kipik.ink',
      password: 'Orga123!',
      displayName: 'Organisateur Test',
      userRole: 'organisateur',
      captchaResult: captchaResult,
    );
    
    print('‚úÖ Comptes de test cr√©√©s avec s√©curit√© reCAPTCHA !');
  } catch (e) {
    print('‚ùå Erreur lors de la cr√©ation des comptes de test: $e');
  }
}

/// Version originale sans CAPTCHA (pour compatibilit√©)
Future<void> createTestAccounts() async {
  try {
    // Cr√©er un CaptchaResult factice pour le dev
    final fakeCaptcha = CaptchaResult(
      isValid: true,
      score: 0.8,
      action: 'create_test_accounts',
      requiredScore: 0.7,
      timestamp: DateTime.now(),
      token: 'dev_token',
    );

    await createTestAccountsSecure(captchaResult: fakeCaptcha);
  } catch (e) {
    print('‚ùå Erreur lors de la cr√©ation des comptes de test: $e');
  }
}

/// Fonction utilitaire pour convertir un UserRole en string
String userRoleToString(UserRole role) {
  return role.value;
}

/// Fonction utilitaire pour convertir un string en UserRole
UserRole? stringToUserRole(String? roleString) {
  if (roleString == null) return null;
  return UserRoleExtension.fromString(roleString);
}

/// V√©rifie si l'utilisateur actuel est admin
Future<bool> isCurrentUserAdmin() async {
  try {
    final currentRole = SecureAuthService.instance.currentUserRole;
    return currentRole == UserRole.admin;
  } catch (e) {
    print('Erreur v√©rification admin: $e');
    return false;
  }
}

/// V√©rifie si l'utilisateur actuel est super admin
Future<bool> isCurrentUserSuperAdmin() async {
  try {
    return SecureAuthService.instance.isSuperAdmin;
  } catch (e) {
    print('Erreur v√©rification super admin: $e');
    return false;
  }
}

/// Obtenir l'utilisateur actuel
dynamic getCurrentUser() {
  return SecureAuthService.instance.currentUser;
}

/// Obtenir le r√¥le de l'utilisateur actuel
UserRole? getCurrentUserRole() {
  return SecureAuthService.instance.currentUserRole;
}

/// Obtenir l'ID de l'utilisateur actuel
String? getCurrentUserId() {
  return SecureAuthService.instance.currentUserId;
}

/// V√©rifier si l'utilisateur est authentifi√©
bool isAuthenticated() {
  return SecureAuthService.instance.isAuthenticated;
}

/// D√©connexion rapide
Future<void> signOut() async {
  try {
    await SecureAuthService.instance.signOut();
    print('‚úÖ D√©connexion r√©ussie');
  } catch (e) {
    print('‚ùå Erreur d√©connexion: $e');
  }
}

/// ‚úÖ NOUVEAUX HELPERS POUR ACTIONS SP√âCIFIQUES

/// Valider une action de paiement
Future<bool> validatePaymentAction() async {
  try {
    final result = await CaptchaManager.instance.validateInvisibleCaptcha('payment');
    return result.isValid && result.score >= 0.8;
  } catch (e) {
    print('‚ùå Erreur validation paiement: $e');
    return false;
  }
}

/// Valider une r√©servation
Future<bool> validateBookingAction() async {
  try {
    final result = await CaptchaManager.instance.validateInvisibleCaptcha('booking');
    return result.isValid && result.score >= 0.6;
  } catch (e) {
    print('‚ùå Erreur validation r√©servation: $e');
    return false;
  }
}

/// Valider une action critique (admin)
Future<bool> validateCriticalAction(String action) async {
  try {
    return await CaptchaManager.instance.validateCriticalAction(action);
  } catch (e) {
    print('‚ùå Erreur validation action critique: $e');
    return false;
  }
}

/// Helper pour promouvoir un utilisateur en admin (super admin uniquement)
Future<bool> promoteUserToAdmin({
  required String userId,
  required String adminLevel,
  CaptchaResult? captchaResult,
}) async {
  try {
    if (!SecureAuthService.instance.isSuperAdmin) {
      throw Exception('Seul le super admin peut promouvoir des utilisateurs');
    }

    return await SecureAuthService.instance.promoteUserToAdmin(
      userId: userId,
      adminLevel: adminLevel,
      captchaResult: captchaResult,
    );
  } catch (e) {
    print('‚ùå Erreur promotion admin: $e');
    return false;
  }
}

/// Helper pour r√©voquer l'acc√®s admin
Future<bool> revokeAdminAccess({
  required String userId,
  CaptchaResult? captchaResult,
}) async {
  try {
    if (!SecureAuthService.instance.isSuperAdmin) {
      throw Exception('Seul le super admin peut r√©voquer des acc√®s admin');
    }

    return await SecureAuthService.instance.revokeAdminAccess(
      userId: userId,
      captchaResult: captchaResult,
    );
  } catch (e) {
    print('‚ùå Erreur r√©vocation admin: $e');
    return false;
  }
}

/// ‚úÖ HELPER POUR DIAGNOSTIC ET DEBUG
class AuthDiagnostics {
  static void printCurrentState() {
    print('üîç √âTAT AUTHENTIFICATION:');
    print('  - Authentifi√©: ${isAuthenticated()}');
    print('  - User ID: ${getCurrentUserId() ?? 'Non connect√©'}');
    print('  - R√¥le: ${getCurrentUserRole()?.name ?? 'Aucun'}');
    print('  - Super Admin: ${SecureAuthService.instance.isSuperAdmin}');
    
    final user = getCurrentUser();
    if (user != null) {
      print('  - Email: ${user['email'] ?? 'N/A'}');
      print('  - Nom: ${user['name'] ?? user['displayName'] ?? 'N/A'}');
    }
  }

  static void printSecurityState() {
    print('üîê √âTAT S√âCURIT√â:');
    final stats = CaptchaAuthHelper.getSecurityStats();
    print('  - Tentatives √©chou√©es: ${stats.totalFailedAttempts}');
    print('  - Appareils bloqu√©s: ${stats.lockedDevices}');
    print('  - Appareils uniques: ${stats.uniqueDevices}');
    
    final lockout = CaptchaAuthHelper.getLoginLockoutTime();
    if (lockout != null) {
      print('  - Temps de blocage restant: ${lockout.inMinutes}min ${lockout.inSeconds % 60}s');
    }
  }

  static Future<void> testCaptchaScores() async {
    print('üß™ TEST SCORES CAPTCHA:');
    
    final actions = ['login', 'signup', 'payment', 'booking'];
    for (final action in actions) {
      final requiredScore = CaptchaAuthHelper.getRequiredScore(action);
      final level = CaptchaAuthHelper.getSecurityLevel(action);
      print('  - $action: ${requiredScore} (${level.name})');
    }
  }
}